{
	"posts": [
		{
            "id"         : "/vue-application-unit-test-strategy-and-practice-04-testing-vuex",
            "title"      : "Vue 应用单元测试的策略与实践 04 - Vuex 单元测试",
            "category"   : "前端",
            "tags"       : "Tutorial, UnitTest, ES6, Vue, Vuex, Jest, CQRS, TDD",
            "url"        : "/2018-11-02-vue-application-unit-test-strategy-and-practice-04-testing-vuex/",
            "path"       : "_posts/前端/2018-11-02-vue-application-unit-test-strategy-and-practice-04-testing-vuex.md",
            "next"       : "",
            "previous"   : "/2018-10-30-vue-application-unit-test-strategy-and-practice-03-testing-vue-components/",
            "date"       : "2018-11-02 00:00:00 +0000",
            "shortdate"  : "November 02, 2018",
            "content"    : "&lt;h2 id=&quot;本文的目标&quot;&gt;本文的目标&lt;/h2&gt;&lt;p&gt;2.2 在Vue应用的单元测试中，对 Vuex store 该如何测试？如何测试与 Vue 组件之间的交互？&lt;/p&gt;&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Given一个有基本的UT知识和Vue组件单元测试经验的开发者🚶// When当他🚶阅读和练习本文的Vuex单元测试的部分// Then他能够对Vuex概念的理解更加深入，且知道 &lt;span class=&quot;sb&quot;&gt;`Redux-like`&lt;/span&gt; 架构的好处他能够合理测试vuex store的mutation、getter中的业务逻辑和异步action他能够测试组件如何正确读取store中的state以及dispatch action&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;如何理解-vuex-模式&quot;&gt;如何理解 Vuex 模式？&lt;/h2&gt;&lt;h3 id=&quot;vuex-的前车之鉴&quot;&gt;Vuex 的前车之鉴&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181102201926.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;古人说「读史让人明智」，学习历史是为了更好得前行，为了能够认识现在，看清未来。让我们来看看 Vuex 的历史，Vuex 借鉴于 Redux，而 Redux 的实现构想则最初出身于 &lt;a href=&quot;http://facebook.github.io/flux/docs/overview.html&quot;&gt;Flux&lt;/a&gt; ，这是一个由 Facebook 为其应用所设计的应用程序架构。Flux 模式在 JavaScript 应用里像是找到了新家一样，但其实只是借鉴了&lt;strong&gt;领域驱动设计&lt;/strong&gt; (DDD) 和&lt;strong&gt;命令-查询职责分离&lt;/strong&gt; (CQRS)。&lt;/p&gt;&lt;h3 id=&quot;cqrs-与-flux-架构&quot;&gt;CQRS 与 Flux 架构&lt;/h3&gt;&lt;p&gt;描述 Flux 最普遍的一种的方式就是将其与 &lt;strong&gt;Model-View-Controller&lt;/strong&gt; (MVC) 架构进行对比。&lt;/p&gt;&lt;p&gt;在 MVC 当中，一个 Model 可以被多个 Views 读取，并且可以被多个 Controllers 进行更新。在大型应用当中，单个 Model 会导致多个 Views 去通知 Controllers，并可能触发更多的 Model 更新，这样结果就会变得非常复杂。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://jaysoo.ca/images/mvc-diagram.png&quot; alt=&quot;mvc-diagram&quot; /&gt;&lt;/p&gt;&lt;p&gt;而 Flux 以及我们要学习的 Vuex 则是试图通过强制单向数据流来解决这个复杂度。在这种架构当中，Views 查询 Stores（而不是 Models），并且用户交互将会触发 Actions，Actions 则会被提交到一个集中的 Dispatcher 当中。当 Actions 被派发之后，Stores 将会随之更新自己并且通知 Views 进行修改。这些 Store 当中的修改会进一步促使 Views 查询新的数据。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://jaysoo.ca/images/flux-diagram.png&quot; alt=&quot;flux-diagram&quot; /&gt;&lt;/p&gt;&lt;p&gt;MVC 和 Flux 最大的不同就是查询和更新的分离。在 MVC 中，Model 同时可以被 Controller 更新&lt;em&gt;并且&lt;/em&gt;被 View 所查询。在 Flux 里，View 从 Store 获取的数据是只读的。而 Stores 只能通过 Actions 被更新，这就会影响 Store 本身&lt;em&gt;而不是&lt;/em&gt;那些只读的数据。&lt;/p&gt;&lt;p&gt;以上所描述的模式非常接近于由 Greg Young 第一次所提出的 CQRS：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;如果一个方法修改了这个对象的状态，那就是一个 &lt;em&gt;command&lt;/em&gt;（命令），并且一定不能返回值。&lt;/li&gt;  &lt;li&gt;如果一个方法返回了一些值，那就是一个 &lt;em&gt;query&lt;/em&gt;（查询），并且一定不能修改状态。&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&quot;vuex-背后的基本思想&quot;&gt;Vuex 背后的基本思想&lt;/h3&gt;&lt;p&gt;所以说， Vuex 就是把组件的共享状态 “state” 抽取出来，以&lt;strong&gt;一个&lt;/strong&gt;全局 “store” 的单例模式统一管理。在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为。&lt;/p&gt;&lt;p&gt;另外，隔离状态管理能够获得很多好处，当然也需要强制遵守一定的规则：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。这也就是 CQRS 中 &lt;em&gt;query&lt;/em&gt;（查询）的一种实现。&lt;/li&gt;  &lt;li&gt;你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地&lt;strong&gt;提交 (commit) mutation&lt;/strong&gt;，这样使得我们可以方便地跟踪每一个状态的变化。这也就是 CQRS 中 &lt;em&gt;command&lt;/em&gt;（命令）的一种实现。&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;如何对-vuex-进行单元测试&quot;&gt;如何对 Vuex 进行单元测试&lt;/h2&gt;&lt;p&gt;得益于 Vuex 能够将 Vue 应用的共享状态进行隔离，我们的代码也因此变得更加结构化且易于维护，Vuex 中的 mutation、action 和 getter 都被放在了合理的位置，承担不同的职责 ，这也使得对它们进行单元测试变得容易很多。&lt;/p&gt;&lt;h3 id=&quot;mutations-测试&quot;&gt;mutations 测试&lt;/h3&gt;&lt;p&gt;Mutation 很容易被测试，因为它们仅仅是一些完全依赖参数的函数。最为简单的 mutation 测试，仅一一对应保存数据切片。此种 mutation 可以不需要测试覆盖，因为基本由架构简单和逻辑简单保证，不需要靠读测试用例来理解。而一个较为复杂、具备测试价值的 mutation 在保存数据的同时，还可能进行了合并、去重等操作。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// count.js&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// count.test.js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./store&#39;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 解构 `mutations`&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutations&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;mutations&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;INCREMENT&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 模拟状态&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 应用 mutation&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 断言结果&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;actions-测试&quot;&gt;actions 测试&lt;/h3&gt;&lt;p&gt;Action 应对起来略微棘手，因为它们可能需要调用外部的 API。当测试 action 的时候，我们需要增加一个 mocking 服务层——例如，我们可以把 API 调用抽象成服务，然后在测试文件中用 mock 服务响应所期望的 API 调用。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// product.js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;../api/shop&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;getAllProducts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;REQUEST_PRODUCTS&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;shop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getProducts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;RECEIVE_PRODUCTS&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// product.test.js&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;../api/shop&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;getProducts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* mocked response */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;actions&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;getAllProducts&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllProducts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;REQUEST_PRODUCTS&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;RECEIVE_PRODUCTS&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* mocked response */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;getters-测试&quot;&gt;getters 测试&lt;/h3&gt;&lt;p&gt;getter 的测试与 mutation 一样直截了当。getters 也是比较重逻辑的地方，并且它也是一个纯函数，与 mutations 测试享受同样待遇：纯净的输入输出，简易的测试准备。下面来看一个稍微简单点的 getters 测试用例：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// product.js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;filteredProducts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterCategory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterCategory&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// product.test.js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;chai&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./getters&#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;getters&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;filteredProducts&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 模拟状态&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Apple&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;fruit&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Orange&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;fruit&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Carrot&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;vegetable&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 模拟 getter&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;fruit&#39;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 获取 getter 的结果&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filteredProducts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterCategory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 断言结果&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Apple&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;fruit&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Orange&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;fruit&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;vue-组件和-vuex-store-的交互&quot;&gt;Vue 组件和 Vuex store 的交互&lt;/h2&gt;&lt;p&gt;前面我们讲完了 Vuex 单元测试所需要的基本知识，而 Vue 组件需要从 Vuex store 读取状态或者是发送 action 改变 store 状态的时候，又该如何测试他们之间的交互呢？接下来就来聊聊如何用 Vue Test Utils 测试 Vue 组件中的 Vuex。&lt;/p&gt;&lt;p&gt;站在单元测试的角度，其实我们在测试 Vue 组件（单元）的时候不需要关心 Vuex store 长什么样子，我们只需要知道 Vuex store 当中的这些 action 将会在适当的时机触发，以及它们触发时的预期行为是什么。&lt;/p&gt;&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;amount: $&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;actionClick()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Buy&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapActions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;vuex&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapActions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;      &lt;span class=&quot;s1&quot;&gt;&#39;actionClick&#39;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;在单元测试的时候，shallowMount（浅渲染）方法接受一个挂载 options，可以用来给 Vue 组件传递一个伪造的 store。然后我们就可以使用 Jest 模拟一个 action 的行为再传给 store，而 actionClick 这个伪造函数能够让我们去断言该 action 是否被调用过。所以我们在测试 action 的时候就可以只关心 action 的触发，而至于触发之后对 store 做了什么事情我们就不需要再关心了，因为 Vuex 的单元测试会涵盖相关的代码逻辑。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createLocalVue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;@vue/test-utils&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vuex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;vuex&#39;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localVue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createLocalVue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localVue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vuex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vuex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;actionClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;当按钮被点击时候调用“actionClick”的 action&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localVue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;button&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actionClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;需要注意的是，在这里我们是把 Vuex store 传递给一个 localVue，而不是传递给基础的 Vue 构造函数。这是因为我们不想影响到全局的 Vue 构造函数，如果直接使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.use(Vuex)&lt;/code&gt; 会让Vue 的原型上会增加 $store 属性从而影响到其他的单元测试。而 localVue 则是一个独立作用域的 Vue 构造函数，我们可以对其进行任意的改动。&lt;/p&gt;&lt;p&gt;当然咯，除了 mock 掉 actions，Vuex store 里面的任何内容我们都可以将其模拟出来，比如 state 或者 getters：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createLocalVue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;@vue/test-utils&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vuex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;vuex&#39;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localVue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createLocalVue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localVue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vuex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vuex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;998&#39;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;clicks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;inputValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;input&#39;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;在app中渲染价格和“state.inputValue”&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localVue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;p&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;input&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.price&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringContaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;$998&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;总结一下&quot;&gt;总结一下&lt;/h2&gt;&lt;p&gt;总之呢，不要测试 Vue 组件和 Vuex store 交互的时候引入一个真实的 Store，那样就不再是单元测试了，还记得我们在第二篇&lt;a href=&quot;https://blog.jimmylv.info/2018-10-29-vue-application-unit-test-strategy-and-practice-02-how-jest-work/&quot;&gt;单元测试基础&lt;/a&gt;中所提到的社交型（Social Tests）还是独立型（Solitary Tests）测试单元吗？Vuex 等 &lt;code class=&quot;highlighter-rouge&quot;&gt;Redux-like&lt;/code&gt; 架构在前端应用中的 “状态管理模式” ，已经将 View 视图层和 State 数据层尽可能合理得拆分与隔离，那么单元测试就只需要分别测试 Vue 和 Vuex，从而就能保证 Vue 组件和数据流按照预期那样工作。&lt;/p&gt;&lt;h2 id=&quot;未完待续&quot;&gt;未完待续……&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;## 单元测试基础&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 单元测试与自动化的意义&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 为什么选择 Jest&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### Jest 的基本用法&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 该如何测试异步代码？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;## Vue 单元测试&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### Vue 组件的渲染方式&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### Wrapper &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; 方法与选择器&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### UI 组件交互行为的测试&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;## Vuex 单元测试&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### CQRS 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Redux-like&lt;/code&gt; 架构&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 如何对 Vuex 进行单元测试&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### Vue组件和Vuex store的交互&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;## Vue应用测试策略&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试的特点及其位置&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试的关注点&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 应用测试的测试策略&lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;h2 id=&quot;本文的目标&quot;&gt;本文的目标&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/vue-application-unit-test-strategy-and-practice-03-testing-vue-components",
            "title"      : "Vue 应用单元测试的策略与实践 03 - Vue 组件单元测试",
            "category"   : "前端",
            "tags"       : "Tutorial, UnitTest, ES6, Vue, Jest, Agile, TDD",
            "url"        : "/2018-10-30-vue-application-unit-test-strategy-and-practice-03-testing-vue-components/",
            "path"       : "_posts/前端/2018-10-30-vue-application-unit-test-strategy-and-practice-03-testing-vue-components.md",
            "next"       : "/2018-11-02-vue-application-unit-test-strategy-and-practice-04-testing-vuex/",
            "previous"   : "/2018-10-29-vue-application-unit-test-strategy-and-practice-02-how-jest-work/",
            "date"       : "2018-10-30 00:00:00 +0000",
            "shortdate"  : "October 30, 2018",
            "content"    : "&lt;h2 id=&quot;本文的目标&quot;&gt;本文的目标&lt;/h2&gt;&lt;p&gt;2.1 在Vue应用的单元测试中，对不同UI组件的单元测试有何不同？颗粒度该细到什么样的程度？&lt;/p&gt;&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Given一个有基本的UT知识但没写过Vue测试的新人🚶// When当他🚶阅读和练习本文的Vue单元测试的部分// Then当然，他能够学会Vue组件在测试当中的几种渲染方式他能够学会UI组件的分类，特别是交互行为的测试方式&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;组件化与-ui-测试&quot;&gt;组件化与 UI 测试&lt;/h2&gt;&lt;p&gt;在组件化出现之前，我们都压根不谈 UI 的&lt;strong&gt;单元&lt;/strong&gt;测试，哪怕是对于 UI 页面层级的测试来说都是一件非常困难的事情。其实&lt;strong&gt;组件化并不全是为了复用，很多情况下也恰恰是为了分治&lt;/strong&gt;，从而我们可以分组件对 UI 页面进行开发，然后分别对其进行单元测试。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181030220153.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;前端组件化已经让 UI 测试变得容易很多，每个组件都可以被简化为这样一个表达式，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;UI = f(data)&lt;/code&gt;，这个纯函数返回的只是一个描述 UI 组件应该是什么样子的虚拟 DOM，本质上就是一个树形的数据结构。给这个纯函数输入一些应用程序的状态，就会得到相应的 UI 描述的输出，这个过程不会去直接操作实际的 UI 元素，也不会产生所谓的副作用。&lt;/p&gt;&lt;h3 id=&quot;vue-组件树的测试&quot;&gt;Vue 组件树的测试&lt;/h3&gt;&lt;p&gt;按理来说按照纯函数这样的思路，Vue 组件的测试应该很简单的说。但与此同时，对 UI 渲染的组件树进行测试依然存在一个问题，从下图中可以看出，越处于上层的组件，其复杂度必然会随之提高。对于最底层的子组件来说，我们可以很容易得将其进行渲染并测试其逻辑的正确与否，但对于较上层的父组件来说，通常来说就需要对其所包含的所有子组件都进行预先渲染，甚至于最上面的组件需要渲染出整个 UI 页面的真实 DOM 节点才能对其进行测试，这显然是不可取的。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181030211115.png&quot; alt=&quot;Components-Tree&quot; /&gt;&lt;/p&gt;&lt;p&gt;在单元测试中，通常我们希望将重点放在作为独立单元进行测试的组件上，并避免间接断言其子组件的行为。此外，对于包含许多子组件的组件，整个 render 树会变得非常之大，而反复 render 所有的子组件可能会减慢单元测试的速度。&lt;/p&gt;&lt;p&gt;而根据 Mike Cohn 的测试金字塔中所提到的两件事：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;编写不同粒度的测试&lt;/li&gt;  &lt;li&gt;层次越高，你写的测试应该越少&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;p&gt;为了维持金字塔形状，一个健康、快速、可维护的测试组合应该是这样的：写许多小而快的单元测试。适当写一些更粗粒度的测试，写很少高层次的端到端测试。注意不要让你的测试变成冰淇淋那样子，这对维护来说将是一个噩梦，并且跑一遍也需要太多时间。（via &lt;a href=&quot;https://insights.thoughtworks.cn/practical-test-pyramid/&quot;&gt;测试金字塔实战 – ThoughtWorks洞见&lt;/a&gt;）&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181030211424.png&quot; alt=&quot;测试金字塔&quot; /&gt;&lt;/p&gt;&lt;p&gt;对于 Vue 组件树来说，浅渲染（&lt;a href=&quot;https://vue-test-utils.vuejs.org/guides/#shallow-rendering&quot;&gt;Shallow Rendering&lt;/a&gt;）解决了这个问题，也就是说在我们针对某个上层组件进行测试时，可以不用渲染它的子组件，所以就不用再担心子组件的表现和行为，这样就可以只对特定组件的逻辑及其渲染输出进行测试了。Vue 官方提供了 &lt;code class=&quot;highlighter-rouge&quot;&gt;@vue/test-utils&lt;/code&gt; 可以让我们使用浅渲染这个特性，用于测试虚拟 DOM 对象，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.component&lt;/code&gt; 的实例。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;@vue/test-utils&#39;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the mounted Vue instance&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;vue-组件的渲染方式&quot;&gt;Vue 组件的渲染方式&lt;/h2&gt;&lt;h3 id=&quot;浅渲染-shallowmountcomponent-options--wrapper&quot;&gt;浅渲染 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shallowMount(component[, options]) =&amp;gt; Wrapper&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;浅渲染在将一个组件作为一个单元进行测试的时候非常有用，可以确保你的测试不会去间接断言子组件的行为。&lt;code class=&quot;highlighter-rouge&quot;&gt;shallowMount&lt;/code&gt; 方法就是 Shallow Rendering 的封装，&lt;code class=&quot;highlighter-rouge&quot;&gt;shallowMount&lt;/code&gt; 跟 &lt;code class=&quot;highlighter-rouge&quot;&gt;mount&lt;/code&gt; 类似返回 &lt;code class=&quot;highlighter-rouge&quot;&gt;mounted&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;rendered&lt;/code&gt; Vue 组件的 Wrapper，但只会渲染出组件的第一层 DOM 结构，其嵌套的子组件不会被渲染出来，从而使得渲染的效率更高，单元测试的速度也会更快。&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;@vue/test-utils&#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Vue Component shallowMount&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;should have three &amp;lt;todo /&amp;gt; components&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Todo&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;全量渲染-mountcomponent-options--wrapper&quot;&gt;全量渲染 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mount(component[, options]) =&amp;gt; Wrapper&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mount&lt;/code&gt; 方法则会将 Vue 组件和所有子组件渲染为真实的 DOM 节点，特别是在你依赖真实的 DOM 结构必须存在的情况下，比如说按钮的点击事件。完全的 DOM 渲染需要在全局范围内提供完整的 DOM API， 这也就意味着 Vue Test Utils 依赖于浏览器环境。&lt;/p&gt;&lt;p&gt;从技术上讲，你可以在真实的浏览器中运行，但由于在不同平台上启动真实浏览器的复杂性，更建议使用 JSDOM 在虚拟浏览器环境中运行 Node 中的测试。推荐使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;mount&lt;/code&gt; 的方法是依赖于一个名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;jsdom&lt;/code&gt;的库，它本质上是一个完全在 JavaScript 中实现的 headless 浏览器。&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;@vue/test-utils&#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Vue Component Mount&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;should delete Todo when click button&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todoLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;li&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;button.delete&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;li&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todoLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;静态渲染-rendercomponent-options--cheeriowrapper&quot;&gt;静态渲染 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;render(component[, options]) =&amp;gt; CheerioWrapper&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; 方法则会将 Vue 组件渲染成静态的 HTML 字符串，而返回的则是一个 Cheerio 实例对象，采用的是一个第三方的 HTML 解析库 Cheerio，这是一个类 jQuery 的库，可以在 Node.js 中遍历 DOM。渲染后所返回的 CheerioWrapper 可以用于分析最终结果的 HTML 代码结构，好处是它的 API 跟 &lt;code class=&quot;highlighter-rouge&quot;&gt;shallowMount&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;mount&lt;/code&gt; 方法的 API 都基本保持一致。&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;@vue/test-utils&#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Vue Component Render&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;should not have .todo-done class&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.todo-done&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toContain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;div class=&quot;todo&quot;&amp;gt;&amp;lt;/div&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;纯字符串渲染-rendertostringcomponent-options--string&quot;&gt;纯字符串渲染 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;renderToString(component[, options]) =&amp;gt; string&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;renderToString&lt;/code&gt; 很简单，顾名思义就是把一个组件渲染成对应的 HTML 字符串，在此不再赘述。&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderedString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;@vue/test-utils&#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Vue Component renderedString&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;should have .todo class&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderedString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toContain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;div class=&quot;todo&quot;&amp;gt;&amp;lt;/div&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;实例-wrapper-find-方法与选择器&quot;&gt;实例 Wrapper &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; 方法与选择器&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181030214617.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;从前面的示例代码中可以看到，无论哪种渲染方式所返回的 wrapper 都有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.find()&lt;/code&gt; 方法，它接受一个 selector 参数，然后返回一个对应的 wrapper 对象。而 &lt;code class=&quot;highlighter-rouge&quot;&gt;.findAll()&lt;/code&gt; 则会返回一个类型相同的 wrapper 对象数组，里面包含了所有符合条件的子组件。在这个对象数组的基础上，&lt;code class=&quot;highlighter-rouge&quot;&gt;at&lt;/code&gt; 方法则可以返回指定位置的子组件，&lt;code class=&quot;highlighter-rouge&quot;&gt;trigger&lt;/code&gt; 方法用于在组件之上模拟触发某种行为。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@vue/test-utils&lt;/code&gt; 中的 Selectors 即选择器，既可以是 CSS 选择器（也支持比较复杂的关系选择器组合），也可以是 Vue 组件 或是一个 option 对象，以便于在 wrapper 对象中可以轻松地指定想要查找的节点。&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* CSS Selector */&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.foo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//class syntax&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;input&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//tag syntax&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;#foo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//id syntax &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;[foo=&quot;bar&quot;]&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//attribute syntax&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;div:first-of-type&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//pseudo selectors&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;在下面的示例中，我们可以通过 Vue 组件构造函数的引用找到该组件，与此同时也可以基于 Vue 组件属性的子集来查找组件和节点，或者通过根据 $ref 选择相应元素。&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Component Constructor */&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./foo.vue&#39;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* Find Option Object */&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;my-button&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* Find by refs */&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;myButton&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;ui-组件交互行为的测试&quot;&gt;UI 组件交互行为的测试&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181030212827.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;我们不但可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; 方法查找 DOM 元素，还可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;trigger&lt;/code&gt; 方法在组件上模拟触发某个 DOM 事件，比如 Click，Change 等等。对于浅渲染来说，事件模拟并不会像真实环境中所预期的那样进行传播，因此我们必须在一个已经设置好了事件处理方法的实际节点上才能够调用，实际上 &lt;code class=&quot;highlighter-rouge&quot;&gt;.trigger()&lt;/code&gt; 方法将会根据模拟的事件触发这个组件的 prop。例如，&lt;code class=&quot;highlighter-rouge&quot;&gt;.trigger(&#39;click&#39;)&lt;/code&gt; 实际上会获取 对应的 &lt;code class=&quot;highlighter-rouge&quot;&gt;clickHandler&lt;/code&gt; propsData 并调用它。&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;should trigger event when click button&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clickHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;propsData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clickHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clickHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;关于-nexttick-怎么办&quot;&gt;关于 &lt;code class=&quot;highlighter-rouge&quot;&gt;nextTick&lt;/code&gt; 怎么办？&lt;/h3&gt;&lt;p&gt;Vue 会异步的将未生效的 DOM 更新批量应用，以避免因数据反复突变而导致的无谓的重新渲染。这也是为什么在实践过程中我们经常在触发状态改变后用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.nextTick&lt;/code&gt; 来等待 Vue 把实际的 DOM 更新做完的原因。&lt;/p&gt;&lt;p&gt;为了简化用法，Vue Test Utils 同步应用了所有的更新，所以你不需要在测试中使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.nextTick&lt;/code&gt; 来等待 DOM 更新。&lt;/p&gt;&lt;p&gt;&lt;em&gt;注意：当你需要为诸如异步回调或 Promise 解析等操作显性改进为事件循环的时候，&lt;code class=&quot;highlighter-rouge&quot;&gt;nextTick&lt;/code&gt; 仍然是必要的。&lt;/em&gt;&lt;/p&gt;&lt;h2 id=&quot;总结一下&quot;&gt;总结一下&lt;/h2&gt;&lt;p&gt;Vue 组件的单元测试是前端 UI 测试组合的基石，单元测试保证了代码库里的每个组件（被测试的主体）都能按照预期那样工作，它的数量在测试组合中应该远远多于其他类型的测试。其实呢，也不要太拘泥于测试金字塔中各层次的名字，UI 测试显然不必位于金字塔的最高层，你也完全可以用 Cypress、Nightwatch 这样的 E2E 框架对 UI 进行单元测试，这个的话我们就留到后面再聊。&lt;/p&gt;&lt;h2 id=&quot;未完待续&quot;&gt;未完待续……&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;## 单元测试基础&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 单元测试与自动化的意义&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 为什么选择 Jest&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### Jest 的基本用法&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 该如何测试异步代码？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;## Vue 单元测试&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### Vue 组件的渲染方式&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### Wrapper &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; 方法与选择器&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### UI 组件交互行为的测试&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;## Vuex 单元测试&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### CQRS 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Redux-like&lt;/code&gt; 架构&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 如何对 Vuex 进行单元测试&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### Vue组件和Vuex store的交互&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;## Vue应用测试策略&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试的特点及其位置&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试的关注点&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 应用测试的测试策略&lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;h2 id=&quot;本文的目标&quot;&gt;本文的目标&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/vue-application-unit-test-strategy-and-practice-02-how-jest-work",
            "title"      : "Vue 应用单元测试的策略与实践 02 - 单元测试基础",
            "category"   : "前端",
            "tags"       : "Tutorial, UnitTest, ES6, Vue, Jest, Agile, TDD",
            "url"        : "/2018-10-29-vue-application-unit-test-strategy-and-practice-02-how-jest-work/",
            "path"       : "_posts/前端/2018-10-29-vue-application-unit-test-strategy-and-practice-02-how-jest-work.md",
            "next"       : "/2018-10-30-vue-application-unit-test-strategy-and-practice-03-testing-vue-components/",
            "previous"   : "/2018-10-09-the-art-of-platform-thinking-zh/",
            "date"       : "2018-10-29 00:00:00 +0000",
            "shortdate"  : "October 29, 2018",
            "content"    : "&lt;h2 id=&quot;本文的目标&quot;&gt;本文的目标&lt;/h2&gt;&lt;ol&gt;  &lt;li&gt;在 TDD 做完 Tasking 列完实例化数据之后，完全没有UT基础不知道该怎么写单元测试？&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Given一个完全没有UT基础的新人🚶// When当他🚶阅读和练习本文的Jest的部分// Then他能够把Given/When/Then的套路学会他能够学会Jest的基本用法，包括测试suite和断言等语法他能够学会Jest中测试异步的几种方式&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;单元测试基础&quot;&gt;单元测试基础&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://blog.jimmylv.info/2018-09-19-vue-application-unit-test-strategy-and-practice-01-introduction/&quot;&gt;上一篇文章&lt;/a&gt;当中我们介绍了单元测试的意义，以及为何选择 Facebook 的 Jest 作为我们的测试框架。现在就让我们一起来学习如何编写最基础的单元测试。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;如果你已经有了使用 Jest 编写单元测试的经验，可以选择直接跳到第二段。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;第一个-jest-实例&quot;&gt;第一个 Jest 实例&lt;/h3&gt;&lt;p&gt;首先创建 &lt;code class=&quot;highlighter-rouge&quot;&gt;jest-demo&lt;/code&gt; 项目并安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;jest&lt;/code&gt; 作为项目 &lt;code class=&quot;highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt; 依赖：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;demo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;yes&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;然后创建一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;math.js&lt;/code&gt; 文件，输入一个我们稍后测试的 &lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt; 函数:&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;接下来，让我们写第一个测试。在同一个文件夹中创建一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;math.test.js&lt;/code&gt; 文件，在这里我们将使用 Jest 来测试 &lt;code class=&quot;highlighter-rouge&quot;&gt;math.js&lt;/code&gt; 中定义的函数:&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./math&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Math module&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;should return sum result when one number plus another number&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Given&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anotherNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// When&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anotherNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Then&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;然后运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn test&lt;/code&gt; （添加 NPM Script）你就可以看到相应的结果。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/jimmylv.github.io/master/images/jest-failure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;givenwhenthen-的套路&quot;&gt;Given/When/Then 的套路&lt;/h3&gt;&lt;p&gt;麻雀虽小五脏俱全，在上面的例子当中，我们可以看到很多的测试元素，下面将会一一介绍：&lt;/p&gt;&lt;p&gt;首先我们看到的是一个由 &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; 包裹的测试主体最小单元，采用了Given When Then的经典格式，我们常常称之为测试三部曲，也可以解释为 3A 即：&lt;/p&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;GWT&lt;/th&gt;      &lt;th&gt;3A&lt;/th&gt;      &lt;th&gt;说明&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;&lt;strong&gt;Given&lt;/strong&gt;&lt;/td&gt;      &lt;td&gt;Arrange&lt;/td&gt;      &lt;td&gt;准备测试测试数据，有时可以抽取到 &lt;code class=&quot;highlighter-rouge&quot;&gt;beforeEach&lt;/code&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;strong&gt;When&lt;/strong&gt;&lt;/td&gt;      &lt;td&gt;Act&lt;/td&gt;      &lt;td&gt;采取行动，一般来说就是调用相应的模块执行对应的函数或方法&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;strong&gt;Then&lt;/strong&gt;&lt;/td&gt;      &lt;td&gt;Assert&lt;/td&gt;      &lt;td&gt;断言，这时需要借助的就是Matchers的能力，Jest还可以扩展自己的Matcher&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; 后面的  &lt;code class=&quot;highlighter-rouge&quot;&gt;toBe&lt;/code&gt;称之为 Matcher，是断言时的判断语句以验证正确性 ✅，在后面的文章中我们还会接触更多 Matchers，甚至可以扩展一些特别定制的 Matchers。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;修改断言的结果，就可以看到成功后的结果了：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/jimmylv.github.io/master/images/jest-success.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;模块间依赖-fakestubmockspy&quot;&gt;模块间依赖 Fake/Stub/Mock/Spy&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/jimmylv.github.io/master/images/isolate.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;如同人类世界中的羁绊，软件模块之间必然也免不了依赖。&lt;a href=&quot;https://martinfowler.com/&quot;&gt;Martin Fowler&lt;/a&gt; 在 &lt;a href=&quot;https://martinfowler.com/bliki/UnitTest.html&quot;&gt;UnitTest&lt;/a&gt; 这篇文章当中将单元测试作了一个重要的区分，即你所测试的单位应该是社交型（Social Tests）还是独立型（Solitary Tests）？ 想象一下你正在测试一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; Class 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;price()&lt;/code&gt; 方法，而 &lt;code class=&quot;highlighter-rouge&quot;&gt;price()&lt;/code&gt; 方法需要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt; Class 中调用一些函数。如果你希望单元测试所测试的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; 模块是独立的，那么你就不想直接使用真正的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt; Class，因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt; Class 的错误会直接导致 &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; Class 的单元测试失败。相反，你可能会使用一个替身作为依赖的对象，也就是我们接下来会提到的 Fake/Stub/Mock/Spy。&lt;/p&gt;&lt;p&gt;现实世界里，我们在写代码和单元测试时，常常遇到的一些需要替身的对象包括：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;Database 数据库&lt;/li&gt;  &lt;li&gt;Network requests 网络请求&lt;/li&gt;  &lt;li&gt;access to Files 存取文件&lt;/li&gt;  &lt;li&gt;any External system 任何外部系统&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;其实在 Jest 当中，Fake/Stub/Mock/Spy 这些概念或许会有所混淆，而这跟 JavaScript 语言本身的特点有一定关系，但是我觉得 Jest 通过统一的 &lt;code class=&quot;highlighter-rouge&quot;&gt;fn()&lt;/code&gt; 方法把问题解决得还比较恰当，让我们来一块儿看看实例🌰：&lt;/p&gt;&lt;h3 id=&quot;mock-用于替代整个模块&quot;&gt;Mock 用于替代整个模块&lt;/h3&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SoundPlayer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./sound-player&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockPlaySoundFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./sound-player&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;playSoundFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockPlaySoundFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;我们可以看到 &lt;code class=&quot;highlighter-rouge&quot;&gt;jest.mock()&lt;/code&gt; 方法中的第二个参数是一个函数，那么我们就可以完全接管整个 &lt;code class=&quot;highlighter-rouge&quot;&gt;./sound-player&lt;/code&gt; JavaScript 模块，比如说这里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;playSoundFile&lt;/code&gt; 本来应该是从 &lt;code class=&quot;highlighter-rouge&quot;&gt;./sound-player&lt;/code&gt; 这个文件当中 &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; 出来的，而被 Mock 之后我们的测试就可以使用 Mock 所返回的数据或方法，从而保证模块所返回的内容是我们所期望的。但这时需要注意的是，该模板的所有功能都已经被 Mock 掉，而不会再从原模块当中返回，所以我们就需要重新实现该模块中的所有功能。可别一不小心就成了张艺谋导演《影》片中的影子，被完全“取而代之”，连夫人也被 Mock 所吸引。&lt;/p&gt;&lt;h3 id=&quot;stub-用于模拟特定行为&quot;&gt;Stub 用于模拟特定行为&lt;/h3&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockFn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// With a mock implementation:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returnsTrue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;returnsTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;这里的特定行为也可以是没有行为，&lt;code class=&quot;highlighter-rouge&quot;&gt;jest.fn()&lt;/code&gt; 代表着我就是一个 Stub（桩），“你来我就在这里，你走我也依然在这里，风雨无阻”。不需要什么输入输出，只要能在测试的时候验证到 Stub 被调用过就行，也就能够断言到某处代码被执行，从而确定代码被测试所覆盖。而另一种特定行为就是返回特定的数据，即 Stub 也可以根据输入模拟返回一种输出，作为某些模块的替身帮它演戏，比如“小鲜肉们”遇到要跳车啦、要&lt;del&gt;卿卿我我&lt;/del&gt;（误）的时候就要找替身，“一二三四五六七八”连台词都不用背还需要配音。&lt;/p&gt;&lt;h3 id=&quot;spy-用于监听模块行为&quot;&gt;Spy 用于监听模块行为&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Spy packages without affecting the functions code&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./video&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;plays video&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spyOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;play&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isPlaying&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPlaying&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Spy 并不会影响到原有模块的功能代码，而只是充当一个监护人的作用，“你可以继续我型我秀上课讲小话，但是老师会偷偷告诉你妈妈，看你放学后老妈不打断你的腿”。比如说上文中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;video&lt;/code&gt; 模块中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;play()&lt;/code&gt; 方法已经被 &lt;code class=&quot;highlighter-rouge&quot;&gt;spy&lt;/code&gt; 过，那么之后 &lt;code class=&quot;highlighter-rouge&quot;&gt;play()&lt;/code&gt; 方法只要被调用过，我们就能判断其是否执行，甚至执行的次数。&lt;/p&gt;&lt;h3 id=&quot;如何-mock-全局的方法&quot;&gt;如何 Mock 全局的方法？&lt;/h3&gt;&lt;p&gt;把全局的数据 Mock 掉很简单，只需要像 &lt;code class=&quot;highlighter-rouge&quot;&gt;window.document.title = undefined&lt;/code&gt; 这样简单 Fake 赋值就很完美。而像 &lt;code class=&quot;highlighter-rouge&quot;&gt;matchMedia&lt;/code&gt; 这样的方法在 jsdom 里面并没有被实现，这时候我们当然就需要去把它 Mock 掉，简单把要用到的一些对象属性赋值就好，总之不至于在运行时报错。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matchMedia&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;onchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;removeListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;代码模块的易测性&quot;&gt;代码模块的易测性&lt;/h3&gt;&lt;p&gt;从上文的一些例子当中，我们也可以看到，不管是 Fake/Stub/Mock/Spy 最最重要的一个原则就是「简单」，因为我们是在写测试代码，而所依赖的模块就应该以最简单的形态展现出来，绝不要给 &lt;code class=&quot;highlighter-rouge&quot;&gt;jest.fn()&lt;/code&gt; 编写&lt;del&gt;过于&lt;/del&gt;哪怕一点点复杂的逻辑。如果这个模块有多种表现形态，那就把它分种测试单元进行多次 Mock，每个 &lt;code class=&quot;highlighter-rouge&quot;&gt;it()&lt;/code&gt; 单元测试一定是针对于单个功能点进行测试的。&lt;/p&gt;&lt;p&gt;保持单元测试独立性的同时，也是在促使你去思考什么样的模块才是符合「职责单一原则」的。单元测试站在使用者的角度来使用该模块，而代码的易测性也就代表着代码的可维护性。&lt;/p&gt;&lt;h2 id=&quot;如何测试异步代码&quot;&gt;如何测试异步代码？&lt;/h2&gt;&lt;p&gt;异步是 JavaScript 中绕不开的永恒话题，多亏了 ES6+ 高级语法所提供的多种优雅的异步代码方式，让我们写测试代码的方式也多了好多种。（逃&lt;/p&gt;&lt;p&gt;让我们先来看一下什么是异步请求，这里有一个通过 Chrome API 获取当前位置的实例，可想而知 Chrome 要根据 GPS 信号才能算出当前的经纬度，相当于从卫星🛰来回走了一遭，怎么不会异步（代表有延时，延迟返回）呢？&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geolocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCurrentPostion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chrome&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;异步获取当前位置&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;callback-回调函数&quot;&gt;Callback 回调函数&lt;/h3&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;the data is peanut butter&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;peanut butter&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;这是最最普通的方式，也是各大框架都支持的一种写法， &lt;code class=&quot;highlighter-rouge&quot;&gt;done()&lt;/code&gt; 作为异步代码结束的结束标志，从而让测试框架“知道”在结束时进行断言。但这种方式侵入性比较强，对测试语句不友好且违背了 Given/When/Then 的三段式套路，就像回调地狱一样的道理，如果让 &lt;code class=&quot;highlighter-rouge&quot;&gt;done()&lt;/code&gt; 充斥着测试那么代码也就变得混乱。&lt;/p&gt;&lt;h3 id=&quot;promise-让爱-then-到底&quot;&gt;Promise 让爱 &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; 到底&lt;/h3&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;the data is peanut butter&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assertions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;peanut butter&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;lemon&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;lemon&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;octopus&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rejects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toThrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;octopus&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;其实这种方式也好不到哪去，无非就是把 &lt;code class=&quot;highlighter-rouge&quot;&gt;done()&lt;/code&gt; 方式换成了 &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; 又一次充斥在整个 expect 当中，混乱了 When 和 Then 两种本该分开的时刻。但也有一个不错的点，可以通过 Promise 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.resolve()&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;.reject()&lt;/code&gt; 方法使测试分别验证正常或异常的情况。&lt;/p&gt;&lt;h3 id=&quot;asyncawait-让异步变得同步&quot;&gt;Async/Await 让异步变得同步&lt;/h3&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;the data is peanut butter&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assertions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;peanut butter&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Async/Await 语法糖在业务代码当中就特别好使了，好处不多说直接看得见：原本需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;done()&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; 的地方都不再混乱，又一次回归到了正常的 Given/When/Then 三段式套路，让测试代码变得非常清晰易读。唯一需要注意的是， 额外的&lt;code class=&quot;highlighter-rouge&quot;&gt;expect.assertions(number)&lt;/code&gt; 其实是验证在测试期间所调用的断言数量，这在测试多层异步代码时很有用，以确保实际调用回调中的断言次数。&lt;/p&gt;&lt;p&gt;意犹未尽吗？更加Jest相关的内容可以查看这篇文章 &lt;a href=&quot;https://flaviocopes.com/jest/&quot;&gt;Testing JavaScript with Jest&lt;/a&gt;，与此同时具体的 API 可以参考&lt;a href=&quot;https://facebook.github.io/jest/&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&quot;未完待续&quot;&gt;未完待续……&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;## 单元测试基础&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 单元测试与自动化的意义&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 为什么选择 Jest&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### Jest 的基本用法&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 该如何测试异步代码？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;## Vue 单元测试&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### Vue 组件的渲染方式&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### Wrapper &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; 方法与选择器&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### UI 组件交互行为的测试&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;## Vuex 单元测试&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### CQRS 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Redux-like&lt;/code&gt; 架构&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 如何对 Vuex 进行单元测试&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### Vue组件和Vuex store的交互&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;## Vue应用测试策略&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试的特点及其位置&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试的关注点&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 应用测试的测试策略&lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;h2 id=&quot;本文的目标&quot;&gt;本文的目标&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/the-art-of-platform-thinking-zh",
            "title"      : "【译】（数字化）平台思维的艺术",
            "category"   : "思考",
            "tags"       : "DPS, Platform, Framework, Innovation, Strategy, Rethink",
            "url"        : "/2018-10-09-the-art-of-platform-thinking-zh/",
            "path"       : "_posts/思考/2018-10-09-the-art-of-platform-thinking-zh.md",
            "next"       : "/2018-10-29-vue-application-unit-test-strategy-and-practice-02-how-jest-work/",
            "previous"   : "/2018-09-28-interview-record-of-blog-contest-in-baozun/",
            "date"       : "2018-10-09 00:00:00 +0000",
            "shortdate"  : "October 09, 2018",
            "content"    : "&lt;h1 id=&quot;the-art-of-platform-thinking--平台思维的艺术&quot;&gt;The Art of Platform Thinking | 平台思维的艺术&lt;/h1&gt;&lt;p&gt;作者: Amit Kaul (&lt;a href=&quot;https://www.thoughtworks.com/profiles/amit-kaul&quot;&gt;Vice President, Emerging Technology&lt;/a&gt;) &amp;amp; Ryan Murray (&lt;a href=&quot;https://www.thoughtworks.com/profiles/ryan-murray&quot;&gt;Director, Digital Platform Strategy&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;标签: &lt;a href=&quot;https://www.thoughtworks.com/insights/technology-strategy&quot;&gt;#Technology Strategy&lt;/a&gt;, &lt;a href=&quot;https://www.thoughtworks.com/insights/innovation&quot;&gt;#Innovation&lt;/a&gt;, &lt;a href=&quot;https://www.thoughtworks.com/insights/strategy&quot;&gt;#Strategy&lt;/a&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;The digitally-savvy customer has highly sophisticated - and ever-evolving - expectations for engagement and brand experience at every touchpoint. Delivering on and keeping up with these expectations requires an innovation-driven culture with customer value at its center. We’ve seen a common theme across our most successful client engagements: innovation and speed to market at scale requires more than just intense customer-centricity, adoption of agile practices and technology acumen. For almost any organization with significant brand value and historical technology investments, there will be friction from years of built-up technical and architectural debt. Unlocking core assets and business capabilities to enable customer-facing innovation requires effort and investment.&lt;/p&gt;&lt;p&gt;精通数字化的客户对每一种触点技术的品牌体验与互动都有着高度复杂的、不断变化的期望，实现和保持这些期望，需要以客户价值为中心的创新驱动文化。我们在最成功的客户合作案例当中看到了一个共同的主题：即大规模的创新和快速推向市场需要的不仅仅是以客户为中心、采取敏捷实践和保持技术敏锐度。对于几乎任何最具品牌价值和对技术做过投资的组织来说，多年积累的技术和架构债务都会带来摩擦（friction）。解锁核心资产与业务价值，任重而道远，只有持续不断付出努力和投资，才能够实现面向客户的创新。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;All organizations have an innate innovation capability &lt;a href=&quot;http://twitter.com/home/?status=All%20organizations%20have%20an%20innate%20innovation%20capability%20say%20@amitk_tw%20and%20Ryan%20Murray%20http://thght.works/2qjllpS%20via%20@ThoughtWorks&quot;&gt;&lt;img src=&quot;https://g.twimg.com/dev/documentation/image/Twitter_logo_blue_16.png&quot; alt=&quot;&quot; /&gt;Tweet this&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;所有组织的创新能力与生俱来。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;But yours may be so knotted up with organizational complexity and technology delivery friction that it’s less painful to stick to business as usual. How do you know? If progress becomes mired in departmental finger pointing, or your best people are busy just keeping things up and running, innovation is suffering.  This wasted energy costs time and competitive advantage, it creates frustrating experiences for your customers, and ultimately drives tech talent out the door.&lt;/p&gt;&lt;p&gt;但是，企业可能会由于组织复杂度和技术交付相冲突而陷入困境，从而无法像往常一样专心于本职工作。有趣的问题？当事态陷入部门间相互指责的泥潭，或者企业的中流砥柱却只是忙于维持事情运转的时候，创新就会因此受挫。所浪费的资源将会消耗时间和竞争优势，并给你的用户造成糟糕的体验，并最终将技术人才扫地出门。&lt;/p&gt;&lt;p&gt;Platform thinking can help untangle those knots and free your organization up to be more innovative without adding additional debt such as inventory, real estate, divisions, and staff.&lt;/p&gt;&lt;p&gt;平台思维能够帮助企业走出困境，并释放企业组织的创新能力，而不用增添额外债务，比如库存积压、财产损失、部门分歧和人员流失等。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Here’s how it works:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;For your organization to make the most out of technology investments, you need a comprehensive strategy that puts your essential business priorities at the heart of your approach to foundational technologies. Platform thinking then becomes the touchstone for making key technology decisions that will simplify your ecosystem, stimulate innovation, and accelerate delivery.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;以下是平台思维的工作原理：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;要让企业合理充分地运用技术投资，企业就需要一个全面的战略，将至关重要的业务核心放在打造基础技术的方法上，平台思维就会变成制定核心技术决策的试金石，从而简化企业生态系统，刺激创新，并且加速交付。&lt;/p&gt;&lt;p&gt;At &lt;strong&gt;Thought&lt;/strong&gt;Works, we’ve spent the past few years building and enhancing platforms that enable our enterprise clients to utilize the assets they already possess to support their forward-looking business objectives. We’ve collaborated with our clients to address key questions, such as:&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;How do I reduce friction in our existing software development processes, reduce  architectural debt, and achieve the accelerated delivery I need to be competitive?&lt;/li&gt;  &lt;li&gt;Is an off-the-shelf solution the right approach, or should we develop a custom solution in-house? Or is the answer somewhere in between?&lt;/li&gt;  &lt;li&gt;How do I unlock the assets and infrastructure we already possess to stay ahead of potential competitors and market disruption?&lt;/li&gt;  &lt;li&gt;How does our technology platform support a culture of innovation across the entire business?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在 &lt;strong&gt;Thought&lt;/strong&gt;Works，我们花费数年经验打造与巩固企业平台，帮助我们的客户利用现有资产实现其极具远见的商业抱负。我们协同客户定位核心问题，比如：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;如何减少已有软件开发流程的摩擦、减少技术架构债务、提升市场竞争的交付速度？&lt;/li&gt;  &lt;li&gt;是否存在现成有效的方法实践，或是提供企业定制化的内部解决方案？或是答案位于两者之间？&lt;/li&gt;  &lt;li&gt;如何充分利用企业已经具备的资产与基础设施，以保持相较于潜在对手或市场搅局者的竞争优势？&lt;/li&gt;  &lt;li&gt;企业技术平台该如何支撑贯穿业务始终的全面创新文化？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;By working in the trenches with partners facing real-world challenges, we have defined a holistic approach to technology that helps organizations meet and often exceed the expectations of today’s digitally savvy customer. Our platform-focused approach distills a client’s business objectives, current state architecture, and technology capability to provide a set of actions to maximize innovation and increase speed to market. We call it a Digital Platform Strategy.&lt;/p&gt;&lt;p&gt;通过与合作伙伴并肩作战面对现实挑战，&lt;strong&gt;Thought&lt;/strong&gt;Works 打造了一整套解决方案，能够帮助企业组织达到甚至常常超越当今数字化知识丰富的客户所期望的效果。&lt;strong&gt;Thought&lt;/strong&gt;Works 以平台为重心的解决方案可以用于提炼企业业务目标、现有架构形态与技术能力，以提供一系列具体行动，充分发挥创新能力与加快推向市场速度。我们称之为数字平台战略。&lt;/p&gt;&lt;p&gt;The Digital Platform Strategy is a ThoughtWorks offering that distils our global experience and learnings across domains and clients in order to unlock enterprise assets to facilitate innovation. Our knowledge framework and accelerators direct our clients to define and maximize the value of their core business capabilities and data assets through lean, iterative development of their foundational technology platform. Our wealth of experience gathered across a range of clients and industries, enables us to significantly accelerate and de-risk customer’s efforts. We’ve fallen into the traps and potholes and found the escape hatches so you don’t have to.&lt;/p&gt;&lt;p&gt;数字平台战略是 &lt;strong&gt;Thought&lt;/strong&gt;Works 所打造的一款产品，浓缩无数专业领域和企业客户的全球性经验与成果，帮助企业解锁核心资产以加速创新变革。我们所提供的理论框架与高效执行力，引导我们的客户定义并实现核心业务能力和数据资产的价值最大化，通过精益、迭代开发企业基础技术平台。我们所积累的丰富经验在无数企业客户与专业领域都卓有成效，使得我们能够显著促进企业创新进程并化解客户风险。我们曾经掉过坑、踩过无数陷阱并成功找到了逃生舱口（出路），而您不必再重蹈覆辙。&lt;/p&gt;&lt;h3 id=&quot;platform-thinking-at-the-core--平台思维的核心&quot;&gt;Platform Thinking at the Core | 平台思维的核心&lt;/h3&gt;&lt;p&gt;Platform thinking works by:&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;Removing friction from delivery teams by focusing on high quality, self-service access to foundational technology.&lt;/li&gt;  &lt;li&gt;Creating an ecosystem of technology and business capabilities. Using domain-driven principles, carefully-factored business capability interfaces (APIs) are critical components of an effective, modern Service Oriented Architecture (SOA) strategy.&lt;/li&gt;  &lt;li&gt;Explicitly investing in a foundation for experimentation which ensures every delivery team has access to tools to make testing new ideas and validating learnings easy.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;平台思维得益于以下几点：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;通过专注高质量、面向基础技术的自服务来消除交付团队的摩擦（冲突）&lt;/li&gt;  &lt;li&gt;打造技术与业务能力的生态系统。能够利用领域驱动原则、精准业务分析的能力接口（APIs），会是一个卓有成效、现代化的面向服务架构（SOA）重要组件。&lt;/li&gt;  &lt;li&gt;明确投资于试验性（创新实验）基础设施，确保每个交付团队都能使用相关工具，轻松测试新想法、验证经验收获。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This isn’t a “build it and they will come” approach to platform building. The Digital Platform Strategy engages your business and technology stakeholders to prioritize building the most valuable capabilities in a lean, incremental manner.&lt;/p&gt;&lt;p&gt;这不是一个「一蹴而就」的平台建设方法。数字平台战略使得企业的业务和技术利益相关者以精益、渐进的方式优先打造最具价值的能力。&lt;/p&gt;&lt;h3 id=&quot;the-pillars-of-the-digital-platform-strategy--数字平台战略的五大支柱&quot;&gt;The Pillars of the Digital Platform Strategy | 数字平台战略的（五大）支柱&lt;/h3&gt;&lt;p&gt;Our Digital Platform Strategy framework is a blueprint for platform building that is comprised of five essential pillars (focus areas). Breaking down the complexity of an enterprise platform provides targeted focus on delivering business value through classes of foundational technology. To remove friction and build ecosystems, we focus on the key areas of delivery:&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;Delivery Infrastructure&lt;/li&gt;  &lt;li&gt;Architecture and API Remediation&lt;/li&gt;  &lt;li&gt;Self Service Data&lt;/li&gt;  &lt;li&gt;Experiment Infrastructure and Telemetry&lt;/li&gt;  &lt;li&gt;Customer Touchpoint Technology&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2b5m83dtj318g0i2acf.jpg&quot; alt=&quot;Digital Platform Strategy - a blueprint&quot; /&gt;&lt;/p&gt;&lt;p&gt;我们的数字平台战略框架是由五个主要支柱（重点领域）所组成的平台建设蓝图。打破企业平台复杂度，通过基础技术能力建设提供有针对性的商业价值交付。为了消除技术摩擦与打造生态系统，我们专注于交付的关键领域（核心部分）：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;交付基础设施&lt;/li&gt;  &lt;li&gt;API 和架构治理&lt;/li&gt;  &lt;li&gt;数据自服务&lt;/li&gt;  &lt;li&gt;创新实验基础设施和监控体系&lt;/li&gt;  &lt;li&gt;客户触点技术&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181016213732.png&quot; alt=&quot;DPS&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Delivery Infrastructure:&lt;/strong&gt; We take a holistic approach to infrastructure, build and release support, and observability. Elastic infrastructure and related tooling, coupled with simplified build, deployment, and monitoring enables engineers to deliver rapidly and safely, with appropriate controls and audit support. This pillar directly addresses delivery friction, reducing your time to market for new products and services.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;交付基础设施&lt;/strong&gt;：我们采取全方位的方式来打造基础设施、构建与发布支持、以及监控系统。弹性基础设施和相关工具再加上精简化的构建、部署和监控，使工程师能够在快速、安全地进行交付的同时，得以适当控制与审计支持。这个支柱将直接解决交付摩擦的问题，减少新产品和服务推向市场的时间。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Architecture and API Remediation:&lt;/strong&gt; Engaging customer experiences that evolve to meet the constantly changing market require maximizing the value of existing organizational assets and business capabilities. Our approach to API and architecture includes methods for building net-new capabilities using modern service-oriented (SOA) and event-driven (EDA) approaches, as well as practices for remediating legacy systems so they effectively expose key existing assets to developers. A platform of well-factored, self-service APIs that hide the process, technical, and operational complexity of the underlying capability allows teams to move quickly to experiment with and production-alize new customer-facing solutions. We typically start by focusing internally to optimizing your own delivery capability, and can extend the approach to public API strategies to expand the ecosystem to your customers and partners.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;API 和架构治理&lt;/strong&gt;：打造响应市场不断变化的用户体验，需要最大化现有组织资产与业务能力的价值。我们对 API 和架构治理的途径包括使用现代化面向服务（SOA）和事件驱动（EDA）的方式打造网络新功能的方法，也包括治理遗留系统的具体实践，从而有效地将关键的现有资产提供给开发者使用。 一个完美的自助 APIs 平台，隐藏了底层功能的流程、技术和操作复杂度，使团队能够快速试验并为生产实现提供新的面向客户方案。通常我们会从内部开始着手优化企业的交付能力，并且能够扩展公共 API 战略的解决方案，将生态系统扩展到客户与合作伙伴。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Self-Service Data:&lt;/strong&gt; Today’s businesses rely on real-time analytics to power decisions. Data and application architecture are increasingly merging as we create more real-time, data-enabled business capabilities, while supporting advanced data science-driven analytics. Application developers need to focus on contributing to the organizational data stream and selectively tapping into it. Your data platform is therefore becoming ubiquitous. It needs to reduce friction by streamlining the use, management, and operations of complex data technologies like Kafka, Hadoop, and Spark. It should also expose a self-service ecosystem of curated data assets, addressing data strategy issues such as data lake design, data ownership, and authorization issues.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;数据自服务&lt;/strong&gt;：现今的商业依赖于实时分析来做出强有力的决策（在当今的商业世界里，企业依赖于实时分析来做出强有力的决策）。数据和应用程序架构正由于越来越多实时的、数据支持的业务能力而融合在一起，与此同时也在支撑着进一步的数据科学驱动的分析。应用程序开发者需要专注致力于企业数据流和有选择性地挖掘数据。因此，企业数据平台将变得无处不在。这需要通过简化 Kafka、Hadoop 或 Spark 等复杂数据技术的使用、管理和操作来减少摩擦（friction）。与此同时还应该暴露出一个用于管理数据资产的自服务生态系统，解决诸如数据湖设计、数据所有权和授权问题等数据战略问题。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Experiment Infrastructure and Telemetry:&lt;/strong&gt; Innovation lives and dies by the ability to learn quickly through purposeful, measured experimentation. Using canary release processes, toggle architecture, and meaningful instrumentation, your experiment infrastructure helps you to make the right decisions about your experiments and investments.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;创新实验基础设施和监控体系&lt;/strong&gt;：创新的存亡与否取决于通过有针对性、有分寸的试验而快速学习的能力。使用金丝雀发布流程、功能切换开关（toggle）架构和有意义的监控系统，创新实验基础设施能够帮助企业对实验与投资制定正确决策。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Customer Touchpoint Technology:&lt;/strong&gt; Knowledge of your customer is the foundation of delivering value. Together, a consistent content strategy, a single view of the customer, and transparent telemetry provide unprecedented customer insight that enables personalized product offerings. The benefit? New, targeted value streams that can be delivered quickly across multiple channels.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;用户触点技术&lt;/strong&gt;：了解客户是交付价值的基础。一致的内容战略、单一用户视野和透明的监控体系可以共同提供前所未有的客户洞察力，实现个性化的产品交付。好处就是能够在多重渠道快速投放新的有针对性的价值流。&lt;/p&gt;&lt;h3 id=&quot;the-digital-platform-strategy-process-at-a-glance--数字平台战略流程一览&quot;&gt;The Digital Platform Strategy Process at a Glance | 数字平台战略流程一览&lt;/h3&gt;&lt;p&gt;A Digital Platform Strategy engagement begins with a discovery to understand your customer’s business priorities, organizational complexity, and technical maturity. We then merge that with our patterns, practices, and principles of enterprise platform building. This culminates in a prioritized, lean technology strategy and platform roadmap tailored to your business needs.&lt;/p&gt;&lt;p&gt;数字平台战略始于探索，以理解客户的业务优先级、组织复杂性或是技术成熟度。然后，我们再将其与我们的企业平台构建的模式、实践和原则相结合。这将会是为企业业务需求而量身定制优先级的精益技术战略和平台路线图。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2b8vb2goj318g0g4k3z.jpg&quot; alt=&quot;Digital Platform Strategy - the approach&quot; /&gt;&lt;/p&gt;&lt;p&gt;Moving into the execution phase, the partnership of strategy and delivery moves into high gear. We begin with the highest priority platform capabilities to vet strategy against reality. At this stage, we test our assumptions about organizational delivery capabilities, degree of technical debt, and remediation complexity. This allows us to deliver early platform value that underpins your key business priorities. As the engagement continues, insights from execution are fed back into continuous strategy development and review to inform the path of execution. This feedback loop fine-tunes the short- and medium-term tactical moves, while platform thinking maintains the strategic vision of meeting your business objectives.&lt;/p&gt;&lt;p&gt;进入到执行阶段，我们的战略与交付合作关系将会全力以赴，马力全开。我们从最高优先级的平台能力建设开始着手，根据具体事实重新审视具体策略。在此阶段，我们根据企业交付能力、技术债务程度和治理复杂度的具体情况，逐个测试验证我们的假设。这使我们能够较早地交付平台价值，以巩固企业关键业务优先级的基础。随着合作的持续进行，来自于具体实施的洞见将会被反馈到持续的战略制定与回顾中去，以制定改善新的执行路径。这种反馈环可以对中短期的战术实施进行微调，与此同时平台思维则继续维持企业商业目标所需的战略视野。&lt;/p&gt;&lt;h3 id=&quot;so-where-do-you-begin--所以从何开始着手&quot;&gt;So Where Do You Begin? | 所以，从何开始着手？&lt;/h3&gt;&lt;p&gt;Digitally-savvy customers want to feel delighted and inspired; they expect your brand to add value to their lives. They want to feel the passion that you feel for your brand and to be part of your next great solution. Building out a scalable technology strategy that manages complexity will enable rapid development, stimulate innovation, and create new opportunity for growth. An optimized foundational technology platform is essential to being able to meet your customer’s expectations and increase their engagement with your brand.&lt;/p&gt;&lt;p&gt;数字化知识丰富的客户都期望着愉悦的用户体验、或是从中备受鼓舞；他们期待企业品牌能够为其生活添资增彩。他们期望感受到企业对于品牌的热忱，并且想成为企业下一代卓越解决方案中的一员。建立可管理复杂度的、可伸缩的技术战略，将会使得快速开发、激励创新和创造增长新机遇成为可能。优化的基础技术平台，对满足客户期望并增强用户品牌粘性至关重要。&lt;/p&gt;&lt;p&gt;For more information on how to harness the creative horsepower that your enterprise already possesses, check out ThoughtWorks’ &lt;a href=&quot;https://www.thoughtworks.com/digital-platform-strategy&quot;&gt;Digital Platform Strategy&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;有关如何运用企业资产发挥创新性能力的更多信息，请查看 &lt;strong&gt;Thought&lt;/strong&gt;Works 的数字平台战略（&lt;a href=&quot;https://www.thoughtworks.com/digital-platform-strategy&quot;&gt;Digital Platform Strategy&lt;/a&gt;）。&lt;/p&gt;",
            "excerpt"    : "&lt;h1 id=&quot;the-art-of-platform-thinking--平台思维的艺术&quot;&gt;The Art of Platform Thinking | 平台思维的艺术&lt;/h1&gt;"
		} ,
	
		{
            "id"         : "/interview-record-of-blog-contest-in-baozun",
            "title"      : "记一次 #博客大赛# 的作者采访",
            "category"   : "思考",
            "tags"       : "PKM, Rethink, 写作",
            "url"        : "/2018-09-28-interview-record-of-blog-contest-in-baozun/",
            "path"       : "_posts/思考/2018-09-28-interview-record-of-blog-contest-in-baozun.md",
            "next"       : "/2018-10-09-the-art-of-platform-thinking-zh/",
            "previous"   : "/2018-09-19-vue-application-unit-test-strategy-and-practice-01-introduction/",
            "date"       : "2018-09-28 00:00:00 +0000",
            "shortdate"  : "September 28, 2018",
            "content"    : "&lt;blockquote&gt;  &lt;p&gt;在宝尊，#博客大赛#可以继续。&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;&lt;p&gt;主持人：本周，小编捉到一枚有趣的程序猿，随我一起来认识一下这位爱写博客的摄影师！&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20180928215647.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;Q: “采访开始前，可以先简单介绍一下自己吗（经历、爱好等）？”&lt;/p&gt;&lt;p&gt;A: “大家好，我是 TIC 成都研发中心的吕靖，也可以叫我Jimmy。技术涉猎广泛，也算是一名 Full Stack Developer，个人偏爱前端，对Web开发和小程序等技术比较熟悉。自诩为一名「想做产品，却误入程序世界爱上设计的摄影师」。活跃于 GitHub 并特别热忱于写作和分享，这是我的博客：&lt;a href=&quot;https://blog.jimmylv.info&quot;&gt;https://blog.jimmylv.info&lt;/a&gt;”&lt;/p&gt;&lt;p&gt;Q: “我之前偶然进入你的博客页面，上面有很多的文章，都是自己的作品吗？你是从什么时候开始写博客的呢？”&lt;/p&gt;&lt;p&gt;A: “是的，从2013年开始写到2018年，到现在应该有几十篇博客文章，都是自己对编程、前端、学习方法、效率提升等方面的一些思考，除了博客，网页里也有自己的演讲PPT和摄影作品（不过照片放得少）。还有很多写作想法尚在酝酿当中，通常我会通过GitHub issues来管理自己的写作灵感，这也是我在 #博客大赛#中的文章&lt;a href=&quot;https://blog.jimmylv.info/2016-12-04-agile-learning-based-on-github-issues/&quot;&gt;《基于GitHub的敏捷学习方法之道与术》&lt;/a&gt;介绍的一种方法。”&lt;/p&gt;&lt;p&gt;Q: “最近我们也在办博客大赛，鼓励大家写博客，就你而言，写博客给你带来哪些好处呢？”&lt;/p&gt;&lt;p&gt;A: “写博客于我而言，源自我最喜欢的一句话：「在成长的同时帮助他人成长，在学习的同时帮助他人学习」，这也是我一直以来的动力。&lt;/p&gt;&lt;p&gt;具体来说，给我带来的好处有两方面：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;一方面是让我自己成为一个更有价值的人，帮助我自己形成个人知识系统的闭环。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如果说搜索引擎（如Google）是程序员‍最好的外部索引，那么写作则是通过整理来建立内部索引的最有效方式。在这个信息爆炸的时代，我们每天会接触到大量的信息或材料，如果不加以整理那么我们的大脑就自然而然变成了一个杂物的堆积地。我们需要采取更有效的方式进行吸收，而整理「吸收」的过程就是在去伪存真，与此同时将类似的内容进行主题分类，整理结构的过程就是建立大脑神经网络之间的索引。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20180928214840.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;另一方面我深知「知识流通性的重要性」，知识只有被传播才能释放出更大的价值，让每个人都能成为一个更有价值的人。&lt;/strong&gt;写作能够帮助建立起属于自己个人的知识体系，那与此同时，当然也可以将其输出到即反哺到整个互联网当中去。”&lt;/p&gt;&lt;p&gt;Q: “那如果自己写的博客可能浏览的人不多或者有人来对你的文章进行反驳，会影响你写博客的动力吗？这种时候你都是怎么做的呢？”&lt;/p&gt;&lt;p&gt;A: “这个我倒不是很介意，其实前面所提到的两个方面是相辅相成的：写作这件事本身就是对自己很有价值的，分享出去只是让价值能够&lt;strong&gt;有机会&lt;/strong&gt;传播出去而已。&lt;/p&gt;&lt;p&gt;两者中间的鸿沟就在于，&lt;strong&gt;当自己还没成为一个更有价值的人之前&lt;/strong&gt;，怎么好意思去产出自认为有价值的东西呢？只有当成长到某一阶段之后，再去考虑如何构建影响力，那时自己也才会更加有底气。&lt;/p&gt;&lt;p&gt;所以我建议最开始写文章的时候，完全不要去在乎流量和外界的评论，这件事情本身是完全利己的。&lt;/p&gt;&lt;p&gt;换个角度想嘛，将输入的知识整理成体系，然后更加高效快速地进行输出，这个过程中形成的一个知识闭环系统，当然会使自己的知识结构更加牢固，而与此同时也是对互联网开放精神的一个传承，她赋予了我们这么多美妙的知识，准确来说是获取知识的机会，那我们当然也应该有所回馈。”&lt;/p&gt;&lt;p&gt;Q: “作为一个写了5年博客的“老人”，除了上面说的不用在乎流量和评论，你对刚入门写博客的同事还有什么建议吗？”&lt;/p&gt;&lt;p&gt;A: “我想借用 采铜 提到的&lt;a href=&quot;http://liqi.io/caitong/&quot;&gt;「心智利器」&lt;/a&gt;来尝试给出一些建议：&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;我的生活其实很简单，我每天只需对付三个妖怪：灵感、信息和作品。那么我的利器就是一个把它们浸泡在里面、催促它们交合的池子…… 那么怎么构造出这个池子呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;&lt;strong&gt;灵感 稍纵即逝&lt;/strong&gt;：每当自己的脑海里有一些非常不错的想法，就用最快的速度把这个方法记录下来。可以是纸和笔，也可以是iOS原生的备忘录，或者更高阶的 Shortcuts 或 Drafts 等手机 App。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;&lt;strong&gt;信息 茫茫似海&lt;/strong&gt;：每当看到不错的文章都可以将其存入 稍后读 软件，或者是通过 RSS 这样的信息聚合软件来统一阅读。当然，书籍属于更可靠，更有结构化的信息来源，它可以促使灵感，也可以作为作品的辅助。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;&lt;strong&gt;作品 精益求精&lt;/strong&gt;：至于作品，我们应该用精益的思维角度来思考和创作。每当写完文章都可以找朋友或利益相关者先看一下，以最快速度获取反馈，持续改进。&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;灵感、信息和作品这三者其实也是相辅相成的。信息保存下来，可以作为作品的参考，而灵感则是产生作品的先决条件，信息可看可不看，但是可以在作品完成的过程当中再去看，统一处理。&lt;/p&gt;&lt;p&gt;如果利用程序员‍的思维来做一次重构，进行更高层次的抽象的话。那就是：作品的产生可以有模板，灵感和信息就可以拿来直接填充这样的模板，从而使效率从量变达到质变，反过来，产生出来的作品又可以继续提炼总结出新的模板。&lt;/p&gt;&lt;p&gt;以上就是我从个人出发对刚入门写博客的同事一些建议。”&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;​&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20180928215406.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;主持人结语啦：正如刘未鹏在《暗时间》中所说，用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处。写作是大脑对自己库存知识的检索，通过检索，可以发现自己的知识漏洞，激励自己持续学习持续思考。&lt;/p&gt;&lt;p&gt;写博客对于自己而言，是个人内在的一个提升，对于参与在互联网世界的所有人来说，是一种知识的继承，大家每天浏览着他人的智慧，同时又在丰富这个智慧，共同享用这份知识果实。&lt;/p&gt;",
            "excerpt"    : "&lt;blockquote&gt;  &lt;p&gt;在宝尊，#博客大赛#可以继续。&lt;/p&gt;&lt;/blockquote&gt;"
		} ,
	
		{
            "id"         : "/vue-application-unit-test-strategy-and-practice-01-introduction",
            "title"      : "Vue 应用单元测试的策略与实践 01 - 前言",
            "category"   : "前端",
            "tags"       : "Tutorial, UnitTest, ES6, Vue, Jest, Agile, TDD",
            "url"        : "/2018-09-19-vue-application-unit-test-strategy-and-practice-01-introduction/",
            "path"       : "_posts/前端/2018-09-19-vue-application-unit-test-strategy-and-practice-01-introduction.md",
            "next"       : "/2018-09-28-interview-record-of-blog-contest-in-baozun/",
            "previous"   : "/2018-04-10-how-to-survive-in-the-age-of-fragmented-information/",
            "date"       : "2018-09-19 00:00:00 +0000",
            "shortdate"  : "September 19, 2018",
            "content"    : "&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要尝试解决三个问题：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;在 TDD 做完Tasking列完实例化数据之后，完全没有UT基础不知道该怎么写单元测试？&lt;/li&gt;  &lt;li&gt;在Vue应用的单元测试中，对UI组件和vuex store等测试的区别有何不同？颗粒度该细到什么程度？&lt;/li&gt;  &lt;li&gt;测试收益如何最大化，如何配置高性价比的测试策略，即什么地方到底该花力气测试，什么地方又可以暂且放一放？&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;不谈论的包括：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;ATT 验收测试 或 E2E 端到端测试，这个是我想进一步探索的话题，特别是在TDD的语境下。&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/322&quot;&gt;#322&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;为什么要 TDD？但是我会讲为什么要 UT 单元测试。测试和TDD是两码事，而光是自动化测试的好处就已经足够多，但是如何做到更好的自动化和持续集成，那就需要TDD来指引方向。&lt;/li&gt;  &lt;li&gt;Snapshot Testing 快照测试，其实我是很认可快照这种形式，但需要改进其工作流，至少结合Image Snapshot和Storybook等工具，甚至更应该放到CI上去。&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/311&quot;&gt;#311&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面我就来结合具体场景，进一步实例化这些问题，举几个🌰：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;在 TDD 做完Tasking列完实例化数据之后，完全没有UT基础不知道该怎么写单元测试？&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Given一个完全没有UT基础的新人🚶// When当他🚶阅读和练习本文的Jest的部分// Then他能够把Given/When/Then的套路学会他能够学会Jest的基本用法，包括测试suite和断言等语法他能够学会Jest中测试异步的几种方式&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol&gt;  &lt;li&gt;在Vue应用的单元测试中，对UI组件和vuex store等测试的区别有何不同？颗粒度该细到什么程度？&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Given一个有基本的UT知识但没写过Vue测试的新人🚶// When当他🚶阅读和练习本文的Vue单元测试的部分// Then当然，他能够学会Vue组件在测试当中的几种渲染方式他能够学会UI组件的分类，特别是交互行为的测试方式他能够对Vuex概念的理解更加深入，且知道 &lt;span class=&quot;sb&quot;&gt;`Redux-like`&lt;/span&gt; 架构的好处他能够合理测试vuex store的mutation和getter中的业务逻辑他能够测试组件如何正确dispatch action以及action中如何做异步操作&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol&gt;  &lt;li&gt;Vue项目中测试收益如何最大化，如何配置高性价比的测试策略，即什么地方到底该花力气测试，什么地方又可以暂且放一放？&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Given一个具备UT基础但找不到着力点的求索之徒🐒// When当他🚶阅读本文的Vue应用测试策略部分// Then他能够找到测试的重点，重新燃起对UT的热情🔥他能够在项目背景下合理配置单元测试的测试策略&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;于是乎，这就是本系列文章的大纲，先放出来给大家一个对于Vue应用单元测试的全局观：&lt;/p&gt;&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gu&quot;&gt;## 单元测试基础&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;### 为什么选择 Jest&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;### Jest 的基本用法&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;### 该如何测试异步代码？&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;### 单元测试与自动化的意义&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;## Vue 单元测试&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;### Vue 组件的渲染方式&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;### Wrapper `find()` 方法与选择器&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;### UI 组件交互行为的测试&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;## Vuex 单元测试&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;### CQRS 与 `Redux-like` 架构&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;### 如何对 Vuex 进行单元测试&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;### Vue组件和Vuex store的交互&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;## Vue应用测试策略&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;### 单元测试的特点及其位置&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;### 单元测试的关注点&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;### 应用测试的测试策略&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr /&gt;&lt;p&gt;😯 哦豁，正文终于开始……&lt;/p&gt;&lt;hr /&gt;&lt;h2 id=&quot;为什么要有单元测试&quot;&gt;为什么要有单元测试？&lt;/h2&gt;&lt;p&gt;引用&lt;a href=&quot;https://github.com/linesh-simplicity/linesh-simplicity.github.io/issues/122&quot;&gt;好友&lt;/a&gt;鲜明的观点就是：&lt;strong&gt;写不好是能力问题，不写则是态度问题&lt;/strong&gt;。单元测试客观上可以让开发者的工作更高效，Vue 应用的单元测试是一定要的。&lt;/p&gt;&lt;h3 id=&quot;单元测试的上下文&quot;&gt;单元测试的上下文&lt;/h3&gt;&lt;p&gt;谈任何东西都一定要有个上下文。你的论述不能是「因为单元测试有这些好处，所以我们要做单元测试」，而应该是「不做单元测试我们会遇到什么问题」，这样才能回答「为什么要写单元测试」的问题。那么我们谈论单元测试的上下文是什么呢？不做单元测试我们会遇到什么问题呢？&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/11895199/40921436-03152e66-6842-11e8-9c24-920ba5d8dd27.png&quot; alt=&quot;agile&quot; /&gt;&lt;/p&gt;&lt;p&gt;上图为一个产品从 idea 分析、设计、开发、测试到交付并获取市场反馈的过程。&lt;/p&gt;&lt;p&gt;而&lt;strong&gt;单元测试的上下文就是存在于「敏捷」当中&lt;/strong&gt;。敏捷为的是更快地交付有价值的可工作的软件。为此，它有一个指标来度量这个「更快」，那就是 lead time，它度量的是一个 idea 从提出被验证，到最终上生产环境面对用户的时间。显然，这个时间越短，软件获得反馈的时间就越短，对价值的验证就越快发生。&lt;/p&gt;&lt;h3 id=&quot;单元测试的意义&quot;&gt;单元测试的意义&lt;/h3&gt;&lt;p&gt;这个结论对我们写不写单元测试有什么影响呢？答案是，不写单元测试，你就快不起来。为啥呢？因为每次发布，你都要投入人力来进行手工测试；因为没有测试，你倾向于不敢随意重构，这又导致代码逐渐腐化，复杂度使得你的开发速度降低。&lt;/p&gt;&lt;p&gt;那么在这个上下文中来谈要不要单元测试，我们就可以很有根据了，而不是“开发爽了就用，不爽就不用”这样含糊的答案：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;如果你说我的业务部门不需要频繁上线，并且我有足够的人力来覆盖手工测试，那你可以不用单元测试&lt;/li&gt;  &lt;li&gt;如果你说我不在意代码腐化，并且我也不做重构，那你可以不用单元测试&lt;/li&gt;  &lt;li&gt;如果你说我不在意代码质量，好几个没有测试保护的 &lt;code class=&quot;highlighter-rouge&quot;&gt;if-else&lt;/code&gt; 裸奔也不在话下，脑不好还做什么程序员，那你可以不用单元测试&lt;/li&gt;  &lt;li&gt;如果你说我确有快速部署的需求，但我们不 care 质量问题，出回归问题就修，那你可以不用单元测试&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;除此之外，你就需要写单元测试。如果你想随时整理重构代码，那么你需要写单元测试；如果你想有自动化的测试套件来帮你快速验证提交的完整性，那么你需要写单元测试。&lt;/p&gt;&lt;h3 id=&quot;单元测试与自动化的关系&quot;&gt;单元测试与自动化的关系&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181029222614.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;综上，我们用来谈论单元测试的「透镜」是什么呢？一言以蔽之，两点：&lt;strong&gt;反馈速度&lt;/strong&gt;和&lt;strong&gt;自动化&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;自动化&lt;/strong&gt;回答的是&lt;strong&gt;要不要自动化的单元测试&lt;/strong&gt;这个问题。测试是重构的唯一保障，也就是说，没有测试，基本上就没法重构代码（重构指的是 &lt;a href=&quot;https://www.martinfowler.com/bliki/DefinitionOfRefactoring.html&quot;&gt;不改变软件可观测行为的前提下改善代码内部设计或实现&lt;/a&gt; ），基本上就只能看着代码腐化。那么，基本上只要你的系统需要持续发展，你就需要单元测试。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;反馈速度&lt;/strong&gt;回答的是&lt;strong&gt;要不要 TDD、测试先行还是后补&lt;/strong&gt;这个问题。答案是，需要 TDD，最好先行，因为&lt;a href=&quot;https://github.com/linesh-simplicity/linesh-simplicity.github.io/issues/197&quot;&gt;可以提高反馈速度&lt;/a&gt;，缩短反馈周期，与此同时减少不必要的浪费。&lt;/p&gt;&lt;p&gt;至此，回答了「为什么我们需要写单元测试」的问题。下面让我们来谈谈如何写好 JavaScript 代码和 Vue 应用框架的单元测试。&lt;/p&gt;&lt;h2 id=&quot;如何选择一个测试框架&quot;&gt;如何选择一个测试框架？&lt;/h2&gt;&lt;p&gt;众所周知，JavaScript 世界里最不缺的就是轮子，测试框架也是如此。其实这里的子标题就是为什么选择 Jest？有时候安于现状，只不过是因为我们没有见过理想的模样。只有当我们见过更好的世界和更好的测试框架，才会惊呼“原来世界是这样美好呀！我怎么都没有想到呢？”&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/jimmylv.github.io/master/images/jest.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;引自&lt;a href=&quot;https://www.thoughtworks.com/cn/radar/languages-and-frameworks/jest&quot;&gt;技术雷达&lt;/a&gt;：Jest是一个“零配置”的前端测试工具，具有诸如模拟和代码覆盖之类的开箱即用特性，主要用于React和其他JavaScript框架。&lt;/p&gt;  &lt;p&gt;我们团队对采用JEST做前端测试的结果非常满意。它提供了一种“零配置”的开发体验，并具备诸多开箱即用的功能，比如 Mock 和代码覆盖率等。你不仅可以将此测试框架应用于React.js应用程序，也可以应用于其他 JavaScript 框架。Jest 经常被炒作的功能之一是用户界面的快照测试。快照测试可以作为测试金字塔上层一个很好的补充，但请记住，单元测试仍然是坚实的基础。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;一个好的测试框架，Jest 的几大好处可以涵盖为：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;Fast 天下武功，唯快不破。确实很快，虽然实测下来跟 &lt;a href=&quot;https://github.com/mochajs/mocha/blob/master/CHANGELOG.md&quot;&gt;Mocha 新版本&lt;/a&gt;还是慢了些，以后找个机会再测一次。&lt;/li&gt;  &lt;li&gt;Opinionated 不需要你做出选择和配置，就能提供所有的东西，比如Mock（干掉Sinon）、Test Runner（干掉Karma）、Matcher（干掉Chai）、Test Coverage（内置istanbul）&lt;/li&gt;  &lt;li&gt;Watch Mode 守护模式。非常注重开发者体验，能够在编码的时候帮助我们快速获得测试结果的反馈。&lt;/li&gt;  &lt;li&gt;Snapshot Testing 快照测试。这是值得争议的一点，前文也提到过会专门开个issue来讨论，在此不再赘述。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;最后总结一下-jest&quot;&gt;最后，总结一下 Jest&lt;/h3&gt;&lt;p&gt;Jest 作为一个测试框架，其最大的特点就在于它是一个非常有效的解决方案，不需要与其他测试库交互来执行它的工作。与此同时 Jest 非常注重&lt;a href=&quot;https://www.thoughtworks.com/talks/developer-exp-tech-radar-summit-05-2017&quot;&gt;开发者体验&lt;/a&gt;，这一点也是特别值得欣赏，现在市面上关注开发者（“人”）体验的开发框架和工具实在不多，而Jest Watch模式的核心就在于快速获得反馈，虽然我没在命令行使用而是WebStorm但亦可以与之结合。&lt;/p&gt;&lt;p&gt;ps: 除此之外，还有很多开发者体验亦值得细细品味与发现，特别是Jest本身来自Facebook的工程化支持也是特别棒的，这个讲述如何开发Jest的官方视频值得一看：&lt;a href=&quot;https://developers.facebook.com/videos/f8-2017/building-high-quality-javascript-tools/&quot;&gt;Building High-Quality JavaScript Tools&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&quot;未完待续&quot;&gt;未完待续……&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;## 单元测试基础&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 为什么选择 Jest&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### Jest 的基本用法&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 该如何测试异步代码？&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试与自动化的意义&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;## Vue 单元测试&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### Vue 组件的渲染方式&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### Wrapper &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; 方法与选择器&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### UI 组件交互行为的测试&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;## Vuex 单元测试&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### CQRS 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Redux-like&lt;/code&gt; 架构&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 如何对 Vuex 进行单元测试&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### Vue组件和Vuex store的交互&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;## Vue应用测试策略&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试的特点及其位置&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试的关注点&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 应用测试的测试策略&lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/how-to-survive-in-the-age-of-fragmented-information",
            "title"      : "融核π：碎片化信息时代的生存之道",
            "category"   : "演讲",
            "tags"       : "碎片化, PKM",
            "url"        : "/2018-04-10-how-to-survive-in-the-age-of-fragmented-information/",
            "path"       : "_posts/演讲/2018-04-10-how-to-survive-in-the-age-of-fragmented-information.md",
            "next"       : "/2018-09-19-vue-application-unit-test-strategy-and-practice-01-introduction/",
            "previous"   : "/2018-01-26-the-road-to-learn-react-chinese-translation/",
            "date"       : "2018-04-10 00:00:00 +0000",
            "shortdate"  : "April 10, 2018",
            "content"    : "&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;-碎片化信息时代的生存之道-&quot;&gt;✨ 碎片化信息时代的生存之道 ✨&lt;/h1&gt;&lt;p&gt;(&lt;small&gt;via &lt;strong&gt;JimmyLv &lt;/strong&gt;🐵&lt;/small&gt;)&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/W6u_D93FOO6XWqSR7JA0enMDGWs77nsTo1BKeeJi6DoqgvlkW0U3gOL731rBe7K51BS4fOBuvWbEKOfp_vhs8ne3Olm_lbRMLn5GihBpOkTcVuJjQoRDEqFg1xAwL8dvbptf85vJ&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;[note]&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;前三句（好高名）    &lt;ul&gt;      &lt;li&gt;感谢大家的到场（程序员 👨‍💻‍-&amp;gt; 调查 🙋），随时拍砖 (扔手机)&lt;/li&gt;      &lt;li&gt;也感谢周老师和阿沐给的机会；促使自己去总结，新的思考，又发现很多新的要学习的内容。PKM -&amp;gt; KM，DIKM -&amp;gt; 机器学习&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;罗振宇 时间的朋友（百词斩 CEO） 五倍速，营造知识焦虑，推销知识服务，&lt;del&gt;抖音-&amp;gt;得到&lt;/del&gt;但如果我们不被束缚，掌握主动权，把 @得到 当成辅助工具来用，确实很棒。&lt;/p&gt;&lt;p&gt;[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;第二大脑-vs-人机共脑&quot;&gt;「第二大脑」 vs 「人机共脑」&lt;/h1&gt;&lt;p&gt;[note]建立联系：&lt;/p&gt;&lt;p&gt;不是「第二大脑」，而是「人机共脑」，共同体，手机已经成为了一部分，未来植入脑袋之后呢？善用工具的价值&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;新的物种（还是以「得到」举例，讯飞语音）&lt;/li&gt;  &lt;li&gt;而程序员刚好处于最前锋，但依然需要领域专家&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为什么我来讲这个话题，几乎所有畅销书，折腾工具（比写代码还多？），付费购买。&lt;/p&gt;&lt;p&gt;但是今天我们不只讲工具和具体操作，前后端分离，干湿结合。[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;️--agenda&quot;&gt;⏲️ | Agenda&lt;/h1&gt;&lt;ol&gt;  &lt;li&gt;碎片化的到底是&lt;strong&gt;信息&lt;/strong&gt;还是&lt;strong&gt;时间&lt;/strong&gt;？&lt;/li&gt;  &lt;li&gt;什么样的&lt;strong&gt;知识内容&lt;/strong&gt;适合碎片化？&lt;/li&gt;  &lt;li&gt;建立以&lt;strong&gt;“应用”&lt;/strong&gt;为中心的知识体系&lt;/li&gt;  &lt;li&gt;个人知识体系与&lt;strong&gt;计算机结构&lt;/strong&gt;模型&lt;/li&gt;  &lt;li&gt;&lt;strong&gt;Showcase&lt;/strong&gt;：PKM 工具的“最佳实践”与自动化&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;[note]本期内容包括：&lt;/p&gt;&lt;p&gt;工具控[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;碎片化信息外部-vs-碎片化时间内部&quot;&gt;碎片化信息（外部） vs 碎片化时间（内部）&lt;/h1&gt;&lt;p&gt;[note]电子产品的时刻在线，&lt;/p&gt;&lt;p&gt;=&amp;gt; 如何在整块时间内高效处理碎片化知识？[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;以理论为中心-vs-以应用为中心&quot;&gt;“以理论为中心” vs “以应用为中心”&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;如何在整块时间内高效处理碎片化知识？ {:&amp;amp;.moveIn}&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[note]&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;第一种知识体系的建立是为了掌握专业知识，与 “以知识为中心” 的学习相对应。构建这种类型的知识体系，可以帮助你理解消化教科书与课堂所学，提高自己的理论水平，在考试中取得好成绩。&lt;/li&gt;  &lt;li&gt;第二种知识体系的建立是为了解决问题，与 “以自我为中心的学习” 相对应，可以教会你如何主动获取信息并把信息转化为知识，如何将碎片 “聚沙成塔”，如何学会思考不被微信鸡汤鸡血文洗脑，如何批判性地接受新的观点，如何成为一个更优秀的人。&lt;/li&gt;  &lt;li&gt;教材上的 “理论知识” 与 “应用知识” 最大的区别是，前者本身就是一个体系，只是由于你接收这些信息的过程是间断的，所以这些知识看起来才显得杂乱无章；而后者本身就是一些碎片，加上你接收这些信息的过程是片面的，于是碎片看起来就更凌乱了。&lt;/li&gt;  &lt;li&gt;对于前者，我们需要做的是 “理解——归纳整理——记忆”，当有新知识点进入体系时要 “吸纳接收”；而对于后者，我们需要 “重组——添加——重组”。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;彼此有联系的知识，就是建立知识体系的基础。&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;Tags 关注点的隐形转移&lt;/li&gt;  &lt;li&gt;主动建立联系也是挺盲目的。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[/note]&lt;/p&gt;&lt;p&gt;[slide style=”background-image:url(‘https://o7mw3gkkh.qnssl.com/images/2017/12/1513920317188.png’)”]&lt;/p&gt;&lt;h1 id=&quot;世界本来是一个整体&quot;&gt;世界，本来是一个整体。&lt;/h1&gt;&lt;p&gt;[note]故事思维 从我跟小波老师参加区块链活动说起，&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;天气热，羽绒服&lt;/li&gt;  &lt;li&gt;小喽喽，直冒汗&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;周老师，听了半天的课，跟几个人深度交流后，就成了半个”砖家”，复述内容和逻辑，还对教授提出了有深度的问题；&lt;/p&gt;&lt;p&gt;[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;区块链-vs-敏捷&quot;&gt;区块链 vs 敏捷&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;(元认知)  元编程&lt;/li&gt;  &lt;li&gt;意识思维&lt;/li&gt;  &lt;li&gt;框架结构  &amp;lt;–&lt;/li&gt;  &lt;li&gt;内容操作&lt;/li&gt;  &lt;li&gt;习惯偏好 （暗示-惯常行为-奖赏）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[note]区块链跟敏捷的共同点，因为他们都是&lt;strong&gt;工具&lt;/strong&gt;（清晰，效率，秩序），而且有分布式的需求，去中心化。&lt;/p&gt;&lt;p&gt;节奏，透明，反馈  / 区块，共享（去中心化），奖励机制，工作量证明&lt;/p&gt;&lt;p&gt;底层能力，底层的知识迁移能力。80% + 80%，世界本来是一个整体。[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;dikw-体系&quot;&gt;DIKW 体系&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.elezea.com/images/dikw-pyramid.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[note]数据信息知识智慧[/note][slide]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://webcourseworks.com/wp-content/uploads/2017/04/DIKW-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2016/1523444746311.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;数据---信息---知识&quot;&gt;数据 - 信息 - 知识&lt;/h1&gt;&lt;h1 id=&quot;知识库---笔记---大脑&quot;&gt;知识库 - 笔记 - 大脑&lt;/h1&gt;&lt;h1 id=&quot;硬盘---内存---cpu&quot;&gt;硬盘 - 内存 - CPU&lt;/h1&gt;&lt;p&gt;[note]控制理论PID，吸收率，冰山理论&lt;/p&gt;&lt;p&gt;以及从大脑出发，向外部展示，呈现效果&lt;/p&gt;&lt;p&gt;画图  -&amp;gt; 存、取 &amp;lt;-  「速度」  回到&lt;strong&gt;清晰，效率，秩序&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;信息粒，信息点，信息流 （碎片化整理）&lt;/p&gt;&lt;p&gt;围绕 存和取来举例子，从用即「取」出发。[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;showcase&quot;&gt;Showcase&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;showcase1： 取 one place to search&lt;/li&gt;  &lt;li&gt;showcase2： 存 mindmap &amp;lt;-&amp;gt; markdown&lt;/li&gt;  &lt;li&gt;showcase3： 取 come out when search&lt;/li&gt;  &lt;li&gt;showcase4： 存 diigo outliner&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;thank-you--qa&quot;&gt;Thank you! &amp;amp; QA&lt;/h1&gt;",
            "excerpt"    : "&lt;p&gt;[slide]&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/the-road-to-learn-react-chinese-translation",
            "title"      : "【译】《React 学习之道》The Road to learn React (简体中文版) 最简单，且最实用的 React 实战教程",
            "category"   : "前端",
            "tags"       : "Tutorial, Roadmap, ES6, React",
            "url"        : "/2018-01-26-the-road-to-learn-react-chinese-translation/",
            "path"       : "_posts/前端/2018-01-26-the-road-to-learn-react-chinese-translation.md",
            "next"       : "/2018-04-10-how-to-survive-in-the-age-of-fragmented-information/",
            "previous"   : "/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed/",
            "date"       : "2018-01-26 00:00:00 +0000",
            "shortdate"  : "January 26, 2018",
            "content"    : "&lt;blockquote&gt;  &lt;p&gt;通往 React 实战大师之旅：掌握 React 最简单，且最实用的教程。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/titlepages.leanpub.com/the-road-to-learn-react-chinese/hero?1514299109&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leanpub.com/the-road-to-learn-react-chinese/&quot;&gt;《React 学习之道》&lt;/a&gt;这本书使用路线图中的精华部分用于传授 React，并将其融入一个独具吸引力的真实世界 App的具体代码实现。&lt;/p&gt;&lt;p&gt;如何掌握 React 存在特别多的路线图。本书提取这些路线图中的精华部分，并将其融入于一个具体的应用程序当中。您将会构建一个属于自己的 React 应用程序。在本次学习之旅当中，您将学习 ES6，了解所有 React 的基础知识、先进理念，以及组件的内部状态管理。&lt;/p&gt;&lt;h2 id=&quot;作者与译者&quot;&gt;作者与译者&lt;/h2&gt;&lt;p&gt;首先，感谢 &lt;a href=&quot;https://leanpub.com/the-road-to-learn-react&quot;&gt;The Road to learn React&lt;/a&gt; 原书作者，&lt;a href=&quot;https://leanpub.com/u/rwieruch&quot;&gt;Robin Wieruch&lt;/a&gt;。本书的翻译始于 React China 社区的一个帖子：&lt;a href=&quot;http://react-china.org/t/the-road-to-learn-react-simplified-chinese-translation/16497&quot;&gt;The Road to learn React - Simplified Chinese Translation&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;本书翻译来自 ThoughtWorks 的 JS Community 超豪华译者团队（排名不分先后）：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/LeiZeng&quot;&gt;@LeiZeng&lt;/a&gt; （曾磊）、&lt;a href=&quot;https://github.com/JimmyLv&quot;&gt;@JimmyLv&lt;/a&gt; （吕靖）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/SBeator&quot;&gt;@SBeator&lt;/a&gt; （曾星鑫）、&lt;a href=&quot;https://github.com/kenpusney&quot;&gt;@kenpusney&lt;/a&gt; （刘清）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/azzgo&quot;&gt;@azzgo&lt;/a&gt; （文一山）、&lt;a href=&quot;https://github.com/trotyl&quot;&gt;@trotyl&lt;/a&gt; （余泽江）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ariesjia&quot;&gt;@ariesjia&lt;/a&gt; （陈嘉）、&lt;a href=&quot;https://github.com/Yixi&quot;&gt;@Yixi&lt;/a&gt; （刘应皓）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/HelloRuiLi&quot;&gt;@HelloRuiLi&lt;/a&gt; （李睿）、&lt;a href=&quot;https://github.com/lazurey&quot;&gt;@lazurey&lt;/a&gt; （梁越）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/zengyang2014&quot;&gt;@zengyang2014&lt;/a&gt; （曾扬）、&lt;a href=&quot;https://github.com/liujiefengfeng&quot;&gt;@liujiefengfeng&lt;/a&gt; （刘杰凤）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/futantan&quot;&gt;@futantan&lt;/a&gt; （傅坦坦）、&lt;a href=&quot;https://github.com/linksgo2011&quot;&gt;@linksgo2011&lt;/a&gt; （林宁）&lt;/p&gt;&lt;h2 id=&quot;本书介绍&quot;&gt;本书介绍&lt;/h2&gt;&lt;p&gt;《React 学习之道》会教您一些 React 的基础知识。通过这套教程，您可以使用纯 React 构建一个真正可用的应用程序，而不需要去理会其他复杂的工具。我将为您逐一介绍从开发环境的准备到部署上线的全部过程。本书每一章都包含一些额外的索引资料以及课后练习。在读完本书之后，您将会有能力依靠自己构建一个 React 应用。我，&lt;a href=&quot;https://leanpub.com/u/rwieruch&quot;&gt;Robin Wieruch&lt;/a&gt;，以及整个社区会持续维护和更新这些资料。&lt;/p&gt;&lt;p&gt;通过《React 学习之道》，在开始陷入到更庞大的 React 生态圈之前，我想为您奠定一个良好的基础。它会通过一个真实可用的 React 应用来解释基本概念、设计模式以及最佳实践。&lt;/p&gt;&lt;p&gt;您将会学习构建您自己的 React 应用。这个应用会涉及一些真正可用的功能，比如分页，客户端缓存，以及像搜索和排序这样的交互功能。另外在这个过程中，您会慢慢从 JavaScript ES5 过渡到 JavaScript ES6。我希望这本书能充分体现我对 React 和 JavaScript 的热忱所在，并帮助您能够开始您的开发旅程。&lt;/p&gt;&lt;h2 id=&quot;您可以期望学到什么目前为止&quot;&gt;您可以期望学到什么（目前为止…）&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;https://intense-refuge-78753.herokuapp.com/&quot;&gt;Hacker News的React版本&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;没有复杂的配置&lt;/li&gt;  &lt;li&gt;用create-react-app来初始化你的应用&lt;/li&gt;  &lt;li&gt;高效而轻量级的代码&lt;/li&gt;  &lt;li&gt;只用React setState来做状态管理（目前为止…）&lt;/li&gt;  &lt;li&gt;从JavaScript ES5一路平滑过渡到ES6&lt;/li&gt;  &lt;li&gt;React setState和生命周期函数的用法&lt;/li&gt;  &lt;li&gt;和真实API的交互（Hacker News）&lt;/li&gt;  &lt;li&gt;高级用户交互&lt;/li&gt;  &lt;li&gt;客户端排序&lt;/li&gt;  &lt;li&gt;客户端过滤&lt;/li&gt;  &lt;li&gt;服务器端搜索&lt;/li&gt;  &lt;li&gt;客户端缓存的实现&lt;/li&gt;  &lt;li&gt;高阶函数和高阶组件&lt;/li&gt;  &lt;li&gt;用Jest进行组件的切片(snapshot)测试&lt;/li&gt;  &lt;li&gt;用Enzyme进行组件的单元测试&lt;/li&gt;  &lt;li&gt;过程中学到一些有用的工具库&lt;/li&gt;  &lt;li&gt;过程中的练习题和扩展阅读&lt;/li&gt;  &lt;li&gt;认同和巩固你的所学&lt;/li&gt;  &lt;li&gt;将您的应用部署到产品环境&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;您需要具备哪些知识&quot;&gt;您需要具备哪些知识？&lt;/h2&gt;&lt;p&gt;在开始阅读本书之前，您应该熟悉 HTML、CSS 和 JavaScript（ES5）。本书将会传授 ES6 及其更高版本，如果您熟悉于其它不同的 SPA 框架或库，您应该对这些基本知识已经了然于心。如果您刚刚开始您的 Web 开发之旅，您应该优先学习并掌握 HTML、CSS 和 JavaScript，然后再来学习 React。&lt;/p&gt;&lt;h2 id=&quot;读者赠言&quot;&gt;读者赠言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://twitter.com/appsdevpk/status/848625244956901376&quot;&gt;Muhammad Kashif&lt;/a&gt;:&lt;/strong&gt; “《React 学习之道》是一本独一无二的书，我推荐给任何想要学习React基础和进阶技巧的学生或者专业人士。她包含了诸多启发性的小提示和绝无仅有的技术点。书中虽然引用了大量例子和参考资料，但最后都被用到我们要解决的问题上，这体现了编写本书令人惊叹地缜密。我有17年的互联网和桌面开发经验，阅读本书之前，我在学习React的过程中缺并不顺利。而这本书就像魔术一样有用。”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://twitter.com/andrevar66/status/853789166987038720&quot;&gt;Andre Vargas&lt;/a&gt;:&lt;/strong&gt; “Robin Wieruch的《React 学习之道》是一本非常牛的书！我所学到的绝大部分有关React甚至是ES6的知识都是通过她得来的！”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://twitter.com/nhuntwalker/status/845730837823840256&quot;&gt;Nicholas Hunt-Walker, Instructor of Python at a Seattle Coding School&lt;/a&gt;:&lt;/strong&gt; “这是一本我读过的最严谨和最实用的编程书籍之一。一本完整的React和ES6使用说明。”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://twitter.com/AustinGreen/status/845321540627521536&quot;&gt;Austin Green&lt;/a&gt;:&lt;/strong&gt; “非常感谢，真的很喜欢这本书。完美的学习曲线，不管是React，ES6，还是抽象编程概念。”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://twitter.com/nicoleffe/status/833488391148822528&quot;&gt;Nicole Ferguson&lt;/a&gt;:&lt;/strong&gt; “这个周末跟着Robin的课程学习React，我发现这一切太有意思了。这几乎让我感到羞愧。”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://twitter.com/kvss1992/status/889197346344493056&quot;&gt;Karan&lt;/a&gt;:&lt;/strong&gt; “刚刚完成这个课程。这是全世界最好的学习React和JS的一本书。完美展现了ES的优雅。膜拜！ :)”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://twitter.com/erixtekila/status/840875459730657283&quot;&gt;Eric Priou&lt;/a&gt;:&lt;/strong&gt; “Robin的《React 学习之道》是必读的一本书。简明扼要地介绍了React和Javascript。”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;一个新手开发:&lt;/strong&gt; “作为一个开发新手，我刚刚完成了这本书的学习，非常感谢写了这本书。她非常容易上手，我相信自己在接下来的几天可以开始从头开发一个新应用。这本书比我之前试过的官方React入门文档好很多（由于缺乏细节，我并未能够完成）。每个章节后面的练习题对我有很好的激励效果。”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;一个学生:&lt;/strong&gt; “这是最好的学习React的一本书。我们可以一边做练习项目，一边学习知识点，然后还能紧扣我们的学习主题。我发现「边码边学」是最好的掌握编程的方法，而这本书完完全全是这样教我的。”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.goodreads.com/review/show/1880673388&quot;&gt;Thomas Lockney&lt;/a&gt;:&lt;/strong&gt; “这是一本非常扎实的介绍React的书，而不是试着把事情搞复杂。我本来只想尝试理解看看这本书到底讲了什么，然后我得出了上面的结论。我并没有跟着所有的脚注来学习我还没有注意到的新的ES6语法（我当然不会说我一直没有注意到，Bob）（译者注：这个是在博客中与另外一个朋友互动的话）。对于那些没有及时了解到这些新功能，并且很勤奋的跟着练习的朋友们，我想很肯定地对你们说，你们能学到的会不仅仅是这本书所教的东西。”&lt;/p&gt;&lt;h2 id=&quot;恭喜你快去看看我们的-leanpub-主页吧&quot;&gt;恭喜你，快去看看我们的 Leanpub 主页吧！&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leanpub.com/the-road-to-learn-react-chinese/&quot;&gt;《React 学习之道》The Road to learn React (简体中文版) [PDF/iPad/Kindle]&lt;/a&gt;&lt;/p&gt;&lt;p&gt;支持 PDF、EPUB、MOBI、Kindle 多种格式下载，并支持 Leanpub 在线阅读。&lt;/p&gt;&lt;h2 id=&quot;最后求-star求小星星&quot;&gt;最后！求 Star！求小星星！&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;GitHub 翻译地址：&lt;a href=&quot;https://github.com/the-road-to-learn-react/the-road-to-learn-react-chinese&quot;&gt;the-road-to-learn-react/the-road-to-learn-react-chinese: 《React 学习之道》The Road to learn React (简体中文版) - 最简单，且最实用的 React 实战教程。&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;GitHub 原书地址：&lt;a href=&quot;https://github.com/the-road-to-learn-react/the-road-to-learn-react&quot;&gt;the-road-to-learn-react/the-road-to-learn-react: The Road to learn React&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;blockquote&gt;  &lt;p&gt;通往 React 实战大师之旅：掌握 React 最简单，且最实用的教程。&lt;/p&gt;&lt;/blockquote&gt;"
		} ,
	
		{
            "id"         : "/tech-radar-microfrontends-extending-microservice-to-fed",
            "title"      : "技术雷达之「微前端」- 将微服务理念扩展到前端开发（上：理论篇）",
            "category"   : "前端",
            "tags"       : "Microfrontends, FED, Microservices, WebComponents, React",
            "url"        : "/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed/",
            "path"       : "_posts/前端/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed.md",
            "next"       : "/2018-01-26-the-road-to-learn-react-chinese-translation/",
            "previous"   : "/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed-next/",
            "date"       : "2017-12-24 00:00:00 +0000",
            "shortdate"  : "December 24, 2017",
            "content"    : "&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;本文分为&lt;a href=&quot;https://blog.jimmylv.info/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed/&quot;&gt;理论&lt;/a&gt;和&lt;a href=&quot;https://blog.jimmylv.info/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed-next/&quot;&gt;实战&lt;/a&gt;上下两篇。本篇为技术雷达之「微前端」- 将微服务理念扩展到前端开发（上：理论篇），共计约 2k 字，预计阅读时间 5 mins。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在 ThoughtWorks 正式发布的最新一期技术雷达（下载地址：&lt;a href=&quot;https://assets.thoughtworks.com/assets/technology-radar-vol-17-cn.pdf&quot;&gt;technology-radar-vol-17-cn.pdf&lt;/a&gt;）当中，「微前端（Micro Fontends）」已经进入到&lt;strong&gt;试验&lt;/strong&gt;阶段，而试验环所列出的技术是我们认为值得去追求的。理解如何建立这种能力对您所在的组织十分重要，现在就可以尝试在一个低风险的项目上试点和实践这项技术，帮助您真正地了解这门技术。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;摘自技术雷达：我们已经从引入微服务架构中获得了明显的好处，微服务架构可以让团队裁剪出独立部署的交付物以及可维护的服务。不幸的是，我们还看到许多团队在后端服务之上创建了前端单体——一个单一，庞大和杂乱无绪的浏览器应用。我们首选的（经过验证的）方法是将基于浏览器的代码拆分成&lt;strong&gt;微前端&lt;/strong&gt;。在这种方法中，Web 应用程序被分解为多个特性，每个特性都由不同的前后端团队拥有。这确保每个特性都独立于其他特性开发，测试和部署。这样可以使用多种技术来重新组合特性——有时候是页面，有时候是组件——最终整合成一个内聚的用户体验。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513909558428.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;文章大纲：&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;#title1&quot;&gt;微前端的缘由：单体应用与微服务架构&lt;/a&gt;    &lt;ul&gt;      &lt;li&gt;&lt;a href=&quot;#title2&quot;&gt;微服务架构带来了哪些好处？&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;&lt;a href=&quot;#title3&quot;&gt;那么前端的现状呢？ —— 臃肿的前端&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;#title4&quot;&gt;微前端的定义 - 将微服务理念扩展到前端开发&lt;/a&gt;    &lt;ul&gt;      &lt;li&gt;&lt;a href=&quot;#title6&quot;&gt;微前端的核心思想&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;&lt;a href=&quot;#title5&quot;&gt;拆分微前端所带来的好处&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;微前端的缘由单体应用与微服务架构&quot;&gt;微前端的缘由：单体应用与微服务架构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513920317188.png&quot; alt=&quot;The Majestic Monolith&quot; /&gt;&lt;/p&gt;&lt;p&gt;在传统的软件开发当中，大多数软件都是单体式应用架构的。在瞬息万变的商业时代背景下，企业必须学会适应我们这个时代的不确定性。快速试验，快速失败。更快地推出新产品和有效地改进当前产品，从而为客户提供有意义的数字体验。&lt;/p&gt;&lt;p&gt;而单体应用这种软件架构对于企业来说的致命缺点就是，企业对于市场的响应速度变慢。企业决策者在一年内需要做的决策数量非常有限，由于依赖关系，其响应周期往往会变得非常漫长。每当开发或升级产品，都需要在一系列体量庞大的相关服务中同时增加新功能，这就需要所有利益相关方共同努力，以同步方式进行变更。&lt;/p&gt;&lt;h3 id=&quot;微服务架构带来了哪些好处&quot;&gt;微服务架构带来了哪些好处？&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513908599811.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;假设服务边界已经被正确地定义为可独立运行的业务领域，并确保在微服务设计中遵循诸多最佳实践。那么至少会以下几个方面获得显而易见的好处：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;复杂性：服务可以更好地分离，每一个服务都足够小，完成完整的定义清晰的职责；&lt;/li&gt;  &lt;li&gt;扩展性：每一个服务可以独立横向扩展以满足业务伸缩性，并减少资源的不必要消耗；&lt;/li&gt;  &lt;li&gt;灵活性：每一个服务可以独立失败，允许每个团队决定最适合他们的技术和基础架构；&lt;/li&gt;  &lt;li&gt;敏捷性：每一个服务都可以独立开发，测试和部署，并允许团队扩展独立部署和维护服务的交付。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;每个微服务是孤立的，独立的「模块」，它们共同为更高的逻辑目的服务。微服务之间通过 Contract 彼此沟通，每个服务都负责特定的功能。这使得每个服务都能够保持简单，简洁和可测试性。&lt;/p&gt;&lt;p&gt;从而微服务架构允许企业更自发地采取更深远的业务决策，因为每个微服务都是独立运作的，而且每一个管理团队可以很好地控制该服务的变更。&lt;/p&gt;&lt;h3 id=&quot;那么前端的现状呢--臃肿的前端&quot;&gt;那么前端的现状呢？ —— 臃肿的前端&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513877114486.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;在前端，往往由一个前端团队创建并维护一个 Web 应用程序，使用 REST API 从后端服务获取数据。这种方式如果做得好的话，它能够提供优秀的用户体验，但最主要的缺点就是单页面应用（SPA）不能很好地扩展和部署。在一个大公司里，单前端团队可能成为一个发展瓶颈。随着时间的推移，往往由一个独立团队所开发的前端层越来越难以维护。&lt;/p&gt;&lt;p&gt;特别是这么一个特性丰富、功能强大的前端 Web 应用程序，却位于后端微服务架构之上。并且随着业务的发展，前端变得越来越臃肿，一个项目可能会有 90％ 的前端代码，却只有非常薄的后端，甚至这种情况在 Serverless 架构的背景下还会愈演愈烈。&lt;/p&gt;&lt;h2 id=&quot;微前端的定义---将微服务理念扩展到前端开发&quot;&gt;微前端的定义 - 将微服务理念扩展到前端开发&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513877768959.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;微前端（Micro Frontends）这个术语其实就是微服务的衍生物。将微服务理念扩展到前端开发，同时构建多个完全自治的和松耦合的 App 模块（服务），其中每个 App 模块只负责特定的 UI 元素和功能。&lt;/p&gt;&lt;p&gt;如果我们看到了微服务提供给后端的好处，那么就完全可以更进一步地将这些好处应用到前端。与此同时，在设计微服务的时候，就可以考虑不仅要完成后端逻辑，而且还要完成前端的视觉部分。而对于微前端来说，与微服务的许多要求也是一致的：监控、日志、HealthCheck、Analytics 等等。&lt;/p&gt;&lt;h3 id=&quot;微前端的核心思想&quot;&gt;微前端的核心思想&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513878936981.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;✨ Be Technology Agnostic：每个团队都应该能够选择和升级他们的技术栈，而不必与其他团队协调。自定义元素（后面会具体提到）是隐藏实现细节的好方法，同时为其他人提供公共接口。&lt;/li&gt;  &lt;li&gt;✨ Isolate Team Code：即使所有团队使用相同的框架，也不要共享运行时。构建独立的应用程序。不要依赖共享状态或全局变量。&lt;/li&gt;  &lt;li&gt;✨ Establish Team Prefixes：相互约定命名隔离。为 CSS、浏览器事件、Local Storage 和 Cookies 制定命名空间，以避免冲突和明确其所有权。&lt;/li&gt;  &lt;li&gt;✨ Favor Native Browser Features over Custom APIs：使用浏览器事件进行通信，而不是构建全局的 PubSub 系统。如果确实需要构建跨团队 API，请尽量保持简单。（与框架无关，可使用 CustomEvent）&lt;/li&gt;  &lt;li&gt;✨ Build a Resilient Site：即使 JavaScript 失败或尚未执行，Web 应用程序的功能仍应有效。可以使用通用渲染和渐进增强来提高用户的感知性能。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;拆分微前端所带来的好处&quot;&gt;拆分微前端所带来的好处&lt;/h3&gt;&lt;p&gt;这样就能使各个前端团队按照自己的步调迭代，并随时准备就绪处于可发布状态，并隔离相互依赖所产生的风险，与此同时也更容易尝试新技术。&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;Web 应用程序被分解成独立的特征，并且每个特征都由不同的团队拥有，前端到后端。这确保了每个功能都是独立于其他功能开发，测试和部署的。&lt;/li&gt;  &lt;li&gt;将网站或 Web 应用程序视为由独立团队拥有的功能组合。每个团队都有一个独特的业务或关注点确定的任务。&lt;/li&gt;  &lt;li&gt;每一个团队是跨职能的，从数据库到用户界面端到端地开发其功能/特性。&lt;/li&gt;  &lt;li&gt;所有前端功能（身份验证，库存，购物车等）都是 Web 应用程序的一部分，并与后端（大部分时间通过 HTTP）进行通信，并将其分解为微服务。&lt;/li&gt;  &lt;li&gt;可以同时拥有后端、前端、数据访问层和数据库，即一个服务子域所需的所有内容。&lt;/li&gt;  &lt;li&gt;查找线上 bug、测试、框架迭代，甚至语言、代码隔离与责任和其他事情变得更容易处理。&lt;/li&gt;  &lt;li&gt;我们不得不付出的代价是部署，但是容器（Docker 和 Rocket）以及不可变服务器使得这种情况也得到了极大的改善。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;续微前端的实践方案&quot;&gt;续：微前端的实践方案&lt;/h2&gt;&lt;p&gt;本文的下篇即&lt;a href=&quot;https://blog.jimmylv.info/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed-next/&quot;&gt;技术雷达之「微前端」- 将微服务理念扩展到前端开发（下：实战篇）&lt;/a&gt;将逐一介绍微前端实战中超过 4 种的可选实践方案和多模块页面加载可能出现的问题与优化建议，最后对微前端的优缺点进行总结并提出了一些新的思考。&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/tech-radar-microfrontends-extending-microservice-to-fed-next",
            "title"      : "技术雷达之「微前端」- 将微服务理念扩展到前端开发（下：实战篇）",
            "category"   : "前端",
            "tags"       : "Microfrontends, FED, Microservices, WebComponents, React",
            "url"        : "/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed-next/",
            "path"       : "_posts/前端/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed-next.md",
            "next"       : "/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed/",
            "previous"   : "/2017-12-22-tech-radar-microfrontends-extending-microservice-to-fed/",
            "date"       : "2017-12-24 00:00:00 +0000",
            "shortdate"  : "December 24, 2017",
            "content"    : "&lt;h2 id=&quot;前言与大纲&quot;&gt;前言与大纲&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;本文分为&lt;a href=&quot;https://blog.jimmylv.info/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed/&quot;&gt;理论&lt;/a&gt;和&lt;a href=&quot;https://blog.jimmylv.info/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed-next/&quot;&gt;实战&lt;/a&gt;上下两篇。本篇为微前端的实战篇，共计约 5k 字，预计阅读时间 10 mins。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在&lt;a href=&quot;https://blog.jimmylv.info/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed/&quot;&gt;技术雷达之「微前端」- 将微服务理念扩展到前端开发（上：理论篇）&lt;/a&gt;中，我们介绍了微前端在单体应用和微服务的架构演进中所产生的缘由，将微服务理念运用到前端开发就是为了解决臃肿前端的当前现状。与此同时，合理拆分微前端也给我们的应用开发带来显而易见的好处，在本篇当中我们将逐一介绍微前端的实践方案与可能遇到的问题和对应的优化建议。&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;#title7&quot;&gt;微前端的可选实践方案（4 种 +）&lt;/a&gt;    &lt;ul&gt;      &lt;li&gt;&lt;a href=&quot;#title8&quot;&gt;创建更小的 Apps（而不是 Components）&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;&lt;a href=&quot;#title9&quot;&gt;如何组合微前端的 App 模块？&lt;/a&gt;        &lt;ul&gt;          &lt;li&gt;&lt;a href=&quot;#title10&quot;&gt;Option 1: 使用后端模板引擎插入 HTML&lt;/a&gt;&lt;/li&gt;          &lt;li&gt;&lt;a href=&quot;#title11&quot;&gt;Option 1.1: 渐进式从后端进行加载&lt;/a&gt;&lt;/li&gt;          &lt;li&gt;&lt;a href=&quot;#title12&quot;&gt;Option 2: 使用 IFrame 隔离运行时&lt;/a&gt;&lt;/li&gt;          &lt;li&gt;&lt;a href=&quot;#title13&quot;&gt;Option 3: 客户端 JavaScript 异步加载&lt;/a&gt;&lt;/li&gt;          &lt;li&gt;&lt;a href=&quot;#title14&quot;&gt;Option 4: WebComponents 整合所有功能模块&lt;/a&gt;&lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;      &lt;li&gt;&lt;a href=&quot;#title15&quot;&gt;不同 App 模块之间如何交互？&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;&lt;a href=&quot;#title16&quot;&gt;More Options…&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;#title17&quot;&gt;微前端的页面优化与实例&lt;/a&gt;    &lt;ul&gt;      &lt;li&gt;&lt;a href=&quot;#title18&quot;&gt;多模块页面加载问题与优化建议&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;&lt;a href=&quot;#title19&quot;&gt;微前端在 AEM（CMS）项目的应用&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;&lt;a href=&quot;#title20&quot;&gt;现成解决方案：Single-SPA “meta framework”&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;#title21&quot;&gt;总结与思考：微前端的优缺点&lt;/a&gt;    &lt;ul&gt;      &lt;li&gt;&lt;a href=&quot;#title22&quot;&gt;微前端的优点&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;&lt;a href=&quot;#title23&quot;&gt;微前端的缺点&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;&lt;a href=&quot;#title24&quot;&gt;持续思考…&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;#title25&quot;&gt;附：参考资料&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;微前端的可选实践方案4-种&quot;&gt;微前端的可选实践方案（4 种+）&lt;/h2&gt;&lt;h3 id=&quot;创建更小的-apps而不是-components&quot;&gt;创建更小的 Apps（而不是 Components）&lt;/h3&gt;&lt;p&gt;首先让我们来创建一个典型 Web 应用程序的基本组件（Header、ProductList、ShoppingCart），以 Header 组件为例：&lt;/p&gt;&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Logo&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;About&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;然后需要注意的是我们会用到 Express 对刚刚创建的 React 组件进行服务器端渲染，使之成为一个 App 模块:&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;htmlPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;utf8&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootElem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;div id=&quot;root&quot;&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderedApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootElem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderedApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;再依次创建其他 Apps 并独立部署：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;https://microfrontends-header.herokuapp.com/&quot;&gt;https://microfrontends-header.herokuapp.com/&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://microfrontends-products-list.herokuapp.com/&quot;&gt;https://microfrontends-products-list.herokuapp.com/&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://microfrontends-cart.herokuapp.com/&quot;&gt;https://microfrontends-cart.herokuapp.com/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;如何组合微前端的-app-模块&quot;&gt;如何组合微前端的 App 模块？&lt;/h3&gt;&lt;p&gt;在每个独立团队创建好各自的 App 模块后，我们就可以将网站或 Web 应用程序视为由各种模块的功能组合。下文将介绍多种技术实践方案来重新组合这些模块（有时作为页面，有时作为组件），而前端（不管是不是 SPA）将只需要负责路由器（Router）如何选择和决定要导入哪些模块，从而为最终用户提供一致性的用户体验。&lt;/p&gt;&lt;h4 id=&quot;option-1-使用后端模板引擎插入-html&quot;&gt;Option 1: 使用后端模板引擎插入 HTML&lt;/h4&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;https://microfrontends-header.herokuapp.com/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;https://microfrontends-products-list.herokuapp.com/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;https://microfrontends-cart.herokuapp.com/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;index&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;productsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&quot;language-ejs&quot;&gt;# views/index.ejs  &amp;lt;head&amp;gt;    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;    &amp;lt;title&amp;gt;Microfrontends Homepage&amp;lt;/title&amp;gt;  &amp;lt;/head&amp;gt;  &amp;lt;body&amp;gt;    &amp;lt;%- header %&amp;gt;    &amp;lt;%- productsList %&amp;gt;    &amp;lt;%- cart %&amp;gt;  &amp;lt;/body&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是，这种方案也存在弊端，即某些 App 模块可能会需要相对较长的加载时间，而在前端整个页面的渲染却要取决于最慢的那个模块。&lt;/p&gt;&lt;p&gt;比如说，可能 Header 模块的加载速度要比其他部分快得多，而 ProductList 则因为需要获取更多 API 数据而需要更多时间。通常情况下我们希望尽快将网页显示给用户，而在这种情况下后台加载时间就会变得更长。&lt;/p&gt;&lt;h4 id=&quot;option-11-渐进式从后端进行加载&quot;&gt;Option 1.1: 渐进式从后端进行加载&lt;/h4&gt;&lt;p&gt;当然，我们也可以通过修改一些后端代码来渐进式地（Progressive）往前端发送 HTML，但与此同时却徒增了后端复杂度，并且又将前端的渲染控制权交回了后端服务器。而且我们的优化也取决于每个模块加载的速度，若是进行优化就必须按一定顺序进行加载。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513879504186.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h4 id=&quot;option-2-使用-iframe-隔离运行时&quot;&gt;Option 2: 使用 IFrame 隔离运行时&lt;/h4&gt;&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://microfrontends-header.herokuapp.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://microfrontends-products-list.herokuapp.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://microfrontends-cart.herokuapp.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;我们也可以将每个子应用程序嵌入到各自的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 中，这使得每个模块能够使用任何他们需要的框架，而无需与其他团队协调工具和依赖关系，依然可以借助于一些库或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;Window.postMessageAPI&lt;/code&gt; 来进行交互。&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：    &lt;ul&gt;      &lt;li&gt;最强大的是隔离了组件和应用程序部分的运行时环境，因此每个模块都可以独立开发，并且可以与其他部分的技术无关&lt;/li&gt;      &lt;li&gt;可以各自使用完全不同的前端框架，可以在 React 中开发一部分，在 Angular 中开发一部分，然后使用原生 JavaScript 开发其他部分或任何其他技术。&lt;/li&gt;      &lt;li&gt;只要每个 iframe 来自同一个来源，消息传递也就相当直接和强大。参考文档 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Window.postMessageAPI&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：    &lt;ul&gt;      &lt;li&gt;Bundle 的大小非常明显，因为可能最终会多次发送相同的库，并且由于应用程序是分开的，所以在构建时也不能提取公共依赖关系。&lt;/li&gt;      &lt;li&gt;至于浏览器的支持，基本上不可能嵌套两层以上的 iframe（&lt;code class=&quot;highlighter-rouge&quot;&gt;parent - &amp;gt; iframe - &amp;gt; iframe&lt;/code&gt;）。&lt;/li&gt;      &lt;li&gt;如果任何嵌套的框架需要能够滚动或具有 Form 表单域，那样的情况处理起来就会变得特别痛苦。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;option-3-客户端-javascript-异步加载&quot;&gt;Option 3: 客户端 JavaScript 异步加载&lt;/h4&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadPage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;script&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nonExecutableScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nonExecutableScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.load-app&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;load-app&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;load-app&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;products-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;load-app&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cart&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;简单来说，这种方式就是在客户端浏览器通过 Ajax 加载应用程序，然后将不同模块的内容插入到对应的 &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; 中，而且还必须手动克隆每个 script 的标记才能使其工作。&lt;/p&gt;&lt;p&gt;需要注意的是，为了避免 Javascript 和 CSS 加载顺序的问题，建议将其修改成类似于 &lt;a href=&quot;https://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919/&quot;&gt;Facebook &lt;code class=&quot;highlighter-rouge&quot;&gt;bigpipe&lt;/code&gt;&lt;/a&gt; 的解决方案，返回一个 JSON 对象 &lt;code class=&quot;highlighter-rouge&quot;&gt;{ html: ..., css: [...], js: [...] }&lt;/code&gt; 再进行加载顺序的控制。&lt;/p&gt;&lt;h4 id=&quot;option-4-webcomponents-整合所有功能模块&quot;&gt;Option 4: WebComponents 整合所有功能模块&lt;/h4&gt;&lt;p&gt;Web Components 是一个 Web 标准，所以像 Angular、React/Preact、Vue 或 Hyperapp 这样的主流 JavaScript 框架都支持它们。你可以将 Web Components 视为使用开放 Web 技术创建的可重用的用户界面小部件，也许会是 Web 组件化的未来。&lt;/p&gt;&lt;p&gt;Web Components 由以下四种技术组成（尽管每种技术都可以独立使用）：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Custom_Elements&quot;&gt;自定义元素（Custom Elements）&lt;/a&gt;对外提供组件的标签，实现自定义标签：可以创建自己的自定义 HTML 标签和元素。每个元素可以有自己的脚本和 CSS 样式。还包括生命周期回调，它们允许我们定义正在加载的组件特定行为。&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/template&quot;&gt;HTML 模板（HTML &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt;）&lt;/a&gt;定义组件的 HTML 模板能力：一种用于保存客户端内容的机制，该内容在页面加载时不被渲染，但可以在运行时使用 JavaScript 进行实例化。可以将一个模板视为正在被存储以供随后在文档中使用的一个内容片段。&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Shadow_DOM&quot;&gt;影子 DOM（Shadow DOM）&lt;/a&gt;封装组件的内部结构，并且保持其独立性：允许我们在 Web 组件中封装 JavaScript，CSS 和 HTML。在组件内部时，这些东西与主文档的 DOM 分离。&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/HTML_Imports&quot;&gt;HTML 导入（HTML Imports）&lt;/a&gt;解决组件组合和依赖加载：在微前端的上下文中，可以是包含我们要使用的组件在服务器上的远程位置。&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;attachedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createShadowRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;microfrontends-header&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;microfrontends-header&amp;gt;&amp;lt;/microfrontends-header&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;microfrontends-products-list&amp;gt;&amp;lt;/microfrontends-products-list&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;microfrontends-cart&amp;gt;&amp;lt;/microfrontends-cart&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;在微前端的实践当中：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;每个团队使用各自的技术栈创建他们的组件，并把它包装到自定义元素（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Custom_Elements&quot;&gt;Custom Element&lt;/a&gt;）中（如 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;microfrontends-header&amp;gt;&amp;lt;/microfrontends-header&amp;gt;&lt;/code&gt;）。&lt;/li&gt;  &lt;li&gt;Web 组件就是应用程序中包含的组件的本地实现，如菜单，表单，日期选择器等。每个组件都是独立开发的，主应用程序项目利用它们组装成最终的应用程序。&lt;/li&gt;  &lt;li&gt;特定元素（标签名称，属性和事件）的 DOM 规范还可以充当跨团队之间的契约或公共 API。&lt;/li&gt;  &lt;li&gt;创建可被导入到 Web 应用程序中的可重用组件，它们就像可以导入任何网页的用户界面小部件。&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/components/microfrontends/header.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/components/microfrontends/products-list.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/components/microfrontends/cart.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul&gt;  &lt;li&gt;优点    &lt;ul&gt;      &lt;li&gt;代码的可读性变得非常清晰，组件资源内部高内聚，组件资源由自身加载控制，作用域独立。&lt;/li&gt;      &lt;li&gt;功能团队可以使用组件及其功能，而不必知道实现，他们只需要能够与 HTML DOM 进行交互。&lt;/li&gt;      &lt;li&gt;使用 PubSub 机制，组件可以发布消息，其他组件可以订阅特定的主题。幸运的是浏览器内置了这个功能。比如购物车可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; 订阅此事件并在应该刷新其数据时得到通知。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;缺点    &lt;ul&gt;      &lt;li&gt;可惜的是，Web 组件规范跟服务器渲染无关。没有 JavaScript，就没有所谓的自定义元素。&lt;/li&gt;      &lt;li&gt;浏览器和框架的支持不够，需要更多的 polyfills 从而影响到用户页面的加载体验。&lt;/li&gt;      &lt;li&gt;我们需要在整个 Web 应用程序上做出改变，把它们全部转换成 Web Components。&lt;/li&gt;      &lt;li&gt;社区不够活跃，Web Components 还没有真正流行起来，也许永远也不会。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;不同-app-模块之间如何交互&quot;&gt;不同 App 模块之间如何交互？&lt;/h3&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angularComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CustomEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;addToCart&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reactComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;addToCart&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul&gt;  &lt;li&gt;得益于浏览器的原生 API，Custom Event 可以与其他任何技术和框架一起工作。比如，我们可以将消息从 Angular 组件发送到 React 组件。其实这也是现在 API 之间普遍使用 JSON 进行通信的原因，即使没有人使用 NodeJS 作为服务器端。&lt;/li&gt;  &lt;li&gt;但是，新的问题又出现了。我们该如何测试这种跨模块之间的交互？需要编写类似于后端微服务之间的 Contract Testing 或 Integration Testing 吗？并没有答案。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;more-options&quot;&gt;More Options…&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;组件库 - 根据主 App 的技术栈，不同的组件和 App 模块拆分作为库的形式提供给主App，所以主 App 是由不同组件组成的。但是组件库的升级将成为一个大麻烦，比如对 Header 组件进行了更改，那么如果已经有 50 个页面使用了 Header 组件该怎么办？必须要求每一页都升级它的 Header，而且升级过程中用户还会在整个网站不同页面上看到不一致的标题。并且，在两边还必须都使用相同的技术，比如 Header 组件中使用了 ClojureScript，而 Content 组件中又用了 Elm，那么该怎么办？构建工具就必须在编译时处理不同的语言。&lt;/li&gt;  &lt;li&gt;将 App 模块作为 React 黑盒组件分发给消费者模块 - 应用程序的状态完全包含在组件中，API 只是通过 props 暴露出来。这种方式其实增加了应用程序之间的耦合，因为它迫使每个人都使用 React，甚至会使用相同版本的 React，但是这似乎也是一个比较好的折衷。&lt;/li&gt;  &lt;li&gt;Edge Side Includes(ESI)/Server Side Includes(SSI) - 通过特殊的文件后缀 (shtml,inc) 或简单的标记语言来对那些可以加速和不能加速的网页中的内容片断进行描述，将每个网页划分成不同的小部分分别赋予不同的缓存控制策略。SSI / ESI 方法的缺点是，最慢的片段决定了整个页面的响应时间。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;微前端的页面优化与实例&quot;&gt;微前端的页面优化与实例&lt;/h2&gt;&lt;h3 id=&quot;多模块页面加载问题与优化建议&quot;&gt;多模块页面加载问题与优化建议&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513881261010.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;strong&gt;使用 skeleton screen 响应式布局&lt;/strong&gt;：如上图 LinkedIn 所做的那样，首先展现给用户一个页面的空白版本，然后在这个页面中逐渐加载和填充相应的信息。否则中间的信息流部分的内容最初是空白的，然后在 JavaScript 被加载和执行过后，信息流就会因为需要占用更多的空间而推动整个页面的布局。虽然我们可以控制页面来固定中间部分的高度，但在响应式网站上，确定一个确切的高度往往很难，而且不同的屏幕尺寸可能会有所不同。但更重要的问题是，这种高度尺寸的约定会让不同团队之间产生紧密的联系，从而违背了微前端的初衷。&lt;/li&gt;  &lt;li&gt;&lt;strong&gt;使用浏览器异步加载加快初始渲染&lt;/strong&gt;：对于加载成本高且难以缓存的碎片，将其从初始渲染中排除是一个好主意。比如说 LinkedIn 首页的信息流就是一个很好的例子。&lt;/li&gt;  &lt;li&gt;&lt;strong&gt;共享 UI 组件库保证视觉体验一致&lt;/strong&gt;：在前端设计中，必须向用户呈现外观和感觉一致的用户界面。建议可以建立一个共享组件库（包含 CSS、字体和 JavaScript）。将这些资源托管在 CDN，每个微前端就可以在其 HTML 输出中引用它们的位置。每个组件库的版本都正确地对资源进行版本控制，而每个微前端都指定要使用的组件库的版本和显式更新依赖关系。&lt;/li&gt;  &lt;li&gt;&lt;strong&gt;使用集中式服务（Router）来管理 URL&lt;/strong&gt;：可以理解为前端的 Gateway，不同的 URL 对应不同应用程序所包含的内容。建议通过一个集中式的 URLs Router 来为应用程序提供一个 API 来注册他们自己的 URL，Router 将会位于 Web 应用程序的前面，根据不同的用户请求指向不同的 App 模块组合。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1514122411683.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;strong&gt;提取共同依赖作为 externals 加载&lt;/strong&gt;：虽然说不同 App 模块之间不能直接共享相同的第三方模块，当我们依然可以将常用的依赖比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;lodash&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;moment.js&lt;/code&gt;等公共库，或者跨多个团队共同使用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;react&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;react-dom&lt;/code&gt;。通过 Webpack 等构建工具就可以把打包的时候将这些共同模块排除掉，而只需要在 HTML &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;header&amp;gt;&lt;/code&gt; 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;中直接通过 CDN  加载 externals 依赖。&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script  &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/react/16.2.0/react.min.js&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script  &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/react/16.2.0/react-dom.min.js&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;微前端在-aemcms项目的应用&quot;&gt;微前端在 AEM（CMS）项目的应用&lt;/h3&gt;&lt;p&gt;我们在「三靠谱」（&lt;del&gt;已和谐客户名称&lt;/del&gt;）的 Marketplace 项目当中也曾经探索过 AEM + React 混合开发的解决方案，其中就涉及到如何在 AEM 当中嵌入 React 组件，甚至将 AEM 组件又强行转化为 React 组件进行嵌套。现在回过头来其实也算是微前端的一种实践：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;AEM 仅仅包含网页内容，不包含 domain 相关的结构化数据。&lt;/li&gt;  &lt;li&gt;React 组件被托管在 AEM 组件当中，再经由 AEM 传递给组件所需要的属性，比如 IDs 或 APIs 的 URL 等等&lt;/li&gt;  &lt;li&gt;后端微服务则包含 domain 结构化数据，由对应的 React 组件通过 Ajax 进行数据查询。&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cms-container-1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;react-input-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;      &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;injectProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;react-input-container&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cms-container-2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;react-button-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;      &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;react-button-container&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;现成解决方案single-spa-meta-framework&quot;&gt;现成解决方案：&lt;a href=&quot;https://single-spa.surge.sh/&quot;&gt;Single-SPA “meta framework”&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://single-spa.surge.sh/&quot;&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1514123775500.png&quot; alt=&quot;点击图片可查看实例&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;开源的 &lt;a href=&quot;https://github.com/CanopyTax/single-spa&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;single-spa&lt;/code&gt;&lt;/a&gt; 自称为「元框架」，可以实现在一个页面将多个不同的框架整合，甚至在切换的时候都不需要刷新页面（支持 React、Vue、Angular 1、Angular 2、Ember 等等）：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;Build micro frontends that coexist and can each be written with their own framework.&lt;/li&gt;  &lt;li&gt;Use multiple frameworks on the same page without refreshing the page (React, AngularJS, Angular, Ember, or whatever you’re using)&lt;/li&gt;  &lt;li&gt;Write code using a new framework, without rewriting your existing app&lt;/li&gt;  &lt;li&gt;Lazy load code for improved initial load time.&lt;/li&gt;  &lt;li&gt;Hot reload entire chunks of your overall application (instead of individual files).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;请看示例代码，所提供的 API 非常简单：&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;singleSpa&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;single-spa&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;app1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadingFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./app1/app1.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activityFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;#/app1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;singleSpa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadingFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activityFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;singleSpa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;examples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;navbar&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./navbar/navbar.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;home&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./home/home.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;angular1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./angular1/angular1.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/angular1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./react/react.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;angular2&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./angular2/angular2.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/angular2&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;vue&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/vue/vue.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/vue&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;svelte&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/svelte/svelte.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/svelte&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;preact&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/preact/preact.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/preact&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;iframe-vanilla-js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/vanillajs/vanilla.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/vanilla&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;inferno&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/inferno/inferno.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/inferno&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ember&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadEmberApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ember-app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/build/ember-app/assets/ember-app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/build/ember-app/assets/vendor.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/ember&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;值得一提的是，&lt;a href=&quot;https://github.com/CanopyTax/single-spa&quot;&gt;single-spa&lt;/a&gt; 已经进入到最新一期技术雷达的&lt;strong&gt;评估&lt;/strong&gt;阶段。这意味着 single-spa 会是值得研究一番的技术，以确认它将对你产生何种影响，你应该投入一些精力来确定它是否会对你所在的组织产生影响。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2016/1515998280875.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;摘自技术雷达：SINGLE-SPA 是一个 JavaScript 元框架，它允许我们使用不同的框架构建微前端，而这些框架可以共存于单个应用中。一般来说，我们不建议在单个应用中使用多个框架，但有时却不得不这么做。例如当你在开发遗留系统时，你希望使用现有框架的新版本或完全不同的框架来开发新功能，single-spa 就能派上用场了。鉴于很多 JavaScript框架 都昙花一现，我们需要一个解决方案来应对未来框架的变化，以及在不影响整个应用的前提下进行局部尝试。在这个方向上，single-spa 是一个不错的开始。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;总结与思考微前端的优缺点&quot;&gt;总结与思考：微前端的优缺点&lt;/h2&gt;&lt;h3 id=&quot;微前端的优点&quot;&gt;微前端的优点&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;敏捷性 - 独立开发和更快的部署周期：    &lt;ul&gt;      &lt;li&gt;开发团队可以选择自己的技术并及时更新技术栈。&lt;/li&gt;      &lt;li&gt;一旦完成其中一项就可以部署，而不必等待所有事情完毕。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;降低错误和回归问题的风险，相互之间的依赖性急剧下降。&lt;/li&gt;  &lt;li&gt;更简单快捷的测试，每一个小的变化不必再触碰整个应用程序。&lt;/li&gt;  &lt;li&gt;更快交付客户价值，有助于持续集成、持续部署以及持续交付。&lt;/li&gt;  &lt;li&gt;维护和 bugfix 非常简单，每个团队都熟悉所维护特定的区域。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;微前端的缺点&quot;&gt;微前端的缺点&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;开发与部署环境分离    &lt;ul&gt;      &lt;li&gt;本地需要一个更为复杂的开发环境。&lt;/li&gt;      &lt;li&gt;每个 App 模块有一个孤立的部署周期。&lt;/li&gt;      &lt;li&gt;最终应用程序需要在&lt;strong&gt;同一个&lt;/strong&gt;孤立的环境中运行。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;复杂的集成    &lt;ul&gt;      &lt;li&gt;需要考虑隔离 JS，避免 CSS 冲突，并考虑按需加载资源&lt;/li&gt;      &lt;li&gt;处理数据获取并考虑用户的初始化加载状态&lt;/li&gt;      &lt;li&gt;如何有效测试，微前端模块之间的 Contract Testing？&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;第三方模块重叠    &lt;ul&gt;      &lt;li&gt;依赖冗余增加了管理的复杂性&lt;/li&gt;      &lt;li&gt;在团队之间共享公共资源的机制&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;影响最终用户的体验    &lt;ul&gt;      &lt;li&gt;初始 Loading 时间可能会增加&lt;/li&gt;      &lt;li&gt;HTML 会需要服务器端的渲染&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;持续思考&quot;&gt;持续思考…&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513909558428.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;（变幻莫测）前端的技术选型？    &lt;ul&gt;      &lt;li&gt;前端 JavaScript 框架工具穷出不穷，过几个月就要重写前端项目？比如最近又出来了声称要取代 Webpack（&lt;a href=&quot;https://github.com/parcel-bundler/parcel&quot;&gt;Parcel&lt;/a&gt;）和 Yarn（&lt;a href=&quot;https://medium.com/@ericsimons/introducing-turbo-5x-faster-than-yarn-npm-and-runs-natively-in-browser-cc2c39715403&quot;&gt;Turbo&lt;/a&gt;）的工具。伴随着前端框架的更新换代，如果整个项目一起升级/重构的话压力大、风险高，那不如拆分微前端直接支持多 framework，或者同一 framework 的不同版本？&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;在 Mobile/Mobile Web 上的悖论    &lt;ul&gt;      &lt;li&gt;受限于 Mobile 尺寸大小，单一页面所能展现的内容本就有限。&lt;/li&gt;      &lt;li&gt;既然已经分出了不同的子页面，那何不如直接 Route 即可？&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;合理划分的边界：DDD（领域驱动开发）    &lt;ul&gt;      &lt;li&gt;最大的挑战是搞清楚如何合理拆分应用程序。&lt;/li&gt;      &lt;li&gt;糟糕的设计可能成为开发和维护的噩梦。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;Don’t use any of this if you don’t need it    &lt;ul&gt;      &lt;li&gt;Do not use the ideas described here until it is needed, it will make things more complex.&lt;/li&gt;      &lt;li&gt;If you are in a big company, those ideas could help you.&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;软件架构到底在解决什么问题？—— 跨团队沟通的问题    &lt;ul&gt;      &lt;li&gt;在正常情况下，每个团队拥有开发和维护其特性所需的一切，都应该有自己的能力来完成自己的特性，并最大限度地减少团队要求其他部门获得许可和/或帮助。&lt;/li&gt;      &lt;li&gt;当引入 library 或 framework 时的好处是只需要少数人讨论，而不用涉及超过 100 人的决策和他们的各种需求。这样一场大讨论不仅会耗费时间和精力，而且会迫使我们采用最不起眼的方法来选择 library，而不是选择专门针对每个 team 的问题领域的方案。        &lt;blockquote&gt;          &lt;p&gt;所谓架构，其实是解决人的问题；所谓敏捷，其实是解决沟通的问题；&lt;/p&gt;        &lt;/blockquote&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;附参考资料&quot;&gt;附：参考资料&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;本次技术雷达「微前端」主题的宣讲 Slides 可以在我的博客找到：&lt;a href=&quot;https://blog.jimmylv.info/2017-12-22-tech-radar-microfrontends-extending-microservice-to-fed/&quot;&gt;「技术雷达」之 Micro Frontends：微前端 - 将微服务理念扩展到前端开发 - 吕立青的博客&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1514125808768.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;在做 Slides 之前所整理的 XMind 思维导图：&lt;a href=&quot;https://www.xmind.net/m/e3dv&quot;&gt;https://www.xmind.net/m/e3dv&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;本人所整理的所有关于「微前端」的资料：&lt;a href=&quot;https://www.diigo.com/user/jimmylv?query=%23microfrontends&quot;&gt;https://www.diigo.com/user/jimmylv?query=%23microfrontends&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;日常挖宝：ThoughtWorks 邮件组搜索「microfrontend」关键字：&lt;a href=&quot;https://inbox.google.com/u/1/search/microfrontend&quot;&gt;https://inbox.google.com/u/1/search/microfrontend&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://micro-frontends.org/&quot;&gt;https://micro-frontends.org/&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://medium.com/@tomsoderlund/micro-frontends-a-microservice-approach-to-front-end-web-development-f325ebdadc16&quot;&gt;https://medium.com/@tomsoderlund/micro-frontends-a-microservice-approach-to-front-end-web-development-f325ebdadc16&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://medium.com/@_rchaves_/building-microfrontends-part-i-creating-small-apps-710d709b48b7&quot;&gt;https://medium.com/@_rchaves_/building-microfrontends-part-i-creating-small-apps-710d709b48b7&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.agilechamps.com/microservices-to-micro-frontends/&quot;&gt;http://www.agilechamps.com/microservices-to-micro-frontends/&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://allegro.tech/2016/03/Managing-Frontend-in-the-microservices-architecture.html&quot;&gt;http://allegro.tech/2016/03/Managing-Frontend-in-the-microservices-architecture.html&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://technologyconversations.com/2015/08/09/developing-front-end-microservices-with-polymer-web-components-and-test-driven-development-part-55-using-microservices/&quot;&gt;https://technologyconversations.com/2015/08/09/developing-front-end-microservices-with-polymer-web-components-and-test-driven-development-part-55-using-microservices/&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://technologyconversations.com/2015/08/09/including-front-end-web-components-into-microservices/&quot;&gt;https://technologyconversations.com/2015/08/09/including-front-end-web-components-into-microservices/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;h2 id=&quot;前言与大纲&quot;&gt;前言与大纲&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/tech-radar-microfrontends-extending-microservice-to-fed",
            "title"      : "「技术雷达」之 Micro Frontends：微前端 - 将微服务理念扩展到前端开发",
            "category"   : "演讲",
            "tags"       : "Microfrontends, FED, Microservices, WebComponents, React",
            "url"        : "/2017-12-22-tech-radar-microfrontends-extending-microservice-to-fed/",
            "path"       : "_posts/演讲/2017-12-22-tech-radar-microfrontends-extending-microservice-to-fed.md",
            "next"       : "/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed-next/",
            "previous"   : "/2017-06-30-serverless-in-action-build-personal-reading-statistics-system/",
            "date"       : "2017-12-22 00:00:00 +0000",
            "shortdate"  : "December 22, 2017",
            "content"    : "&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;-micro-frontends-&quot;&gt;✨ Micro Frontends ✨&lt;/h1&gt;&lt;p&gt;微前端 - 将微服务理念扩展到前端开发&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;(&lt;small&gt;via &lt;strong&gt;Jimmy Lv &lt;/strong&gt;🐵&lt;/small&gt;)&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;️--agenda&quot;&gt;⏲️ | Agenda&lt;/h1&gt;&lt;ol&gt;  &lt;li&gt;微前端的概念缘由与定义&lt;/li&gt;  &lt;li&gt;微前端的实践方案（4+）&lt;/li&gt;  &lt;li&gt;Demo&lt;/li&gt;  &lt;li&gt;优缺点总结与思考&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;[slide style=”background-image:url(‘https://o7mw3gkkh.qnssl.com/images/2017/12/1513920317188.png’)”]&lt;/p&gt;&lt;h1 id=&quot;the-majestic-monolith&quot;&gt;The Majestic Monolith&lt;/h1&gt;&lt;p&gt;[note]    * 当今的软件开发环境中，大多数应用程序都是单一的，这种方法的缺点之一是企业所有者一年内需要做的决策数量非常有限（因为依赖关系，响应时间较慢）。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 升级产品，在一系列相关服务中增加尺寸较大等新功能，需要所有相关方共同努力，以同步方式进行变更。 [/note]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;--微服务架构带来了哪些好处&quot;&gt;💡 | 微服务架构带来了哪些好处？&lt;/h1&gt;&lt;blockquote&gt;  &lt;p&gt;假设服务边界已经被正确地定义为可独立运行的业务领域，并确保在微服务设计中遵循诸多最佳实践。&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513908599811.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 复杂性：服务可以更好地分离。 {:&amp;amp;.moveIn}* 可扩展性：服务可以独立伸缩。* 灵活性：服务可以独立失败。* 敏捷性：服务可以独立开发，测试和部署。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[note]    * 微服务是孤立的，独立的 “模块”，它们共同为更高的逻辑目的服务。他们通过商定的协议彼此沟通，每个服务都负责特定的功能。这使得每个服务都能够保持简单，简洁和可测试性。    * 微服务允许您更自发地采取更深远的业务决策，因为每个微服务都是独立运作的，而且一个正在管理的团队可以很好地控制变更。    * 微服务架构允许每个团队决定最适合他们的技术和基础架构。    * 引入微服务体系结构的重大好处，它允许团队扩展独立部署和维护服务的交付。[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;--那么前端的现状呢--臃肿的前端&quot;&gt;💡 | 那么前端的现状呢？ —— 臃肿的前端&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513877114486.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;ul&gt;  &lt;li&gt;✨ SPA：一个功能丰富，功能强大的浏览器应用程序。 {:&amp;amp;.moveIn}&lt;/li&gt;  &lt;li&gt;💔 随着时间的推移，往往由一个独立团队所开发的前端层越来越难以维护。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[note]&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;如果做得对，它提供了优秀的用户体验。主要缺点是它不能很好地扩展。在一个大公司里，有许多开发团队，单前端团队可能成为一个发展瓶颈。&lt;/li&gt;  &lt;li&gt;大型 SPA 却位于微服务架构之上。    &lt;ul&gt;      &lt;li&gt;one App with one BFF.  Why split with Microservices together?&lt;/li&gt;      &lt;li&gt;不幸的是，我们也看到许多团队在其后端微服务之上创建了前端庞然大物 - 一个庞大而庞大的浏览器应用程序。&lt;/li&gt;      &lt;li&gt;前端变得越来越大，后端变得越来越不重要。        &lt;ul&gt;          &lt;li&gt;90％的前端代码，具有非常薄的后端。&lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;举实例：OSP 项目中 components library 的弊端 (NPM package)    &lt;ul&gt;      &lt;li&gt;What if you want to publish a change to the header, an already have fifty pages using that? You would have to ask every page to upgrade it’s version of header, meanwhile, your users would get inconsistent headers across the website&lt;/li&gt;      &lt;li&gt;You are now compiling another app as part of yours, what if it throws something unexpected, will your app break too?&lt;/li&gt;      &lt;li&gt;You are forced to have the same technologies on both sides, what if header the header uses clojurescript and your page uses elm? Poor webpack, it now has to understand it all when compiling.&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;微前端的定义---将微服务理念扩展到前端开发&quot;&gt;微前端的定义 - 将微服务理念扩展到前端开发&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513877768959.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;微前端（Micro Frontends）这个术语是微服务的衍生物。同时构建多个自包含的和松耦合的 UI 组件（服务），其中每个组件负责特定的 UI 元素和功能。&lt;/p&gt;&lt;p&gt;[note]&lt;/p&gt;&lt;p&gt;ThoughtWorks 的同志们最擅长举一反三，包装概念啦！&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;如果我们看到微服务提供了后端的好处，如果我们能够将这些好处应用到前端，并不是向前迈出的一步，而且设计微服务不仅要完成后端逻辑，而且还要完成视觉部分。&lt;/li&gt;  &lt;li&gt;使各个前端团队按照自己的步调迭代，然后在准备就绪时释放; 风险隔离; 而且更容易尝试新技术。&lt;/li&gt;  &lt;li&gt;对于微服务来说，微前端的许多要求是相同的：监控，健康检查，日志记录，仪器仪表，度量标准等等。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;更详细的微前端-micro-frontends&quot;&gt;更详细的「微前端 Micro Frontends」&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;根据领域特定功能将应用程序分解为更小的单元。每个单元是独立的，可以独立开发部署。&lt;/li&gt;  &lt;li&gt;将网站或 Web 应用程序视为由独立团队拥有的功能组合。每个团队都有一个独特的业务或任务关注和专业的任务。&lt;/li&gt;  &lt;li&gt;每一个团队是跨职能的，从数据库到用户界面端到端地开发其功能/特性。&lt;/li&gt;  &lt;li&gt;所有前端功能（身份验证，库存，购物车等）都是 Web 应用程序的一部分，并与后端（大部分时间通过 HTTP）进行通信，并将其分解为微服务。&lt;/li&gt;  &lt;li&gt;可以同时拥有后端，前端，数据访问层和数据库，即一个服务中的子域所需的所有内容。每一项服务都应该由一个独立的团队来完成。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[note]&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;Web 应用程序被分解成独立的特征，并且每个特征都由不同的团队拥有，前端到后端。这确保了每个功能都是独立于其他功能开发，测试和部署的。&lt;/li&gt;  &lt;li&gt;找到线上 bug，测试，理解代码，改变框架，甚至语言，隔离，责任和其他事情变得更容易处理。我们不得不付出的代价是部署，但是，容器（Docker 和 Rocket）以及不可变服务器的概念也得到了极大的改善。&lt;/li&gt;  &lt;li&gt;通过微服务，DevOps 和持续交付是我们工程实践的核心，我们决定 AWS 是支持我们专注于基础架构自动化的正确环境，同时为我们提供冗余和可扩展性。    &lt;ul&gt;      &lt;li&gt;Docker 容器将给我们两个具体的好处：&lt;/li&gt;      &lt;li&gt;跨越环境以及跨 JVM 和非 JVM 应用程序统一部署管道：目前，我们正在管理 Symfony / Angular 表示层的部署，与我们的 JVM / Agora 中间层不同，导致不必要的差异，复制工作和浪费。&lt;/li&gt;      &lt;li&gt;在单独的主机上部署每个应用程序 / 服务实例的能力：容器调度将使我们能够整合我们的计​​算资源，同时保持服务实例之间的隔离，同时提高利用率。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;存在多种技术来重新组合特征 - 有时作为页面，有时作为组件 - 变为有凝聚力的用户体验。&lt;/li&gt;  &lt;li&gt;前端（不管是不是 SPA）将被缩减为只负责路由选择和决定要导入哪些服务的脚手架。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;微前端的核心思想&quot;&gt;微前端的核心思想&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513878936981.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;ul&gt;  &lt;li&gt;✨ Be Technology Agnostic {:&amp;amp;.moveIn}&lt;/li&gt;  &lt;li&gt;✨ Isolate Team Code&lt;/li&gt;  &lt;li&gt;✨ Establish Team Prefixes&lt;/li&gt;  &lt;li&gt;✨ Favor Native Browser Features over Custom APIs&lt;/li&gt;  &lt;li&gt;✨ Build a Resilient Site&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[note]&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;每个团队都应该能够选择和升级他们的技术栈，而不必与其他团队协调。自定义元素是隐藏实现细节的好方法，同时为其他人提供公共接口。&lt;/li&gt;  &lt;li&gt;即使所有团队使用相同的框架，也不要共享运行时。构建独立的应用程序。不要依赖共享状态或全局变量。&lt;/li&gt;  &lt;li&gt;相互约定命名隔离。为 CSS、Events、Local Storage 和 Cookies 制定命名空间，以避免冲突和明确所有权。&lt;/li&gt;  &lt;li&gt;使用浏览器事件进行通信，而不是构建全局的 PubSub 系统。如果您确实需要构建跨团队 API，请尽量保持简单。（与框架无关，CustomEvent）&lt;/li&gt;  &lt;li&gt;即使 JavaScript 失败或尚未执行，您的功能仍应有用。使用通用渲染和渐进增强来提高感知性能。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;微前端的实践方案&quot;&gt;微前端的实践方案&lt;/h1&gt;&lt;p&gt;🔨 Creating small apps (rather than components) 🔨&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Logo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;......&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/header&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderedApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr /&gt;&lt;ul&gt;  &lt;li&gt;https://microfrontends-header.herokuapp.com/&lt;/li&gt;  &lt;li&gt;https://microfrontends-products-list.herokuapp.com/&lt;/li&gt;  &lt;li&gt;https://microfrontends-cart.herokuapp.com/&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;--joining-apps-together&quot;&gt;💞  Joining apps together&lt;/h1&gt;&lt;h2 id=&quot;option-1-ssr-using-template&quot;&gt;Option 1: SSR using template&lt;/h2&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;https://microfrontends-header.herokuapp.com/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;https://microfrontends-products-list.herokuapp.com/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;https://microfrontends-cart.herokuapp.com/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;index&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;productsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ejs&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Microfrontends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Homepage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/title&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/head&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;%-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;%-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;productsList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;%-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/body&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr /&gt;&lt;p&gt;Problem: Some apps may take longer to load&lt;/p&gt;&lt;p&gt;[note]&lt;/p&gt;&lt;p&gt;There are some cases where things take a while to load on the back-end, maybe your header loads much faster than the other parts, and you want to display that ASAP to your users, while the products list takes more time.&lt;/p&gt;&lt;p&gt;[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;--joining-apps-together-1&quot;&gt;💞  Joining apps together&lt;/h1&gt;&lt;h2 id=&quot;option-11-progressive-loading-from-the-back-end&quot;&gt;Option 1.1: Progressive loading from the back-end&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513879504186.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;option-2-iframe&quot;&gt;Option 2: iframe&lt;/h1&gt;&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://microfrontends-header.herokuapp.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://microfrontends-products-list.herokuapp.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://microfrontends-cart.herokuapp.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr /&gt;&lt;ul&gt;  &lt;li&gt;优点 {:&amp;amp;.moveIn}    &lt;ul&gt;      &lt;li&gt;最强大的是隔离了组件和应用程序部分的运行时环境，因此每个部分都可以独立开发，并且可以与其他部分的技术无关&lt;/li&gt;      &lt;li&gt;可以在 React 中开发一些部分，在 Angular 中开发一些部分，在 vanilla Js 中开发更多或任何其他技术。&lt;/li&gt;      &lt;li&gt;只要 iframes 来自同一个来源，消息传递也就相当直接和强大。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage&quot;&gt;Window.postMessageAPI&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;缺点    &lt;ul&gt;      &lt;li&gt;Bundle 的大小非常明显，因为你最终会多次发送相同的库，并且由于应用程序是分开的，所以在构建时不能提取公共依赖关系。&lt;/li&gt;      &lt;li&gt;至于浏览器的支持，你基本上不能嵌套两层以上的 iframes（parent - &amp;gt; iframe - &amp;gt; iframe），或者所有的地狱崩溃。&lt;/li&gt;      &lt;li&gt;如果任何嵌套的框架需要能够滚动或具有 Form 表单域，就会很痛苦。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[note]&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;每个应用程序都在自己的小 iframe 中，这使得小组能够使用任何他们需要的框架，而无需与其他小组协调工具和依赖关系。&lt;/li&gt;  &lt;li&gt;将微服务包装到 IFrames 中，然后使用一些库和 Window.postMessageAPI 来交互。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;option-3-client-side-javascript&quot;&gt;Option 3: Client-Side JavaScript&lt;/h1&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nonExecutableScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr /&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;This basically loads the apps through ajax and insert their content inside those &lt;code class=&quot;highlighter-rouge&quot;&gt;divs&lt;/code&gt;. It also has to clone each script tag manually for them to work.&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;Note: to avoid problems with Javascript and CSS loading order, I suggest you to evolve this to a solution similar to facebook’s bigpipe, returning a JSON like &lt;code class=&quot;highlighter-rouge&quot;&gt;{ html: ..., css: [...], js: [...] }&lt;/code&gt; so you can have full control of it.&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;option-4-webcomponents&quot;&gt;Option 4: WebComponents&lt;/h1&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;attachedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createShadowRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;microfrontends-header&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;microfrontends-header&amp;gt;&amp;lt;/microfrontends-header&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;microfrontends-products-list&amp;gt;&amp;lt;/microfrontends-products-list&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;microfrontends-cart&amp;gt;&amp;lt;/microfrontends-cart&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[note]&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;每个团队建立他们的组件使用他们所选择的网络技术，并把它包装自定义元素中（如&lt;order-minicart&gt;&lt;/order-minicart&gt;）。    &lt;ul&gt;      &lt;li&gt;允许创建可以导入到 Web 应用程序中的可重用组件。它们就像可以导入任何网页的小部件。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;Web 组件 - Web 组件是应用程序中包含的组件的本地实现，如菜单，表单，日期选择器等。每个组件都是独立开发的，主应用程序项目利用它们并组成最终的应用程序。&lt;/li&gt;  &lt;li&gt;这个特定元素（标签名称，属性和事件）的 DOM 规范充当其他团队的合同或公共 API。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;web-components-用于整合所有功能模块&quot;&gt;Web Components 用于整合所有功能模块&lt;/h1&gt;&lt;blockquote&gt;  &lt;p&gt;Web Components 是一个 Web 标准，所以像 Angular，React，Preact，Vue 或 Hyperapp 这样的主流 JavaScript 框架都支持它们。&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; 自定义元素&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; Shadow DOM&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; HTML 导入&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; HTML 模板元素&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/components/tc-books/tc-books.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/components/tc-books/tc-book-form.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[note]&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;优点 {:&amp;amp;.moveIn}    &lt;ul&gt;      &lt;li&gt;自定义元素可以创建自己的自定义 HTML 标签和元素。每个元素可以有自己的脚本和 CSS 样式。还包括生命周期回调，它们允许我们定义特定于正在开发的组件的行为。&lt;/li&gt;      &lt;li&gt;Shadow DOM：允许我们在 Web 组件中封装 JavaScript，CSS 和 HTML。在组件内部时，这些东西与主文档的 DOM 分离。HTML 导入        &lt;ul&gt;          &lt;li&gt;在微服务的上下文中，导入可以是包含我们要使用的组件的服务的远程位置。&lt;/li&gt;          &lt;li&gt;            &lt;link rel=&quot;import&quot; href=&quot;/components/tc-books/tc-books.html&quot; /&gt;            &lt;link rel=&quot;import&quot; href=&quot;/components/tc-books/tc-book-form.html&quot; /&gt;          &lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;      &lt;li&gt;HTML 模板元素：可以用来保存客户端内容，当页面加载时不会渲染。&lt;/li&gt;      &lt;li&gt;功能团队可以使用组件及其功能，而不必知道实现。他们只需要能够与 HTML DOM 进行交互。&lt;/li&gt;      &lt;li&gt;使用 PubSub 机制，组件可以发布消息，其他组件可以订阅特定的主题。幸运的是浏览器内置了这个功能。        &lt;ul&gt;          &lt;li&gt;购物车现在可以订阅此事件 window 并在应该刷新其数据时得到通知。&lt;/li&gt;          &lt;li&gt;window.addEventListener(‘blue:basket:changed’, this.refresh);&lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;缺点    &lt;ul&gt;      &lt;li&gt;可悲的是，Web 组件规范根本不谈论服务器渲染。没有 JavaScript，就没有自定义元素。😔&lt;/li&gt;      &lt;li&gt;浏览器不全，支持不够，社区不够，框架支持不够。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;WebComponents are still not fully supported in all browsers, with Mozilla holding back HTML imports, so you will need polyfills, more code for the user to load.&lt;/li&gt;  &lt;li&gt;It haven’t really gained popularity yet, maybe never will, I see blogposts from 2013 and still few people have tried it!&lt;/li&gt;  &lt;li&gt;JavaScript bundle has to load first and register the components in order for the DOM to load, which means that to gain the advantages of server-side rendering you’ll probably need to be more clever.&lt;/li&gt;  &lt;li&gt;For this alternative we had to make changes not only on the homepage, but on the apps too, to convert them to WebComponents.[/note]&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;communication-between-apps&quot;&gt;Communication Between Apps&lt;/h1&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angularComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CustomEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;addToCart&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reactComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;addToCart&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[note]&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;because it should work with any other technologies and frameworks, you can send messages from React to Angular for example.&lt;/li&gt;  &lt;li&gt;This is the same reason nowadays everybody uses JSON to communication on the back-end, even if nobody uses NodeJS!&lt;/li&gt;  &lt;li&gt;how do we test this communication? How to write integration or contract tests here? I don’t know. Also adding some ideas from Event Driven Architecture here might be good.[/note]&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;more-options&quot;&gt;More Options…&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;组件库 - 根据主应用程序的技术栈，不同的组件和应用程序部分可以作为库和主应用程序，所以主应用程序是由不同组件组成的。&lt;/li&gt;  &lt;li&gt;将 “应用程序” 作为黑盒 React 组件分发给消费应用程序 - 应用程序的状态完全包含在组件中，API 只是通过 props 暴露出来。&lt;/li&gt;  &lt;li&gt;Edge Side Includes(ESI)/Server Side Includes(SSI) - 通过特殊的文件后缀 (shtml,inc) 或简单的标记语言来对那些可以加速和不能加速的网页中的内容片断进行描述，将每个网页划分成不同的小部分分别赋予不同的缓存控制策略。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[note]&lt;/p&gt;&lt;p&gt;这种方式增加了应用程序之间的耦合，因为它迫使每个人都使用 React，甚至会使用相同版本的 React，但是对于我们来说，情况已经如此，所以这似乎是一个好的折衷。&lt;/p&gt;&lt;h3 id=&quot;ssi--esi-方法的缺点是最慢的片段决定了整个页面的响应时间所以当一个片段的响应可以被缓存时是很好的&quot;&gt;SSI / ESI 方法的缺点是，最慢的片段决定了整个页面的响应时间。所以当一个片段的响应可以被缓存时是很好的。&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;Edge Side Includes(ESI) 和 Server Side Includes(SSI) 和功能类似. SSI 需要特殊的文件后缀 (shtml,inc).ESI（Edge Side Include）通过使用简单的标记语言来对那些可以加速和不能加速的网页中的内容片断进行描述,&lt;/li&gt;  &lt;li&gt;每个网页都被划分成不同的小部分分别赋予不同的缓存控制策略, 使 Cache 服务器可以根据这些策略在将完整的网页发送给用户之前将不同的小部分动态地组合在一起.&lt;/li&gt;  &lt;li&gt;通过这种控制, 可以有效地减少从服务器抓取整个页面的次数, 而只用从原服务器中提取少量的不能缓存的片断, 因此可以有效降低原服务器的负载, 同时提高用户访问的响应时间.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;页面加载的问题与优化建议&quot;&gt;页面加载的问题与优化建议&lt;/h1&gt;&lt;h2&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513881261010.png&quot; alt=&quot;&quot; /&gt;&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;响应式布局：使用 skeleton screen&lt;/li&gt;  &lt;li&gt;加快初始渲染：浏览器异步加载&lt;/li&gt;  &lt;li&gt;视觉体验一致：共享 UI 组件库&lt;/li&gt;  &lt;li&gt;Router：依赖反转（前端 BFF/Gateway）&lt;/li&gt;  &lt;li&gt;提取共同依赖作为 externals&lt;/li&gt;  &lt;li&gt;……&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[note]&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;推荐区域最初是空白的。团队绿色 JavaScript 被加载和执行。用于获取个性化推荐的 API 调用已经完成。推荐标记被呈现并且请求关联的图像。现在片段需要更多的空间，并推动页面的布局。&lt;/li&gt;  &lt;li&gt;团队红，控制页面，可以固定建议容器的高度。在响应式网站上，确定高度往往很难，因为不同的屏幕尺寸可能会有所不同。但更重要的问题是，这种队际协议在球队红绿之间产生了紧密的联系。&lt;/li&gt;  &lt;li&gt;更好的方法是使用称为骨架屏幕的技术。Team red 将green-recosSSI Include 包含在标记中。此外，团队绿色会更改其片段的服务器端渲染方法，以便生成内容的原理图版本。该骷髅标记可以重用的实际内容的布局样式的部分。这样就保留了所需的空间，实际内容的填充不会导致跳跃。    &lt;ul&gt;      &lt;li&gt;A skeleton screen is essentially a blank version of a page into which information is gradually loaded.&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;优化&quot;&gt;优化&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;对于生产成本高且难以缓存的碎片，将其从初始渲染中排除是一个好主意。浏览器异步加载。在我们的例子中green-recos，显示个性化推荐的片段就是这个候选人。&lt;/li&gt;  &lt;li&gt;在前端设计中，必须向用户呈现外观和感觉一致的用户界面。有很多页面上都出现了 UI 元素。关注的分离并不总是像后端服务一样清晰。&lt;/li&gt;  &lt;li&gt;UI 组件库    &lt;ul&gt;      &lt;li&gt;我们用微前端解决的下一个挑战是呈现一致的外观和感觉，同时也隔离风险。&lt;/li&gt;      &lt;li&gt;我们建立了一个共享组件（CSS，Font 和 JavaScript）的库。我们将这些资源托管在每个微前端可以在其 HTML 输出中引用它们的位置。每个组件库的版本都正确地对资源进行版本控制，每个微前端都指定要使用的组件库的版本。因此，CSS 和 JavaScript 不会意外地改变; 每个微前端的开发者都必须显式更新依赖关系。[/note]&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;micro-frontends--aemjquery&quot;&gt;Micro Frontends + AEM/jQuery&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;AEM (of course), which contains web content only (no structured domain data).&lt;/li&gt;  &lt;li&gt;React.js components that are hosted in AEM. AEM passes through different properties the components need e.g. ids, URLs of services.&lt;/li&gt;  &lt;li&gt;Microservices that contain the structured domain data, and that are queried by the React.js components via Ajax.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;demo-single-spa-meta-framework&quot;&gt;Demo: &lt;a href=&quot;https://single-spa.surge.sh/&quot;&gt;Single-SPA “meta framework”&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;可以在一个页面将多个不同的框架整合，甚至在切换的时候都不需要刷新页面 (支持 React, Vue, Angular 1, Angular 2, etc)&lt;/p&gt;&lt;hr /&gt;&lt;ul&gt;  &lt;li&gt;Build micro frontends that coexist and can each be written with their own framework.&lt;/li&gt;  &lt;li&gt;Use multiple frameworks on the same page without refreshing the page (React, AngularJS, Angular, Ember, or whatever you’re using)&lt;/li&gt;  &lt;li&gt;Write code using a new framework, without rewriting your existing app&lt;/li&gt;  &lt;li&gt;Lazy load code for improved initial load time.&lt;/li&gt;  &lt;li&gt;Hot reload entire chunks of your overall application (instead of individual files).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;-show-me-the-code&quot;&gt;🐒 SHOW ME THE CODE!&lt;/h1&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;singleSpa&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;single-spa&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;app1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadingFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./app1/app1.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activityFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;#/app1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;singleSpa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadingFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activityFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;singleSpa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;examples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;navbar&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./navbar/navbar.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;home&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./home/home.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;angular1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./angular1/angular1.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/angular1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./react/react.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;angular2&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./angular2/angular2.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/angular2&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;vue&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/vue/vue.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/vue&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;svelte&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/svelte/svelte.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/svelte&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;preact&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/preact/preact.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/preact&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;iframe-vanilla-js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/vanillajs/vanilla.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/vanilla&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;inferno&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/inferno/inferno.app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/inferno&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ember&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadEmberApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ember-app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/build/ember-app/assets/ember-app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/build/ember-app/assets/vendor.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/ember&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;总结与思考微前端的优缺点&quot;&gt;总结与思考：微前端的优缺点&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;优点&quot;&gt;优点&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;敏捷性 - 独立开发和更快的部署周期    &lt;ul&gt;      &lt;li&gt;开发团队可以选择自己的技术并及时更新技术栈。&lt;/li&gt;      &lt;li&gt;一旦完成其中一项就可以部署，而不必等待所有事情。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;降低错误和回归问题的风险，相互之间的依赖性急剧下降。&lt;/li&gt;  &lt;li&gt;更简单快捷的测试，每一个小的变化不必再触碰整个应用程序。&lt;/li&gt;  &lt;li&gt;有助于持续集成、持续部署以及持续交付。&lt;/li&gt;  &lt;li&gt;维护和 bugfix 非常简单，每个团队维护特定的区域。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;缺点&quot;&gt;缺点&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;开发与部署环境分离    &lt;ul&gt;      &lt;li&gt;一个复杂的开发环境&lt;/li&gt;      &lt;li&gt;有一个孤立的部署周期。&lt;/li&gt;      &lt;li&gt;需要在一个孤立的环境中运行。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;复杂的集成    &lt;ul&gt;      &lt;li&gt;隔离 js，避免 css 冲突，根据需要加载资源，在团队之间共享公共资源的机制，处理数据获取并考虑用户的良好加载状态。&lt;/li&gt;      &lt;li&gt;微前端模块之间的 Contract Testing？&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;第三方模块重叠 / 依赖冗余增加了管理的复杂性&lt;/li&gt;  &lt;li&gt;影响最终用户的体验    &lt;ul&gt;      &lt;li&gt;初始 Loading 时间可能会增加&lt;/li&gt;      &lt;li&gt;HTML 会需要服务器端的渲染&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script  &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/react/15.4.2/react.min.js&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;--持续思考&quot;&gt;💡 | 持续思考…&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513909558428.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;（变幻莫测）前端的技术选型？&lt;/li&gt;  &lt;li&gt;在 Mobile/Mobile Web 上的悖论&lt;/li&gt;  &lt;li&gt;合理划分的边界：DDD&lt;/li&gt;  &lt;li&gt;Don’t use any of this if you don’t need it&lt;/li&gt;  &lt;li&gt;软件架构到底在解决什么问题？&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;blockquote&gt;  &lt;p&gt;所谓架构，其实是解决人的问题；所谓敏捷，其实是解决沟通的问题；所谓精益，其实是在讨论如何榨干劳动力；&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;[note]&lt;/p&gt;&lt;h3 id=&quot;前端的技术选型&quot;&gt;前端的技术选型？&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;既然 React 经验不错，那为什么不推广到全公司？可能是跨 vendor 合作&lt;/li&gt;  &lt;li&gt;前端 JavaScript 框架穷出不穷，最后又出来要取代 Webpack 和 Yarn 的工具，过几个月就要重写项目？重构压力、负担大，那不如直接支持多 framework？    &lt;h3 id=&quot;在-mobilemobile-web-上的悖论&quot;&gt;在 Mobile/Mobile Web 上的悖论&lt;/h3&gt;  &lt;/li&gt;  &lt;li&gt;已经分出了不同的子页面，那何不如直接 Router 即可？    &lt;h3 id=&quot;合理划分ddd&quot;&gt;合理划分：DDD&lt;/h3&gt;  &lt;/li&gt;  &lt;li&gt;最大的挑战是搞清楚如何划分应用程序。糟糕的设计可能成为开发和维护的噩梦。主要原则是将应用程序分为不同的部分，子部分和组件。    &lt;h3 id=&quot;dont-use-any-of-this-if-you-dont-need-it&quot;&gt;Don’t use any of this if you don’t need it&lt;/h3&gt;  &lt;/li&gt;  &lt;li&gt;do not use the ideas described here until it is needed, it will make things more complex.&lt;/li&gt;  &lt;li&gt;If you are in a big company, those ideas could help you    &lt;h3 id=&quot;所谓架构其实是解决人的问题所谓敏捷其实是解决沟通的问题所谓精益其实是讨论如何榨干劳动力美其名曰减少浪费&quot;&gt;所谓架构，其实是解决人的问题；所谓敏捷，其实是解决沟通的问题；所谓精益，其实是讨论如何榨干劳动力，美其名曰减少浪费；&lt;/h3&gt;    &lt;h3 id=&quot;解决了什么问题&quot;&gt;解决了什么问题？&lt;/h3&gt;  &lt;/li&gt;  &lt;li&gt;跨团队沟通的问题    &lt;ul&gt;      &lt;li&gt;Spotify 在内部被分成小队（3-12 人）队称为小队。一个特点通常由一个小队拥有，而在正常情况下，小队拥有开发和维持其特征所需的一切。一个小队的 iOS，Android，网络和后端开发人员是很正常的。一般的想法是，每个小队都应该有自己的能力来完成自己的功能，最大限度地减少小组要求其他部门获得许可和 / 或帮助。&lt;/li&gt;      &lt;li&gt;提供了大量引进 library 的好处是少数人讨论，而不是涉及约 100 人的决定和他们的各种需求。这样一场大讨论不仅会耗费时间和精力，而且会迫使我们采用最不起眼的方法来选择 library，而不是选择专门针对每个 team 的问题领域的方案。[/note]&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;️--thank-you&quot;&gt;❤️ | Thank you!&lt;/h1&gt;&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://medium.com/@tomsoderlund/micro-frontends-a-microservice-approach-to-front-end-web-development-f325ebdadc16&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://medium.com/@_rchaves_/building-microfrontends-part-i-creating-small-apps-710d709b48b7&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; http://allegro.tech/2016/03/Managing-Frontend-in-the-microservices-architecture.html&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://technologyconversations.com/2015/08/09/developing-front-end-microservices-with-polymer-web-components-and-test-driven-development-part-55-using-microservices/&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://technologyconversations.com/2015/08/09/including-front-end-web-components-into-microservices/&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://inbox.google.com/u/1/search/microfrontend&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://inbox.google.com/u/1/search/micro%20frontend&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://medium.com/@_rchaves_/building-microfrontends-bonus-part-rewriting-an-app-with-elm-97ddce415ff4&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://m.signalvnoise.com/the-majestic-monolith-29166d022228&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://medium.com/@_rchaves_/building-microfrontends-part-v-communication-between-apps-34ae3649d610&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://medium.com/@_rchaves_/building-microfrontends-part-iv-using-cdns-tech-radar-for-consensus-7dd658c1edb7&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://medium.com/@_rchaves_/building-microfrontends-part-iii-public-path-problem-1ce823be24c9&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://medium.com/@_rchaves_/building-microfrontends-part-ii-joining-apps-together-dfa1b6f17d3e&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://www.upwork.com/blog/2017/05/modernizing-upwork-micro-frontends/&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://www.upwork.com/blog/2017/01/upwork-modernization/&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://engineering.hellofresh.com/front-end-microservices-at-hellofresh-23978a611b87&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://news.ycombinator.com/item?id=13009285&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://www.thoughtworks.com/radar/techniques/micro-frontends&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; http://www.agilechamps.com/microservices-to-micro-frontends/&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://www.tikalk.com/js/introduction-to-micro-frontends/&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://github.com/CanopyTax/single-spa&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; http://www.infoq.com/cn/news/2015/08/netflix-falcor&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; http://insights.thoughtworks.cn/frontend-future-radar/&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://blog.prototypr.io/luke-wroblewski-introduced-skeleton-screens-in-2013-through-his-work-on-the-polar-app-later-fd1d32a6a8e7&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://micro-frontends.org/&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://blog.fundebug.com/2017/08/02/micro_frontend_development/&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://www.quora.com/How-is-JavaScript-used-within-the-Spotify-desktop-application-Is-it-packaged-up-and-run-locally-only-retrieving-the-assets-as-and-when-needed-What-JavaScript-VM-is-used/answer/Mattias-Petter-Johansson&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;",
            "excerpt"    : "&lt;p&gt;[slide]&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/serverless-in-action-build-personal-reading-statistics-system",
            "title"      : "Serverless 实战：打造个人阅读追踪系统",
            "category"   : "编程",
            "tags"       : "Serverless, Reading, Aglie, PKM, GitHub, Diigo, JavaScript",
            "url"        : "/2017-06-30-serverless-in-action-build-personal-reading-statistics-system/",
            "path"       : "_posts/编程/2017-06-30-serverless-in-action-build-personal-reading-statistics-system.md",
            "next"       : "/2017-12-22-tech-radar-microfrontends-extending-microservice-to-fed/",
            "previous"   : "/2017-05-10-tech-radar-pwa-build-native-like-mobile-web-app/",
            "date"       : "2017-06-30 00:00:00 +0000",
            "shortdate"  : "June 30, 2017",
            "content"    : "&lt;h2 id=&quot;阅读习惯和个人知识管理体系&quot;&gt;阅读习惯和个人知识管理体系&lt;/h2&gt;&lt;p&gt;在互联网时代，知识可以说从未像如此一般廉价，但是&lt;strong&gt;再好的知识若是对个人没有产生价值的话，那也只不过是一种信息噪音而已&lt;/strong&gt;。我在 &lt;a href=&quot;https://blog.jimmylv.info/2015-10-09-three-types-of-knowledge/&quot;&gt;个人知识管理：知识的三种形态&lt;/a&gt; 这篇文章中使用 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;材料 -&amp;gt; 资料 -&amp;gt; 知识&lt;/code&gt;&lt;/strong&gt; 这样的路径来解释信息的流通，&lt;strong&gt;如何方便快捷并且有效地收集材料，再将其整理转化为有价值的个人知识体系结构&lt;/strong&gt;，在这个信息严重碎片化的时代变得尤为重要。而在 &lt;a href=&quot;https://blog.jimmylv.info/2016-09-16-sorting-out-knowledge-from-information/&quot;&gt;去伪存真的知识管理之路&lt;/a&gt; 一文中也详细阐述了如何将网络上的碎片化文章纳入统一的稍后阅读体系，比如说有时候在朋友圈看到一篇好文章，但暂时没时间直接看，或是这篇文章值得再读一遍，细读一遍，那么我就会将其存入稍后阅读工具即 &lt;a href=&quot;https://www.instapaper.com&quot;&gt;Instapaper&lt;/a&gt; 当中，诸如此类的还有 &lt;a href=&quot;https://getpocket.com/&quot;&gt;Pocket&lt;/a&gt;、&lt;a href=&quot;https://shouqu.me/&quot;&gt;收趣&lt;/a&gt;等等。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2016/1474027837640.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;稍后阅读永远读不完的痛点缺乏追踪&quot;&gt;稍后阅读永远读不完的痛点：缺乏追踪&lt;/h3&gt;&lt;p&gt;随着时间的推移，Instapaper 里面的文章将会变得越来越多，就像我们在代码中所注释的 &lt;code class=&quot;highlighter-rouge&quot;&gt;TODO:&lt;/code&gt; 可能就变成了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Never Do&lt;/code&gt;，稍后读也是一样地被人广为诟病：Read it Later = Read Never。其实我发现文章堆积的一个永恒痛点就是&lt;strong&gt;没有有效的方式追踪自己的阅读需求与能力，其核心原因就是因为读完的速度赶不上添加的速度&lt;/strong&gt;。从而没办法可视化出来评估自己的阅读进度，合理安排阅读计划，也就没办法给予自己适当的奖励，进而失去了阅读的动力。&lt;/p&gt;&lt;p&gt;上回博客大赛写过一篇 &lt;a href=&quot;https://blog.jimmylv.info/2016-12-04-agile-learning-based-on-github-issues/&quot;&gt;基于 GitHub 的敏捷学习方法之道与术&lt;/a&gt;，其中提到使用 GitHub Issue 来管理自己的学习计划，从而就又产生了这么一个想法，就是将我的稍后阅读列表跟 GitHub 结合起来，使用 ZenHub 丰富的图表功能将阅读体系进行追踪与可视化。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2016/1480844770670.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;可视化-cumulative-flow-diagram&quot;&gt;可视化 Cumulative Flow Diagram&lt;/h3&gt;&lt;p&gt;首先让我们直接来看一下最终的具体效果图，在这里简单介绍一下 CFD（Cumulative Flow Diagram）即累积流图，这是一种能让你快速了解项目或产品工作概况的图表，关注的是价值的流动效率，价值的流动最直接的体现就是需求卡片在各个队列中的数量。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499007659821.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;里特定律（Little’s law）告诉我们&lt;strong&gt;交付时间（Delivery time）依赖于在制品数量（Work In Progress, WIP）。WIP 是指所有已经初始但还未完成的工作，例如：所有在分析（Analysis）与完成（Done）之间的工作&lt;/strong&gt;。必须要首先留意的就是 WIP，&lt;strong&gt;如果 WIP 增加了，交付日期就会有风险。&lt;/strong&gt;ZenHub 所提供的 Release Report 中最有效果的就是&lt;strong&gt;预测完成日期&lt;/strong&gt;，总之就是跟敏捷方法结合起来，使用项目管理的方式来管理自己的阅读列表，当然其实我也在进一步的探索之中，但是每次看看到这个走势图就能对自己的阅读列表有了更多的掌控和理解，至少减少了文章堆积时所产生的焦虑感。&lt;/p&gt;&lt;h2 id=&quot;ifttt-与-serverless-架构&quot;&gt;IFTTT 与 Serverless 架构&lt;/h2&gt;&lt;p&gt;那么这背后是怎么通过 APIs 来实现的呢？当然，在真正进入正题之前我们先来简单介绍一下 Serverless 架构。Serverless 指的是在构建 Web 应用程序的时候，而不用担心如何配置服务器，但是这并不意味着应用程序不会在服务器上运行，而是说服务器的管理都可以尽可能地交给相应的云平台，从而最大程度地减轻开发人员的部署与配置工作。与之对应的一个名词可能就是 Function As a Service（FAAS），由 AWS Lambda 这个命名上就能想到，当我们在构建 Serverless 架构时，实际上我们是在写一个个的 Function 即函数而已。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/0-lambda2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;流程化apis-即服务&quot;&gt;流程化：APIs 即服务&lt;/h3&gt;&lt;p&gt;首先让我们来介绍一下 &lt;a href=&quot;https://ifttt.com/discover&quot;&gt;IFTTT&lt;/a&gt; 即 if this then that 的缩写。通俗的来讲，IFTTT 的作用就是如果触发了一件事，则执行设定好的另一件事。所谓的「事」，指的是各种应用、服务之间可以进行有趣的连锁反应。IFTTT 的宗旨是 Put the internet to work for you （让互联网为你服务）。用户可以在 IFTTT 里设定任何一个你需要的条件，当条件达到时，便会触发下一个指定好的动作。&lt;strong&gt;它就像是一座神奇的桥梁，能连接我们日常所用的各种网络服务。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499008946205.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;而我们现在遇到的这个串联式的场景下是特别合适 Serverless 架构的，使用 IFTTT 并且将它跟 Instapaper 账号绑定，&lt;strong&gt;设置文章添加、高亮、归档等行为作为 trigger 条件，然后将相关信息发到某一个指定 API endpoint。&lt;/strong&gt;先把操作 GitHub Issue 和 ZenHub 的各种 APIs 准备好，结合 IFTTT 的触发器与 Marker 工具能够非常方便地与之相集成，最后我们可以产出这样一个 APIs 交互流程图：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499010393382.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;初始化-webtask-项目&quot;&gt;初始化 Webtask 项目&lt;/h3&gt;&lt;p&gt;虽然 AWS Lambda 是 Serverless 架构的典范，但它也有一些槽点以及我觉得已经被人说得足够多了，所以我们今天就来尝尝鲜，着重介绍和使用一下 Webtask。推出该服务的这家公司 &lt;a href=&quot;https://auth0.com/&quot;&gt;Auth0&lt;/a&gt; 你可能没有听说过，但你一直知道大名鼎鼎的 JWT 即 JSON Web Token，这是一种开放标准（&lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot;&gt;RFC 7519&lt;/a&gt;），通常被运用在身份验证（Authentication）和信息交换等需要安全传输信息的场景下。&lt;/p&gt;&lt;p&gt;首先让我们来安装工具初始化项目以及&lt;a href=&quot;https://webtask.io/&quot;&gt;注册账号&lt;/a&gt;，然后使用电子邮件进行登录：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; wt-cliwt init &amp;lt;YOUR-EMAIL&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;创建项目目录，添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; 文件并添加以下内容：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Hello World&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;然后在该目录中运行以下命令进行应用程序部署之后，点击控制台中输出的 URL 就能看到编程史上最有名气没有之一的 &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld!&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wt create index&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.scotch.io/10/T0RwEO5LQWu15i3UFjKu_Screen%20Shot%202017-04-26%20at%201.27.43%20PM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;webtask-的上下文绑定&quot;&gt;Webtask 的上下文绑定&lt;/h3&gt;&lt;p&gt;Webtask 有一个实用工具 &lt;code class=&quot;highlighter-rouge&quot;&gt;webtask-tools&lt;/code&gt; 可以将应用程序绑定到 Webtask 上下文，让我们将之前所 export 的简单函数修改为绑定到 Webtask 的 Express app，然后就可以愉快地使用 Express 进行开发，一切就又回到了熟悉的味道：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Webtask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;webtask-tools&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bodyParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;body-parser&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bodyParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;urlencoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;extended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bodyParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./routes/reading&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Webtask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromExpress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Webtask context 还有一个非常重要的用途就是在部署时传输一些敏感信息比如安全 Token，从而在应用程序当中可以随时使用它们。下面的部署命令中 &lt;code class=&quot;highlighter-rouge&quot;&gt;--secret&lt;/code&gt; 后面所传入的 &lt;code class=&quot;highlighter-rouge&quot;&gt;ACCESS_TOKEN&lt;/code&gt; 都会在后续与 GitHub 和 ZenHub APIs 交互时被用到。&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wt create index &lt;span class=&quot;nt&quot;&gt;--bundle&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--secret&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;GITHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GITHUB_ACCESS_TOKEN&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--secret&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ZENHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ZENHUB_ACCESS_TOKEN&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--secret&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ZENHUB_ACCESS_TOKEN_V4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ZENHUB_ACCESS_TOKEN_V4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/reading&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GITHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ZENHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ZENHUB_ACCESS_TOKEN_V4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;webtaskContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secrets&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;使用-github-issue-追踪阅读列表&quot;&gt;使用 GitHub Issue 追踪阅读列表&lt;/h2&gt;&lt;h3 id=&quot;ifttt添加-instapaper-文章后自动创建-github-issue&quot;&gt;IFTTT：添加 Instapaper 文章后自动创建 GitHub Issue&lt;/h3&gt;&lt;p&gt;得益于 IFTTT 非常丰富的第三方服务，IFTTT 可以直接创建 Instapaper 与 GitHub Issue 相集成的 Applet：&lt;a href=&quot;https://ifttt.com/applets/54307045d-if-new-item-saved-then-create-a-new-issue&quot;&gt;If new item saved, then create a new issue - IFTTT&lt;/a&gt;，就可以在当 Instapaper 新增文章的时候，自动在 GitHub 所指定的仓库 &lt;a href=&quot;https://github.com/JimmyLv/reading/issues/&quot;&gt;Issues · JimmyLv/reading&lt;/a&gt; 中创建一个新的 Issue 并添加相应的标题、链接以及描述等相关信息。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499013190840.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;但仅仅只是添加一个 Issue 还不够，这时候还需要将这个 Issue 加入到指定的 Milestone 从而利用 ZenHub 的图表功能，使用 GitHub 的 Webhooks 功能就可以轻松帮我们把 Issue 更新的状态转发到我们所指定的 webtask 地址：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499016439751.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;使用-github-webhook-更新-issue-的-milestone&quot;&gt;使用 GitHub Webhook 更新 Issue 的 Milestone&lt;/h3&gt;&lt;p&gt;所以我们的 Webtask 就需要处理 GitHub Webhook 所转发的 POST 请求，其中包括了 Issue 的类型和内容，在拿到 &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;opened&#39;&lt;/code&gt; 即新建 Issue 类型的 action 之后我们可以对其进行相应的处理即添加到 Milestone 当中：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;opened&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;?access_token=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GITHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;PATCH&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;application/json&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;milestone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`[END] set milestone successful! &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499017955460.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;结合 ZenHub 的 Milestone 燃尽图我们可以清晰地看到剩余阅读量的多少，并且能够跟理想中的阅读速度进行对比，从而判断自己什么时候能够全部读完所有的文章。可能有些小伙伴看到这里会有所疑问了，这些所谓的 Story Point 是从哪儿来的呢？那么接下来就要提到我们将要集成的 ZenHub API 了。&lt;/p&gt;&lt;h2 id=&quot;集成-zenhub-api阅读可视化&quot;&gt;集成 ZenHub API：阅读可视化&lt;/h2&gt;&lt;h3 id=&quot;更新-issue-的估点和-release&quot;&gt;更新 Issue 的估点和 Release&lt;/h3&gt;&lt;p&gt;GitHub Issue 的任何变动都会触发 Webhook，从而我们可以在 Issue 被加入 Milestone 之后再处理下一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;milestoned&#39;&lt;/code&gt; action，即：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;milestoned&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`https://api.zenhub.io/p1/repositories/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REPO_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/issues/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/estimate?access_token=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ZENHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;PUT&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;application/json&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;estimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`[END] set estimate successful! &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`https://api.zenhub.io/v4/reports/release/591dc19e81a6781f839705b9/items/issues?access_token=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ZENHUB_ACCESS_TOKEN_V4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;          &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;application/x-www-form-urlencoded&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;          &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`add_issues%5B0%5D%5Bissue_number%5D=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;amp;add_issues%5B0%5D%5Brepo_id%5D=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REPO_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`[END] set release successful! &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;这样我们就完成了对每个 GitHub Issue 的估点，以及设置了对应的 Release，接下来所有的变动都将体现在 ZenHub 的图表当中。&lt;/p&gt;&lt;h3 id=&quot;归档-instapaper-文章后关闭-github-issue&quot;&gt;归档 Instapaper 文章后关闭 GitHub Issue&lt;/h3&gt;&lt;p&gt;说了这么多，不要忘了&lt;strong&gt;整个阅读系统最最核心的部分依然还是要「阅读」啊！&lt;/strong&gt;在众多的稍后阅读工具中我无比喜爱 Instapaper 并迟迟没有转到 Diigo 的原因就在于它优秀、简洁、纯粹的阅读体验，让人可以专注在阅读本身这件事情上，在被 Pinterest 收购之后更是将所有的诸如全文搜索、无限高亮/笔记、速读等 Premium 功能都变成了免费，岂不美哉？&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499019018150.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;那么在完成阅读归档之后，最后一步就是在 GitHub 当中将 Issue 关闭掉，但是 IFTTT 的 GitHub 服务并没有提供 close Issue 的接口，于是乎我们就只有利用 IFTTT 新推出的 Maker 自己创建一个，即 Instapaper 规划作为一个 IF trigger，然后 Maker 用于发出一个 Web 请求，可以是 GET ,PUT, POST, HEAD, DELETE, PATCH 或者 OPTIONS 之中的任何一种，你甚至还可以制定 Content Type 和 Body。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499019483077.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/reading&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GITHUB_ACCESS_TOKEN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;webtaskContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secrets&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;+&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`https://api.github.com/search/issues?q=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%20repo:jimmylv/reading`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;[RESULT]&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;          &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html_url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;?access_token=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GITHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;              &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;PATCH&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;application/json&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;              &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;closed&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`[END] issue closed successful! &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;error&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})))&lt;/span&gt;          &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Closed issue successful!&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;上述代码就可以用于处理 IFTTT Marker 所发送的 GET 请求，我们从 query 参数中取到文章标题之后再去搜索相对应的 Issues，再通过 GitHub API 将其关闭。&lt;/p&gt;&lt;p&gt;而与此同时，我们在文章的阅读过程中，有时候也会想要对文章中的亮点部分进行高亮，甚至评论自己的一些想法和总结，那我们也可以用过 IFTTT Marker 和 Webtask 的套路添加至 GitHub Issues 的 comments 当中，具体的代码就不贴了，更多内容都已经放在我的 GitHub 上：&lt;a href=&quot;https://github.com/JimmyLv/demo.serverless-mern&quot;&gt;JimmyLv/demo.serverless-mern&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&quot;总结与后续计划&quot;&gt;总结与后续计划&lt;/h2&gt;&lt;p&gt;随着时间的推移，日常你只需要在 Instapaper 添加文章、阅读文章即可，而背后利用 Serverless 所搭建的整套阅读追踪系统将会任劳任怨的帮你记录下所有的踪迹和笔记，你只需要在特定的时候定期 review、分析阅读的效果与预测效果，与此同时结合自己的时间统计系统，可以持续不断地改进自己的阅读目标与阅读计划。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499020636682.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;最后再来考虑一下后续计划，就比如说我现在只是简单把 Instapaper 中高亮部分和阅读笔记作为评论放到 GitHub 的 comments 里面，但是最终我需要把它收藏到自己的个人知识库即 &lt;a href=&quot;https://diigo.com&quot;&gt;Diigo&lt;/a&gt;，这也是可以通过 API 自动实现的，以及最终需要被刻意记忆的部分还需要与 &lt;a href=&quot;https://tinycards.duolingo.com/&quot;&gt;Tinycards&lt;/a&gt; API 相集成，对抗艾宾浩斯遗忘曲线。&lt;/p&gt;&lt;p&gt;与此同时呢，还需要把估点根据不同的文章类型和难易程度具体划分一下，而不是现在简简单单的 1 点，比如说 Instapaper 也有根据字数所预测的阅读分钟数，以及根据中文或英文、技术或&lt;del&gt;鸡汤&lt;/del&gt;等不同种类文章阅读难度进行区分，从而使整套追踪系统更具有效性与参考性。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499007659821.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;一些参考资料&quot;&gt;一些参考资料&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;https://blog.jimmylv.info/2016-12-04-agile-learning-based-on-github-issues/&quot;&gt;基于 GitHub 的敏捷学习方法之道与术 - 吕立青的博客&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://scotch.io/tutorials/build-a-serverless-mern-story-app-with-webtask-io-zero-to-deploy-1&quot;&gt;Build a Serverless MERN Story App With Webtask.io – Zero to Deploy: 1 ― Scotch&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://sspai.com/post/25270&quot;&gt;触发你的智能生活：IFTTT 入门 - 少数派&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://sspai.com/post/39243&quot;&gt;利用 IFTTT Maker DIY 你的 Applet - 少数派&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://blog.jimmylv.info/2015-10-09-three-types-of-knowledge/&quot;&gt;个人知识管理：知识的三种形态 - 吕立青的博客&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://sspai.com/post/33933&quot;&gt;用 GTD 的方法结束稍后读 - 少数派&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://blog.jimmylv.info/2016-09-16-sorting-out-knowledge-from-information/&quot;&gt;不断革新，不断改进：去伪存真的知识管理之路 - 吕立青的博客&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://xiaolvyun.baidu.com/docs/knowledge-base/788&quot;&gt;卡片状态累积流图（Cumulative Flow Diagram – CFD ） – 效率云&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;h2 id=&quot;阅读习惯和个人知识管理体系&quot;&gt;阅读习惯和个人知识管理体系&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/tech-radar-pwa-build-native-like-mobile-web-app",
            "title"      : "「技术雷达」之 PWA：Build Native-like Mobile Web App",
            "category"   : "演讲",
            "tags"       : "PWA, Web, Native, Mobile, ServiceWorker",
            "url"        : "/2017-05-10-tech-radar-pwa-build-native-like-mobile-web-app/",
            "path"       : "_posts/演讲/2017-05-10-tech-radar-pwa-build-native-like-mobile-web-app.md",
            "next"       : "/2017-06-30-serverless-in-action-build-personal-reading-statistics-system/",
            "previous"   : "/2017-04-16-lucky-business-trip-six-weeks-in-melbourne/",
            "date"       : "2017-05-10 00:00:00 +0000",
            "shortdate"  : "May 10, 2017",
            "content"    : "&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;progressive-web-applications-pwas&quot;&gt;Progressive Web Applications (PWAs)&lt;/h1&gt;&lt;h2 id=&quot;build-native-like-mobile-web-app&quot;&gt;Build Native-like Mobile Web App&lt;/h2&gt;&lt;p&gt;&lt;small&gt;via &lt;strong&gt;Jimmy Lv&lt;/strong&gt;&lt;/small&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;iframe id=&quot;preview&quot; style=&quot;height: 600px;&quot; frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;100%&quot; src=&quot;https://lecture.jimmylv.info/assets/2017-05-10-tech-radar-pwa-build-native-like-mobile-web-app.pdf&quot;&gt;&lt;/iframe&gt;",
            "excerpt"    : "&lt;p&gt;[slide]&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/lucky-business-trip-six-weeks-in-melbourne",
            "title"      : "幸运出差之旅：在墨尔本的 6 Weeks",
            "category"   : "生活",
            "tags"       : "Melbourne, 出差, 滤镜",
            "url"        : "/2017-04-16-lucky-business-trip-six-weeks-in-melbourne/",
            "path"       : "_posts/生活/2017-04-16-lucky-business-trip-six-weeks-in-melbourne.md",
            "next"       : "/2017-05-10-tech-radar-pwa-build-native-like-mobile-web-app/",
            "previous"   : "/2017-03-16-atomic-design-with-react-workshop-01/",
            "date"       : "2017-04-16 00:00:00 +0000",
            "shortdate"  : "April 16, 2017",
            "content"    : "",
            "excerpt"    : ""
		} ,
	
		{
            "id"         : "/atomic-design-with-react-workshop-01",
            "title"      : "「React 系列 Workshop 01」之 Atomic Design with React",
            "category"   : "演讲",
            "tags"       : "React, AtomicDesign, CDD, FP",
            "url"        : "/2017-03-16-atomic-design-with-react-workshop-01/",
            "path"       : "_posts/演讲/2017-03-16-atomic-design-with-react-workshop-01.md",
            "next"       : "/2017-04-16-lucky-business-trip-six-weeks-in-melbourne/",
            "previous"   : "/2017-02-20-gtd-best-practice-137/",
            "date"       : "2017-03-16 00:00:00 +0000",
            "shortdate"  : "March 16, 2017",
            "content"    : "&lt;blockquote&gt;  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nodeppt start -w&lt;/code&gt; by &lt;a href=&quot;https://github.com/ksky521/nodePPT&quot;&gt;ksky521/nodePPT&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;atomic-design-with-react&quot;&gt;Atomic Design with React&lt;/h1&gt;&lt;p&gt;Total Time: 2 hours&lt;/p&gt;&lt;p&gt;via &lt;strong&gt;JimmyLv&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;0--env-setup&quot;&gt;0. 💻 Env Setup&lt;/h1&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;reminder/reading material in invitation mail&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;join wechat group to share info easily&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:JimmyLv/atomic-design-react-workshop.gitcd atomic-design-react-workshopyarn install &amp;amp;&amp;amp; yarn start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;-唠嗑唠嗑&quot;&gt;🐵 唠嗑唠嗑&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;不讲什么：Webpack/ES6/Styling/Linter&lt;/li&gt;  &lt;li&gt;脚手架：&lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;react-app-stencil&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;观念在先，实战为王 🔨&lt;/li&gt;  &lt;li&gt;Pair Programming 👬&lt;/li&gt;  &lt;li&gt;Parking Lot 🅿️&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;️-agenda&quot;&gt;⏲️ Agenda&lt;/h1&gt;&lt;ol&gt;  &lt;li&gt;Atomic Design (15 mins)&lt;/li&gt;  &lt;li&gt;React Basic: FP、JSX、V-DOM (25 mins)&lt;/li&gt;  &lt;li&gt;Component-Driven Development (20 mins)&lt;/li&gt;  &lt;li&gt;Component’s State &amp;amp; Lifecycle (20 mins)&lt;/li&gt;  &lt;li&gt;Refactoring to ES6+ (remaining times…)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;1-️-atomic-design-15-mins&quot;&gt;1. 🏗️ Atomic Design (15 mins)&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;whats-atomic-design&quot;&gt;What’s Atomic Design？&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://atomicdesign.bradfrost.com/chapter-2/&quot;&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489580083893.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;table&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;demo: [Pattern Lab&lt;/td&gt;      &lt;td&gt;Build Atomic Design Systems](http://patternlab.io/)&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;-practice-01&quot;&gt;🔨 Practice 01&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489561356582.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;-components-tree&quot;&gt;🌲 Components Tree&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489635396524.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;-rethink&quot;&gt;💡 Rethink?&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;Presentational components&lt;/li&gt;  &lt;li&gt;Container components&lt;/li&gt;  &lt;li&gt;Transactional components&lt;/li&gt;  &lt;li&gt;Micro Front-Ends&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://andrewhfarmer.com/react-ajax-best-practices/img/container-components.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;2--react-basic-25-mins&quot;&gt;2. 📖 React Basic (25 mins)&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;JSX&lt;/li&gt;  &lt;li&gt;VirtualDOM&lt;/li&gt;  &lt;li&gt;Functional/Stateless Components&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489660500667.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;-dom-tree---functions&quot;&gt;🌲 DOM Tree -&amp;gt; Functions&lt;/h1&gt;&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;I am footer!&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;jsx-xml-in-javascript&quot;&gt;JSX (XML in JavaScript)&lt;/h1&gt;&lt;p&gt;In&lt;/p&gt;&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;avatar.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;profile&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr /&gt;&lt;p&gt;Out&lt;/p&gt;&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;    &lt;span class=&quot;s2&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;img&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;avatar.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;profile&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;      &lt;span class=&quot;s2&quot;&gt;&quot;h3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;virtual-dom&quot;&gt;Virtual DOM&lt;/h1&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DeleteAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;p&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Are you sure?&#39;&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;danger&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Yep&#39;&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;blue&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Cancel&#39;&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489564943831.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489635877830.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;--virtual-dom-objects&quot;&gt;() =&amp;gt; Virtual DOM Objects&lt;/h1&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DeleteAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;p&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Are you sure?&#39;&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;danger&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Yep&#39;&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;blue&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Cancel&#39;&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;functionalstateless-components&quot;&gt;Functional/Stateless Components&lt;/h1&gt;&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DeleteAccount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Are you sure?&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;danger&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Yep&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;blue&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;3--cdd-20-mins&quot;&gt;3. 🏃 CDD (20 mins)&lt;/h1&gt;&lt;p&gt;“Visual TDD”: Component-Driven Development&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;component-driven-development&quot;&gt;Component-Driven Development&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.hichroma.com/component-driven-development-ce1109d56c8e#.68tcwmv7p&quot;&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*YUVIg5jdB-pUUszWhTkgdw.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;  &lt;li&gt;Focus development {:&amp;amp;.moveIn}&lt;/li&gt;  &lt;li&gt;Increase UI coverage&lt;/li&gt;  &lt;li&gt;Target feedback&lt;/li&gt;  &lt;li&gt;Build a component library&lt;/li&gt;  &lt;li&gt;Parallelize development&lt;/li&gt;  &lt;li&gt;Test visually&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1488610496651.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[note]tdd components，即 data 如何对应到 view; tdd business logic，即 event 如何对应到 state[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;storybook&quot;&gt;Storybook&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://airbnb.io/react-dates/&quot;&gt;&lt;img src=&quot;https://getstorybook.io/static/media/demo.f13d28a7.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;-practice-02&quot;&gt;🔨 Practice 02&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489581902209.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;ul&gt;  &lt;li&gt;type:&lt;code class=&quot;highlighter-rouge&quot;&gt;primary&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;danger&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;dashed&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;color: &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;white&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;red&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;border&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;onClick: &lt;code class=&quot;highlighter-rouge&quot;&gt;console.info()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;alert()&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489635512260.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;4--state--lifecycle-20-mins&quot;&gt;4. 🐒 State &amp;amp; Lifecycle (20 mins)&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;reactcomponent&quot;&gt;React.Component&lt;/h1&gt;&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Contacts&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// React Component instance&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Contacts&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;lifecycle&quot;&gt;Lifecycle&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://rawgit.com/rkendall/visible-react/master/demo/dist/demo.html&quot;&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489566393031.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;-practice-03&quot;&gt;🔨 Practice 03&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://codepen.io/gaearon/pen/amqdNA?editors=0010&quot;&gt;Clock component&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;new Date().toLocaleTimeString(locales,options)&lt;/code&gt; with timeZone&lt;/p&gt;&lt;iframe height=&quot;265&quot; scrolling=&quot;no&quot; title=&quot;Hello World in React&quot; src=&quot;//codepen.io/gaearon/embed/amqdNA/?height=265&amp;amp;theme-id=0&amp;amp;default-tab=result&amp;amp;embed-version=2&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; style=&quot;width: 100%;&quot;&gt;&lt;/iframe&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;state-vs-props&quot;&gt;State vs Props&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/state-and-lifecycle.html#converting-a-function-to-a-class&quot;&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489566510269.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;5-refactoring-to-es6-remaining-times&quot;&gt;5. Refactoring to ES6+ (remaining times…)&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;https://babeljs.io/blog/2015/06/07/react-on-es6-plus&quot;&gt;React on ES6+ · Babel&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.reactnativeexpress.com/es6&quot;&gt;React Native Express - ES6&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;-homework&quot;&gt;📑 Homework&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.suncorp.com.au/insurance/car.html&quot;&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489581432456.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;thanks--qa&quot;&gt;Thanks,  Q&amp;amp;A❓&lt;/h1&gt;",
            "excerpt"    : "&lt;blockquote&gt;  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nodeppt start -w&lt;/code&gt; by &lt;a href=&quot;https://github.com/ksky521/nodePPT&quot;&gt;ksky521/nodePPT&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;"
		} ,
	
		{
            "id"         : "/gtd-best-practice-137",
            "title"      : "《搞定》最佳实践：如何利用滴答清单（TickTick）实践 GTD 理念？",
            "category"   : "思考",
            "tags"       : "GTD, 最佳实践, 效率, 目标, 产品, 工具",
            "url"        : "/2017-02-20-gtd-best-practice-137/",
            "path"       : "_posts/思考/2017-02-20-gtd-best-practice-137.md",
            "next"       : "/2017-03-16-atomic-design-with-react-workshop-01/",
            "previous"   : "/2017-01-21-personal-growth-infrastructure/",
            "date"       : "2017-02-20 00:00:00 +0000",
            "shortdate"  : "February 20, 2017",
            "content"    : "&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;引子：What’s the Target? 人们总是说凡事都要有个目标，而 GTD 里面对目标的定义为第 3 楼视野，即「拟实现的中期至长期结果（通常在3~24个月内）」，可能有童鞋就会好奇了，为什么这里会有一个 3 楼呢？那是因为作者将我们个人/组织对事务所作出的承诺，以及拥有的想法总结成了 6 层关注视野：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;0 楼即地面视野：下一步行动&lt;/li&gt;  &lt;li&gt;1 楼视野：项目&lt;/li&gt;  &lt;li&gt;2 楼视野：重点及责任范围&lt;/li&gt;  &lt;li&gt;3 楼视野：目标&lt;/li&gt;  &lt;li&gt;4 楼视野：展望&lt;/li&gt;  &lt;li&gt;5 楼视野：目标和原则&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;那么，我的一个中期目标就是掌握 GTD 方法，并能够在生活、工作、学习当中能够灵活运用该方法妥善处理自己周遭的各类事务。这类方法论对于个人提升是非常重要的，作为一种&lt;strong&gt;个人成长基础设施&lt;/strong&gt;（&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/88&quot;&gt;Personal Growth Infrastructure&lt;/a&gt;），可谓越早掌握越能够发挥作用，「复利」效应显著（可视为 &lt;strong&gt;4 楼视野：展望&lt;/strong&gt;）。自然而然，对 GTD 这个主题的理论和实践，我期望来一场彻彻底底的重新学习，再也不要道听途说，学习一定要讲究&lt;strong&gt;全面&lt;/strong&gt;和&lt;strong&gt;准确&lt;/strong&gt; （via: &lt;a href=&quot;http://taobaofed.org/blog/2016/03/23/the-growth-of-front-end/&quot;&gt;一个前端的自我修养&lt;/a&gt;），并且寻找最原始的材料，直接了当地亲自理解原始作者的意图。&lt;/p&gt;&lt;p&gt;然后，我就有了这样一个 &lt;strong&gt;项目视野（1 楼）&lt;/strong&gt;，即 GitHub 当中的一个 Issue ：&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/137&quot;&gt;系统性学习 GTD：《如何利用滴答清单（TickTick）做 GTD？》 · Issue #137&lt;/a&gt;，然后产出了一系列的 TODOs（下一步行动），即&lt;strong&gt;地面视野&lt;/strong&gt;：&lt;/p&gt;&lt;ul class=&quot;task-list&quot;&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;阅读原著&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/136&quot;&gt;《搞定1:无压工作的艺术》 · Issue #136&lt;/a&gt;&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;对比滴答清单（@TickTick）与其他工具 &lt;a href=&quot;https://en.todoist.com/&quot;&gt;Todoist&lt;/a&gt;、奇妙清单（Wunderlist）、Any.do&lt;/li&gt;  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;输出一篇自己的文章《如何利用滴答清单（TickTick）做 GTD？》&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;why-滴答清单&quot;&gt;Why 滴答清单？&lt;/h2&gt;&lt;p&gt;首先，滴答清单（@TickTick）是如何被纳入我的 GTD 工具集呢？这个问题的隐含结果有二：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;我已经选择了滴答清单，并且付费为高级用户一年，但目测已经托付终身，😂。&lt;/li&gt;  &lt;li&gt;滴答清单只是 GTD 工具集当中的一员，GTD 是方法论，更是一种生活态度，何必局限于工具？&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;  &lt;p&gt;对于那些可以付诸行动的事务，你则需要：一个项目清单、一个保存项目规划和资料的存储系统、一个日程表、一个下一步行动清单，以及一个等待清单（清单中包含的内容是那些等待别人完成的任务）。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;滴答清单作为一款清单产品，「列表 + 提醒」是其最最最基础的功能，可以说是已经做到了极致。而我下面再来安利一番它们家其他我所看重的点，排名不分先后、不分免费/付费：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;滴答清单最初名为 TickTick，实际上是国内（杭州）团队作品，「先海外后国内」的战略。衍生出来的好处就有：    &lt;ul&gt;      &lt;li&gt;与 @微信 深度集成，关注服务号后可直接转发微信消息至滴答清单收集箱，爽！&lt;/li&gt;      &lt;li&gt;有官方的 Q&amp;amp;A 网站，上边儿既有中文又有英文，有任何技术/需求问题都可以尝试中/英搜索。&lt;/li&gt;      &lt;li&gt;技术支持或者提反馈的时候会有国人跟你直接中文交流，我上次提了个 iOS URL Scheme 的需求，对方态度很好。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;滴答清单是一款全端产品，涵盖了 Web、macOS、iOS、Chrome 插件乃至以后可能会入手的 App Watch 上面也有 App，唯一的遗憾可能就是没有 API，也就没法集成 IFTTT，但我也有办法解决这类自动化需求，后文细说。&lt;/li&gt;  &lt;li&gt;滴答清单能跟 Siri 集成，也就意味着当你没法空出手的时候可以直接对着手机说：“Hey Siri，提醒我明天晚上到家之后打扫卫生。” 这样的一句话能被自动识别出时间、地点、事务，并且纳入万能的收集箱，这就使得自己不会被脑海里的任何想法打断当前在做的事情，比如正在削苹果的双手。    &lt;ul&gt;      &lt;li&gt;这里没有举「敲代码的双手」这样一个例子是因为，如果在电脑上我可以使用快捷键打开滴答清单的 mini 窗口通过打字的方式&lt;strong&gt;捕获&lt;/strong&gt;想法。&lt;/li&gt;      &lt;li&gt;而滴答清单 App 里面也集成了讯飞语音，但是应用场景就自然没有全局的 Siri 来得方便，而且若是已经在 App 内部时，自然而然得会去使用键盘上的讯飞语音输入法，也是属于全局优先和习惯优先。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;「简约而不简单」是我对滴答清单至高的评价，若是一款产品能做到如处这般，理应付费。    &lt;ul&gt;      &lt;li&gt;滴答清单的设计风格非常简洁，但其文件夹+清单+标签+优先级…的组织方式又那么井井有序，此乃「简约」的力量，看起来就很爽。&lt;/li&gt;      &lt;li&gt;而「不简单」往往体现在各种贴心的小细节当中，比如语义化智能识别输入的内容、可设置提醒时间段与多次提醒、重复方式是周期性还是完成式提醒、任务完成进度条、「今天」列表快速计划（类 Any.do），值得细细体味与发现。&lt;/li&gt;      &lt;li&gt;在 App 之外，还有 3D Touch 跟 Widget 的配合使用用于快速输入与查看任务；与日历的集成也能够减少多 Apps 之间的切换，在统一的日程表里面可视化出来，并且能够分 3 日或按周、按月查看，然后竟然还能通过拖拽的方式进行日常安排。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;滴答清单还集成了回顾与统计功能，这就如游戏当中的成就系统一般，令人自豪与着迷。    &lt;ul&gt;      &lt;li&gt;等级制，Level.11 出神入化（风云变幻，不改初心），「你比 99% 的用户更勤奋」。&lt;/li&gt;      &lt;li&gt;数据统计与完成曲线，量化自我的又一项伟大指标，还有历史完成总数让人感受到「水滴石穿、日积月累」的神奇力量。&lt;/li&gt;      &lt;li&gt;Web 端还有了一个还在 Beta 的「摘要」功能，可以帮助了解和总结一段时间内的任务完成情况，用于&lt;strong&gt;每周回顾&lt;/strong&gt;是再好不过了，而每日回顾则可以查看「已完成」清单，我每回都是截图至 @格志日记 当中。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;集成-gtd-流程&quot;&gt;集成 GTD 流程&lt;/h2&gt;&lt;p&gt;GTD 简单来说就分为 &lt;strong&gt;5 个阶段&lt;/strong&gt;：捕获（收集）、理清、整理、行动、回顾，以往的我都只是从字面上来理解其中的意义，看完了整本书才知晓其中更深处的奥秘。&lt;/p&gt;&lt;p&gt;首先需要表态的一个前提就是「你的大脑并不总是那么管用」，&lt;strong&gt;大脑所擅长的是思考而不是记忆&lt;/strong&gt;，只有当我们拥有了一个完全可信赖的记忆系统（即外脑），能够跟进一切&lt;strong&gt;已承诺（无论对外还是内心）&lt;/strong&gt;的未竟之事，就不会再让我们的思维过程受阻。在通常情况下，你对一些事情总是念念不忘，这是因为你希望它们的状况能有所改善，但是：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;你还没有明确地认定它们的预期结果是什么。&lt;/li&gt;  &lt;li&gt;你还没有确定你下一步的具体行动到底是什么。&lt;/li&gt;  &lt;li&gt;你还没有把关于预期结果和即将采取行动的提示信息存入你所依赖的系统中去。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;GTD 的核心观点就是「在任何时候，都做到既高效又放松」，所以我们就要来回答以下三个问题：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;如何做到放松？——清空&lt;/li&gt;  &lt;li&gt;如何做到高效？——下一步行动&lt;/li&gt;  &lt;li&gt;如何保证高效和放松能够持续进行？——回顾&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&quot;收集&quot;&gt;收集&lt;/h3&gt;&lt;p&gt;如何做到「放松」的奥妙就在于&lt;strong&gt;百分之百、百分之百、百分之百&lt;/strong&gt;得收集，也就是捕获脑袋里&lt;strong&gt;所有、任何、一切&lt;/strong&gt;的想法，将事情可视化到外部的记忆系统当中去，才让大脑用来思考，用来做真正有意义、有创造力的事情。&lt;/p&gt;&lt;p&gt;前面也有提到，滴答清单的收集功能非常强大，但是功能归功能，脱离实际应用场景也白搭，只有在任何场景下都能够快速收集任何想法，所谓收集工具的功能才有价值：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#mobile&lt;/code&gt; 微信聊天：@佳佳 说「我们明天一起去看爱乐之城吧！」 =&amp;gt; 我只需要选中该消息，选择更多即可快速转发至滴答清单服务号。（已关闭服务号的消息通知，就不用看到头像角标导致多点一次的操作。）&lt;/li&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#outside&lt;/code&gt; 走在路上：马路边一定要注意车辆，不要低头看手机，总之就是在不好打字的场景下，但是却戴着耳机的时候就直接按下🎧通话按钮呼叫 Siri 即可。&lt;/li&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#home&lt;/code&gt; 洗澡/洗漱时：这个时候双手没空不能打字，而且家里不像办公室没有其他人，自然就可以大喊「Hey Siri，提醒我晚上去拿干洗完的衣服/去品优超市取快递」（仅仅举个例子，如果是十分钟之后要去晒衣服的话就直接让 Siri 倒计时就更来得实用。）&lt;/li&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#mac&lt;/code&gt; 敲代码/写作：总之就是不要离开当前正在做的事情，凡是在电脑上效率自然更高，直接 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd+Ctrl+Shift+L&lt;/code&gt; 快捷呼出滴答清单的 mini 小窗口添加任务即可，纯手打脑海中的任何想法或者复制粘贴看到的任何语句、网址都是神速。&lt;/li&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#meeting&lt;/code&gt; 思维神游：这时候就会有一个限制即不能说话，这时候就可以打开手机直接在 Dock 栏 3D Touch 重按滴答清单的图标快捷选择添加任务，以&lt;del&gt;最快的&lt;/del&gt;打字速度输入想法即可。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;根据上述场景的描述，这也就是我为什么更倾向于用「捕获」想法而不是「收集」想法的原因，收集可能会有两层意思，「收」和「集」，但是归拢到一起，其实并不是「捕获」想法这个阶段所做的事情。况且为什么要把想法「捕获」的原因很大程度上是因为不想让它干扰正在做的事情，从而对大脑造成记忆上的负担。&lt;/p&gt;&lt;h3 id=&quot;理清&quot;&gt;理清&lt;/h3&gt;&lt;p&gt;那么如何做到「高效」呢？下一步行动即 &lt;strong&gt;Next Action&lt;/strong&gt; 就是连接「放松思想」和「实现高效」之间的关键桥梁，大有文章可言。不如这样，我们就从这个已成事实的下一步行动往回倒推来看看，即「下一步行动是如何产生的呢？」&lt;/p&gt;&lt;p&gt;在一天的各种场景当中，相信滴答清单的收集箱里面已经收集到了各种东西，这些东西可能是想法、事实、承诺，总之都只能算作是一种原始材料。&lt;strong&gt;收集箱只是一个处理问题的站点，而不是一个存储容器。&lt;/strong&gt;回想一下你的邮箱收件箱为什么会堆满了各种邮件，茫茫之中怎么也找不到自己想要的东西；再看看你的印象笔记，是不是保存的文章就再也没拿出来看过。&lt;/p&gt;&lt;p&gt;你需要的是对其每一项进行逐个得「理清」，基本原则有三：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;首先处理工作篮中最上面的事务（即「后进先出」）；&lt;/li&gt;  &lt;li&gt;一次一事；&lt;/li&gt;  &lt;li&gt;永远不要把事务再次放回工作篮。&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：你做出的每个或大或小的决定都会在一定程度上消耗你的脑力。决定对某个电子邮件或任何其他事物“不做决定”，这本身就是一个决定，这会耗费你的精力。（这在《自控力》那本书中也有提到。）&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1487349413061.png&quot; width=&quot;650&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;整理&quot;&gt;整理&lt;/h3&gt;&lt;p&gt;一图胜千言，从上述的理清过程流程图就可以看出，理清某个想法的结果只有两种情况：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;&lt;strong&gt;在两分钟之内已经「立即执行」了下一步行动&lt;/strong&gt;（看完整本书即便是只学会了「两分钟原则」那也是极好的，😁）&lt;/li&gt;  &lt;li&gt;&lt;strong&gt;根据具体情况被存入相对应的清单列表&lt;/strong&gt;（除去「垃圾箱」以外）：    &lt;ul&gt;      &lt;li&gt;「项目」文件夹（包含多个具体项目清单，比如装修）&lt;/li&gt;      &lt;li&gt;「日程表」（延迟执行，但只包含「当天不做会死」的事情）&lt;/li&gt;      &lt;li&gt;「下一步行动」（并打上最佳执行情境的具体标签，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;#mac&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;#outside&lt;/code&gt;）&lt;/li&gt;      &lt;li&gt;「等待他人」（思考自己是不是执行行动的最佳人选？）&lt;/li&gt;      &lt;li&gt;「将来/也许」（有待酝酿，在定期回顾时纠正方向）&lt;/li&gt;      &lt;li&gt;「参考资料」（使用 Diigo 代替而不是滴答清单）&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1487935175181.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;行动&quot;&gt;行动&lt;/h3&gt;&lt;p&gt;新的一天又开始了，首先映入眼帘（需要关注）的是「日程表」， macOS 端的滴答清单提供了周视图与月视图，iOS 端则提供了更好用的 3 日视图与周视图，进一步验证了不同情境下（&lt;code class=&quot;highlighter-rouge&quot;&gt;#mac&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;#phone&lt;/code&gt;）的关注视野应当不同。我们能够看到最近几天会有哪些已被安排的会议（关联 Google Calendar，公司会议一览无余）、以及以前安排好的「今天不做会死」的事情。&lt;/p&gt;&lt;p&gt;说到安排时间，其实这儿有一个精妙的「预计时」的概念，这是在我使用计时系统（Toggl）一段时间过后的一个深刻心得：即&lt;strong&gt;完美自律的人会知晓未来某时段自己在做什么，只要被计划的行动被具体实施，该时间段的记录就已然确定，也就是说「计时无用，无须计时」&lt;/strong&gt;。在滴答清单的日历界面中，还有一个用户体验爆棚的功能，即可以将右侧清单中的任务直接拖拽到日历当中，iOS 端甚至可以直接通过拉伸从而控制时间段的长短。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499671064550.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;再多提一嘴，我特意废弃了滴答清单所提供的「今天」清单，因为一旦有了「今天」这个概念，就反而会让人忽略「下一步行动」这个清单，误以为「今天」（隐喻着「今天的事情最紧急」）清单列表里的事情是今天最值得做的，一旦有了期限，就又有了压力。&lt;/p&gt;&lt;p&gt;而在执行阶段，个人信奉两个最佳实践：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;&lt;strong&gt;选择最合适的行动&lt;/strong&gt;（根据情境（即&lt;code class=&quot;highlighter-rouge&quot;&gt;#标签&lt;/code&gt;、有多少时间、有多少精力、重要性）&lt;/li&gt;  &lt;li&gt;&lt;strong&gt;专注当下&lt;/strong&gt;（结合番茄工作法，并提前计划番茄个数 &lt;code class=&quot;highlighter-rouge&quot;&gt;🍅*2&lt;/code&gt;）&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&quot;回顾&quot;&gt;回顾&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;一个完善的系统，将形成一个良性循环：你建立的系统越完备，你就越信赖它；你越信赖它，你就越有坚持运行这个系统的内在动力，而每周回顾则是保持系统完善性的关键步骤。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;于我而言，回顾是我认为在整个敏捷开发中最为有效的一项实践，任何行为做得不好并没有关系，只要在迭代结束时能有所回顾与反思，那必然就能够有所改善与提高。同理而言，GTD 中的回顾也是一种保证高效和放松能够持续进行的手段。&lt;/p&gt;&lt;p&gt;目前来说，我会在 @格志日记 中做每日回顾，其中的内容会包括：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;在 @滴答清单中已完成的任务（顺手回顾一下要做的事情，以便于清空收集箱与进行雷达扫描般的查漏补缺。）&lt;/li&gt;  &lt;li&gt;在 @好样 里面已完成的习惯（这会在后文中的奖励系统中详细解释其作用。）&lt;/li&gt;  &lt;li&gt;在 @Toggl 中所记录的有效项目（即 GitHub Issue 的进行时间）&lt;/li&gt;  &lt;li&gt;在 @挖财 中所记录的今日账单&lt;/li&gt;  &lt;li&gt;在 @有道词典 中所记忆的单词&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;而所谓周回顾，目前是使用了滴答清单还在 Beta 之中的「摘要」功能，能够根据时间段、清单列表直接生成相对应的内容，其中还可以包含每条任务的完成进度、完成时间与具体详情；与此同时来瞅一眼「将来/也许」清单中的事情吧，要知道那些可能才是自己真正想做却从未开始的事情，思考一下你的 5 楼视野：目标和原则。&lt;/p&gt;&lt;h2 id=&quot;集成敏捷学习&quot;&gt;集成敏捷学习&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;如果手头的事情需要一系列的行动才能实现它的目标或结果，你就可以将其视为一个项目并将它列入“项目”清单中。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;作者将上述的几个阶段称之为横向管理工作流程，横向控制是把你涉及的所有行动都管理起来，保证毫无遗漏地加以执行。这就好像是一部进行不间断、全方位扫描的雷达，它的对象是一天里任何一件能够吸引你关注的事项。&lt;/p&gt;&lt;p&gt;那么既然有了横向就必然会有纵向，而纵向控制则是对每个具体主题或项目进行思考和协调，激发自己大脑的活力，对某个特定事务进行深入的思考和大胆的想象。结合之前所写的&lt;a href=&quot;https://blog.jimmylv.info/2016-12-04-agile-learning-based-on-github-issues/&quot;&gt;基于 GitHub 的敏捷学习方法之道与术&lt;/a&gt;一文中所提到的 GitHub Issue 来看，对 Issue 最好的一个定位即是 GTD 当中的「项目」这一 level，所以我将 &lt;code class=&quot;highlighter-rouge&quot;&gt;ISSUE_TEMPLATE&lt;/code&gt; 改成了以下内容，堪称对「项目」进行分析的最佳套路：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1487938458493.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;而对于 GitHub 当中的 Issue 即项目们，就继续保持敏捷学习方法论中的那一套实践，这也就避免了鸡毛蒜皮的事情都会往 GitHub 上面放的问题。以项目为最小颗粒度的把握也刚好值得被 Toggl 计时与分析，我只需要保证实施该项目的过程中能够有所收获，并且只要我今天记录了时间，那么当天有价值的时间长短也就能够被衡量。如此以来，还可以避免「全天计时」的繁琐与疲乏，那些鸡毛蒜皮的 Basic Life 时间就随他去吧，只有完整（🍅）的时间专注在项目上才更凸显价值，一天永远只有 24 小时，只要 Toggl 中所记录的项目时间足够长，那自然是需要从 Basic Life 当中节省出来一部分才能达到的。&lt;/p&gt;&lt;p&gt;另外介绍一个小技巧，即使用 IFTTT 自动将 GitHub 中被 assigned 到自己身上的 Issue 同步到 iOS 的备忘录，从而滴答清单能够自动获取到目前正在进行的 Issue 内容，详见：&lt;a href=&quot;https://ifttt.com/applets/140545p&quot;&gt;Keep track of your assigned GitHub issues in iOS Reminders.&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;完美奖励机制&quot;&gt;完美奖励机制&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://static.wdjimg.com/gaea/c4729ace5aef3eb624695760ffe87aa8.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;得益于 &lt;a href=&quot;https://itunes.apple.com/cn/app/steppy-pants/id1094138419?l=en&amp;amp;mt=8&quot;&gt;Steppy Pants&lt;/a&gt; 这样一款魔性的游戏，偶然间我发现其奖励机制设计得非常巧妙，让人玩得简直停不下来。大体上来说，这款游戏在短、中、长期各个阶段都有着不同的激励手段：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;短期：每一步都有着即时的反馈，而且每 20 m 有着一个 checkpoint，坚持完成即可。&lt;/li&gt;  &lt;li&gt;中期：最高记录与总金币，每每都想破一下自己的最高记录，但难度会随着时间变得越来越高。&lt;/li&gt;  &lt;li&gt;长期：这时就将视野拉长，即无所谓你一次性走了多久，只要往前走就能够积累总里程，宛如人生的意味。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;与此同时，在整个游戏中所获得的金币还可以拿来买衣服套装和复活（可视为道具），从而从侧面进一步巩固了坚持玩下去的动力，其关键在于辅助作用，即获得金币是为了更好得玩下去。&lt;/p&gt;&lt;p&gt;将其对应到我们的敏捷学习方法当中来，也可以设计同样有效的奖励机制：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;短期：以每个 🍅 为短期目标，只要（严格地）坚持 25 mins 就能获得一个 checkpoint。&lt;/li&gt;  &lt;li&gt;中期：最高记录可以设置为当日最高 🍅 数，诱惑自己能够不断突破自我，获得（积分^n）奖赏。&lt;/li&gt;  &lt;li&gt;长期：在记录番茄的同时，Toggl 所记录的总时间就算是在实践「一万小时理论」，完美！&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;当然，我们也可以设计一套”功利“的奖惩方式，即在 @好样 里面所记录的习惯可以用于积分，比如累计满了 2888 积分过后，便可以给自己奖励一个 iPad mini，用于更方便得看书和阅读，以辅助自己能够更好地坚持下去；或者是玩游戏，需要耗费 100 积分来换取，这时往往就会特心疼而选择犹豫吧，或者事后扣分再后悔也已经来不及了。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1487943710818.png&quot; width=&quot;650&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;&lt;p&gt;接触和使用滴答清单已经很长时间了，最终用于实践 GTD 方法论时个人认为比较有突破性的使用方法会有：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;Siri -&amp;gt; 收集箱&lt;/li&gt;  &lt;li&gt;情境 -&amp;gt; Tags&lt;/li&gt;  &lt;li&gt;参考资料 -&amp;gt; Diigo&lt;/li&gt;  &lt;li&gt;项目 -&amp;gt; GitHub Issue&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;只有足够「项目」size 的任务才可以被纳入 GitHub Issues，从而使得 TickTick 能够完美地与之前的敏捷学习系统相结合，这是我最开心的地方，而且让我找到了 &lt;strong&gt;番茄工作法&lt;/strong&gt; 和 &lt;strong&gt;Toggl 计时&lt;/strong&gt; 在整个流程中的位置，即 &lt;strong&gt;专注当下&lt;/strong&gt; 与 &lt;strong&gt;辅助回顾&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;最后给 GTD 实践相关的辅助工具集（未含 @滴答清单）来张合照吧，😁&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1487340269101.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;https://m.igetget.com/share/audio/aid/7SoGZTaLlcqvVLze4tvf&quot;&gt;得到｜成甲说书:搞定 - 25 分钟音频（推荐）&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.360doc.com/content/10/0314/21/59380_18784953.shtml&quot;&gt;尽管去做：无压工作的艺术 GTD洋葱修订奇客审核中文版下载&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/lifesinger/blog/issues/102&quot;&gt;互联网时代的时间管理实践 · Issue #102 · lifesinger/blog&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://gettingthingsdone.com/&quot;&gt;David Allen’s Getting Things Done® Methodology&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/04/1491614932473.png&quot; alt=&quot;GTD Flow&quot; /&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/personal-growth-infrastructure",
            "title"      : "个人成长基础设施：纪念那些年我折腾过的各种…",
            "category"   : "思考",
            "tags"       : "插件, 程序员, 成长",
            "url"        : "/2017-01-21-personal-growth-infrastructure/",
            "path"       : "_posts/思考/2017-01-21-personal-growth-infrastructure.md",
            "next"       : "/2017-02-20-gtd-best-practice-137/",
            "previous"   : "/2017-01-10-wechat-app-with-business-and-technology-01/",
            "date"       : "2017-01-21 00:00:00 +0000",
            "shortdate"  : "January 21, 2017",
            "content"    : "&lt;h2 id=&quot;硬件软件篇-121&quot;&gt;硬件&amp;amp;软件篇 &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/121&quot;&gt;#121&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;纪念那些年我折腾过的各种… &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/88&quot;&gt;Personal Growth Infrastructure · Issue #88&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;硬件篇&quot;&gt;硬件篇&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;MacBook Pro 15‘ 💻&lt;/li&gt;  &lt;li&gt;iPhone 6s Plus 📱&lt;/li&gt;  &lt;li&gt;（蓝牙）耳机 🎧 &amp;amp; 音响 :sound:&lt;/li&gt;  &lt;li&gt;机械键盘 HHKB ⌨️&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;软件篇macos&quot;&gt;软件篇（macOS）&lt;/h3&gt;&lt;h4 id=&quot;level-0-command-line&quot;&gt;level 0. command line&lt;/h4&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;https://www.iterm2.com/downloads.html&quot;&gt;iTerm2&lt;/a&gt; · 最强 Terminal、组合键、History&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://caskroom.github.io/&quot;&gt;Homebrew Cask&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://www.cakebrew.com/&quot;&gt;Cakebrew&lt;/a&gt; GUI · 装软件的正确姿势&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://ohmyz.sh/&quot;&gt;Oh My Zsh&lt;/a&gt; &amp;amp; alais &amp;amp; autocomplete · 最强 bash、自定义、自动补全、语法高亮&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;nvm&lt;/a&gt; · JSer 管理 Node 版本的正确姿势&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/cnpm/cnpm&quot;&gt;cnpm&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;Yarn&lt;/a&gt; &amp;amp; npm packages manager (inside Intellij or ndm GUI or npm-check-updates) · Node 下 NPM 包管理及其升级（为了速度、可视化…）&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; or &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt; · 博客相关&lt;/li&gt;  &lt;li&gt;of course learning linux bash first&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;level-1-gui-applications&quot;&gt;level 1. GUI Applications&lt;/h4&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;https://www.alfredapp.com/help/getting-started/cheatsheet/&quot;&gt;Alfred&lt;/a&gt; &amp;amp; Workflows #78 · 万能单一入口「Less is more, 简约而不简单」&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://www.google.com/intl/en/chrome/browser/desktop/&quot;&gt;Chrome&lt;/a&gt; &amp;amp; Extensions #140 · 无敌 Browser&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://www.sublimetext.com/3&quot;&gt;Sublime Text&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://packagecontrol.io/installation&quot;&gt;Package Control&lt;/a&gt; &amp;amp; Packages #142 · 无敌 Editor&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt; &amp;amp; Plugins #143 · 无敌 IDE&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://kapeli.com/dash&quot;&gt;Dash&lt;/a&gt; · 查文档必备&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://support.shortcatapp.com/kb/general/getting-started&quot;&gt;Shortcat&lt;/a&gt; · 全键盘操作&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/app/amphetamine/id937984704?mt=12&quot;&gt;Amphetamine&lt;/a&gt; · 类似 caffeine but 更好用更好看&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/XX-net/XX-Net&quot;&gt;XX-net&lt;/a&gt; · 翻墙必备（当 VPN 抽风…）&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://www.eidac.de/?cat=40&quot;&gt;smcFanControl&lt;/a&gt; · 风扇控制，夏日解暑/冬日取暖 必备&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://bjango.com/mac/istat/&quot;&gt;iStat for Mac&lt;/a&gt; · 参数控（隐藏以弱化该功能）&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/fikovnik/ShiftIt&quot;&gt;ShiftIt&lt;/a&gt; · 窗口布局神器（开源）&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/eN/app/snap/id418073146?mt=12&quot;&gt;Snap&lt;/a&gt; · Option + Nums 快速切换常用 Apps&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://www.macbartender.com/&quot;&gt;Bartender 2&lt;/a&gt; · 隐藏菜单栏图标（拯救性 App… 防止注意力干扰…）&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://www.rescuetime.com/dashboard?src=client&quot;&gt;RescueTime&lt;/a&gt; · 记录 Apps 使用时间&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/tekezo/Karabiner&quot;&gt;Karabiner&lt;/a&gt; · 改键神器（开源）&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/keycastr/keycastr&quot;&gt;KeyCastr&lt;/a&gt; · 按键显示&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/jie-tu-jietu-kuai-su-biao/id1059334054?mt=12&quot;&gt;截图(Jietu)&lt;/a&gt; · 腾讯出品&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://clipber.com/clipber/?rnd=0.34849009985173485&quot;&gt;快贴&lt;/a&gt; · 类 Pin，免费（macOS 的 universal clipper 简直不能用…）&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/Markoff&quot;&gt;Markoff&lt;/a&gt; · 预览 Markdown 内容（查看 &amp;gt; 编辑）&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://pinyin.sogou.com/mac/introduce.php&quot;&gt;搜狗输入法&lt;/a&gt; · 自动 English&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://dida365.com/#q/all/tasks&quot;&gt;TickTick/滴答清单&lt;/a&gt; · 万能 Inbox、GTD 工具&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://cidian.youdao.com/index-mac.html&quot;&gt;有道词典&lt;/a&gt; · 取词/查词、生词本&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://www.yinxiang.com/?from=evernote&quot;&gt;EverNote/印象笔记&lt;/a&gt; · 资料备查 #78 #140&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://pomotodo.com/app/&quot;&gt;Pomotodo&lt;/a&gt; · 好用的 TODO &amp;amp; 番茄&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://nearlock.me/&quot;&gt;Near Lock&lt;/a&gt; · 配合 iPhone 自动解锁、输入密码&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://noiz.io/&quot;&gt;Noizio&lt;/a&gt; · 白噪声（全局快捷键）&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.xmind.net/download/mac/&quot;&gt;XMind&lt;/a&gt; · 思维脑图&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://bahoom.com/hyperdock/&quot;&gt;HyperDock&lt;/a&gt; · 窗口预览&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://bahoom.com/hyperswitch&quot;&gt;HyperSwitch&lt;/a&gt; · &lt;code class=&quot;highlighter-rouge&quot;&gt;Option + Tab&lt;/code&gt; 切换当前 Desktop 窗口&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://programmerbird.com/letterspace/&quot;&gt;Letterspace&lt;/a&gt; · 基于 iCloud 文件目录的 Markdown Editor&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://reederapp.com/mac/&quot;&gt;Reeder&lt;/a&gt; · RSS 阅读器&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.yingdev.com/projects/tickeys&quot;&gt;Tickeys&lt;/a&gt; · 模拟键盘声音&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://mac.eltima.com/download-manager.html&quot;&gt;Folx&lt;/a&gt; · 下载器&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://justgetflux.com/&quot;&gt;Flux&lt;/a&gt; · 护眼&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://snappy-app.com/&quot;&gt;Snappy&lt;/a&gt; · 截图悬停&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://heliumfloats.com/&quot;&gt;Helium&lt;/a&gt; · 视频悬停&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/dr.-cleaner-disk-memory-system/id921458519?mt=12&quot;&gt;Dr. Cleaner&lt;/a&gt; · 内存管家&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://freemacsoft.net/appcleaner/&quot;&gt;AppCleaner&lt;/a&gt; · 清理 Apps&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://www.omnigroup.com/more&quot;&gt;OmniDiskSweeper&lt;/a&gt; · 磁盘空间检测&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://toggl.com/&quot;&gt;Toggl&lt;/a&gt; · 时间记录&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/irvue-unsplash-wallpapers/id1039633667?mt=12&quot;&gt;Irvue&lt;/a&gt; · 自动切换壁纸（from &lt;a href=&quot;https://unsplash.com/&quot;&gt;Unsplash&lt;/a&gt;）&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://mycloud.com/&quot;&gt;WD MyCloud&lt;/a&gt; · 私有云&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/wang-yi-yun-yin-le/id944848654?l=en&quot;&gt;NeteaseMusic&lt;/a&gt; · 网易云音乐&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://www.adobe.com/products/photoshop-lightroom.html&quot;&gt;Adobe Lightroom&lt;/a&gt; &amp;amp; Photoshop · 摄影相关 #77&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://yun.baidu.com/&quot;&gt;百度网盘&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/yangshun1029/aria2gui&quot;&gt;Aria2GUI&lt;/a&gt; · 照片备份、全速下载&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;level-2-web-apps&quot;&gt;level 2. Web Apps&lt;/h4&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;https://www.instapaper.com/u&quot;&gt;Instapaper&lt;/a&gt; · 完美阅读体验&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://www.diigo.com/user/jimmylv&quot;&gt;Diigo&lt;/a&gt; · 内容评注 #99&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://inbox.google.com&quot;&gt;Inbox&lt;/a&gt; · 无敌 Email 邮箱&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://toggl.com/&quot;&gt;Toggl&lt;/a&gt; · 时间记录 &amp;amp; Reports&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;为了更快 sign-off 这张卡，拆分出了专门的移动端专题 #141 &amp;amp; 各大平台型软件及其插件专题 #143 #142 #140 #78&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/sorrycc/blog/issues/16&quot;&gt;装了啥 · Issue #16 · sorrycc/blog&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/dbarobin/liqi&quot;&gt;dbarobin/liqi: LiQi of robinwen.&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/macdao/ocds-guide-to-setting-up-mac&quot;&gt;macdao/ocds-guide-to-setting-up-mac: OCD’s Guide to Setting up Mac&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/topic/19550290/hot&quot;&gt;macOS - 热门问答 - 知乎&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;常用代码动态模板-41&quot;&gt;常用代码（动态）模板 &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/41&quot;&gt;#41&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;常用脚手架-122&quot;&gt;常用脚手架 &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/122&quot;&gt;#122&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;可复用-ui-组件-80&quot;&gt;可复用 UI 组件 &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/80&quot;&gt;#80&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;intellij-相关配置-60&quot;&gt;Intellij 相关配置 &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/60&quot;&gt;#60&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;alfred-workflow-78&quot;&gt;Alfred Workflow &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/78&quot;&gt;#78&lt;/a&gt;&lt;/h2&gt;",
            "excerpt"    : "&lt;h2 id=&quot;硬件软件篇-121&quot;&gt;硬件&amp;amp;软件篇 &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/121&quot;&gt;#121&lt;/a&gt;&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/wechat-app-with-business-and-technology-01",
            "title"      : "微信小程序(1)：技术是如何服务于商业的？",
            "category"   : "前端",
            "tags"       : "WeChat, 微信, 小程序, 商业, 技术",
            "url"        : "/2017-01-10-wechat-app-with-business-and-technology-01/",
            "path"       : "_posts/前端/2017-01-10-wechat-app-with-business-and-technology-01.md",
            "next"       : "/2017-01-21-personal-growth-infrastructure/",
            "previous"   : "/2017-01-08-clean-code-javascript-classes-design-principles/",
            "date"       : "2017-01-10 00:00:00 +0000",
            "shortdate"  : "January 10, 2017",
            "content"    : "&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;微信小程序已经在昨天（2017/01/09）正式发布，张小龙以发布日期的方式致敬了乔布斯的 iPhone（2007/01/09），其野心不可谓不大。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1484030180588.png&quot; alt=&quot;初代 iPhone 发布时间&quot; /&gt;&lt;/p&gt;&lt;p&gt;下面我将会尝试从商业和技术这两个角度来谈谈微信小程序。也许作为程序猿的我们会在技术架构上&lt;strong&gt;看不起小程序&lt;/strong&gt;，不就是模仿了 Vue 的语法和 ReactNative（or Hybrid）的原理吗？也可能会因为其封闭性而&lt;strong&gt;批判小程序&lt;/strong&gt;，破坏了万维网 Web 本来的开放性和去中心化；更加会由于其诸多限制而&lt;strong&gt;抱怨小程序&lt;/strong&gt;，有限的官方 API 和打包程序大小让开发者感到捉襟见肘。&lt;/p&gt;&lt;p&gt;但要是我们明白了微信小程序的背后是如何承载着腾讯的商业愿景，便会明白一个道理，即「&lt;strong&gt;技术永远是服务于商业的&lt;/strong&gt;」，特别是离用户更近的客户端应用程序相关技术。很多时候某些功能不是在技术上无法实现（可不要小瞧了 BAT 所招聘的开发者们），而是在商业和产品的背景下，有目的性、有策略化地刻意而为之。&lt;/p&gt;&lt;h2 id=&quot;商业&quot;&gt;商业&lt;/h2&gt;&lt;h3 id=&quot;微信小程序是什么&quot;&gt;微信小程序是什么？&lt;/h3&gt;&lt;p&gt;极客公园前 CEO 阿禅在《&lt;a href=&quot;https://kenengba.com/post/3538.html&quot;&gt;小程序想要什么？&lt;/a&gt;》这篇文章中提到，一句话总结张小龙对小程序的定义：&lt;strong&gt;小程序希望用即用即走的方式激活线下的弱连接场景。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1484051181209.png&quot; alt=&quot;微信·公众平台&quot; /&gt;&lt;/p&gt;&lt;p&gt;微信公众平台以「订阅号」起家，进而开创了「服务号」和「企业号」，当然还有「微信·开放平台」用于提供微信登录、微信支付等典型性 SDK。到了今天，小程序横空出世，其实我们可以把它当做是「服务号」的一种升级，首先从各种限制上来看，服务号本身的推送能力就特别弱（每月 4 次），而小程序的推送能力则几乎为零，只能被动地通知用户；其次便是小程序在功能型属性上的升级，扫描二维码即可开始使用，而不用「先关注在选择菜单」才能够进入 H5 页面，其目的也就在于解决服务号的体验不佳。&lt;/p&gt;&lt;h3 id=&quot;腾讯为何推出小程序&quot;&gt;腾讯为何推出小程序？&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1484051363573.png&quot; alt=&quot;Facebook 太阳能无人飞机 Aquila&quot; /&gt;&lt;/p&gt;&lt;p&gt;在这个世界的另一端，另外一个社交巨头 Facebook 有着自己的&lt;a href=&quot;http://www.geekpark.net/topics/216488&quot;&gt;三大创新支柱&lt;/a&gt;：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;&lt;strong&gt;连接&lt;/strong&gt;，是让世界上尚未与互联网连通的 40 亿人（也是全球人口的大多数）也能上网。&lt;/li&gt;  &lt;li&gt;&lt;strong&gt;人工智能&lt;/strong&gt;，就是解决某些比如信息过载这样的核心问题，并建造真正智能的电脑系统。&lt;/li&gt;  &lt;li&gt;&lt;strong&gt;虚拟现实和增强现实&lt;/strong&gt;，就是建造下一代的电脑系统，让我们可以与对方共处一室，哪怕实际上远隔万里。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如同 Facebook 的愿景一样，「连接一切」也是微信以及腾讯的野心。IoT 物联网跟 AR/VR 被视为继移动互联网之后又一个新的商业争夺点，都在尝试着建立起「万物互联」的未来世界。但是未来还“未来”，世界上仍然有很多物品还没有被智能化，而依赖于图像识别技术的 AR 设备也还远远达不到精准识别物理世界的物品的程度，那么二维码也就成为了现实世界和网络世界之间一种折中的连接方案。&lt;/p&gt;&lt;p&gt;最后，从张小龙&lt;a href=&quot;http://www.geekpark.net/topics/217652&quot;&gt;所描述的未来场景&lt;/a&gt;中我们可以进一步理解微信的意图：“智能手机之后的平台，有可能是眼镜这样的设备，而在眼镜这个系统里，不用安装程序，眼镜看到哪里，应用程序就在哪里。比如眼镜看到灯的时候，灯的上方就会出现一个开关，扫到公园门口，就会出现门票系统。「这种程序应该是无处不在，但又可以随时访问。」”&lt;/p&gt;&lt;h3 id=&quot;适合什么样的应用场景&quot;&gt;适合什么样的应用场景？&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1484051459393.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;二维码背后是微信「连接一切」的野心，这样的决策也直接导致小程序第一批大量流量将来自于线下企业的导流。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;先让我们来看看张小龙所畅想的小程序的实际例子：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;用户到达线下某个餐馆就餐时，不需要下载这个餐馆的 APP，只需要在餐馆扫一下它的二维码，然后就可以在这个餐馆的小程序里排队或者点餐。&lt;/li&gt;  &lt;li&gt;在公交车站，你扫一下公交站牌的二维码就可以了解下一辆公交车到站的时间。&lt;/li&gt;  &lt;li&gt;在汽车站，扫一下汽车站的二维码就可以购买车票，而不需要排长队。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;从上述例子上来说，张小龙对小程序的定位明显是一个「工具型」的产品，如何建立最短路径然后帮助用户直达产品功能就是一个「好的工具」。从在这一点上来看，目前已经上架的「滴滴出行」小程序就是一个最好的范例，打开小程序就能直接获取用户当前位置作为起点，然后用户输入终点之后就能开始呼叫用车，一气呵成。&lt;/p&gt;&lt;h3 id=&quot;回过头来看微信的克制&quot;&gt;回过头来看「微信的克制」&lt;/h3&gt;&lt;p&gt;其实想清楚了 vision 层面的 strategy，才能够更明白微信为什么要如此限制。&lt;/p&gt;&lt;p&gt;比如说微信严格限制了小程序的线上导流、小程序的提醒也只能以「服务通知」的方式被动出现在聊天列表中，要的就是减少对用户的打扰，用完即走。目前来说，&lt;strong&gt;用户只能通过扫码、搜索和微信群这三种方式打开小程序&lt;/strong&gt;，无法被分享到朋友圈，甚至无法通过朋友圈或者网页中的图片长按二维码进入。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这些限制条件在我们看来之所以是限制，其实是因为我们是站在互联网公司的角度来看待小程序。&lt;/strong&gt;而且现在大部分已上架的小程序都是由互联网公司所开发的，这和微信要「连接线下」的愿景有所矛盾，但又不得以而为之，必须由互联网公司先来带上一波，再慢慢渗透到 O2O 的线下商家当中去，这其中的机会和时运都还在酝酿当中。&lt;/p&gt;&lt;p&gt;有一句话说这么说的，&lt;a href=&quot;https://www.zhihu.com/question/54547736/answer/140056623&quot;&gt;「短期不可高估，长期不可低估」&lt;/a&gt;，其实这就很适用于目前来说对于小程序该有的态度。小程序的一切都在腾讯的掌控之下，你会发现哪怕是缺点，有可能只是微信有意而为之，而所谓的这些缺点，也是可以被腾讯一步一步调整和改进的。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1484051670988.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;最后想说一点的是，在微信（&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24782839&quot;&gt;Weixin/Wechat Wide Web&lt;/a&gt;）掌控之下的小程序所提供的服务对用户来说不见得是一件坏事儿。我们程序猿会从技术的角度批判它的封闭，违背了互联网/万维网的初衷，但在另一方面，我相信一句话「人性本恶」，放任不管的互联网最终会变成一个烂摊子，看看现在的&lt;a href=&quot;https://zh.wikipedia.org/zh-hant/%E7%B6%B2%E8%B7%AF%E9%9C%B8%E5%87%8C&quot;&gt;网络暴力&lt;/a&gt;、&lt;a href=&quot;http://if.pedaily.cn/news/201701/20170106161298634.shtml&quot;&gt;比特币市场&lt;/a&gt;以及被调教的&lt;a href=&quot;https://www.zhihu.com/question/41764875&quot;&gt;微软聊天机器人 Tay&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&quot;技术&quot;&gt;技术&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;总是不可避免地喜欢写长文，技术相关的内容就还是放到下篇吧，目前还处于大纲&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/blob/master/_posts/%E5%89%8D%E7%AB%AF/2017-01-11-wechat-app-with-business-and-technology-02.md&quot;&gt;草稿&lt;/a&gt;阶段，敬请期待。&lt;/p&gt;&lt;/blockquote&gt;",
            "excerpt"    : "&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/clean-code-javascript-classes-design-principles",
            "title"      : "【译】整洁代码：JavaScript 当中的面向对象设计原则（S.O.L.I.D）",
            "category"   : "前端",
            "tags"       : "JavaScript, 前端, 面向对象, 设计原则, 类型系统",
            "url"        : "/2017-01-08-clean-code-javascript-classes-design-principles/",
            "path"       : "_posts/前端/2017-01-08-clean-code-javascript-classes-design-principles.md",
            "next"       : "/2017-01-10-wechat-app-with-business-and-technology-01/",
            "previous"   : "/2016-12-07-react-testing-with-enzyme/",
            "date"       : "2017-01-08 00:00:00 +0000",
            "shortdate"  : "January 08, 2017",
            "content"    : "&lt;p&gt;原文地址：&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript#classes&quot;&gt;https://github.com/ryanmcdermott/clean-code-javascript#classes&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;GitHub 总是有很多 Code Example 案例的仓库来教你如何正确写出好代码，诸多 Markdown 写手以 BAD/GOOD 两种代码作为示范，辅以一些叙述和注释作为说明，清晰易懂。我就准备来翻译最近看到的 JavaScript 整洁代码中 Classes 设计原则这一段，进一步加深对面向对象设计原则的理解，而不只是 Java 世界。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;javascript-classes&quot;&gt;&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript#classes&quot;&gt;JavaScript &lt;strong&gt;Classes&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;single-responsibility-principle-srp--单一职责原则&quot;&gt;&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript#single-responsibility-principle-srp&quot;&gt;Single Responsibility Principle (SRP)&lt;/a&gt; | 单一职责原则&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;As stated in Clean Code, “There should never be more than one reason for a class to change”. It’s tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won’t be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of times you need to change a class is important. It’s important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如《整洁代码》中所言，「不应该有一个以上的理由去修改某个类」。通常情况下，我们会倾向于往一个类当中塞入过多的功能，就像当你只能往航班上携带&lt;strong&gt;一个&lt;/strong&gt;行李箱的时候。这里的问题在于，这个类不再是概念上的内聚，从而导致了未来可能有很多理由会去修改它。尽可能少地去修改某个类是非常重要的，因为如果在一个类里面包含了过多的功能，那么当你修改其中的某一部分，就会难以理解新的修改将如何影响代码库中的其他依赖模块。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserSettings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;changeSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;verifyCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;verifyCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Good&lt;/strong&gt;:&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserAuth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;verifyCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserSettings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;changeSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;verifyCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;openclosed-principle-ocp--开放封闭原则&quot;&gt;&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript#openclosed-principle-ocp&quot;&gt;Open/Closed Principle (OCP)&lt;/a&gt; | 开放封闭原则&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;As stated by Bertrand Meyer, “software entities (classes, modules, functions,etc.) should be open for extension, but closed for modification.” What does that mean though? This principle basically states that you should allow users to extend the functionality of your module without having to open up the &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; source code file and manually manipulate it.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;正如 Bertrand Meyer 所言，「软件实体（类、模块、函数等等）应该对扩展开放，而对修改封闭」。换句话说，该原则的基本含义就是当用户在扩展你的模块功能时，没有必要去打开 &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; 源文件并手动修改源代码。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AjaxRequester&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// What if we wanted another HTTP Method, like DELETE? We would have to&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// open this file up and modify this and put it in manually.&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HTTP_METHODS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;PUT&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;GET&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Good&lt;/strong&gt;:&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AjaxRequester&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HTTP_METHODS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;PUT&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;GET&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;addHTTPMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HTTP_METHODS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;liskov-substitution-principle-lsp--里氏替换原则&quot;&gt;&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript#liskov-substitution-principle-lsp&quot;&gt;Liskov Substitution Principle (LSP)&lt;/a&gt; | 里氏替换原则&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;This is a scary term for a very simple concept. It’s formally defined as “If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).” That’s an even scarier definition.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这个原则听起来有点儿拗口，但其实概念非常简单。正式的定义就是「如果 S 为 T 的子类型，那么 T 类型的对象可以被 S 类型的对象所替换（也就是说类型 S 的对象可以替换类型 T 的对象），而不会改变该程序的任何预期特性（正确性，执行的任务等）」。不得不说这是一个更拗口的定义。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let’s take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the “is-a” relationship via inheritance, you quickly get into trouble.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;最好的一种解释就是，我们所创建的父类与其子类应当可交换地使用而不会引起异常。可能这还是会使人感到困惑，所以让我们来看一个经典的 Square-Rectangle 例子。从数学上来说，一个 Square（正方形）也是一个 Rectangle（矩形），但如果你通过继承来运用 “is-a” 关系对其进行建模，你很快就会遇到麻烦。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;getArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderLargeRectangles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rectangles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;rectangles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// BAD: Will return 25 for Square. Should be 20.&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rectangles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()];&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderLargeRectangles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rectangles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Good&lt;/strong&gt;:&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;getArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;setLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;getArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderLargeShapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;shapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Square&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Rectangle&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shapes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()];&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderLargeShapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;interface-segregation-principle-isp--接口隔离原则&quot;&gt;&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript#interface-segregation-principle-isp&quot;&gt;Interface Segregation Principle (ISP)&lt;/a&gt; | 接口隔离原则&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;JavaScript doesn’t have interfaces so this principle doesn’t apply as strictly as others. However, it’s important and relevant even with JavaScript’s lack of type system.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;JavaScript 语言本身并不包含对于接口语法的支持，因此也无法像其他语言那样达到严格限制的程度。不过鉴于 JavaScript 本身类型系统的缺失，遵循接口隔离原则还是非常重要的。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;ISP states that “Clients should not be forced to depend upon interfaces thatthey do not use.” Interfaces are implicit contracts in JavaScript because ofduck typing.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;ISP 的表述是「不应该强制客户端去依赖于他们不需要的接口」，由于 JavaScript 的「鸭子类型」，JavaScript 当中的接口只是一种隐性的契约而已。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;A good example to look at that demonstrates this principle in JavaScript is for classes that require large settings objects. Not requiring clients to setup huge amounts of options is beneficial, because most of the time they won’t need all of the settings. Making them optional helps prevent having a “fat interface”.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这一点在 JavaScript 中较为典型的例子就是那些需要大量配置信息的类。其实使用者并不需要去关心每一个配置项，不强制他们设置大量的选项能够节省大量的时间，保持设置选项的&lt;strong&gt;可选性&lt;/strong&gt;能够有助于防止「胖接口」。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DOMTraverser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animationModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DOMTraverser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;body&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;animationModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Most of the time, we won&#39;t need to animate when traversing.&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Good&lt;/strong&gt;:&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DOMTraverser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setupOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;setupOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animationModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DOMTraverser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;body&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;animationModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;dependency-inversion-principle-dip--依赖反转原则&quot;&gt;&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript#dependency-inversion-principle-dip&quot;&gt;Dependency Inversion Principle (DIP)&lt;/a&gt; | 依赖反转原则&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;This principle states two essential things:&lt;/p&gt;  &lt;ol&gt;    &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/li&gt;    &lt;li&gt;Abstractions should not depend upon details. Details should depend on abstractions.&lt;/li&gt;  &lt;/ol&gt;&lt;/blockquote&gt;&lt;p&gt;这个原则主要阐述了两件重要的事情：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;上层模块不需要依赖下层模块，两者依赖于抽象。&lt;/li&gt;  &lt;li&gt;抽象不应该依赖于细节。细节应当依赖于抽象。&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;  &lt;p&gt;This can be hard to understand at first, but if you’ve worked with Angular.js, you’ve seen an implementation of this principle in the form of Dependency Injection (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;最开始可能很难理解，但是如果你曾经用过 Angular.js，你就已经见到过这个原则的一种实现，依赖注入（DI）就是其中一种形式。但是他们不是完全相同的概念，DIP 可以避免上层模块知道你的下层模块的实现细节和具体设置，而这可以通过 DI 来达成目的。一个显著的好处就是减少了模块之间的耦合，而耦合是非常差的一种开发模式，因为它会使得你的代码难以重构。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;As stated previously, JavaScript doesn’t have interfaces so the abstractionsthat are depended upon are implicit contracts. That is to say, the methods and properties that an object/class exposes to another object/class. In the example below, the implicit contract is that any Request module for an &lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryTracker&lt;/code&gt; will have a &lt;code class=&quot;highlighter-rouge&quot;&gt;requestItems&lt;/code&gt; method.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;就像之前所提到的，JavaScript 语言本身没有接口，从而抽象只能依赖于隐性的契约。也就是指，一个对象/类所暴露给另一个对象/类的方法和属性。以下例子中所隐含的契约就是，&lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryTracker&lt;/code&gt; 所依赖的任意 Request 模块都要有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;requestItems&lt;/code&gt; 方法。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryTracker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// BAD: We have created a dependency on a specific request implementation.&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// We should just have requestItems depend on a request method: `request`&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requester&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryRequester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;requestItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryRequester&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REQ_METHODS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;HTTP&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;requestItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inventoryTracker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;apples&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bananas&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inventoryTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Good&lt;/strong&gt;:&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryTracker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requester&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;requestItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryRequesterV1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REQ_METHODS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;HTTP&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;requestItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryRequesterV2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REQ_METHODS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;WS&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;requestItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// By constructing our dependencies externally and injecting them, we can easily&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// substitute our request module for a fancy new one that uses WebSockets.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inventoryTracker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;apples&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bananas&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryRequesterV2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inventoryTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;",
            "excerpt"    : "&lt;p&gt;原文地址：&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript#classes&quot;&gt;https://github.com/ryanmcdermott/clean-code-javascript#classes&lt;/a&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/react-testing-with-enzyme",
            "title"      : "「技术雷达」之使用 Enzyme 测试 React（Native）组件",
            "category"   : "前端",
            "tags"       : "React, ReactNaitve, Enzyme, Testing, TechRadar",
            "url"        : "/2016-12-07-react-testing-with-enzyme/",
            "path"       : "_posts/前端/2016-12-07-react-testing-with-enzyme.md",
            "next"       : "/2017-01-08-clean-code-javascript-classes-design-principles/",
            "previous"   : "/2016-12-04-agile-learning-based-on-github-issues/",
            "date"       : "2016-12-07 00:00:00 +0000",
            "shortdate"  : "December 07, 2016",
            "content"    : "&lt;h2 id=&quot;组件化与-ui-测试&quot;&gt;组件化与 UI 测试&lt;/h2&gt;&lt;p&gt;在组件化出现之前，我们不谈 UI 的单元测试，哪怕是对于 UI 页面的测试来说都是一件非常困难的事情。其实&lt;strong&gt;组件化并不全是为了复用，很多情况下也恰恰是为了分治&lt;/strong&gt;，从而我们可以分组件对 UI 页面进行开发，然后分别对其进行单元测试。&lt;/p&gt;&lt;p&gt;特别是当浏览器中的 Web 应用越来越庞大的时候，借鉴于在后端将大型单体应用拆分成微服务架构的最佳实践一样，前端应用也可以被拆分成不同的页面和特性。每个特性由一个单独的团队从端到端对其负责，它允许团队规模化地交付那些能够独立部署和维护的服务，在最新一期的技术雷达当中这种方式称之为&lt;strong&gt;微前端&lt;/strong&gt;，微前端的目标就是允许 Web 应用的特性之间彼此独立，每个特性可以独立地开发、测试和部署。&lt;/p&gt;&lt;p&gt;React.js 作为前端框架的后起之秀，却在 2015 年携着虚拟 DOM，组件化，单向数据流等利器，给前端 UI 构建掀起了一波声势浩大的函数式新潮流。虽然说组件化不是 React 最先提出来的，但却是 React 使得组件化在前端世界里发扬光大的，而现在几乎所有的所谓现代化 UI 框架比如 Angular 或者 Vue 都已经将组件化作为框架的立足之本。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1481267000925.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;React 已经让 UI 测试变得容易很多，React 组件都可以被简化为这样一个表达式，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;UI = f(data)&lt;/code&gt;，这个纯函数返回的只是一个描述 UI 组件应该是什么样子的虚拟 DOM，本质上就是一个树形的数据结构。给这个纯函数输入一些应用程序的状态，就会得到相应的 UI 描述的输出，这个过程不会去直接操作实际的 UI 元素，也不会产生所谓的副作用。&lt;/p&gt;&lt;h2 id=&quot;react-组件树的测试&quot;&gt;React 组件树的测试&lt;/h2&gt;&lt;p&gt;按理来说按照纯函数这样的思路，React 组件的测试应该很简单的说。但与此同时对于（渲染出 UI 的）组件树进行测试依然存在一个问题，从下图中可以看出，越处于上层的组件，其复杂度必然会随之提高。对于最底层的子组件来说，我们可以很容易得将其进行渲染并测试其逻辑的正确与否，但对于较上层的父组件来说，通常来说就需要对其所包含的所有子组件都进行预先渲染，甚至于最上面的组件需要渲染出整个 UI 页面的真实 DOM 节点才能对其进行测试，这显然是不可取的。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1481119659338.png&quot; alt=&quot;Components-Tree&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Shallow rendering lets you render a component “one level deep” and assert facts about what its render method returns, without worrying about the behavior of child components, which are not instantiated or rendered. This does not require a DOM.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;浅渲染（Shallow Rendering）解决了这个问题，也就是说在我们针对某个上层组件进行测试时，可以不用渲染它的子组件，所以就不用再担心子组件的表现和行为，这样就可以只对特定组件的逻辑及其渲染输出进行测试了。Facebook 官方提供了 &lt;code class=&quot;highlighter-rouge&quot;&gt;react-addons-test-utils&lt;/code&gt; 可以让我们使用浅渲染这个特性，用于测试虚拟 DOM 对象，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;React.Component&lt;/code&gt; 的实例。&lt;/p&gt;&lt;h2 id=&quot;使用-enzyme-简化测试代码&quot;&gt;使用 Enzyme 简化测试代码&lt;/h2&gt;&lt;p&gt;我们常常会提到，测试代码对于复杂代码库的可维护性至关重要，但是&lt;strong&gt;测试的代码本身的易于理解和编写，以及可读性和可维护性也同等重要。&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Enzyme is a JavaScript Testing utility for React that makes it easier to assert, manipulate, and traverse your React Components’ output.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;而 Enzyme 则来自于活跃在 JavaScript 开源社区的 Airbnb 公司，是对官方测试工具库（&lt;code class=&quot;highlighter-rouge&quot;&gt;react-addons-test-utils&lt;/code&gt;）的封装，它模拟了 jQuery 的 API，非常直观并且易于使用和学习，提供了一些与众不同的接口和几个方法来减少测试的样板代码，方便你判断、操纵和遍历 React Components 的输出，并且减少了测试代码和实现代码之间的耦合。Enzyme 理论上应该与所有 TestRunner 和断言库相兼容，已经集成了多种测试类库，比如 Jest，Mocha &amp;amp; Chai，或者 Jasmine，不过这些不是我们今天的重点。&lt;/p&gt;&lt;p&gt;对比一下两者 &lt;code class=&quot;highlighter-rouge&quot;&gt;facebook/react-addons-test-utils&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;airbnb/enzyme&lt;/code&gt; 的 API 就一目了然，立见分明：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1481121353201.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;enzyme-的三种渲染方法&quot;&gt;Enzyme 的三种渲染方法&lt;/h2&gt;&lt;h3 id=&quot;shallownode-options--shallowwrapper&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shallow(node[, options]) =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;shallow 方法就是对官方的 Shallow Rendering 的封装，浅渲染在将一个组件作为一个单元进行测试的时候非常有用，可以确保你的测试不会去间接断言子组件的行为。shallow 方法只会渲染出组件的第一层 DOM 结构，其嵌套的子组件不会被渲染出来，从而使得渲染的效率更高，单元测试的速度也会更快。&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;enzyme&#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Enzyme Shallow&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;App should have three &amp;lt;Todo /&amp;gt; components&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Todo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;mountnode-options--reactwrapper&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mount(node[, options]) =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;mount 方法则会将 React 组件渲染为真实的 DOM 节点，特别是在你依赖真实的 DOM 结构必须存在的情况下，比如说按钮的点击事件。完全的 DOM 渲染需要在全局范围内提供完整的 DOM API， 这也就意味着它必须在至少“看起来像”浏览器环境的环境中运行，如果不想在浏览器中运行测试，推荐使用 mount 的方法是依赖于一个名为 jsdom 的库，它本质上是一个完全在 JavaScript 中实现的 headless 浏览器。&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;enzyme&#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Enzyme Mount&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;should delete Todo when click button&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todoLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;li&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;button.delete&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;li&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todoLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;rendernode-options--cheeriowrapper&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;render(node[, options]) =&amp;gt; CheerioWrapper&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;render 方法则会将 React 组件渲染成静态的 HTML 字符串，返回的是一个 Cheerio 实例对象，采用的是一个第三方的 HTML 解析库 Cheerio，官方的解释是「我们相信 Cheerio 可以非常好地处理 HTML 的解析和遍历，再重复造轮子只能算是一种损失」。这个 CheerioWrapper 可以用于分析最终结果的 HTML 代码结构，它的 API 跟 shallow 和 mount 方法的 API 都保持基本一致。&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;enzyme&#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Enzyme Render&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Todo item should not have todo-done class&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.todo-done&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;todo&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;enzyme-的-api-方法&quot;&gt;Enzyme 的 API 方法&lt;/h2&gt;&lt;h3 id=&quot;find-方法与选择器&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; 方法与选择器&lt;/h3&gt;&lt;p&gt;从前面的示例代码中可以看到，无论哪种渲染方式所返回的 wrapper 都有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.find()&lt;/code&gt; 方法，它接受一个 selector 参数，然后返回一个类型相同的 wrapper 对象，里面包含了所有符合条件的子组件。在这个对象的基础上，&lt;code class=&quot;highlighter-rouge&quot;&gt;at&lt;/code&gt; 方法则可以返回指定位置的子组件，&lt;code class=&quot;highlighter-rouge&quot;&gt;simulate&lt;/code&gt; 方法可以在这个组件上模拟触发某种行为。&lt;/p&gt;&lt;p&gt;Enzyme 中的 Selectors 即选择器类似于 CSS 选择器，但是只支持非常简单的 CSS 选择器，如果需要支持复杂的 CSS 选择器，就需要引入 &lt;code class=&quot;highlighter-rouge&quot;&gt;react-dom&lt;/code&gt; 模块的 &lt;code class=&quot;highlighter-rouge&quot;&gt;findDOMNode&lt;/code&gt; 方法，而这是官方的 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestUtils&lt;/code&gt; 本身都不提供的方式。&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* CSS Selector */&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.foo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//class syntax&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;input&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//tag syntax&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;#foo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//id syntax&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;[htmlFor=&quot;foo&quot;]&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//prop syntax&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Selectors 也可以是许多其他的东西，以便于在 Enzyme 的 wrapper 中可以轻松地指定想要查找的节点，在下面的示例中，我们可以通过 React 组件构造函数的引用找到该组件，也可以基于 React 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;displayName&lt;/code&gt; 来查找组件，如果一个组件存在于渲染树中，其中设置了 &lt;code class=&quot;highlighter-rouge&quot;&gt;displayName&lt;/code&gt; 并且它的第一个字符为大写字母，就能通过字符串找到它，与此同时也可以基于 React 组件属性的子集来查找组件和节点。&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Component Constructor */&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ChildrenComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;displayName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;ChildrenComponent&#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ChildrenComponent&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* Object Property Selector */&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;baz&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;baz&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;测试组件的交互行为&quot;&gt;测试组件的交互行为&lt;/h3&gt;&lt;p&gt;我们不但可以通过 find 方法查找 DOM 元素，还可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;simulate&lt;/code&gt; 方法在组件上模拟触发某个 DOM 事件，比如 Click，Change 等等。对于浅渲染来说，事件模拟并不会像真实环境中所预期的那样进行传播，因此我们必须在一个已经设置好了事件处理方法的实际节点上才能够调用，实际上 &lt;code class=&quot;highlighter-rouge&quot;&gt;.simulate()&lt;/code&gt; 方法将会根据模拟的事件触发这个组件的 prop。例如，&lt;code class=&quot;highlighter-rouge&quot;&gt;.simulate(&#39;click&#39;)&lt;/code&gt; 实际上会获取 onClick prop 并调用它。&lt;/p&gt;&lt;p&gt;Sinon 则是一个可以用来 Mock 和 Stub 数据代码的第三方测试工具库，当我们需要检查一个组件当中某个特定的函数是否被调用时，我们可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;sinon.spy()&lt;/code&gt; 方法监视所传入该组件作为 prop 的 onButtonClick 方法，然后再通过 wrapper 的 simulate 方法模拟一个 Click 事件，最终验证这个被 spy 的 onButtonClick 函数是否被调用。&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;simulates click events&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onButtonClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sinon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onButtonClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onButtonClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;button&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onButtonClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calledOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;如何测试-react-native&quot;&gt;如何测试 React Native？&lt;/h2&gt;&lt;p&gt;前面我们所谈论的都是如何测试使用 react-dom 所构建的 React 组件，即最终渲染的结果是浏览器当中的 DOM 结构，但对于 React Native 来说，JavaScript 代码最终会被编译并用于调用 iOS 或 Android 上的 Native 代码，因此无法再使用基于 DOM 的测试工具了。与此同时，React Native 还有特别多的 Mobile 环境依赖，所以在没有真实设备的情况下很难对其运行环境进行模拟，特别是当你希望在持续集成服务器（如 Jenkins、Travis CI）运行单元测试的时候。&lt;/p&gt;&lt;p&gt;事实上，我们可以通过欺骗 React Native 让它返回常规的 React 组件而不是 Native 组件，然后就又能愉快地使用传统的 JavaScript 测试库来单独测试 React Native 组件逻辑。最基本的 mock 示例代码如下：&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;propTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;View&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Enzyme 推荐在测试环境中使用 &lt;a href=&quot;https://github.com/RealOrangeOne/react-native-mock&quot;&gt;react-native-mock&lt;/a&gt; 这个辅助库，这是一个使用纯 JavaScript 将全部的 React Native 组件进行 mock 的第三方库，只需要导入这个库就可以对 React Native 组件进行渲染和测试。&lt;/p&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;技术雷达&lt;/strong&gt;：我们非常享受Enzyme为React.js应用提供的快速组件级UI测试功能。与许多其他基于快照的测试框架不同，Enzyme允许开发者在不进行设备渲染的情况下做测试，从而实现速度更快，粒度更小的测试。在开发React应用时，我们经常需要做大量的功能测试，而Enzyme可以在大规模地减少功能测试数量上做出贡献。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1481128632569.png&quot; alt=&quot;TechRadar&quot; /&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;组件化与-ui-测试&quot;&gt;组件化与 UI 测试&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/agile-learning-based-on-github-issues",
            "title"      : "基于 GitHub 的敏捷学习方法之道与术",
            "category"   : "思考",
            "tags"       : "学习, GitHub, 成长, 敏捷, 知识",
            "url"        : "/2016-12-04-agile-learning-based-on-github-issues/",
            "path"       : "_posts/思考/2016-12-04-agile-learning-based-on-github-issues.md",
            "next"       : "/2016-12-07-react-testing-with-enzyme/",
            "previous"   : "/2016-11-30-tech-radar-react-testing-with-enzyme/",
            "date"       : "2016-12-04 00:00:00 +0000",
            "shortdate"  : "December 04, 2016",
            "content"    : "&lt;blockquote&gt;  &lt;p&gt;持续行动，持续反思，持续进步。—— via. 敏捷学习宣言&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;&lt;h4 id=&quot;对时间的敬畏&quot;&gt;对时间的敬畏&lt;/h4&gt;&lt;blockquote&gt;  &lt;p&gt;需要好多年才能懂得，最好不是去震惊世界，而是要像易卜生所说的，生活在世界上。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们都一样，渴望着建树功勋、改变世界。可是伴随着年岁的增长，却发现梦想仍旧遥远，而时间却依然残酷的流逝着，不会仅仅因为「你」而发生丝毫的改变。如《奇特的一生》当中所言，我对时间始终充满着敬畏之心，最好的方式也不过是奢求时间能够跟自己做朋友，伴随着我这也许注定朴实无华的一生，共同成长。&lt;/p&gt;&lt;p&gt;在我们一生所能做的事情里，睡眠占去 1/3，此生只剩 2/3，除去非做不可的&lt;a href=&quot;http://blog.jimmylv.info/2015-09-05-periodically-anxiety/#title0&quot;&gt;基本生活维护成本&lt;/a&gt;之外，剩下的时间要么选择浪费而荒度此生，要么瞄准目标而奋力向前，让这一生不留遗憾。Follow your heart，你需要找到一些愿意为其付诸终身的「目标」，以这样的姿态「生活在这世界上」。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/0-follow-your-heart.jpg&quot;&gt;&lt;img src=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/0-follow-your-heart-1024x683.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h4 id=&quot;敏捷与个人成长&quot;&gt;敏捷与个人成长&lt;/h4&gt;&lt;p&gt;就像软件开发一样，一个人的成长也应该有自己的方法论。人的一生若是顺风顺水、一成不变，那未免太无趣了，正是由于世界的未知在等着我们去探索，不一样的经历才会让人感到惊喜和有趣。想做的事情永远都不会嫌多，就像柳比歇夫最开始是研究生物学的，却在科学的道路上越走越远，进而研究起了数学、物理、哲学，甚至于美学，而更关键的是，他在每一方面都做出了很大贡献并且留下了诸多著作。&lt;/p&gt;&lt;p&gt;时间充当着 Product Owner 的角色在不断向你提出各种各样的需求，敏捷当中最重要的一大前提就是「拥抱变化」，而在「&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/85&quot;&gt;记录时间这件小事儿&lt;/a&gt;」里面我提到的GTD流程便可以用于处理这源源不断的需求，即收集、整理、执行、回顾，对应到敏捷当中的几大会议，显然也可以由个人完成，自己就是自己的 IM &amp;amp; PM，当然也是 BA &amp;amp; Dev &amp;amp; QA（当然不用担心人格分裂）。&lt;/p&gt;&lt;h3 id=&quot;实践之术&quot;&gt;实践之术&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;我都没想到怎么写着写着就把开头写成了鸡汤文，&lt;code class=&quot;highlighter-rouge&quot;&gt;[捂脸](./wechat/emoji.jpg)&lt;/code&gt;。但是咧，如果前面讲的是「道」，那么接下来就会具体到基于 GitHub 的「术」，即各种实践。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;首先，让我们从需求出发，从市面上来寻找一款符合敏捷的学习软件，别想了，当然是没有的。对于一名程序猿来说，&lt;strong&gt;最理想的答案其实就是 GitHub&lt;/strong&gt;，作为全球最大的程序猿&lt;del&gt;（交友）&lt;/del&gt;网站，GitHub 本身以及围绕 GitHub 的各种插件使得其项目管理能力远比你所能想象的厉害得多。&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;收集：需求无时无刻，无处不在，anywhere anytime&lt;/li&gt;  &lt;li&gt;整理：as BA，即分析，Elaboration &amp;amp; Estimation &amp;amp; IPM =&amp;gt; 确定 MVP &amp;amp; Efforts&lt;/li&gt;  &lt;li&gt;执行：as Dev &amp;amp; QA，Developing &amp;amp; Testing &amp;amp; Review/Sign-Off&lt;/li&gt;  &lt;li&gt;回顾：Retrospection，Introspection，持续反思，持续进步…&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;通过-github-issues-收集需求&quot;&gt;通过 GitHub Issues 收集需求&lt;/h4&gt;&lt;p&gt;首先你可以给自己建一个 GitHub 仓库作为主页，比如我的 &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io&quot;&gt;JimmyLv/jimmylv.github.io: Agile Learning based on GitHub issues&lt;/a&gt; ，最开始就是从&lt;a href=&quot;http://blog.jimmylv.info/&quot;&gt;个人博客&lt;/a&gt;的主仓库发展而来。那么，如何快速收纳自己的想法呢？以解决问题为导向，就是有什么需求就直接给自己的 repo 建一个 issue 作为 Story Card，了却这个需求的最终形态就是 close 掉这个 Issue，比如我要写这篇文章就始于这个 issue：&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/36&quot;&gt;基于 GitHub 的敏捷学习方法总结 · Issue #36&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/1-GitHub-README.png&quot;&gt;&lt;img src=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/1-GitHub-README-1024x580.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h5 id=&quot;github-issues-的进阶用法&quot;&gt;GitHub issues 的进阶用法&lt;/h5&gt;&lt;p&gt;与此同时，新建 issue 还有更高级的用法，也就是通过 &lt;a href=&quot;https://help.github.com/articles/creating-an-issue-template-for-your-repository/&quot;&gt;ISSUE_TEMPLATE&lt;/a&gt; 这样一个模板来新建某个 issue，从而更快地定位问题所在和解析自己的想法，最主要的是能够输出更具体的 TODOs，即下一步行动的具体内容，这个还会在后面详细解释。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/2-New-issue-1.png&quot;&gt;&lt;img src=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/2-New-issue-1-1024x634.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;issue 和 issue 之间是可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; 相互连接，甚至可以跨仓库，被 reference 的 issue 也会出现在另外一边的 issue 里面；&lt;/li&gt;  &lt;li&gt;而通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;#!&lt;/code&gt; 符号是可以在 comments 里面直接新建一个 issue ，这在思维爆炸的时候来得特别爽快；&lt;/li&gt;  &lt;li&gt;你还可以随意艾特你的小伙伴们，互相监督、互相学习或者给出 Constructive Feedback 之类的，😂；&lt;/li&gt;  &lt;li&gt;更甚至于，若是在 Intellij 里面关联了 GitHub，就可以在 git commit 信息里面直接看到你所要关联的 issues 列表了。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这种方式仿佛学习中的大脑，神经网络被连通了的感觉。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/3-Intellij-Issues.png&quot;&gt;&lt;img src=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/3-Intellij-Issues-1024x495.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h5 id=&quot;移动端的解决方案&quot;&gt;移动端的解决方案&lt;/h5&gt;&lt;p&gt;而在移动端则可以通过 &lt;a href=&quot;http://gitdo.io/&quot;&gt;GitDo&lt;/a&gt; 这个 App 来轻松新建和管理自己的 Issues，没错，就是有人把 GitHub issues 做成了一个 Todos 类 App，还做得很漂亮功能很完善。只是不知为何这软件最近被下架了，伤感，我就又重新把滴答清单（TickTick）作为自己的万能收集箱了，之后再把比较重要的、需要进一步追踪的事项添加到 GitHub issues 里面来。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/4-GitDo.png&quot;&gt;&lt;img src=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/4-GitDo.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h4 id=&quot;整理你的-github-issues&quot;&gt;整理你的 GitHub Issues&lt;/h4&gt;&lt;p&gt;大胆地把 issues 作为你的个人需求列表吧，需要解决的问题可以大到做一个开源项目，或者小到读一本书、写一篇文章。对于比较大的需求，你还可以将其转化为 Epic 然后把拆分过后的小 issues 们加入到这个列表里面来。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/5-Epic.png&quot;&gt;&lt;img src=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/5-Epic-1024x532.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;而 GitHub (with &lt;a href=&quot;https://www.zenhub.com/&quot;&gt;ZenHub&lt;/a&gt;) 强大的 issues 管理能力绝对会让你的迭代工作变得井井有条，使用 GitHub 新出的 &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/projects/1&quot;&gt;Projects&lt;/a&gt; 特性或者使用 ZenHub 的 &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/100#boards?repos=13273392&quot;&gt;Boards&lt;/a&gt; 就可以让你瞬间拥有日常敏捷工作的感觉了吧！&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/6-ZenHub-piepline.png&quot;&gt;&lt;img src=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/6-ZenHub-piepline-1024x526.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h4 id=&quot;计划与执行具体任务&quot;&gt;计划与执行具体任务&lt;/h4&gt;&lt;h5 id=&quot;制定迭代计划&quot;&gt;制定迭代计划&lt;/h5&gt;&lt;p&gt;首先，让我们新建一个 &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/milestones?state=open&quot;&gt;Milestone&lt;/a&gt; 来制定计划，也就是决定在一个 Iteration 里面你需要完成哪些 issues。在这里我所制定的阶段性计划周期为一个月，当然你也可以勤快一点，以2周作为一个 Iteration，享受一下自己的计划要完成不了、这个 Milestone 就要废了，没法向「时间」这个一生的朋友交付所有需求的快感吧 ：）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/7-Milestone.png&quot;&gt;&lt;img src=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/7-Milestone.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;当然咯，一般我会在月初做计划的时候给自己准备专门的时间来做 Elaboration，把 Backlog 里面的卡拖到 Rethink/Plan 这一列，经过分析和详细输出 TODOs 以及所对应的估点 points 之后便可以将其拖到 Ready For Todo 了，一般我给自己估的点数就是完成这件事情所需要的时间，一小时即对应一个 point。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/8-Iteration.png&quot;&gt;&lt;img src=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/8-Iteration-1024x490.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;这样你就可以愉快的选择 Filter Issues by Milestone 专注于当前 Iteration，专注于 In Progress 这一列所要做的事情，并且垂涎于 Ready For Todo 里面将要做的事情，每次做完还可以放到 Review/SignOff，在里面写写对这件事情的总结和感想什么的，每次挪卡都充满了敏捷的仪式感（认真脸）。&lt;/p&gt;&lt;h5 id=&quot;进度的把控&quot;&gt;进度的把控&lt;/h5&gt;&lt;p&gt;GitHub 在 issues 里面直接集成了 Markdown 的 TODO 语法，甚至于可以在渲染过后直接拖动某个 item 进行排序，而且可以在前面的勾选项中直接打勾 ☑️ 标记为完成。不仅如此，完成之后这个 issue 还能直接显示完成进度；前面所提到的 Epic 也能直接显示子 issues 的完成情况即 closed 比例，两者结合起来简直不能再美好。&lt;/p&gt;&lt;p&gt;比如说拿来作为读书列表的记录就很不错，每本书作为一个 issue，还可以把章节划分为具体的 TODOs，结合估点追踪自己看书的进度和速度，顺便在 comments 底下做个笔记也不错啊！&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/9-TODOs.png&quot;&gt;&lt;img src=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/9-TODOs-1024x710.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h5 id=&quot;专注当下&quot;&gt;专注当下&lt;/h5&gt;&lt;p&gt;ZenHub 还提供了一个基于 GitHub Issues 的 To do List，你可以只关注 Today 这一个列表，专心于当前要完成的任务。而且更有趣的是这个 list 可以加入 GitHub 的任何 issues，也就是说它是全局的，所以你可以加入很多在 GitHub 上通过 issues 写的 blog，比如徐飞的这篇文章&lt;a href=&quot;https://github.com/xufei/blog/issues/38&quot;&gt;流动的数据——使用 RxJS 构造复杂单页应用的数据逻辑 · Issue #38 · xufei/blog&lt;/a&gt;，被我加入到了 Reading列表当中。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/10-Things-to-do.png&quot;&gt;&lt;img src=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/10-Things-to-do-1024x481.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;与此同时我还会使用 &lt;a href=&quot;https://toggl.com/&quot;&gt;Toggl&lt;/a&gt; 来记录每个 issue 具体实施的时间，以便于在时间花费上能够获得及时的反馈。这样做会让你真切地感受到时间的流逝，而在回顾记录的时候也能够进行总结分析，从而在下一次的计划当中更精确地预估时间（点数）。比方说这篇文章我估了 5 个点现在已经写了 4.5 hours 了，不过这是另外一个大话题，可以参考 &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/85&quot;&gt;记录时间这件小事儿&lt;/a&gt; 这个 issue。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/11-Toggl.png&quot;&gt;&lt;img src=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/11-Toggl-1024x309.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h4 id=&quot;迭代回顾与总结分析&quot;&gt;迭代回顾与总结分析&lt;/h4&gt;&lt;p&gt;ZenHub 也提供了 Burndown 和 Velocity tracking 图，可以得出这个迭代总体的完成情况，看看跟预期有何不同；也可以跟其他迭代进行对比，看看有何不同的地方，然后进行下一步的具体分析。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/12-Burndown.png&quot;&gt;&lt;img src=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/12-Burndown.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;还可以根据 GitHub 和 Toggl 里面的数据进行汇总和分析，下面这个表格就是我在 11 月这个迭代完成后一部分 issues 的具体 Estimation Points 和 Time Efforts，再结合 issues 里面所记录下的各种笔记和 references，来得到一个比较直观的总结和复盘。&lt;/p&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;Number &amp;amp; Description&lt;/th&gt;      &lt;th&gt;Estimation Points&lt;/th&gt;      &lt;th&gt;Time Efforts&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/85&quot;&gt;#85&lt;/a&gt; 记录时间这件小事儿&lt;/td&gt;      &lt;td&gt;3&lt;/td&gt;      &lt;td&gt;04:26:18&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/96&quot;&gt;#96&lt;/a&gt; 如何对时间进行分类？&lt;/td&gt;      &lt;td&gt;8&lt;/td&gt;      &lt;td&gt;03:00:09&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/102&quot;&gt;#102&lt;/a&gt; 建立个人 Wiki 系统&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;02:53:56&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/101&quot;&gt;#101&lt;/a&gt; 技术雷达宣讲：enzyme 测试框架&lt;/td&gt;      &lt;td&gt;5&lt;/td&gt;      &lt;td&gt;06:11:19&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/90&quot;&gt;#90&lt;/a&gt; Working time improvement&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;33:27 min&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/97&quot;&gt;#97&lt;/a&gt; 如何使用 XX 的标签系统？&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;25:21 min&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;h5 id=&quot;其他辅助工具&quot;&gt;其他辅助工具&lt;/h5&gt;&lt;ul&gt;  &lt;li&gt;看板：as Jira/&lt;a href=&quot;https://trello.com/&quot;&gt;Trello&lt;/a&gt;，可视化当前进度 =&amp;gt; GitHub Issues group by @Projects / 日历 in @滴答清单；如果你不想用 ZenHub ，可以试试 &lt;a href=&quot;http://gitlo.co/&quot;&gt;Gitlo&lt;/a&gt; ，可以在 GitHub issues 和 Trello 之间进行双向同步。&lt;/li&gt;  &lt;li&gt;晨间日记/每日回顾：as Stand-Up，只用关注 Timeline/Done/Todo/Blocker 以及当天的心情/天气等等，使用 @&lt;a href=&quot;http://griddiaryapp.com/zh/&quot;&gt;格志日记&lt;/a&gt;的一个特点就是可以通过问答的方式对一天进行回顾。&lt;/li&gt;  &lt;li&gt;时间记录：@&lt;a href=&quot;http://timeblocks-simple-daily-activi.appstor.io/zh/&quot;&gt;时间块&lt;/a&gt;的优点在于记录起来非常简单、快捷，是用户评论中最省时间的时间记录工具，没有之一，推荐新手试试。但由于个人需要更加详细的记录细节和报告分析，以及多平台（包括 Chrome Extension）的支持，从而选择了 @&lt;a href=&quot;https://toggl.com/app/timer&quot;&gt;Toggl&lt;/a&gt;。&lt;/li&gt;  &lt;li&gt;白噪声：作为一款时间记录工具，@&lt;a href=&quot;https://toggl.com/app/timer&quot;&gt;Toggl&lt;/a&gt; 本身就支持 Pomodoro 的 25 分钟提示。而作为专注力辅助的白噪声软件我在手机上用的 @&lt;a href=&quot;https://itunes.apple.com/tw/app/chao-xi-mei-hao-fan-jia-zhong/id1077776989?l=zh&amp;amp;mt=8&quot;&gt;潮汐&lt;/a&gt;，电脑上则选择了 @&lt;a href=&quot;http://noiz.io/&quot;&gt;Noizio&lt;/a&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;后话&quot;&gt;后话&lt;/h3&gt;&lt;p&gt;也许你很喜欢这个解决方案但又不太想公开自己的 issues 列表，那可以试试 GitHub 的 private repo（需要付费），免费的可以试试 GitLab，支持从 GitHub 一键导入，并且已经原生支持了 pipeline 和看板功能。当然，不限于工具或软件，这一套方法论其实是可以运用在任何地方的，甚至于我们可以来做一个结合敏捷方法论的个人学习管理软件也不错。&lt;/p&gt;&lt;p&gt;但是于我而言，选择在 GitHub 这样一个公开环境下记录学习的最大一个动机就在于「开源」，很喜欢一句话，大意是「&lt;strong&gt;在这个互联网时代，能限制住学习的只有你的求知欲&lt;/strong&gt;」。&lt;/p&gt;&lt;p&gt;当你从互联网这个广阔的知识海洋当中汲取知识时，也应当有所输出，即反哺到整个互联网当中去。我会经常写博客/笔记来总结、分享自己的所学，但是一篇文章诞生的背后往往还有很多其他知识和经验的相互交融与沉淀。&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues&quot;&gt;Issues · JimmyLv/jimmylv.github.io&lt;/a&gt; 这个列表里面的某个 issues 最终能否演变成一篇文章我不知道，但是基于 GitHub 开放式的学习历程都会被这些 issues 如实地记录着，任何一个想法都能追本溯源被找出最开始的缘由。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;相比于软件开发这件小事儿，健康快乐地成长显然要重要得多。—— 立青&lt;/p&gt;&lt;/blockquote&gt;",
            "excerpt"    : "&lt;blockquote&gt;  &lt;p&gt;持续行动，持续反思，持续进步。—— via. 敏捷学习宣言&lt;/p&gt;&lt;/blockquote&gt;"
		} ,
	
		{
            "id"         : "/tech-radar-react-testing-with-enzyme",
            "title"      : "「技术雷达」之 React (Native) Testing with Enzyme",
            "category"   : "演讲",
            "tags"       : "React, ReactNaitve, Enzyme, UI, UnitTest",
            "url"        : "/2016-11-30-tech-radar-react-testing-with-enzyme/",
            "path"       : "_posts/演讲/2016-11-30-tech-radar-react-testing-with-enzyme.md",
            "next"       : "/2016-12-04-agile-learning-based-on-github-issues/",
            "previous"   : "/2016-11-19-input-and-output-of-PKM/",
            "date"       : "2016-11-30 00:00:00 +0000",
            "shortdate"  : "November 30, 2016",
            "content"    : "&lt;p&gt;30 min = 15 min * 2&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;react-native-testing-with-enzyme&quot;&gt;React (Native) Testing with Enzyme&lt;/h1&gt;&lt;p&gt;&lt;small&gt;via &lt;strong&gt;Jimmy Lv&lt;/strong&gt;&lt;/small&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;模块化管理&quot;&gt;模块化管理？&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;javascript-模块化&quot;&gt;JavaScript 模块化&lt;/h1&gt;&lt;hr /&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;enzyme&#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Enzyme Shallow&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;App should have title equals to Todos&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;h1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Todos&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;enzyme&#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Enzyme Render&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Todo item should not have todo-done class&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.todo-done&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;enzyme&#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Enzyme Mount&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;should delete Todo when click button&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todoLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;li&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;button.delete&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;li&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todoLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;simulates click events&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onButtonClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sinon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onButtonClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onButtonClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;button&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onButtonClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calledOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* CSS Selector */&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.foo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//class syntax&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;input&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//tag syntax&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;#foo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//id syntax &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;[htmlFor=&quot;foo&quot;]&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//prop syntax&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* Component Constructor */&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;displayName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;MyComponent&#39;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;MyComponent&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* Object Property Selector */&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;baz&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;baz&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide data-on-leave=”outcallback”]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;nobackend-website&quot;&gt;&lt;a href=&quot;http://nobackend.website&quot;&gt;NoBackend Website&lt;/a&gt;&lt;/h1&gt;&lt;hr /&gt;&lt;iframe data-src=&quot;http://nobackend.website&quot; src=&quot;about:blank&quot;&gt;&lt;/iframe&gt;",
            "excerpt"    : "&lt;p&gt;30 min = 15 min * 2&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/input-and-output-of-PKM",
            "title"      : "渐进式知识管理：写作动机与分享的价值影响",
            "category"   : "思考",
            "tags"       : "学习, PKM, 成长, 敏捷, iPhone, Diigo",
            "url"        : "/2016-11-19-input-and-output-of-PKM/",
            "path"       : "_posts/思考/2016-11-19-input-and-output-of-PKM.md",
            "next"       : "/2016-11-30-tech-radar-react-testing-with-enzyme/",
            "previous"   : "/2016-10-26-technology-make-world-better-place/",
            "date"       : "2016-11-19 00:00:00 +0000",
            "shortdate"  : "November 19, 2016",
            "content"    : "&lt;h2 id=&quot;从关注输入端到开始注重输出端&quot;&gt;从关注输入端到开始注重输出端&lt;/h2&gt;&lt;p&gt;曾几何时 🙂，我一直关注的是如何将互联网上广阔繁杂的信息转化为自己的知识，一再讨论的都是如何更有成效纳入已有知识体系当中。可以说&lt;strong&gt;在知识管理输入端的问题都已经得到了比较完善的解答&lt;/strong&gt;，比如如何更有效得搜索到想要的信息，或者是想要的资源如书籍 PDF 等等；当然也能够比较高效得收纳所获取到的重要信息，其实就用 Diigo 进行标注、加标签、以及分类整理。&lt;/p&gt;&lt;p&gt;那么自然而然地，接下来的事情就是如何将这些知识变成自己的东西，一方面需要重新建立起属于自己个人的知识体系，那与此同时，当然也可以将其输出到即反哺到整个互联网当中去。比较有意思的，或者是说想去做的几个点：第一个便是自动化脚本，将自己的输出能够最大化地扩散到互联网当中，并且能够分析出影响力的大小，比如说统计一下这篇文章在某个平台的阅读量和收藏量等等。从长远的角度来说，可以对所写的一系列文章进行一个数据总结分析，观察哪一些文章的点击量比较高，或者是哪些文章的所表现出来的价值比较高。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;走神：用上了讯飞语音输入法，冷不丁地，或者是一不小心地，就写起了长文。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;写作的动机与价值&quot;&gt;写作的动机与价值&lt;/h2&gt;&lt;p&gt;那么接下来需要讨论的就是，如何更加高效地写作，将已有的知识分享出去并且实现价值最大化。&lt;/p&gt;&lt;p&gt;自从入职以来，或者是入职前培训以来，我已经创造了每个月必有一篇博客发布的记录，与此同时，还有很多其他地方也有所记录，比如说知乎回答，或者是日记和一些私人的笔记，这些东西都伴随着个人的成长而沉淀下来。就像当初自己所说的那样，&lt;strong&gt;在一个人还没有资本的时候，为什么要忙着去社交呢？&lt;/strong&gt;在你没有足够的资本的时候，你如何给他人带来价值，与此同时当对方从你的身上得不到任何利益的时候，他又为什么要把你作为朋友呢？但是现在随着自己的积累越来越多，我也能够有一定的资本去跟他人探讨一些问题，也能够将自己的知识有所付出。&lt;/p&gt;&lt;p&gt;如果说以前的问题是如何让自己成长为一个有资本的人，那么现在的问题就变成了如何更快、更好、更恰当地输出已有的资本。说服力便是其中很重要的一项，如何在与他人沟通时使他人信服，或者是如何通过一篇文章清晰地阐述一个话题、讲明白一个道理。&lt;/p&gt;&lt;p&gt;也许很多模式可以参考，比如说 &lt;a href=&quot;http://wiki.mbalib.com/wiki/5W2H%E5%88%86%E6%9E%90%E6%B3%95&quot;&gt;5W2H 分析法&lt;/a&gt;，或者是参照书籍的目录，就可以直接获得比较完整的大局观。再或者，将自己所收纳的标注片段整理成文，这其实就是最高效的最快速的一种写作方式。知识有散有全，&lt;strong&gt;当你把散落在四处的知识都整理到一块的时候，其实也是一种伟大的创作&lt;/strong&gt;。就比如说 iPhone，乔布斯并没有发明任何新技术，只是将各种新兴的技术融合在一起，就诞生了影响我们周遭生活的一个伟大颠覆。&lt;/p&gt;&lt;p&gt;这篇文章探讨的就是如何将输入的知识整理成体系，然后更加高效快速地进行输出。这样的一个闭环系统，当然会使自己的知识结构更加牢固，而与此同时也是对互联网开放精神的一个传承，她赋予了我们这么多美妙的知识，&lt;strong&gt;准确来说是获取知识的「机会」&lt;/strong&gt;，那我们当然也应该有所回馈。&lt;/p&gt;&lt;h2 id=&quot;目前写作的最佳套路&quot;&gt;目前写作的最佳套路&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;走神：我就这样围着小区转了一圈，从后门走到了前门，然后这篇文章就已经写了这么多了，让我深表欣慰，回去再稍微删删改改，大概就是一篇比较完整的文章了。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;也许在今后，这就是我集休息和写作于一体的一种方式，性价比超高，我可以一边走路一边放松，而与此同时也可以&lt;strong&gt;让自己满脑袋的思绪有所安放&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;的确，如何写一篇文章是有学问的，我相信也有很多书可以覆盖这方面的套路。就像《如何阅读一本书》这本经久不衰的关于阅读的书，虽然我还没有来得及看完，但是我相信如同阅读关于写作的书也会自然而然层出不穷地被我发现。&lt;/p&gt;&lt;p&gt;就目前来说，自己的套路往往都是想到哪写到哪，往往都会写得很长却找不到主干。就拿技术文章来说，其实原创的内容反而很少很少，总是不知道如何下笔。其实翻译的文章也很多，自己就会发现这些文章比自己用中文写出来的文章都要有结构得多。所以以后看文章的时候，也要多学学套路，看看人家是怎么讲述一个话题的，并且如何把它讲得透彻和浅显易懂。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;走神：我就这样坐在小区里的长凳上，听着好像是蟋蟀的&lt;del&gt;蟋蟀&lt;/del&gt;声，但这可是冬天啊！然后就发现自己也写不出什么文艺的文字，连这种偏理性和逻辑性的文章，也没办法很好地产出。技术啊技术，工程呀工程，是不是让我变得更加木讷更加没有逻辑了呢，成天就&lt;em&gt;靠复制粘贴和那不断尝试的耐心来一点一点完成任务&lt;/em&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;写作所引发的深层级思考&quot;&gt;写作所引发的深层级思考&lt;/h2&gt;&lt;p&gt;有些东西学到了就是学到了，但是当你没有自己的思考的时候，你就会发现那些东西其实并不是你自己的。可能你跟人家的想法是一样的，但别人其实发现得比你早得多。如果你跟别人的想法不太一样，那有可能是不是因为你自己错了呢？作为国人，英语还比较好的国人，其实也不过是在 follow 英语环境下的最新技术产出。你的英语好，当然就能解决更快地解决这些问题，也能够获得更新的观念，但终究好像还是其他人的。&lt;/p&gt;&lt;p&gt;远远不至于就可以得意忘形了吧，最佳实践往往都来自于经验，&lt;strong&gt;当你比较晚得进入某个领域，自然就得跟随别人的实践理论和总结。&lt;/strong&gt;所以呢？你也必须在自己的领域进行更深层次的探索与研究，从而总结出属于自己的东西。而不只是看上几篇文章，发现新的观念然后把它翻译出来或者用中文总结出来，就好像是自己的东西了一样。&lt;/p&gt;&lt;p&gt;很明显的就是，对比一下自己关于知识管理/效率提升跟技术写作方面的文章，这两者很明显得就有比较大的区别，一个是自己亲身实践不断改善的结果，而另外一个只是 follow 别人的实践最后自己稍微总结一下而已，思考深度远远不及前者。&lt;/p&gt;&lt;h2 id=&quot;渐进式的知识管理&quot;&gt;渐进式的知识管理&lt;/h2&gt;&lt;p&gt;所谓渐进式，其实就是想营造这样一个观念，即知识管理不是可以一蹴而就的，而是慢慢地找到属于自己的方法和节奏。就像敏捷开发一样，一点一点完成这属于自己的产品，&lt;strong&gt;自我成长本身就像是经营者一件伟大的事业，一场一生一次且只属于自己一个人的事业&lt;/strong&gt;。成长就像开发一样，怎么样做得更好、更高效以及更加有质量，这就是本文所想探讨的问题。而在这个过程当中，必然会有不断改进的地方，就像曾经尝试过的种种方式和软件工具，有可能一开始就选择正确，也有可能误入了歪门邪道而又重新醒悟。但是终究，我们都是勇往直前、拥抱变化的那个人，不论学习的内容如何，一直都会坚持到底。&lt;/p&gt;&lt;p&gt;于我而言，早已写过太多知识管理这方面的文章，但是却依然向前，不管改变与完善。毕竟知识无穷无尽，活到老、学到老就是了，又何必太纠结于方法的高效与否，吸收了多少知识并不那么重要，更重要的反而是自己可以给这个世界留下多少为人所用的知识呢？&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;从关注输入端到开始注重输出端&quot;&gt;从关注输入端到开始注重输出端&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/technology-make-world-better-place",
            "title"      : "小幸运：科技带来的持续感动",
            "category"   : "思考",
            "tags"       : "学习, 区块链, 手机, 小米, Python, ThoughtWorks",
            "url"        : "/2016-10-26-technology-make-world-better-place/",
            "path"       : "_posts/思考/2016-10-26-technology-make-world-better-place.md",
            "next"       : "/2016-11-19-input-and-output-of-PKM/",
            "previous"   : "/2016-09-18-jsconf-summary-feature-team-and-developer-experience/",
            "date"       : "2016-10-26 00:00:00 +0000",
            "shortdate"  : "October 26, 2016",
            "content"    : "&lt;blockquote&gt;  &lt;p&gt;很久没有写文章了，零零碎碎记了一些东西却也没能把它们串联起来；&lt;/p&gt;  &lt;p&gt;毕竟我也不想断掉每个月都有文章发布的成就……&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;最近经常会困惑于科技，也常常感动于科技，这不，看到小米发布了全面屏的 &lt;a href=&quot;http://www.mi.com/mix/&quot;&gt;MIX 手机&lt;/a&gt;以及相关的几个工程师采访视频，就真的很想写点什么，有关于科技所带来的感动，关于小米，关于创新，以及这个被科技不断改变着的整个世界。&lt;/p&gt;&lt;p&gt;小米从被捧被骂被黑，再到重新震惊全场，走过的不仅仅是心酸，其本身也足够体现一个科技企业在这个最坏又最好的时代不断找寻未来的结果。&lt;/p&gt;&lt;p&gt;当年的我对于科技产品的感知并非敏感，甚至于完全没有见识。&lt;/p&gt;&lt;p&gt;2011 年 8 月，也就是在我高考结束即将迈入大学的那个暑假，最后也是最长的暑假里，我拥有了自己的第一款手机，诺基亚 + 塞班系统，还记得 1800 左右的价格。而那时，距离首代 iPhone 的发布竟然都已过去了 4 个年头，诺基亚正在被各大新闻媒体不断唱衰，安卓手机刚刚出现不久，摩托罗拉还是独立品牌，做着当时应该说是最好也是最热门的安卓手机 —— 戴妃，感谢你在我的小米手机被偷之后还依然坚挺了那么久，经得起刷机，经得起不停的断电重启。&lt;/p&gt;&lt;p&gt;这样一来，真的是没有想到我的视野竟然会如此之短视，大概是因为我连新闻都很少看，一心只读圣贤书，被深深压抑消耗意志力的高考所折磨着而已。幸好，步入大学的我有足够的时间去重新认识这个世界，经由互联网去触及我所不能体验的经历。我不再轻易听从所谓长辈的意见，虽然心有所切，但他们也没能有经过理智思考并跟随时代所变化的道理。而视野，也是需要财富和权力的代价吧，至少在那个信息还足够阻塞的时代。&lt;/p&gt;&lt;p&gt;互联网的精粹，就是在于一切都可以被触及，而感动自己的不仅仅只是虚幻。我看到了很多的恶，在互联网上不断弥漫与重现。但与此同时，也是幸好，互联网让我见识到了本不可能触及的东西，也有了足够的机会去探索可能，一种可以将全人类的命运变得更加美好的可能。&lt;/p&gt;&lt;p&gt;思考总是有趣的，学习本身就很快乐。&lt;/p&gt;&lt;p&gt;区块链，一种去中心化的构建信任的技术解决方案，不用再局限于它在比特币上的应用，比特币的价格波动跟区块链技术本身并没有太大关系。当区块链能够真切得实现改变世界的梦想的时候，围绕区块链和以太坊的一系列开源技术，都将是最伟大的发明和创造，而这一切竟然也是可以被我们轻易触及和学习到的。&lt;/p&gt;&lt;p&gt;没想到的是，以前的一切点点滴滴都可以在某时某刻被串联在一起，就比如曾经的诺基亚、摩托罗拉，现在的小米和苹果，都在我不断的选择当中注入着精神上的信仰。也许曾经有过情怀敌不过性价比的感伤，但终究一切拼的都是实力，还是工程的能力和实践的经验最能说明问题，胜败输赢都只是时间问题。&lt;/p&gt;&lt;p&gt;若是魅族和乐视输了，最后活不下去了，我并不会觉得这世间有多么残酷，因为毕竟都还是商业规律而已；你们最后变得有多好，我也不会觉得这世间有多么美好，因为还是商业规律而已。商业之间的输赢只在于经营运作，看谁能够不落队，不犯低级错误。&lt;/p&gt;&lt;p&gt;精益创业，不断迭代的产品思维或许能够更加快速得在市场中站立脚跟，但是却不能够再给用户带来多少惊喜。或许实力型创新和迭代更新应当同步进行，给客户以足够的信心保留忠诚度，又给予超乎期望的惊喜充值信仰。&lt;/p&gt;&lt;p&gt;曾经的我会因为魅族一场吹逼的发布会而买了 MX4，虽然至今依然足够喜欢它的正面小圆点，也会舍不得卖掉而将其视作正面熄屏最美的手机。然而在操作系统层级，建立在 Android 版本升级过后的基础之上，系统速度优化还算说得过去，但是若依然停留在 Android 4.x 内核却敢在发布会上如此吹嘘，我只能说你自己打脸了也别怪我在升级系统获得流畅体验过后还依然怀恨在心。&lt;/p&gt;&lt;p&gt;也还会记得最初因为缘分所邂逅的小米手机 2，也惊叹于那时的手机竟然可以做得那么好用和便宜，毕竟那个时候各大国际品牌依然贵球的要死，毕竟那个时候的安卓手机还是那么得不争气。&lt;/p&gt;&lt;p&gt;视野拉回此时此刻，时光不会倒流，曾经的选择也不会再有一个重来的机会。站在现在的科技市场上来说，小米早已不是一家单纯的手机公司，它的价值也不仅仅是 MIX 横空出世引领手机的未来概念，而是初心依旧：「用最便宜的价格给用户最好的产品，让每一个人都能享受科技的乐趣」。而这些产品，也早已不再局限于手机维度而已，同样的价格买上一台 iPhone 的幸福感是绝对比不上买整套「米家」智能家居产品的。&lt;/p&gt;&lt;p&gt;世间繁杂之事如此之多，多到让人想要逃离，科技让整个世界互通，但与此同时也会带来困扰。逃避不是最合适的答案，也不是弊大于利的理性选择，甚至于我会更加倾向于享受科技的乐趣，然后找出解决方案来规避问题。&lt;/p&gt;&lt;p&gt;每个人都会有自己的选择，而这些选择也是实在无法确定其在未来会带来多大的用途，在这些选择的背后，其实都是自身价值观的一种体现。如何学习以及学习的代价，都建立在我愿意为了价值观所能付出的努力有多少，在做出选择的同时也就意味着丧失了其他选择的机会成本，那只要问心无愧就一定是走在正确的道路之上。&lt;/p&gt;&lt;p&gt;再来谈谈互联网和开源，以及学习区块链技术的一点儿分析。&lt;/p&gt;&lt;p&gt;幸好于加入 ThoughtWorks 这家公司让我看到了更多，视野的重要性也就在于让你不断刷新知识面，以及不断加固价值观体系和想做某件事情的念头，若是找到答案的同时还有学习和发挥的自由，那便是走在路上的美好。&lt;/p&gt;&lt;p&gt;幸好于学习过 Python ，原本以为自己会去做大数据分析、云计算和智能硬件原本有可能去做的技术，亦或是人工智能和 AR/VR 这样最近才火热起来的新技术，或许都会用上 Python 这门语言，但是都远不如当我听过区块链这项技术中有提到和运用 Python 时的兴奋。&lt;/p&gt;&lt;p&gt;一切都像是有缘由地被聚在一起，一切都可以被互联在一起，创造着感动。这也是科技和创新在不断创造的同时，也让自己能够借助科技创造新的感动。&lt;/p&gt;&lt;p&gt;这个世界就是这样美好，让你有足够的幸运，去拥有改变世界的机会。&lt;/p&gt;",
            "excerpt"    : "&lt;blockquote&gt;  &lt;p&gt;很久没有写文章了，零零碎碎记了一些东西却也没能把它们串联起来；&lt;/p&gt;  &lt;p&gt;毕竟我也不想断掉每个月都有文章发布的成就……&lt;/p&gt;&lt;/blockquote&gt;"
		} ,
	
		{
            "id"         : "/jsconf-summary-feature-team-and-developer-experience",
            "title"      : "JSConf 2016 (Ning)",
            "category"   : "演讲",
            "tags"       : "JavaScript, Conf, DX, FullStack",
            "url"        : "/2016-09-18-jsconf-summary-feature-team-and-developer-experience/",
            "path"       : "_posts/演讲/2016-09-18-jsconf-summary-feature-team-and-developer-experience.md",
            "next"       : "/2016-10-26-technology-make-world-better-place/",
            "previous"   : "/2016-09-16-sorting-out-knowledge-from-information/",
            "date"       : "2016-09-18 00:00:00 +0000",
            "shortdate"  : "September 18, 2016",
            "content"    : "&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;jsconf-2016&quot;&gt;JSConf 2016&lt;/h1&gt;&lt;h2 id=&quot;whats-better-developer-experience--how-to-build-fullstack-application-by-feature&quot;&gt;What’s better Developer Experience &amp;amp; How to build FullStack Application by feature?&lt;/h2&gt;&lt;p&gt;&lt;small&gt;via &lt;strong&gt;Jimmy Lv&lt;/strong&gt;&lt;/small&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;iframe id=&quot;preview&quot; style=&quot;height: 600px;&quot; frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;100%&quot; src=&quot;https://lecture.jimmylv.info/assets/2016-09-18-jsconf-summary-feature-team-and-developer-experience.pdf&quot;&gt;&lt;/iframe&gt;",
            "excerpt"    : "&lt;p&gt;[slide]&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/sorting-out-knowledge-from-information",
            "title"      : "不断革新，不断改进：去伪存真的知识管理之路",
            "category"   : "思考",
            "tags"       : "学习, Rethink, PKM, 效率, 笔记, 印象笔记, Diigo",
            "url"        : "/2016-09-16-sorting-out-knowledge-from-information/",
            "path"       : "_posts/思考/2016-09-16-sorting-out-knowledge-from-information.md",
            "next"       : "/2016-09-18-jsconf-summary-feature-team-and-developer-experience/",
            "previous"   : "/2016-08-17-linux-shell-workshop-note/",
            "date"       : "2016-09-16 00:00:00 +0000",
            "shortdate"  : "September 16, 2016",
            "content"    : "&lt;blockquote&gt;  &lt;p&gt;「不断革新，不断改进。」—— via. 敏捷学习宣言&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;曾经写过一篇：&lt;a href=&quot;http://blog.jimmylv.info/2016-07-12-pkm-again-to-innovate-my-note-system/&quot;&gt;再谈个人知识管理：革新我的笔记系统&lt;/a&gt;，如今我又来亲自打自己的脸了。现在回过头去看上一篇内容时，最大的一个感受就是缺失了应用场景和情境性，看似介绍了很多好用的功能，但其实并没有串连到一起从而发挥实际运用的价值。这篇文章依旧会从 &lt;code class=&quot;highlighter-rouge&quot;&gt;材料 -&amp;gt; 资料 -&amp;gt; 知识&lt;/code&gt; 这样的路径来解释信息的流通，如何方便快捷并且&lt;strong&gt;有效地&lt;/strong&gt;收集材料，再将其整理转化为有价值的知识体系结构，便是本文的重点。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2b96qzpcj30hg079gll.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;收集&quot;&gt;收集&lt;/h2&gt;&lt;p&gt;对于如何收集的思考主要是来源于整理书签的时候，发现把一个网页收藏成书签并没有什么卵用，书签里的东西应该从来不会再被主动搜索并打开。&lt;strong&gt;其最大的作用就是在 Chrome 的搜索栏（Omnibox）里面，通过模糊匹配的方式快速打开历史记录或者书签&lt;/strong&gt;，想搜某个关键词的时候真心挺方便的，还没有进入 Google 搜索就从弹出选项里发现：😯，原来自己曾经收藏过，或者曾经访问过类似网页。而与此同时，最近还发现了一个能对历史记录进行全文搜索的工具：&lt;a href=&quot;https://github.com/lengstrom/falcon&quot;&gt;lengstrom/falcon: Chrome extension for full text history search!&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181030134618.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;让我们再次回到人为什么会要收集书签这个话题，可能是因为人人都有收藏癖，遇到了好玩的、有用的都想把它们收藏起来，以便今后会用到。然而！经过这么久的使用之后，我发现很多书签其实并没有被用到，用到的场景也仅限于搜索栏。那么，&lt;strong&gt;还不如在最开始的就一次性将其纳入我的整理箱，从而更快速地归于整体的知识结构体系的一部分&lt;/strong&gt;，而如何又将这些碎片进行整理得出框架，则是另外一个话题。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%9B%B8%E7%B1%A4_(%E7%80%8F%E8%A6%BD%E5%99%A8)&quot;&gt;书签 (万维网) - 维基百科，自由的百科全书&lt;/a&gt;：&lt;strong&gt;书签&lt;/strong&gt;是&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%80%8F%E8%A6%BD%E5%99%A8&quot; title=&quot;浏览器&quot;&gt;浏览器&lt;/a&gt;中用以存储&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%B6%B2%E5%9D%80&quot; title=&quot;网址&quot;&gt;网址&lt;/a&gt;的一个设计，方便用户不须以纸笔抄写或记住网址即能迅速链接至网站。所有现代网页浏览器都有书签功能。书签在&lt;a href=&quot;https://zh.wikipedia.org/wiki/Internet_Explorer&quot; title=&quot;Internet Explorer&quot;&gt;Internet Explorer&lt;/a&gt;中叫&lt;strong&gt;收藏夹&lt;/strong&gt;（简体中文）或&lt;strong&gt;我的最爱&lt;/strong&gt;（繁体中文）。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;从 Wiki 的解释就可以看出，书签在最初被设计时（可想而知当时的门户网页其实很少）的功能应当更加偏向于如何&lt;strong&gt;让用户更快抵达某一网站&lt;/strong&gt;，作为用户所收藏的网页集合而不至于每次都要重新输入链接。从这个角度来理解现在网络环境下的书签功能，则更应当只是把它&lt;strong&gt;作为常用网站首页（即主站）的索引，而不是存储资料的方式&lt;/strong&gt;，毕竟保存的链接是有可能失效的，而保存的内容则永远不会发生变化。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1474027853299.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;稍后阅读&quot;&gt;稍后阅读&lt;/h2&gt;&lt;p&gt;看到一篇文章，总结来说可能会有三种收藏手段：&lt;/p&gt;&lt;p&gt;第一种，便是直接存为书签，配合好用的书签工具，收藏起来简直毫不费劲。可是问题也很明显，收藏了便再也不会主动打开来看，而且 Chrome 自带的书签管理器的整理能力简直弱成渣渣。&lt;/p&gt;&lt;p&gt;第二种，则是将其存入稍后阅读工具，暂时没办法直接看或者来不及看，那么我就接下来再看。只是有一点微妙的区别，就是你觉得这篇文章值得再读一遍，细读一遍。&lt;/p&gt;&lt;p&gt;而第三种，就是直接进行高亮，只摘取自己觉得有用的部分。更甚者则是进行评注，发表自己的意见或感想，将新获取的知识联系到已有的知识体系中去。&lt;/p&gt;&lt;p&gt;而关键又在于，我们应当更倾向于直接使用第三种方式，&lt;strong&gt;并不是说前面的没有价值，而是后面的价值大于前面的价值。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1474027863865.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;高亮评注&quot;&gt;高亮/评注&lt;/h2&gt;&lt;p&gt;所以接下来就回到第三种方式，重点来说一下评注和高亮需求。这种方式跟以前在书上做笔记的方式非常接近，而曾经我们都是从孩童时的学生时代过来的，在书本上写写画画永远是充满乐趣的，而如今的互联网时代，此类工具也能给我们带来一定的亲近感，大脑也比较亲和于这种方式，从而记忆起来也会比较容易。&lt;/p&gt;&lt;p&gt;其实不必多说，以往我们是怎么在书本上做笔记的，那么就怎么样利用这个工具即可。&lt;/p&gt;&lt;h2 id=&quot;整理tags&quot;&gt;整理（Tags）&lt;/h2&gt;&lt;p&gt;整理的手段多种多样，一家有一家之言。但是首先一个步骤则一定是删繁就简，至少要把多余的千变万化的样式去除掉，以往我会将一篇文章存入稍后阅读工具，这个工具可以帮我删掉很多样式，然后我再将其存入印象笔记。这样的话在印象笔记里就不用担心样式的混乱，整理的时候便可以给文章打上标签或移入对应的文件夹。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;打标签其实意味着一种隐性的关注点转移&lt;/strong&gt;。它跟主动移入文件夹的方式有所不同，文件夹是个人主动进行分类的一种手段，而标签系统则是随着标签的增多，你就会发现某一标签的数量特别多，进而察觉最近的关注点可能更倾向于这个标签了。而久而久之，标签的作用就可能更偏向于文件夹，因为此时随着隐性的关注点越来越明显，就自然而然转化成了主动的关注点。&lt;/p&gt;&lt;p&gt;所以在 Diigo 里面进行整理的时候，其手段可能就是改改高亮的颜色，再加上不同的标签（这里要赞一个它的标签推荐功能，包括了近期添加的标签和关键字提取出的标签。相比之下才发现印象笔记都没有这么好，还堪称什么人类第二大脑，但其实一点都不智能。）诶！与此同时还突然发现另外一个好处，那就是按照以往来说，我在印象笔记收藏了整篇文章，但其实我并不关注这篇文章所说的所有部分，进而我就懈怠于打标签了。因为&lt;strong&gt;文章的内容实在太多了，我也不知道该如何分类，如何加标签&lt;/strong&gt;。那么现在如果我只是给高亮/评注内容的一小部分加标签的话，自然就会简单得多，大脑的运算负担也会少很多。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1474027873312.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;汇总结构化&quot;&gt;汇总（结构化）&lt;/h2&gt;&lt;p&gt;现在重新开始写这部分，其实我还没有太多关于知识结构整理的实践，就先来谈谈印象笔记中的汇总是怎么做的。其实在印象笔记里就真的只是简单地把文章格式化一下，然后把相关内容就放到同一个目录下。其中最令人纠结的一点就是，印象笔记的目录层级只有两层，即只能在一个笔记本组里面放笔记本，笔记本里面可以有很多笔记，仅此而已。之前一直想切换到 OneNote 也就是因为的它的目录层级可以特别得深，非常适合于资料的汇总和嵌套，但至于其整理能力就不得而知了，没有深度试用过。&lt;/p&gt;&lt;p&gt;然而 OneNote 的同步速度特别慢，而且又多增了一门工具的学习成本，那既然这样，就还是把整理知识结构的重担放在 Diigo 里面来。而印象笔记就还是放一些归档过后的资料和私人物品，把它当成真正的第二大脑，而不再是万物可收的垃圾箱。&lt;strong&gt;人的大脑的一大特性就是遗忘&lt;/strong&gt;，睡眠可以帮助大脑有选择性地进行知识整理，而不必要的垃圾便会被删除掉。而如今的信息时代，永远在同步，永远在存储，让记忆成为了常态，而遗忘反而变成了弥足珍贵的事情。印象笔记不能成为专业知识辅助工具的原因，便在于它那弱弱的整理能力，它只能成为辅助人脑的记忆工具，而这种记忆能力必须受到限制。&lt;/p&gt;&lt;p&gt;相比之下 Diigo 的 Outliner 功能简直就是为「结构化知识」量身定做的东西，支持拖拽功能更是大大提高了整理时的快感。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1474027880904.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;归档和分享&quot;&gt;归档和分享&lt;/h2&gt;&lt;p&gt;这同样是一个有趣的话题。假如我们现在已经到达了印象笔记这一阶段，也就是说我们把既有的知识结构体系已经整理出来了，而相关的信息都已融为一体而有了具体的脉络。那么此时，我们就需要有一个很好的载体，能够存储这样的知识体系结构。那印象笔记作为一款优秀的存储和展示工具，这一点绝对值得赞赏。其同步速度真的是非常的快，毕竟服务器处于国内，相比于其他优秀的国外产品来说真的已经很棒了。&lt;/p&gt;&lt;p&gt;那么在展示的时候也有几种手段，可能是我直接打开印象笔记开启演示模式，就能非常方便快捷地把一篇文章转成可演示的文档。而与此同时呢，另外一个需求就是我想要把已经整理好的知识体系分享出去，那么此时如果我只需要给文章加上一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;publish&lt;/code&gt; 的标签，文章就能够被自动同步到我自己的博客以及各大平台，那这绝对是一件非常棒的事情，也是我接下来要努力尝试去做的事情。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1474027888292.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;另外一个值得一提的就是，印象笔记和 Diigo 都提供了在搜索引擎旁边显示与搜索关键词相关的已存储内容，这一点对于&lt;strong&gt;知识的闭环流通性&lt;/strong&gt;以及记忆不断复现的反馈加强都是非常有好处的。如此以来，&lt;strong&gt;知识管理工具才真正充当了第二大脑的职责，即只在必要的时候显示必要的内容&lt;/strong&gt;。这在信息过载的互联网时代，人工智能所展现的内容识别与个性化推荐能力才真正地有助于我们的学习与成长。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1474027923525.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;实际场景&quot;&gt;实际场景&lt;/h2&gt;&lt;p&gt;下面我就来举几个例子来详细描述一下真正的应用场景，展现 Instapaper、Diigo 以及印象笔记的威力：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;As a&lt;/code&gt; 正在学习 TypeScript #64 的 Web 应用前端开发工程师&lt;/li&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I want&lt;/code&gt; 快速收集并&lt;strong&gt;去伪存真&lt;/strong&gt;地整理出 TypeScript 相关知识体系结构&lt;/li&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;So that&lt;/code&gt; 我能够掌握 TypeScript 并将其运用到我的 React 项目当中去&lt;/li&gt;&lt;/ul&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;Scenario&lt;/th&gt;      &lt;th&gt;&lt;strong&gt;Action&lt;/strong&gt;&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;Goggle 搜索 &lt;code class=&quot;highlighter-rouge&quot;&gt;typescript&lt;/code&gt; 关键字从而发现了 GitHub 地址和 TypeScript &lt;a href=&quot;https://www.typescriptlang.org/docs/tutorial.html&quot;&gt;官方文档&lt;/a&gt;&lt;/td&gt;      &lt;td&gt;加书签作为搜索索引！（更推荐 Dash 统一查看文档）&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;在给 DA 上工作的时候偶然一篇看起来还不错的文章，但是马上要开会而且手头上还有事儿&lt;/td&gt;      &lt;td&gt;Instapaper 收！&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;在刷知乎的时候刷到一篇 TypeScript 的好文章，方方面面都说得挺详细的&lt;/td&gt;      &lt;td&gt;Instapaper 收！值得再读一遍&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;在实际应用的时候遇到一个坑，找了好久终于在 GitHub 的某个 Issue 里面发现了解决方案&lt;/td&gt;      &lt;td&gt;Diigo 高亮+标注！并且备注自己所遇到的详细问题&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;在手机上阅读 Reeder 时发现 RSS 中有一篇关于 React 的文章， 发现里面讲了 TSX 但是马上就要吃饭了&lt;/td&gt;      &lt;td&gt;直接存进 Instapaper！&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;接着空闲的时候再次阅读，发现很好地介绍了 TSX 的作用以及所带来的好处，但是其他关于 React 的部分写得不咋地或者自己已经知道了&lt;/td&gt;      &lt;td&gt;存进 Diigo 进行高亮！&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;最后会发现 Diigo 里面汇总了很多关于 TypeScript 的文章，那么接下来的事情就是如何使用 Diigo 整理出有价值的知识体系结构……&lt;/p&gt;&lt;p&gt;欲知后续如何，且听下回分解。（待我试用过后，挖掘深入之后便来安利！）&lt;/p&gt;",
            "excerpt"    : "&lt;blockquote&gt;  &lt;p&gt;「不断革新，不断改进。」—— via. 敏捷学习宣言&lt;/p&gt;&lt;/blockquote&gt;"
		} ,
	
		{
            "id"         : "/linux-shell-workshop-note",
            "title"      : "WorkShop 笔记：Linux shell 命令密室逃脱之旅",
            "category"   : "编程",
            "tags"       : "Linux, DevOps, Shell, Bash",
            "url"        : "/2016-08-17-linux-shell-workshop-note/",
            "path"       : "_posts/编程/2016-08-17-linux-shell-workshop-note.md",
            "next"       : "/2016-09-16-sorting-out-knowledge-from-information/",
            "previous"   : "/2016-07-28-adobe-aem-101-overview/",
            "date"       : "2016-08-17 00:00:00 +0000",
            "shortdate"  : "August 17, 2016",
            "content"    : "&lt;blockquote&gt;  &lt;p&gt;Thanks to 讲师/谈一秀、杜屹东&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;内容前瞻&quot;&gt;内容前瞻&lt;/h2&gt;&lt;p&gt;在日常工作中，命令行工具已凭借其强大的功能和简洁的交互形式称霸类 Unix 操作系统。&lt;/p&gt;&lt;p&gt;你是否在使用命令行工具的时候为找不到合适的工具而烦恼？是否在面对复杂任务的时候感到力不从心？&lt;/p&gt;&lt;p&gt;本次 workshop 将为你揭开 shell command 的神秘面纱！通过本次 Linux 密室逃脱之旅，你将会掌握一些实用的 shell 技能，超越 GUI 限制，提升工作效率。&lt;/p&gt;&lt;h2 id=&quot;正式开工&quot;&gt;正式开工&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1471433233240.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;场景：vagrant 启动虚拟机，使用 ssh「快速」登录 Linux 机器，发现 Tomcat 没启动，启动后发现端口被占用 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://192.168.33.20:8080/&lt;/code&gt;，然后 kill 掉进程却发现内容被压缩然后找不到了，切换用户（找到密码）才发现文件，解压后却发现内容被篡改，然后一键替换内容才最终还原网页。&lt;/p&gt;&lt;/blockquote&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;命令/快捷键&lt;/th&gt;      &lt;th&gt;解释/作用/备注&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -t rsa&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;后续选择文件夹可以在当前位置生成密钥对&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scp id_rsa.pub dev@192.168.33.20:/.ssh&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;拷贝公钥（&lt;code class=&quot;highlighter-rouge&quot;&gt;id_rsa.pub&lt;/code&gt;）到服务器上&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat id_rsa.pub &amp;gt;&amp;gt; authorized_keys&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;快速添加内容到特定文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 覆盖、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; 增加&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -i ./id_rsa dev@192.168.33.20&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;--identity_file&lt;/code&gt; 带上身份认证秘钥)&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo IdentityFile $PWD/id_rsa &amp;gt;&amp;gt; ~/.ssh/config&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;一行命令id_rsa 文件路径&lt;strong&gt;增加&lt;/strong&gt;到指定配置文件&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh bws&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;ssh + 别名 Host，快速登录到 Linux 机器&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tldr systemctl&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;» &lt;code class=&quot;highlighter-rouge&quot;&gt;man tldr&lt;/code&gt; 好于 man，只是比较慢&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1471439210291.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;命令/快捷键&lt;/th&gt;      &lt;th&gt;解释/作用/备注&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set -o emacs&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;设置 bash 的快捷键模式&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + A&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;跳到行首&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + E&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;跳到行尾&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + U&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;清除当前输入&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + R&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;搜索历史命令&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + L&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;清屏，但保留记录&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + K&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;从当前位置删除至尾&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + W&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;删除单词&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1471427513741.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;命令/快捷键&lt;/th&gt;      &lt;th&gt;解释/作用/备注&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grep -v ^# .README.md&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;找出非注释消息&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof -i:8080&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;查找特定端口进程&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ps -ef|grep java&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;查找特定程序进程&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo systemctl restart tomcat&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;systemctl 是系统命令，需要 sudo&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat /proc/version&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;查看当前系统信息&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Linux version 3.10.0-327.18.2.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.3 20140911 (Red Hat 4.8.3-9) (GCC) ) #1 SMP Thu May 12 11:03:55 UTC 2016&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;命令/快捷键&lt;/th&gt;      &lt;th&gt;解释/作用/备注&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grep -rI 747339117 .&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;查找特定文字的文件&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set encoding:utf-8&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;vim 设置编码&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + Z&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;vim 转入后台进程&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fg + Enter&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;返回 vim 后台进程&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find root_path -name &#39;*.tar.gz&#39;&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;找到特定后缀名的文件&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find / -name &quot;*.tar.gz&quot; 2&amp;gt;&amp;gt;/dev/null&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;过滤无用错误信息（2）&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat /etc/passwd&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;查看所用用户&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;su - Darker&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;切换到用户并新建 shell（带环境变量）（A mere &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; implies &lt;code class=&quot;highlighter-rouge&quot;&gt;-l&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--login&lt;/code&gt;.）&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[dev@localhost ~]$ su DarkerPassword:[Darker@localhost dev]$ sudo -iu dev[dev@localhost ~]$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;table&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grep -r &quot;Darker&quot;&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;找到密码 &lt;code class=&quot;highlighter-rouge&quot;&gt;U2Fsd,&lt;/code&gt; 再查找一次 tar 包&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.README.md:This is the message: Check the port and kill the process, you can start tomcat right. # Kissing your hand may make you feel very good, but a diamond and sapphire bracelet lasts for ever. -- Darker:U2Fsd,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;命令/快捷键&lt;/th&gt;      &lt;th&gt;解释/作用/备注&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tldr locate&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;也可以快速定位文件并且省内存，但是需要 sudo 权限&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alias ll=&#39;ls -al&#39;&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;设置别名（只在当前进程生效，写入 &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;）&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tar -zxvf /home/Darker/.src/20/.web.tar.gz&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;解压文件，注意 &lt;code class=&quot;highlighter-rouge&quot;&gt;-z&lt;/code&gt; 参数在不同系统作用不同&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo mv index.html /usr/share/tomcat/webapps/ROOT/&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;页面正常但是发现网页内容被篡改了&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo sed -i &#39;s/Darker/ThoughtWorkers/g&#39; index.html&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;替换文本 &lt;code class=&quot;highlighter-rouge&quot;&gt;/find/replace/&lt;/code&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sed -r &#39;s/regex/replace/g&#39; filename&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;则用于替换正则表达式&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd /etc/sudoers.d/&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;可以新建文件给每个用户设置 sudo 权限&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;查看当前用户的 sudo 权限&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;history&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;查看所有命令记录&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + D&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;返回上一个 Session，用于连续退出&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pstree&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;树状显示所有的进程&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;禁止网页右键？ &lt;a href=&quot;http://www.chhua.com/web-note2825&quot;&gt;使用 JavaScript 可以做到，监听事件永远返回 false&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://gist.github.com/derhuerst/12a1558a4b408b3b2b6e&quot;&gt;Installing the Z Shell (zsh) on Linux, Mac OS X and Windows&lt;/a&gt;，可惜也需要 sudo 权限。&lt;/p&gt;&lt;h2 id=&quot;finally&quot;&gt;Finally!!!&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1471432922494.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;另外不得不说 Dash 太好用了，好用到哭，/(ㄒoㄒ)/~~&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1471440990555.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;一点儿小思考&quot;&gt;一点儿小思考&lt;/h2&gt;&lt;blockquote&gt;  &lt;ul&gt;    &lt;li&gt;关于 DevOps 的一个疑问？其工作的持续时间是一阵一阵的吗？如果一次性都做完了，那么性质就变成了一劳永逸的事情，岂不是之后都不用再维护了吗？&lt;/li&gt;    &lt;li&gt;那么 DevOps 如何使得需求源源不断来保证自己工作的必要性呢，（手动微笑）而这样的性质似乎很适合拿来做咨询项目呀？&lt;/li&gt;    &lt;li&gt;另一方面的思考就是，正因为其不持续的必要性，DevOps 应当作为开发者的基本素质而不应为其专门设置职位，在迭代开始的最早期就把最困难的部分做好做完善，一劳永逸。&lt;/li&gt;    &lt;li&gt;而随着 AWS 等各类“服务”性质平台的不断完善，这方面的工作大概会越来越少并且现有工具、脚本都将成为资产，值得被维护，也应当被持续维护，但属于 Developer 分内的事情。&lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;",
            "excerpt"    : "&lt;blockquote&gt;  &lt;p&gt;Thanks to 讲师/谈一秀、杜屹东&lt;/p&gt;&lt;/blockquote&gt;"
		} ,
	
		{
            "id"         : "/adobe-aem-101-overview",
            "title"      : "Adobe AEM 101 Overview",
            "category"   : "演讲",
            "tags"       : "AEM, JavaScript, Java, CMS, Marketing, Adobe, REST",
            "url"        : "/2016-07-28-adobe-aem-101-overview/",
            "path"       : "_posts/演讲/2016-07-28-adobe-aem-101-overview.md",
            "next"       : "/2016-08-17-linux-shell-workshop-note/",
            "previous"   : "/2016-07-20-active-reading-the-art-of-annotation/",
            "date"       : "2016-07-28 00:00:00 +0000",
            "shortdate"  : "July 28, 2016",
            "content"    : "&lt;p&gt;30 min = 15 min * 2&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;aem-101-overview&quot;&gt;AEM 101 Overview&lt;/h1&gt;&lt;p&gt;&lt;small&gt;by &lt;strong&gt;Jimmy Lv&lt;/strong&gt;&lt;/small&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;agenda&quot;&gt;Agenda&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;Part 1: AEM Overview    &lt;ul&gt;      &lt;li&gt;AEM 在 Adobe 中的地位&lt;/li&gt;      &lt;li&gt;AEM 是什么？业务价值 👏&lt;/li&gt;      &lt;li&gt;AEM 的历史，顺带解释 Day 公司的贡献&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;Part 2: AEM Functionality Preview    &lt;ul&gt;      &lt;li&gt;从使用端来讲，拖拖拽拽&lt;/li&gt;      &lt;li&gt;从角色分工来讲&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;Part 3: AEM 背后实现原理的相关概念    &lt;ul&gt;      &lt;li&gt;一堆名词，根据官方文档顺序讲就是了&lt;/li&gt;      &lt;li&gt;组件化改变 Web（延伸到现在的 React） via 徐飞讲 &lt;a href=&quot;https://github.com/xufei/blog/issues/28&quot;&gt;十年来感受的前端技术变化 · Issue #28 · xufei/blog&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;One more things…    &lt;ul&gt;      &lt;li&gt;自己的想法，学习总结&lt;/li&gt;      &lt;li&gt;Learning RoadMap&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;part-1-aem-overview&quot;&gt;Part 1: AEM Overview&lt;/h1&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2 id=&quot;what--why--how--question&quot;&gt;What? &amp;amp; Why? &amp;amp; How? &amp;amp; Question?&lt;/h2&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;hows-your-customer-experience&quot;&gt;How’s Your Customer Experience?&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=HGb6NQMeZ-c&quot;&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469770434690.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;adobe-marketing-cloud&quot;&gt;Adobe Marketing Cloud&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.adobe.com/&quot;&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469750403141.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;We’re a Leader. And here’s why.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;[note]Don’t just create experiences. Make it your business.&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;We know what matters most to marketers. =&amp;gt; AEM&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To be an experience business, it takes a leader.&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;We’re a Leader. And here’s why.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;aem-in-adobe-marketing-cloud&quot;&gt;AEM in Adobe Marketing Cloud&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469675204327.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;adobe-experience-manager&quot;&gt;Adobe Experience Manager&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.adobe.com/marketing-cloud/enterprise-content-management.html#x&quot;&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469750678577.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;AEM is a comprehensive &lt;strong&gt;content management&lt;/strong&gt; solution for building websites, mobile apps, and forms. And it makes it easy to manage your marketing content and assets.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;[note]涵盖网站和相关服务的创建、管理、部署，一揽子方法&lt;/p&gt;&lt;p&gt;集成软件套装，包含 infrastructure 和 application 层面的工具和服务，前者是后者的基础&lt;/p&gt;&lt;p&gt;[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;product-history-of-adobe-cq&quot;&gt;Product history of Adobe CQ&lt;/h1&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Date | Product---- | ----------2002 | Day CQ 3.52005 | Day CQ 4.02006 | Day CQ 4.12008 | Day CQ 4.22008 | Day CQ 5.02009 | Day CQ 5.22010 | Day CQ 5.32011 | Adobe CQ 5.42012 | Adobe CQ 5.52013 | Adobe Experience Manager 5.62014 | Adobe Experience Manager 6.02015 | Adobe Experience Manager 6.12016 | Adobe Experience Manager 6.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[note]关键是 Day Software[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;google-trending&quot;&gt;Google Trending&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.google.com/trends/explore#q=%22adobe%20cq%22%2C%20adobe%20cq5%2C%20adobe%20aem%2C%20Adobe%20Experience%20Manager&amp;amp;cmpt=q&amp;amp;tz=Etc%2FGMT-8&quot;&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469768209884.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[note]解释完全曲线（之和）[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;知道真相的我眼泪掉下来&quot;&gt;知道真相的我眼泪掉下来&lt;/h1&gt;&lt;h3 id=&quot;前身cq5---wikipedia-the-free-encyclopedia&quot;&gt;前身：&lt;a href=&quot;https://en.wikipedia.org/wiki/CQ5&quot;&gt;CQ5 - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;CQ5 or Communique5 (renamed as &lt;strong&gt;Adobe Experience Manager&lt;/strong&gt;) is a &lt;strong&gt;Web Content Management System&lt;/strong&gt; (WCMS) designed to enable users (mainly marketers and IT professionals) to &lt;strong&gt;create, edit, manage and optimize&lt;/strong&gt; websites &lt;strong&gt;across different digital channels&lt;/strong&gt; such as web, mobile, social and more.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;day-software&quot;&gt;Day Software&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;收购！Adobe acquires Day Software, a market leader in next-generation web content management (WCM), was an enterprise content management software company. {:&amp;amp;.fadeIn}&lt;/li&gt;  &lt;li&gt;Roy T. Fielding 是 Day Software’s chief scientist，现在是 &lt;a href=&quot;https://www.linkedin.com/in/royfielding&quot;&gt;Senior Principal Scientist at Adobe Systems&lt;/a&gt;，在 Adobe 继续担任首席科学家，所以才有了 &lt;a href=&quot;http://www.slideshare.net/royfielding/rest-in-aem&quot;&gt;REST in AEM&lt;/a&gt; 这个演讲。&lt;/li&gt;  &lt;li&gt;Day is engaged in the &lt;strong&gt;Java Content Repository&lt;/strong&gt; API for Java standardization process and contributes to open source software projects such as &lt;strong&gt;Apache Jackrabbit&lt;/strong&gt; and &lt;strong&gt;Apache Sling&lt;/strong&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[note]Apache HTTP服务器的核心开发者Roy Fielding,他还是Apache软件基金会的合作创始人[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;part-2-aem-functionality-preview&quot;&gt;Part 2: AEM Functionality Preview&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;能做啥&quot;&gt;能做啥？&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469776743596.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;功能演示&quot;&gt;功能演示&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://localhost:4505/projects.html/content/projects&quot;&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1468060034522.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;角色分工-之-content-editor&quot;&gt;角色分工 之 Content Editor&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469772633873.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;页面编辑--拖拖拽拽-&quot;&gt;页面编辑 （ 拖拖拽拽 ）&lt;/h1&gt;&lt;p&gt;[note]编辑也有几种模式，视角不同。[/note]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469716451473.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;touch-ui-customizations&quot;&gt;Touch UI Customizations&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://blogs.adobe.com/experiencedelivers/experience-management/touch-ui-customizations-part-1/&quot;&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469772544746.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;组件-构成-页面&quot;&gt;组件 构成 页面&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469716589609.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[note]开发，完全组件化看起来好爽！（两者本质都是 HTML）[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;角色分工-之-pim-editor&quot;&gt;角色分工 之 PIM Editor&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469772945441.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[note]电子商务，改改价格什么的[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;developing&quot;&gt;Developing&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469716527090.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;角色分工-之-componets-developer&quot;&gt;角色分工 之 Componets Developer&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469716341707.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;part-3-magic-behind-aem&quot;&gt;Part 3: Magic Behind AEM&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;rio-olympics-welcome-to-hell&quot;&gt;Rio Olympics: ‘Welcome to hell’&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469772248011.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469776281516.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;An author in WCM &lt;strong&gt;generates&lt;/strong&gt; the material which will, at some point, be published to your website.When ready, the content is &lt;strong&gt;published&lt;/strong&gt; to the publish environment.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469776380542.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;技术架构&quot;&gt;技术架构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469749733269.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;architechture&quot;&gt;Architechture&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469614691277.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469613962134.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;&lt;strong&gt;Web Application Server&lt;/strong&gt;: 可以单独集成 Jetty web server，也可以用于第三方&lt;/li&gt;  &lt;li&gt;&lt;strong&gt;Web Application Framework&lt;/strong&gt;: 简化 RESTful 面向对象的 Web 应用，即内容优先&lt;/li&gt;  &lt;li&gt;&lt;strong&gt;Content Repository&lt;/strong&gt;: AEM 引入了 JCR，用于处理非结构化或半结构化的数据；不仅包含内容，还有相关代码、模板等所有内部数据&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469776708150.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Adobe Experience Manager is a web-based client-server system for building, managing and deploying commercial websites and related services. It combines a number of infrastructure-level and application-level functions into a single integrated package.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;osgi-open-service-gateway-initiative&quot;&gt;OSGi (Open Service Gateway Initiative)&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/OSGi&quot;&gt;OSGi - 维基百科，自由的百科全书&lt;/a&gt;：一个基于Java语言的服务（业务）规范——OSGi服务平台（Service Platform）。&lt;/p&gt;&lt;p&gt;目前该平台逐渐成为一个为室内、交通工具、移动电话和其他环境下的所有类型的网络设备的应用程序和服务进行传递和远程管理的开放式服务平台。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469539342406.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469776814871.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;OSGi 的作用在于 Runtime，之所以为动态模块加载，用于管理复杂度，并可以动态扩展其依赖。（类 JavaScript 的 Require.js ？）该规范和核心部分是一个框架，其中定义了&lt;strong&gt;应用程序的生命周期模式和服务注册&lt;/strong&gt;。基于这个框架定义了大量的OSGi服务：日志、配置管理、偏好，HTTP（运行servlet）、XML分析、设备访问、软件包管理、许可管理、星级、用户管理、IO连接、连线管理、Jini和UPnP。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;最佳实现apache-felix&quot;&gt;最佳实现，&lt;a href=&quot;http://felix.apache.org/documentation/subprojects/apache-felix-maven-scr-plugin/scr-annotations.html&quot;&gt;Apache Felix&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;注解形式实现 OSGi 标准 bundle，在 AEM 中成为 Module。&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;http://felix.apache.org/documentation/subprojects/apache-felix-maven-scr-plugin/scr-annotations.html#component&quot;&gt;@Component&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://felix.apache.org/documentation/subprojects/apache-felix-maven-scr-plugin/scr-annotations.html#activate-deactivate-and-modified&quot;&gt;@Activate, @Deactivate, and @Modified&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://felix.apache.org/documentation/subprojects/apache-felix-maven-scr-plugin/scr-annotations.html#service&quot;&gt;@Service&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://felix.apache.org/documentation/subprojects/apache-felix-maven-scr-plugin/scr-annotations.html#property&quot;&gt;@Property&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://felix.apache.org/documentation/subprojects/apache-felix-maven-scr-plugin/scr-annotations.html#reference&quot;&gt;@Reference&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Property&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sample&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;nd&quot;&gt;@PropertyOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;option1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;option.label.1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;        &lt;span class=&quot;nd&quot;&gt;@PropertyOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;option2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;option.label.2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;jcr-jsr-170--jsr-283-specification&quot;&gt;JCR （&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=170&quot;&gt;JSR-170&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=283&quot;&gt;JSR-283&lt;/a&gt; Specification）&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469777086086.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;what-is-crx&quot;&gt;&lt;strong&gt;WHAT IS CRX?&lt;/strong&gt;&lt;/h1&gt;&lt;blockquote&gt;  &lt;p&gt;CRX is short for &lt;strong&gt;C&lt;/strong&gt;ontent &lt;strong&gt;R&lt;/strong&gt;epository e&lt;strong&gt;X&lt;/strong&gt;treme, Day’s JCR-compliant repository. CRX allows you to store, manage, and access data using a standardized Java interface.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469709908396.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;sling-背后靠着-crx-吃饭&quot;&gt;Sling 背后靠着 CRX 吃饭&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469777354485.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;sling--rest&quot;&gt;Sling &amp;amp; REST&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469777407980.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;做一个照片-cms&quot;&gt;做一个照片 CMS&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469707517793.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;p&gt;Sling 背后靠着 CRX 吃饭：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469710299369.png&quot; alt=&quot;&quot; /&gt;[slide]&lt;/p&gt;&lt;p&gt;对比传统 Controller，直接对应 JCR 节点，并且包含相关信息。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469710389235.png&quot; alt=&quot;&quot; /&gt;[slide]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469710400998.png&quot; alt=&quot;&quot; /&gt;[slide]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469710435546.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[note]不是直接对应文件目录，但是也完全可以这样。[/note]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469710511007.png&quot; alt=&quot;&quot; /&gt;[slide]&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469710571268.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;uri-decomposition&quot;&gt;URI Decomposition&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469777634817.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;from-url-to-content-and-scripts&quot;&gt;From URL to Content and Scripts&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1469777621445.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;one-more-thing&quot;&gt;One more thing…&lt;/h1&gt;",
            "excerpt"    : "&lt;p&gt;30 min = 15 min * 2&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/active-reading-the-art-of-annotation",
            "title"      : "【译】主动阅读：评注的艺术",
            "category"   : "思考",
            "tags"       : "阅读, 评注, 学习",
            "url"        : "/2016-07-20-active-reading-the-art-of-annotation/",
            "path"       : "_posts/思考/2016-07-20-active-reading-the-art-of-annotation.md",
            "next"       : "/2016-07-28-adobe-aem-101-overview/",
            "previous"   : "/2016-07-12-pkm-again-to-innovate-my-note-system/",
            "date"       : "2016-07-20 00:00:00 +0000",
            "shortdate"  : "July 20, 2016",
            "content"    : "&lt;h1 id=&quot;active-reading-the-art-of-annotation--主动阅读评注的艺术&quot;&gt;Active Reading: The Art of Annotation | 主动阅读：评注的艺术&lt;/h1&gt;&lt;blockquote&gt;  &lt;p&gt;We do not read books in this class; we study literature! At an academic level, it is not enough for you to passively read the words on a page. You must think about words, question ideas, interact with the text, engage with the author, hold conversations and CREATE…&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们已经不再是学生在课堂里读书了，而是研究文学！从学术层面来说，只是被动地阅读书本上的文字是远远不够的。你必须要去思考这些文字的内容，质疑其中的想法，与文字交互，与作者互动，保持交流以及&lt;strong&gt;创造&lt;/strong&gt;……&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;To succeed in life, you will need to be a proficient reader. One way to strengthen your reading skills is to closely read the texts we study. Reading is not a race – slow down. The next step is to &lt;strong&gt;annotate the text&lt;/strong&gt;. I expect you to annotate EVERY text that we read! But, what is annotation? Dictionary.com states that to annotate means “to supply with critical or explanatory notes; comment upon in notes.” This means that while you are reading, you will be taking notes within the text.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;为了成为人生赢家，你需要变成一个阅读的行家。加强阅读技能的一种方式就是仔细阅读我们所学习的内容。阅读不是一场比赛 —— 慢下来。下一步就是&lt;strong&gt;给文字作评注&lt;/strong&gt;。我期望你尽可能给阅读的每一处文字都打上评注！但是评注是什么东东？Dictionary.com 上面显示，评注指的是「作重点或者说明性注解」。这就意味着当你阅读的时候，你将会在文本里面做笔记。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;No more curling up on the couch or lying in bed, passively reading; you should have a pen/pencil in hand and be free from other distractions. Unlike “highlighting” alone, which is a passive activity, the process of annotating text helps you to stay focused and involved with the text. Soon you will be concentrating as you read and retaining more information, which will help to improve your comprehension and analysis. &lt;strong&gt;It would be a good idea to purchase the texts each time we read a new book!&lt;/strong&gt; If you do not purchase the books, you will need to find a different way to annotate in the school’s books, perhaps by using small &lt;strong&gt;post-it notes&lt;/strong&gt;. Occasionally, I may conduct an “annotation check” which will be counted as a quiz grade.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;不要再蜷缩在沙发上或躺在床上被动地去阅读，你应该手拿一只钢笔或者铅笔，而且不受其他干扰。不再只是简单地「高亮」，那只是一种被动的行为，评注内容的过程可以帮你保持专注，并让你沉浸到到文字当中去。很快你就会专心于你的阅读并吸收更多的信息，这会有助于提高你的理解和分析能力。&lt;strong&gt;在我们每次阅读一本新书的时候这会是一个好主意！&lt;/strong&gt;如果你不买书的话，你就需要用另外一种方式来标注学校里面的书，也许就可以用上小的&lt;strong&gt;便利贴&lt;/strong&gt;。有的时候，我可能还会进行「评注检查」来算作测验的分数。&lt;/p&gt;&lt;h3 id=&quot;becoming-an-active-reader-through-annotation--通过评注成为一个主动的阅读者&quot;&gt;Becoming an Active Reader Through Annotation | 通过评注成为一个主动的阅读者&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Three main things to consider: decide on the author’s most important points, identify how they fit together, and show how you feel about them.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;值得考虑的三大事情：确定作者最重要的见解，理解它们如何相互配合，并且描述你对其感觉如何。&lt;/p&gt;&lt;blockquote&gt;  &lt;ul&gt;    &lt;li&gt;To annotate: &lt;em&gt;underline&lt;/em&gt;, highlight, or flag passages that stand out to you in some way. Make written notes in the margins to connect ideas or make note of important passages. Also make note of specific details that support a main idea or literary theme, and identify your reactions to specific passages (if applicable).&lt;/li&gt;    &lt;li&gt;Although the more specific your marks, the better it will be when you write your essays, the downfall to annotating is that many people underline or highlight too much! Try to avoid this pitfall. &lt;strong&gt;Remember, annotate according to your purpose!&lt;/strong&gt;&lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;评注的方式：&lt;em&gt;下划线&lt;/em&gt;，高亮，或者标记那些在某方面吸引你注意力的段落。在边缘处写下备注，用来关联想法，或者标记重要段落。也可以标注支持某个中心思想或者文学主题的具体细节，或者记下你对于某个段落的反应（如果可以的话）。&lt;/li&gt;  &lt;li&gt;虽然你标记得越特别，在你写论文的时候就会越好，然而评注不起作用的原因却是很多人的下划线或者高亮太多了！尽量避免这个陷阱。&lt;strong&gt;记住，评注要取决于你的目标！&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;Consider the following questions as you read:&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;在阅读的时候思考以下问题：&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;blockquote&gt;    &lt;p&gt;Landsberger, Joe. “Reading Critically.” Study Guides and Strategies. Web. 20 Aug. 2010.&lt;/p&gt;  &lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;Landsberger, Joe. “Reading Critically.” Study Guides and Strategies. Web. 20 Aug. 2010.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;ul&gt;    &lt;li&gt;What initial topics or questions are raised for me, the reader?&lt;/li&gt;    &lt;li&gt;What issues are addressed in the reading?&lt;/li&gt;    &lt;li&gt;What conclusions does the author reach about the issue(s)?&lt;/li&gt;    &lt;li&gt;What are the author’s reasons for his or her assertions?&lt;/li&gt;    &lt;li&gt;Are there passages that stick out in the reading selection? Why does this passage stickout (ask this question for each passage)?&lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;最初的主题是什么？我，即读者最开始所提出的问题是什么？&lt;/li&gt;  &lt;li&gt;阅读材料所提及的问题是什么？&lt;/li&gt;  &lt;li&gt;作者对于这个（些）问题达成了什么结论？&lt;/li&gt;  &lt;li&gt;他或她的主张背后的原因是什么？&lt;/li&gt;  &lt;li&gt;阅读选集的这些段落是否突出了重点？为什么这个段落有所着重（每个段落都要提出这个问题）？&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;Suggestions for annotating include the following:&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;以下是作评注的一些建议：&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;ul&gt;    &lt;li&gt;Label and interpret literary devices (metaphor, simile, imagery, personification, symbol, alliteration, metonymy, synecdoche, etc.) and elements of style (tone, diction, syntax, narrative pace, use of figurative language, etc.)&lt;/li&gt;    &lt;li&gt;Identify themes, main ideas, supportive details and/or evidence that lead the reader to a conclusion about the text&lt;/li&gt;    &lt;li&gt;Summarize what you read (minimally)&lt;/li&gt;    &lt;li&gt;Write questions&lt;/li&gt;    &lt;li&gt;Converse with the author&lt;/li&gt;    &lt;li&gt;Make connections to other texts or experiences&lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;标签和解释性文学元素（暗喻、明喻、意象、象征、符号、头韵、转喻、提喻，等等）和元素风格（语气、措辞、语法、叙事节奏、比喻性语言的使用，等等)&lt;/li&gt;  &lt;li&gt;确定主题，主要观点，支持论点的细节以及/或者是引导读者得出内容结论的论据&lt;/li&gt;  &lt;li&gt;总结所阅读的内容（最小化）&lt;/li&gt;  &lt;li&gt;写下问题或疑虑&lt;/li&gt;  &lt;li&gt;与作者谈话&lt;/li&gt;  &lt;li&gt;跟其他内容或经验建立连接&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;Sample annotated text:&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;评注内容样例：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2b90bv9gj30zk0s6aia.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;h1 id=&quot;active-reading-the-art-of-annotation--主动阅读评注的艺术&quot;&gt;Active Reading: The Art of Annotation | 主动阅读：评注的艺术&lt;/h1&gt;"
		} ,
	
		{
            "id"         : "/pkm-again-to-innovate-my-note-system",
            "title"      : "再谈个人知识管理：革新我的笔记系统",
            "category"   : "思考",
            "tags"       : "学习, Rethink, PKM, 个人成长, 效率, 笔记",
            "url"        : "/2016-07-12-pkm-again-to-innovate-my-note-system/",
            "path"       : "_posts/思考/2016-07-12-pkm-again-to-innovate-my-note-system.md",
            "next"       : "/2016-07-20-active-reading-the-art-of-annotation/",
            "previous"   : "/2016-07-10-speed-up-mac-efficiency/",
            "date"       : "2016-07-12 00:00:00 +0000",
            "shortdate"  : "July 12, 2016",
            "content"    : "&lt;h2 id=&quot;书写和阅读是不一样的体验&quot;&gt;书写和阅读是不一样的体验&lt;/h2&gt;&lt;p&gt;这篇文章的重点即在于此，&lt;strong&gt;书写和展示完全就是不一样的体验&lt;/strong&gt;。首先抛出论点，然后围绕这个观点写上这一篇，也算是给这一段时间以来对于效率的追求一个了结，不论完美与否，该&lt;em&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0OTA3ODUzOA==&amp;amp;mid=2664275884&amp;amp;idx=1&amp;amp;sn=49728bdd11b5ffb114a9cdd713cc1b42&amp;amp;scene=1&amp;amp;srcid=0711Y8M9oKi9QUfpxIbk6ZrW#rd&quot;&gt;毕业&lt;/a&gt;&lt;/em&gt;了。而今后，还就得根据这些方法论真正地去实践，去不断完善，长路漫漫其修远兮。&lt;/p&gt;&lt;p&gt;代码对于程序员来说就在于定制化的自由性以及随心创造的掌控感，在写作和整理的时候「文字即代码」当然是最佳的方案。但是产出的文章或笔记在被展示和阅读时，体验的重要性就会高于代码，甚至于应当尽可能减少代码的存在感，绝对不可以让读者（即自己）有太多的额外操作以至于分神。&lt;/p&gt;&lt;p&gt;我们在写作的时候，使用 Markdown 可以不用考虑样式，极简的语法让我们只需要掌握简单的几个规则就可以生成规整的排版，而且在后期你可以将其发布到各种平台，也可以放到自己的网站加上任何想要的样式。作为一份规范性「代码」，自然也就可以被 Git 管理，被解析，被传输，被同步，被 CI/CD。&lt;/p&gt;&lt;p&gt;而「文字代码最终的产出应当是最完美的阅读体验」，这种体验会让你忘记文字的背后是如何酝酿与产出，只用专注于文章本身的内容。此时此刻面对的这篇文章是否可以引发你的思考，是否可以让你从中学到些什么，并且让你产生行动应用到实际的工作生活当中。而除此之外的其他，并不能成为你为之称赞的理由。&lt;/p&gt;&lt;p&gt;ToMarkdown 让文字返璞归真，而 ToArticle 则让思考的乐趣重现。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2b97sbiuj31kw0yidkd.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;快速输入的极致&quot;&gt;快速输入的极致&lt;/h2&gt;&lt;p&gt;学习 =&amp;gt; 总结 =&amp;gt; 分享&lt;/p&gt;&lt;p&gt;源头 -&amp;gt; 收集 -&amp;gt; 筛选 -&amp;gt; 浅阅读 -&amp;gt; 深阅读 -&amp;gt; 整理 -&amp;gt; 分享 -&amp;gt; 交流 -&amp;gt; 实践&lt;/p&gt;&lt;p&gt;写这篇文章的时候总是想要同时兼顾道与术，所以写着写着就铺垫过多，甚至于迷失了本文的主题。因此在上边儿我就只是简单地给出「个人知识管理&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;」的大致流程，而不详细解释其来源。那么接下来就回到知识管理的第一步，也就是从源头出发，来谈谈如何开始快速收集各种信息。如今的互联网时代，各种信息以及知识可谓取之不尽，用之不竭，但是越发广泛的信息，就越发让我们的注意力轻易地迷失在噪声当中。&lt;/p&gt;&lt;h3 id=&quot;印象笔记万物皆可收&quot;&gt;印象笔记：万物皆可收&lt;/h3&gt;&lt;p&gt;当一个产品成为一个平台之后，它的价值往往会成指数级增长，就像微信从最初的聊天工具到现在集关系链、支付、自媒体、游戏等各大功能于一身的平台，可以让腾讯在移动互联网时代站住了脚跟。但是这里我想说的当然不是微信，而是印象笔记，即 Evernote。几乎任何跟知识内容阅读挂钩的产品，都支持分享到印象笔记，连微信这样的封闭平台也是支持了的，🙃。除此之外，各种各样基于印象笔记这个平台的衍生产品也在如雨后春笋般涌现。但是，大家在享受印象笔记强大的收集功能的同时，也在滥用着印象笔记，什么都可以往里面收，那自然而然久而久之印象笔记里就堆满了各种各样的杂物。所以，我们应该取其所长，避其其短。&lt;strong&gt;让印象笔记作为收集一切的归属地&lt;/strong&gt;，然后再从印象笔记当中挑选我们所需要的内容，整理出真正有价值的内容。&lt;/p&gt;&lt;p&gt;我会在手机端进行阅读的来源主要分为 RSS、Pocket、网页、微信（朋友圈链接 + 公众号）、内容 App（掘金、知乎）等等，而这些都是可以统一放入印象笔记的，放心吧，要么 App 内部支持，要么系统级支持，要么你还可以在浏览器里打开相应的网站，再放到印象笔记里面。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1468653900621.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;而在电脑端，则可以通过&lt;a href=&quot;https://www.yinxiang.com/webclipper/&quot;&gt;剪藏&lt;/a&gt;快速收藏网页文章，再不济就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + C&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + V&lt;/code&gt; 贴到印象笔记里面，但是更推荐使用全局快捷键 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd + Option + Ctrl + V&lt;/code&gt; 直接贴到印象笔记里面，一触即达。&lt;/p&gt;&lt;h3 id=&quot;最快捷的输入语音转文字&quot;&gt;最快捷的输入：语音转文字&lt;/h3&gt;&lt;p&gt;接下来我就用讯飞语音输入法来打字了，语音输入主要有几大好处：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;首先呢，它可以让文章变得更加口语化，从而可以让读者阅读起来更加轻松。&lt;/li&gt;  &lt;li&gt;而且呢，得益于&lt;strong&gt;机器辅助&lt;/strong&gt;的智能纠错，语音输入的速度确实比打字要快的多得多。&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;  &lt;li&gt;语音输入相当于让想法先行，而文字的措辞可以稍后再进行改善，这跟先有内容再添加样式的理念是一致的。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;所以文字输入效率，特别是在移动端作为最大的一个难题终于被解决了，最佳实践：通过印象笔记快速新建一个笔记 =&amp;gt; 讯飞输入法快速输入文字 =&amp;gt; 印象笔记在背后就自动同步到了云端。再者，电脑端的输入效率也可以借力于语音输入，可惜 Mac 系统自带的语音输入实在太不争气了，而讯飞输入法目前来说不会考虑出 Mac 版。但是，如果配合 macOS Sierra 的云剪切板，简直就是比较完美的文本输入方式了，让手机成为话筒，说完再一起被同步到电脑上。（在没装上新系统之前暂时先用上&lt;a href=&quot;http://clipber.com/clipber/&quot;&gt;快贴 - 真正的云剪贴板&lt;/a&gt;）。&lt;/p&gt;&lt;p&gt;另外不得不说印象笔记（服务器位于国内）的同步速度确实快得飞起，在电脑上编辑完之后手机立刻同步就可以继续编辑，简直无缝体验 😂😂。&lt;/p&gt;&lt;h2 id=&quot;整理是建立内部索引的最有效方式&quot;&gt;整理是建立内部索引的最有效方式&lt;/h2&gt;&lt;p&gt;上面说到，在我们将一切都收纳进了印象笔记，那么它就自然而然变成了一个杂物的堆积地，也就相当于人体的胃，我们要采取有效的方式进行吸收。「吸收」的过程大概就是去除格式，将类似的内容进行主题分类，整理结构的过程就是建立大脑神经网络之间的索引。&lt;/p&gt;&lt;p&gt;而最完美的书写编辑体验，当然需要借助代码编辑器的强大以及 Markdown 语法的简洁。使用 Sublime Text 的 Evernote 插件打开印象笔记内容，顺便就可以完美得格式化，然后在编辑器里删除掉我们不需要的而留下所需要的，而且这个 Sublime-Evernote 插件还可以自定义样式，代码高亮和字体格式什么的都配置成与博客相同，在获得一致性阅读体验的同时保持了私密性。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1468653053257.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;而刚好 Jekyll 和 &lt;a href=&quot;https://github.com/bordaigorl/sublime-evernote&quot;&gt;Sublime-Evernote&lt;/a&gt; 都采用了 yaml 语法的头文件，所以最好能够统一它们的分类和标签系统，在整理的同时也是在设计美好的 API 系统，我们在下一部分会进一步提到。&lt;/p&gt;&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;再谈个人知识管理：革新我的笔记系统&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;思考&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Mac&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;学习&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PKM&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;个人成长&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;效率&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;笔记&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;published&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;革新我的笔记系统。&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;noteton&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notebook&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0 Inbox&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;自省吾身再阅读是反思的开始&quot;&gt;自省吾身：再阅读是反思的开始&lt;/h2&gt;&lt;p&gt;兜了大大的一个圈子，从抛弃印象笔记想要彻底实现文本化文档管理，到现在又重拾印象笔记作为统一的收纳管理以及存储同步工具，围绕着印象笔记算是终于快找到比较完美的方案了吧：印象笔记作为收集器确实很完美，在 Sublime 里代码般的编辑体验也比较完美，重新归档到印象笔记进行阅读和搜索（配合 Alfred）也比较完美，使用 Presentation 模式时的阅读体验简直太美太棒。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1468654167867.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;进一步，将印象笔记重新&lt;a href=&quot;https://help.yinxiang.com/hc/zh-cn/articles/212819428-%E5%A6%82%E4%BD%95%E8%BF%81%E7%A7%BBEvernote%E5%9B%BD%E9%99%85%E7%89%88%E7%AC%94%E8%AE%B0%E5%88%B0%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0-&quot;&gt;迁移&lt;/a&gt;到 Evernote 国际版也是基于几个考虑：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;其实单条笔记逐渐迁移真的很不错，就当是一个取其精华进行提炼的过程，😊&lt;/li&gt;  &lt;li&gt;而且吧，印象笔记因为天朝法律法规的问题，连网页分享功能都被禁止显示了。&lt;/li&gt;  &lt;li&gt;Evernote 相比之下速度确实慢了点，但是对于已归档而不常编辑的笔记内容来说同步就是次要需求了。&lt;/li&gt;  &lt;li&gt;Evernote 支持的第三方工具和服务更多，比如最近集成了 Google Drive，当然还有更多更优质的国外产品体验。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;进而，印象笔记还可以作为统一的 API，通过加标签的方式分享出去，也就是说用最简单的操作就可以一键同步到我的博客（进一步，则为个人内容展示平台）。国外已知的产品有 &lt;a href=&quot;http://postach.io/app/&quot;&gt;Postach.io - The Evernote Powered Blogging Platform&lt;/a&gt;，而国内的&lt;a href=&quot;http://noteton.com/&quot;&gt;有记&lt;/a&gt;在速度上还挺快的，只是界面上确实丑了点而且不能自定义，那其实就可以作为共有 API 再通过 yql 的爬虫间接显示到自己的平台上去。&lt;/p&gt;&lt;p&gt;除了同步到博客以外，想要重点讨论 Reflection 对于个人而言的价值所在，也就是指&lt;strong&gt;个人知识系统的闭环&lt;/strong&gt;。印象笔记的内容可以集成到 Google 搜索结果的右边栏，那么当你搜索关键词的时候印象笔记也会相应的给出自己的答案。若是自己在之前放入印象笔记的知识是经过整理了的话，那印象笔记所展示的内容甚至会比 Google 更懂自己。这就是知识闭环的一种形态，&lt;strong&gt;在最恰当的时候唤醒人的相关记忆&lt;/strong&gt;，而且你可以相应地更新笔记内容从而进一步丰富你的知识系统。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1468654329533.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;后续&quot;&gt;后续&lt;/h2&gt;&lt;p&gt;这篇文章，之所以题为「我的笔记系统」，就说明这个主题其实是利己的，一方面出于目的想让我自己从这个系统中收获更多，成为一个更有价值的人；另一方面我深知「知识流通性的重要性」，知识只有被传播才能释放出更大的价值，让每个人都能成为一个更有价值的人。而中间的鸿沟就在于，&lt;strong&gt;当自己还没成为一个更有价值的人之前&lt;/strong&gt;，怎么好意思去产出自认为有价值的东西呢？当成长到某一阶段之后，下个话题自然就变成了如何构建影响力，这时候再去写脚本实现各大平台的自动化发布也就是一件水到渠成的事情，也会让自己更加有底气。&lt;/p&gt;&lt;hr /&gt;&lt;div class=&quot;footnotes&quot;&gt;  &lt;ol&gt;    &lt;li id=&quot;fn:1&quot;&gt;      &lt;p&gt;这更多的是我自己所理解的「个人知识管理」流程，可以参考我之前所做过的一个 Session：&lt;a href=&quot;http://blog.jimmylv.info/slides/2015-08-29-personal-knowledge-management.htm&quot;&gt;PKM：个人知识管理 - By Jimmy Lv&lt;/a&gt;，还有这篇文章：&lt;a href=&quot;http://blog.jimmylv.info/2015-10-09-three-types-of-knowledge/&quot;&gt;个人知识管理：知识的三种形态 - 吕立青的博客&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;    &lt;/li&gt;    &lt;li id=&quot;fn:2&quot;&gt;      &lt;p&gt;拼音输入出错概率最大的就是同音字，而读音一样的字在大段文字当中会使人无法理解，因为人脑在阅读理解的时候首先映射的是字形而不是字音。在拼音输入的时候，我们脑袋里想的也许是一句话，但却习惯于只输入两三个字就按下空格键，以人为保证输入正确。但其实，机器更强大的强功能是把你一连串的输入进行智能分析并且纠正过来。所以若每次只是输入一两个词，那么再强大的拼音输入法也没有足够的上下文来进行修正。这基本上是用拼音打字的最大一个弊端了，连续输入会由于删除成本过高而怕出错，但是短了却又丧失了机器辅助输入的最大好处。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;    &lt;/li&gt;  &lt;/ol&gt;&lt;/div&gt;",
            "excerpt"    : "&lt;h2 id=&quot;书写和阅读是不一样的体验&quot;&gt;书写和阅读是不一样的体验&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/speed-up-mac-efficiency",
            "title"      : "全面思考：Mac + iPhone 效率加速之战略篇 &amp;&amp; 战术篇",
            "category"   : "思考",
            "tags"       : "写作, Mac, 学习, 效率",
            "url"        : "/2016-07-10-speed-up-mac-efficiency/",
            "path"       : "_posts/思考/2016-07-10-speed-up-mac-efficiency.md",
            "next"       : "/2016-07-12-pkm-again-to-innovate-my-note-system/",
            "previous"   : "/2016-07-09-learning-aem/",
            "date"       : "2016-07-10 00:00:00 +0000",
            "shortdate"  : "July 10, 2016",
            "content"    : "&lt;h2 id=&quot;战略篇&quot;&gt;战略篇&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;自定义，定制化（命令行，快捷键，样式，内容）    &lt;ul&gt;      &lt;li&gt;alias 常用命令&lt;/li&gt;      &lt;li&gt;修改快捷键&lt;/li&gt;      &lt;li&gt;自定义样式/内容（@Chrome 强大但界面依然可以简洁无比）&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;发现问题本质，从根源解决问题    &lt;ul&gt;      &lt;li&gt;比如桌子离插头太远不好插插头，那就把桌子「整个」移动一下而不是换一个座位&lt;/li&gt;      &lt;li&gt;比如小拇指比较难按 Ctrl，则可以把 Caps Lock 键更改为 Control 键&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;减少切换，专注，写出东西才是最终的目的    &lt;ul&gt;      &lt;li&gt;开始工作之前，区分工作区&lt;/li&gt;      &lt;li&gt;工作中，理想情况下无需切换当前工作区&lt;/li&gt;      &lt;li&gt;在当前工作区切换软件，而甚至不用看到其他软件的运行状况        &lt;ul&gt;          &lt;li&gt;自动隐藏 Dock 栏，结合 @Alfred 根本没有必要去关注它。&lt;/li&gt;          &lt;li&gt;只完全隐藏菜单栏的图标            &lt;ul&gt;              &lt;li&gt;自动隐藏的意思其实就是会自动显示，容易误触&lt;/li&gt;              &lt;li&gt;特别是依赖于在触摸板上划切换全屏时&lt;/li&gt;              &lt;li&gt;或者思考用快捷键（@ShiftIt）代替上划？&lt;/li&gt;            &lt;/ul&gt;          &lt;/li&gt;          &lt;li&gt;而 @Finder 可以直接固定在每一个工作区，也是极好的（@Snap）            &lt;ul&gt;              &lt;li&gt;Finder 对于文件的操作和预览真的是比 Windows 下好太多了。&lt;/li&gt;              &lt;li&gt;当一个好太多的东西出现之后，依旧会有可优化的地方&lt;/li&gt;            &lt;/ul&gt;          &lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2b95l3vfj31kw0zke81.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;命令行与快捷键快于一切    &lt;ul&gt;      &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install&lt;/code&gt; 安装软件&lt;/li&gt;      &lt;li&gt;使用 hub 管理 GitHub 仓库&lt;/li&gt;      &lt;li&gt;同时思考触摸板和快捷键的区别？        &lt;ul&gt;          &lt;li&gt;触摸板在&lt;strong&gt;阅读&lt;/strong&gt;的时候非常方便，比如上下滑动以及上划下划窗口边缘可以放大缩小（HyperSwitch）&lt;/li&gt;          &lt;li&gt;而快捷键则在&lt;strong&gt;写作&lt;/strong&gt;的时候更加方便，不用让手离开键盘的 F + J&lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;「高愉状态」，是人在专注时进入高效能状态的同时受环境刺激产生一种&lt;strong&gt;专注感和愉悦感并存&lt;/strong&gt;的状态。    &lt;ul&gt;      &lt;li&gt;via &lt;a href=&quot;https://www.zhihu.com/question/27297809/answer/85341732&quot;&gt;怎样用 Mac 和 iPhone 高效学习？ - River哥的回答 - 知乎&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;还是要把🍅番茄工作法用起来，至少是在非工作时间，一定要把时间记录下来，而且一定是有效时间的利用比。我去买个新的番茄土豆账号。&lt;/li&gt;      &lt;li&gt;哈哈哈，最好的办法就是不要把 Todos 放到 @番茄土豆 应用的列表里面去，让它回归到番茄工作法本身以及用于分析历史记录。&lt;/li&gt;      &lt;li&gt;&lt;strong&gt;能分到这个应用当中的都是有价值的工作，需要被进入被反馈被进一步改善。&lt;/strong&gt;&lt;/li&gt;      &lt;li&gt;所以相应的就需要 @滴答清单 来管理所有的 Todos 列表，什么东西都可以往里面丢。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;单一入口，定制化与智能化    &lt;ul&gt;      &lt;li&gt;参考自己的一篇博文，&lt;a href=&quot;https://blog.jimmylv.info/2015-05-12-intellectual-and-single-entrance/&quot;&gt;由写作环境引起的反思：单一入口的智能化 - 吕立青的博客&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;手机端的搜索也要利用起来，类 Alfred 的 Spotlight Search，虽然在电脑端被我弃用。&lt;/li&gt;      &lt;li&gt;新系统 macOS Sierra 重点推 Siri        &lt;ul&gt;          &lt;li&gt;但是显然 Siri 还没好到让我把它当做第一入口来使，普通话识别效果跟个 shit 一样。&lt;/li&gt;          &lt;li&gt;但至少，在没人的时候可以使语音输入来培养跟电脑说话的习惯，以及锻炼普通话的标准程度。&lt;/li&gt;          &lt;li&gt;现在所有的使用习惯都将是未来的投资，而人工智能是根据个人的习惯来进一步训练的，所以现在的行为是会影响今后人工智能更自我的契合度。&lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;      &lt;li&gt;Siri 会是未来吗？        &lt;ul&gt;          &lt;li&gt;现在我来用语音输入文字，发现这个识别率还是不够准确&lt;/li&gt;          &lt;li&gt;但是这个速度确实提高了好多，不能中英混合输入，还是比较遗憾的&lt;/li&gt;          &lt;li&gt;而且不能自动加上标点符号，需要自己说句号。&lt;/li&gt;          &lt;li&gt;所以语音输入和打字修正两者结合还是比较快的，感觉可以分分钟写出文章来。&lt;/li&gt;          &lt;li&gt;但是发现写文章的时候其实更多的是在&lt;strong&gt;思考&lt;/strong&gt;，真正打字的时间反而比较少。&lt;/li&gt;          &lt;li&gt;其实对中文普通话的标准程度要求也是挺高的呢，发现自己还得多练练。&lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1468146749104.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;文字即代码    &lt;ul&gt;      &lt;li&gt;可以使用特殊语法糖标记特殊的标签，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;# @ !&lt;/code&gt; 等等，可以被 @LetterSpace 和 @Workflowy 所识别，最好统一起来，😂&lt;/li&gt;      &lt;li&gt;当然还有最典型的还被 Markdown 语法所支持的 &lt;code class=&quot;highlighter-rouge&quot;&gt;* [ ]&lt;/code&gt; 勾选框&lt;/li&gt;      &lt;li&gt;代码统计工具，&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install cloc&lt;/code&gt; &amp;amp;&amp;amp; &lt;a href=&quot;https://github.com/josephwecker/git-loc&quot;&gt;git-loc&lt;/a&gt;，当然活跃度还可以看 GitHub 上原生的&lt;a href=&quot;https://github.com/JimmyLv/jimmy.lv/graphs/code-frequency&quot;&gt;图表统计&lt;/a&gt;。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;短暂的休息是为了更长久的专注    &lt;ul&gt;      &lt;li&gt;若是一直坐在这里，我都不相信自己还有清晰的头脑去思考，去保持自己的注意力不被拉走或者被完全消耗而无力继续。&lt;/li&gt;      &lt;li&gt;刚刚短暂的五分钟，让我体会到了好多。        &lt;ul&gt;          &lt;li&gt;有很多新的有趣的想法，或者以后编程中遇到了什么问题，简单休息一下反而可以灵感突现找到解决方案&lt;/li&gt;          &lt;li&gt;最关键是可以走动走动，活动筋骨不说，还不会忘记喝水上厕所这种事情，以防 25min  之内的时候被生理需求所打断。&lt;/li&gt;          &lt;li&gt;而这 5 分钟，还可以简单收拾搭理一下家里的衣服呀，或者是换一下垃圾袋啊之类的，一举两得。&lt;/li&gt;          &lt;li&gt;当然，还可以简单洗把脸，既清爽醒神又能让皮肤变好一点儿吧。&lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;软件应用的价值理念    &lt;ul&gt;      &lt;li&gt;只留有价值的，只记录有价值的，只分析有价值的，部分。&lt;/li&gt;      &lt;li&gt;不用记录下所有的部分，完美主义去死啦，我不想活得太累。        &lt;ul&gt;          &lt;li&gt;就像记账一样，大体策略上（尽可能使用信用卡）是正确的，那么分析起来就很简单。&lt;/li&gt;          &lt;li&gt;而在记录时间里面，只看有价值的部分，其实就可以推断为何当天有价值部分占比不高的情况。&lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1468146873449.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;战术篇&quot;&gt;战术篇&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;软件篇之「系统层级」    &lt;ul&gt;      &lt;li&gt;改键篇之应用程序切换        &lt;ul&gt;          &lt;li&gt;个人优于团队，虽说平常会有 Pair 的机会，但是个人的 Mac 下操作依旧是只有自己的操作。&lt;/li&gt;          &lt;li&gt;把 Cmd + Tab 改成切换当前工作区的软件，既可以专心于当前任务所需软件的切换，而不用被其他工作区的软件所分神&lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;      &lt;li&gt;改键篇之把 Caps Lock 键更改为 Control 键        &lt;ul&gt;          &lt;li&gt;从此解放小拇指，并且为买 &lt;a href=&quot;https://en.wikipedia.org/wiki/Happy_Hacking_Keyboard&quot;&gt;HHKB&lt;/a&gt; 做准备，😂&lt;/li&gt;          &lt;li&gt;直接切换工作区（聊天、代码、写作分离）            &lt;ul&gt;              &lt;li&gt;更幸福的是 Caps Lock 键 + Numbers 可以直接切换工作区，完美&lt;/li&gt;              &lt;li&gt;再也不用两手离开键盘，使用四指滑动切换工作区了，活动体验上很爽但其实效率并不高。&lt;/li&gt;            &lt;/ul&gt;          &lt;/li&gt;          &lt;li&gt;意想不到的是，组合键编程亦然简单            &lt;ul&gt;              &lt;li&gt;还可以把一些快捷键设定为 Cmd + Ctrl + XX，这样就连“次”难按的 Option 键也省掉啦。&lt;/li&gt;              &lt;li&gt;比如 Cmd + Ctrl + Space 输入表情&lt;/li&gt;              &lt;li&gt;比如 Cmd + Ctrl + E 找菜单栏应用&lt;/li&gt;              &lt;li&gt;比如 Cmd + Ctrl + C 上传截图并插入 MD 链接&lt;/li&gt;              &lt;li&gt;比如 Cmd + Ctrl + V 打开剪切板历史&lt;/li&gt;              &lt;li&gt;比如 Cmd + Ctrl + P 在 SublimeText 中切换 Project&lt;/li&gt;              &lt;li&gt;比如 Ctrl + Space 补全！&lt;/li&gt;            &lt;/ul&gt;          &lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;      &lt;li&gt;文字输入效率（via &lt;a href=&quot;http://sspai.com/31525&quot;&gt;技巧：Mac 里的文字输入效率 - 少数派&lt;/a&gt;）        &lt;ul&gt;          &lt;li&gt;=&amp;gt; + 语音（辅助）输入&lt;/li&gt;          &lt;li&gt;搜狗输入法            &lt;ul&gt;              &lt;li&gt;自动英文切换（编程向软件）&lt;/li&gt;              &lt;li&gt;英文输入助手（自动空格）&lt;/li&gt;            &lt;/ul&gt;          &lt;/li&gt;          &lt;li&gt;表情输入 ☺️ (=σωσ=)♪&lt;/li&gt;          &lt;li&gt;模板输入（Dash Snippet 和 编辑器中的 Live templates）&lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1468140060115.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;软件篇之「时间管理」    &lt;ul&gt;      &lt;li&gt;@滴答清单        &lt;ul&gt;          &lt;li&gt;记录一切需要做的事情，总而言之，作为一个「提升至软件级别」的 Inbox （参考 GTD 概念）&lt;/li&gt;          &lt;li&gt;生活琐事 &amp;amp;&amp;amp; 一些 Idea &amp;amp;&amp;amp; 甚至于一些待处理的文章&lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;      &lt;li&gt;@番茄土豆        &lt;ul&gt;          &lt;li&gt;则作为 GTD 里面的 Next Actions，一定是需要整段时间并需要付出努力的，一定是有价值的部分。&lt;/li&gt;          &lt;li&gt;而历史记录分析，则就用来分析真正有价值的东西。&lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;      &lt;li&gt;其他时间记录 App @RescueTime + @Toggl + @Calendar        &lt;ul&gt;          &lt;li&gt;RescueTime 用于 General 的软件使用时间记录工具，只可辅助分析，价值并不大。&lt;/li&gt;          &lt;li&gt;Toggl 则专门用来记录以编程项目的时间，以 Issue 即 Story 为最小单元来辅助估算，记录 Iteration 的 Expect 和 Actual。&lt;/li&gt;          &lt;li&gt;Calendar 则用来规划一天大概的剩余时间，并分成强制时间和自由时间。&lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1468145148644.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;软件篇之「代码编程」    &lt;ul&gt;      &lt;li&gt;文本编辑 @SublimeText        &lt;ul&gt;          &lt;li&gt;竟然也有 Project 和 WorkSpace 的概念            &lt;ul&gt;              &lt;li&gt;还可以用 Cmd + Ctrl + P 快速切换项目，简直可以完美替换 MarkEditor 了，一切无忧。&lt;/li&gt;              &lt;li&gt;一个 Project可以添加多个 floder，甚至创建新的&lt;/li&gt;              &lt;li&gt;至于字数/代码统计，可以采用 Git Summary 来记录哦，每天记得 commit 啊，😊。&lt;/li&gt;            &lt;/ul&gt;          &lt;/li&gt;          &lt;li&gt;文本选择与编辑            &lt;ul&gt;              &lt;li&gt;自带快捷键                &lt;ul&gt;                  &lt;li&gt;Cmd + Shift + Space 选择代码块（类 IDEA 多重选择，但是对中文支持太烂了）&lt;/li&gt;                  &lt;li&gt;Cmd + Shift + J 选择当前缩进&lt;/li&gt;                  &lt;li&gt;Cmd + Shift + V 按当前缩进粘贴&lt;/li&gt;                  &lt;li&gt;Cmd + Shift + ⇅ 可以上下换行&lt;/li&gt;                  &lt;li&gt;Cmd + L 可以一行行选下去&lt;/li&gt;                  &lt;li&gt;Cmd + E 使用选中项去搜索（先 Cmd + F 打开）&lt;/li&gt;                  &lt;li&gt;Ctrl + K 删除当前位置至行尾&lt;/li&gt;                  &lt;li&gt;Ctrl + Space 补全&lt;/li&gt;                &lt;/ul&gt;              &lt;/li&gt;              &lt;li&gt;MarkdownEditing 快捷键                &lt;ul&gt;                  &lt;li&gt;Cmd + Shift + K &lt;code class=&quot;highlighter-rouge&quot;&gt;![]()&lt;/code&gt;&lt;/li&gt;                  &lt;li&gt;Cmd + Option + V &lt;code class=&quot;highlighter-rouge&quot;&gt;[]()&lt;/code&gt;&lt;/li&gt;                  &lt;li&gt;Cmd + Option + B 加粗&lt;/li&gt;                  &lt;li&gt;Cmd + Option + I 斜体&lt;/li&gt;                  &lt;li&gt;Cmd + Shift + ./, 切换 indent quote&lt;/li&gt;                  &lt;li&gt;Option + Shift + 6 该把注脚这个功能用起来啦，用于必要的解释&lt;/li&gt;                &lt;/ul&gt;              &lt;/li&gt;            &lt;/ul&gt;          &lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;      &lt;li&gt;命令行 @iTerm2 &amp;amp;&amp;amp; @oh-my-zsh&lt;/li&gt;      &lt;li&gt;代码编辑 @Intellij IDEA &amp;amp;&amp;amp; Webstorm&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1468147103565.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;战略篇&quot;&gt;战略篇&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/learning-aem",
            "title"      : "持续用户体验：Learning AEM",
            "category"   : "前端",
            "tags"       : "Java, AEM, 前端, 总结",
            "url"        : "/2016-07-09-learning-aem/",
            "path"       : "_posts/前端/2016-07-09-learning-aem.md",
            "next"       : "/2016-07-10-speed-up-mac-efficiency/",
            "previous"   : "/2016-07-07-what-the-flux-on-flux-ddd-and-cqrs/",
            "date"       : "2016-07-09 00:00:00 +0000",
            "shortdate"  : "July 09, 2016",
            "content"    : "",
            "excerpt"    : ""
		} ,
	
		{
            "id"         : "/what-the-flux-on-flux-ddd-and-cqrs",
            "title"      : "【译】什么是 Flux 架构？（兼谈 DDD 和 CQRS）",
            "category"   : "前端",
            "tags"       : "Flux, DDD, CQRS, Architecture, MVC",
            "url"        : "/2016-07-07-what-the-flux-on-flux-ddd-and-cqrs/",
            "path"       : "_posts/前端/2016-07-07-what-the-flux-on-flux-ddd-and-cqrs.md",
            "next"       : "/2016-07-09-learning-aem/",
            "previous"   : "/2016-07-04-rules-for-structuring-redux-applications/",
            "date"       : "2016-07-07 00:00:00 +0000",
            "shortdate"  : "July 07, 2016",
            "content"    : "&lt;blockquote&gt;  &lt;p&gt;&lt;a href=&quot;http://facebook.github.io/flux/docs/overview.html&quot;&gt;Flux&lt;/a&gt; is an application architecture designed by Facebook for their JavaScript applications. It was first introduced by Facebook in May 2014, and it has since garnered much interest in the JavaScript community.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/flux/docs/overview.html&quot;&gt;Flux&lt;/a&gt; 是一个由 Facebook 为其应用所设计的应用程序架构。Facebook 在 2014 年五月的时候首次提出 Flux，如今已经引发了 JavaScript 社区的浓厚兴趣。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;There are several implementations of Flux. Frameworks like &lt;a href=&quot;http://jaysoo.ca/2015/02/06/what-the-flux/fluxxor.com&quot;&gt;Fluxxor&lt;/a&gt; keep to the original Facebook Flux pattern, but reduces the amount of boilerplate code. While other frameworks like &lt;a href=&quot;https://github.com/spoike/refluxjs&quot;&gt;Reflux&lt;/a&gt; and &lt;a href=&quot;https://github.com/yoshuawuyts/barracks&quot;&gt;Barracks&lt;/a&gt; stray from the canonical Flux architecture by getting rid of the Dispatcher (Reflux) or ActionCreators (Barracks). So which framework should you choose?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在市面上有一大堆的 Flux 实现。像 &lt;a href=&quot;http://jaysoo.ca/2015/02/06/what-the-flux/fluxxor.com&quot;&gt;Fluxxor&lt;/a&gt; 这样的框架在保持原生 Facebook Flux 模式的同时，减少了大量的样板文件代码。与此同时，其他类似 &lt;a href=&quot;https://github.com/spoike/refluxjs&quot;&gt;Reflux&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/yoshuawuyts/barracks&quot;&gt;Barracks&lt;/a&gt; 之类的框架则偏离了规范的 Flux 架构，Reflux 摒弃了 Dispatcher，而 Barracks 则 抛弃了 ActionCreators。所以你会选择哪个框架呢？&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Before we get too wrapped up about what is canon, and whether we should be deviating from them, let’s consider a look into the past.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在我们深入了解标准以及是否选择偏离他们之前，让我们来考虑一下过去。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;While the Flux pattern may have found a new home in JavaScript applications, they have been explored before in &lt;strong&gt;Domain-Driven Design&lt;/strong&gt; (DDD) and &lt;strong&gt;Command-Query Responsibility Segregation&lt;/strong&gt; (CQRS). I think it is useful to learn from these older concepts, and see what they may tell us about the present.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;虽然 Flux 模式在 JavaScript 应用里像是找到了新家一样，但是它们肯定也借鉴了&lt;strong&gt;领域驱动设计&lt;/strong&gt; (DDD) 和&lt;strong&gt;命令-查询职责分离&lt;/strong&gt; (CQRS)。我觉得学习这些以前的概念非常有用，来看看它们会告诉我们和现在有怎样的故事。&lt;/p&gt;&lt;h4 id=&quot;in-this-post-i-will--在这篇文章我将&quot;&gt;In this post I will: | 在这篇文章我将：&lt;/h4&gt;&lt;blockquote&gt;  &lt;ol&gt;    &lt;li&gt;Give an overview of the Flux architecture.&lt;/li&gt;    &lt;li&gt;Present the CQRS pattern.&lt;/li&gt;    &lt;li&gt;Look at how Flux applies the concepts from CQRS.&lt;/li&gt;    &lt;li&gt;Discuss when Flux is useful for a JavaScript application.&lt;/li&gt;  &lt;/ol&gt;&lt;/blockquote&gt;&lt;ol&gt;  &lt;li&gt;Flux 架构概述&lt;/li&gt;  &lt;li&gt;描述 CQRS 模式&lt;/li&gt;  &lt;li&gt;Flux 如何应用来自 CQRS 的概念&lt;/li&gt;  &lt;li&gt;讨论 Flux 何时适用于 JavaScript 应用&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;  &lt;blockquote&gt;    &lt;p&gt;Knowledge of DDD is assumed, though the article still provides value without it. To learn more about DDD, I recommend this &lt;a href=&quot;http://www.infoq.com/minibooks/domain-driven-design-quickly&quot;&gt;free ebook&lt;/a&gt; from InfoQ on the subject.&lt;/p&gt;  &lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;blockquote&gt;    &lt;p&gt;Examples will be shown in JavaScript, though the language isn’t the focus of this post.&lt;/p&gt;  &lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;假设已知 DDD 基础知识，但是没有相关基础的话这篇文章也依然有价值。想了解更多关于 DDD 的知识，我推荐 InfoQ 有关这个话题的&lt;a href=&quot;http://www.infoq.com/minibooks/domain-driven-design-quickly&quot;&gt;免费电子书&lt;/a&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;例子将会使用 JavaScript 展示，尽管语言并不是这篇文字的重点。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;what-is-flux--什么是-flux&quot;&gt;What is Flux? | 什么是 Flux？&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;A common way to describe Flux is by comparing it to a &lt;strong&gt;Model-View-Controller&lt;/strong&gt; (MVC) architecture.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;描述 Flux 最普遍的一种的方式就是将其与 &lt;strong&gt;Model-View-Controller&lt;/strong&gt; (MVC) 架构进行对比。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In MVC, a Model can be read by multiple Views, and can be updated by multiple Controllers. In a large application, this results in highly complex interactions where a single update to a Model can cause Views to notify their Controllers, which may trigger even more Model updates.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在 MVC 当中，一个 Model 可以被多个 Views 读取，并且可以被多个 Controllers 进行更新。在大型应用当中，单个 Model 会导致多个 Views 去通知 Controllers，并可能触发更多的 Model 更新，这样结果就会变得非常复杂。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1467895052725.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Flux attempts to solve this complexity by forcing a unidirectional data flow. In this architecture, Views query Stores (not Models), and user interactions result in Actions that are submitted to a centralized Dispatcher. When the Actions are dispatched, Stores can then update themselves accordingly and notify Views of any changes. These changes in the Store prompts Views to query for new data.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Flux 试图通过强制单向数据流来解决这个复杂度。在这种架构当中，Views 查询 Stores（而不是 Models），并且用户交互将会触发 Actions，Actions 则会被提交到一个集中的 Dispatcher 当中。当 Actions 被派发之后，Stores 将会随之更新自己并且通知 Views 进行修改。这些 Store 当中的修改会进一步促使 Views 查询新的数据。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1467895448296.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The main difference between MVC and Flux is the separation of queries and updates. In MVC, the Model is both updated by the Controller &lt;em&gt;and&lt;/em&gt; queried by the View. In Flux, the data that a View gets from a Store is read-only. Stores can only be updated through Actions, which would affect the Stores themselves &lt;em&gt;not&lt;/em&gt; the read-only data.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;MVC 和 Flux 最大的不同就是查询和更新的分离。在 MVC 中，Model 同时可以被 Controller 更新&lt;em&gt;并且&lt;/em&gt;被 View 所查询。在 Flux 里，View 从 Store 获取的数据是只读的。而 Stores 只能通过 Actions 被更新，这就会影响 Store 本身&lt;em&gt;而不是&lt;/em&gt;那些只读的数据。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The pattern described above is very close to CQRS as first described by Greg Young.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;以上所描述的模式非常接近于由 Greg Young 第一次所提出的 CQRS。&lt;/p&gt;&lt;h2 id=&quot;command-query-responsibility-segregation--命令-查询职责分离&quot;&gt;Command-Query Responsibility Segregation | 命令-查询职责分离&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;To understand CQRS, let’s first talk about the object pattern &lt;strong&gt;Command-Query Separation&lt;/strong&gt; (CQS).&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;为了理解 CQRS，让我们首先来讲讲对象模式&lt;strong&gt;命令-查询分离&lt;/strong&gt;（CQS）。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;CQS at an object level means:&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;ol&gt;    &lt;li&gt;If a method mutates the state of the object, it is a &lt;em&gt;command&lt;/em&gt;, and it must not return a value.&lt;/li&gt;    &lt;li&gt;If the method returns some value, it is a &lt;em&gt;query&lt;/em&gt;, and it must not mutate state.&lt;/li&gt;  &lt;/ol&gt;&lt;/blockquote&gt;&lt;p&gt;CQS 在一个对象的层面上意味着：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;如果一个方法修改了这个对象的状态，那就是一个 &lt;em&gt;command&lt;/em&gt;（命令），并且一定不能返回值。&lt;/li&gt;  &lt;li&gt;如果一个方法返回了一些值，那就是一个 &lt;em&gt;query&lt;/em&gt;（查询），并且一定不能修改状态。&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;  &lt;p&gt;In normal DDD, Aggregate objects are used for both command and query. We will also have Repositories that contain methods to find and persist Aggregate objects.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在一般的 DDD 当中，Aggregate（聚合）对象通常被用于命令和查询。我们也有 Repositories（资源库）包含用于查找和存储 Aggregate 对象的方法。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;CQRS simply takes CQS further by separating command and query into different objects. Aggregates would have no query methods, only command methods. Repositories would now only have a single query method (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt;), and a single persist method (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;save&lt;/code&gt;).&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;CQRS 仅仅是让 CQS 进一步将命令和查询拆分到不同的对象当中。Aggregate 对象将不再拥有查询方法，而只有命令方法。Repositories 将不再只有一个单独的查询方法（如 &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt;），而且有了一个存储方法（如 &lt;code class=&quot;highlighter-rouge&quot;&gt;save&lt;/code&gt;）。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In the CQRS pattern, you will find new objects not found in normal DDD.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在 CQRS 模式当中，你还会发现一些普通的 DDD 里找不到的新对象。&lt;/p&gt;&lt;h3 id=&quot;query-model--查询模型&quot;&gt;Query Model | 查询模型&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;The &lt;em&gt;Query Model&lt;/em&gt; is a pure data model, and is not meant to deliver domain behaviour. These models are denormalized, and meant for display and reporting.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;em&gt;查询模型&lt;/em&gt; 就是一个纯数据模型，并且不再提供领域行为。这些模型都是&lt;a href=&quot;http://www.searchdatabase.com.cn/whatis/word_5893.htm&quot;&gt;反规范化&lt;/a&gt;的，用于显示和报告。&lt;/p&gt;&lt;h3 id=&quot;query-processor--查询处理器&quot;&gt;Query Processor | 查询处理器&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Query Models are usually retrieved by performing a query. The queries can be handled by a &lt;em&gt;Query Processor&lt;/em&gt; that knows how to look up data, say from a database table.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;查询模型通常是在执行查询时获取到的。这些查询将被一个&lt;em&gt;查询处理器&lt;/em&gt;所处理，这个处理器知道如何从一个数据库表中查找数据。&lt;/p&gt;&lt;h3 id=&quot;command-model--命令模型&quot;&gt;Command Model | 命令模型&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Command Models are different from normal Aggregates in that they only contain command methods. You can never “ask” it anything, only “tell” (in the Tell, Don’t Ask sense).&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;命令模型和一般的 Aggregates 不同的地方在于它们只包含命令方法。你永远都不能「问」它任何事情，而只能「告诉」（用「告诉」，而不是靠「问」）。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;As a command method completes, it publishes a Domain Event. This is crucial for updating the Query Model with the most recent changes to the Command Model.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;当一个命令方法完成之后，它就会发布一个「领域事件」（Domain Event）。这对于命令模型使用最新的更改进而更新查询模型来说是非常重要的。&lt;/p&gt;&lt;h3 id=&quot;domain-event--领域事件&quot;&gt;Domain Event | 领域事件&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Domain Events lets Event Subscribers know that something has changed in the corresponding Command Model. They contain the &lt;em&gt;name&lt;/em&gt; of the event, and a &lt;em&gt;payload&lt;/em&gt; containing sufficient information for subscribers to correctly update Query Models.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;领域事件会让「事件订阅者」（Event Subscribers）知道在相应的命令模型中发生了一些变化。它们包含着这个事件的&lt;em&gt;名字&lt;/em&gt;，并且附带一个 &lt;em&gt;payload&lt;/em&gt;，里面包含了能让订阅者正确更新查询模型的有效信息。&lt;/p&gt;&lt;blockquote&gt;  &lt;blockquote&gt;    &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Domain Events are always in past tense since they describe what has already occurred (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;ITEM_ADDED_TO_CART&#39;&lt;/code&gt;).&lt;/p&gt;  &lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;领域事件总在过去时，因为它们描述着已发生的事情（如 &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;ITEM_ADDED_TO_CART&#39;&lt;/code&gt;）。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;event-subscriber--事件订阅者&quot;&gt;Event Subscriber | 事件订阅者&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;An &lt;em&gt;Event Subscriber&lt;/em&gt; receives all Domain Events published by the Command Model. When an event occurs, it updates the Query Model accordingly.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;一个&lt;em&gt;事件订阅者&lt;/em&gt;接受由命令模型所发布的所有领域事件。当一个事件发生时，它就会相应地更新查询模型。&lt;/p&gt;&lt;h3 id=&quot;command--命令&quot;&gt;Command | 命令&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;em&gt;Commands&lt;/em&gt; are submitted as the means of executing behaviour on Command Models. A command contains the &lt;em&gt;name&lt;/em&gt; of the behaviour to execute and a &lt;em&gt;payload&lt;/em&gt; necessary to carry it out.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;命令模型所执行的行为就意味着所提交的&lt;em&gt;命令&lt;/em&gt;。一个命令包含这个要被执行的行为的&lt;em&gt;名字&lt;/em&gt;和需要携带的&lt;em&gt;负载&lt;/em&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;blockquote&gt;    &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Commands are always in imperative tense since they describe behaviours that need to be executed (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;AddItemToCart&lt;/code&gt;).&lt;/p&gt;  &lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;命令总是命令式的，因为它们描述需要被执行的行为（比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;AddItemToCart&lt;/code&gt;）。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;command-handler--命令处理器&quot;&gt;Command Handler | 命令处理器&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;The submission of a Command is received by a &lt;em&gt;Command Handler&lt;/em&gt;, which usually fetches an Command Model from its Repository, and executes a Command method on it.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;提交的命令会被一个&lt;em&gt;命令处理器&lt;/em&gt;接收，通常来说会从它的 Repository 当中取出一个命令模型，然后执行其中的命令方法。&lt;/p&gt;&lt;h2 id=&quot;an-example-in-e-commerce--一个电商例子&quot;&gt;An example in e-commerce | 一个电商例子&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Let’s compare normal DDD with CQRS in the context of an e-commerce system with a shopping cart.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;让我们来比较普通的 DDD 和 CQRS 在电子商务系统中的购物车场景下的区别。&lt;/p&gt;&lt;h3 id=&quot;shopping-cart-with-normal-ddd--使用普通-ddd-的购物车&quot;&gt;Shopping cart with normal DDD | 使用普通 DDD 的购物车&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;In normal DDD, we may find an Aggregate &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt; that contains multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;CartItems&lt;/code&gt;, as well as a corresponding Repository.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在普通的 DDD 当中，我们可能会发现一个 Aggregate &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt; 会包含多个 &lt;code class=&quot;highlighter-rouge&quot;&gt;CartItems&lt;/code&gt;，并且会有一个相应的 Repository。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// The Aggregate model&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ShoppingCart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cartItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;taxPercentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;taxPercentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                &lt;span class=&quot;na&quot;&gt;shippingAndHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shippingAndHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;taxPercentage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;taxPercentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shippingAndHandling&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shippingAndHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Command methods&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;addItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;removeItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sku&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Query method&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shoppingCart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// A child of the Aggregate&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CartItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sku&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quantity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Repository to perform CRUD operations&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ShoppingCartRepository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* … */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* … */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* … */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* … */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* … */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Here, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt; is responsible for both queries (&lt;code class=&quot;highlighter-rouge&quot;&gt;cartItems&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;total()&lt;/code&gt;), and updates (&lt;code class=&quot;highlighter-rouge&quot;&gt;addItem()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;removeItem()&lt;/code&gt;, and normal property setters). The &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartRepository&lt;/code&gt; is used to perform CRUD operations on &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;此时，&lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt; 要共同维护查询（&lt;code class=&quot;highlighter-rouge&quot;&gt;cartItems&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;total()&lt;/code&gt;）和更新（&lt;code class=&quot;highlighter-rouge&quot;&gt;addItem()&lt;/code&gt;， &lt;code class=&quot;highlighter-rouge&quot;&gt;removeItem()&lt;/code&gt; 和普通属性的 setters）。而 &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartRepository&lt;/code&gt; 则被用于执行在 &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt; 上的 CRUD 操作。&lt;/p&gt;&lt;h3 id=&quot;shopping-cart-with-cqrs--使用-cqrs-的购物车&quot;&gt;Shopping cart with CQRS | 使用 CQRS 的购物车&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;In CQRS, we can do the following:&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;ol&gt;    &lt;li&gt;Convert the &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt; into a Command Model. It would not have any query methods, only command methods. It also has the extra responsibility to publish two Domain Events (&lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;CART_ITEM_ADDED&#39;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;CART_ITEM_REMOVED&#39;&lt;/code&gt;).&lt;/li&gt;    &lt;li&gt;Create a Query Model for reading the shopping cart total (replacing the original &lt;code class=&quot;highlighter-rouge&quot;&gt;.total()&lt;/code&gt; method). This Query Model can simply be a plain JavaScript object.&lt;/li&gt;  &lt;/ol&gt;&lt;/blockquote&gt;&lt;p&gt;在 CQRS 中，我们可以这样做：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;把 &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt; 变成一个命令模型，不再有任何查询方法，而只有命令方法。它还会额外负责两个领域事件的发布（&lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;CART_ITEM_ADDED&#39;&lt;/code&gt;， &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;CART_ITEM_REMOVED&#39;&lt;/code&gt;）。&lt;/li&gt;  &lt;li&gt;创建一个查询模型用于读取购物车当中的总数（代替原有的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.total()&lt;/code&gt; 方法）。这个查询模型可以是一个简单的 JavaScript 对象。&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;cartId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;129.95&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;ol&gt;    &lt;li&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;CartTotalStore&lt;/code&gt; that holds the query models in memory. This object acts like a Query Processor in that it knows how to look up out Query Models.&lt;/li&gt;    &lt;li&gt;Create an Event Subscriber that will keep out Query Models updated whenever Domain Events are published. In this example we will assign this extra responsibility to the &lt;code class=&quot;highlighter-rouge&quot;&gt;CartTotalStore&lt;/code&gt;, which is easier and closer to what Flux does.&lt;/li&gt;    &lt;li&gt;Create a Command Handler &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartCommandHandler&lt;/code&gt; in order to execute behaviour on the Command Model. It will handle both &lt;code class=&quot;highlighter-rouge&quot;&gt;AddItemToCart&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;RemoveItemFromCart&lt;/code&gt; Commands.&lt;/li&gt;  &lt;/ol&gt;&lt;/blockquote&gt;&lt;ol&gt;  &lt;li&gt;创建 &lt;code class=&quot;highlighter-rouge&quot;&gt;CartTotalStore&lt;/code&gt; 用来维护查询模型的金额。这个对象就像查询处理器一样，知道如何查找查询模型。&lt;/li&gt;  &lt;li&gt;创建一个事件订阅者，将会基于事件模型的发布随时保持查询模型的更新。在这个例子里面，我们将会给 &lt;code class=&quot;highlighter-rouge&quot;&gt;CartTotalStore&lt;/code&gt; 赋予额外的职责，这样更容易也更接近于 Flux 的做法。&lt;/li&gt;  &lt;li&gt;创建一个命令处理器 &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartCommandHandler&lt;/code&gt; 以便于执行命令模型之上的行为。它将会一起处理 &lt;code class=&quot;highlighter-rouge&quot;&gt;AddItemToCart&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;RemoveItemFromCart&lt;/code&gt; 命令。&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;  &lt;blockquote&gt;    &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We are creating a Command Handler that is responsible for multiple Commands. In practice, we may choose to create one handler for each command.&lt;/p&gt;  &lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;我们现在只创建了一个命令处理器用于处理多个命令。而实际操作上，我们可能会选择给每个命令都创建一个处理器。&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// The Command Model publishes Domain Events.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ShoppingCart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* … */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// …&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;addItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// …&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;DomainEventPublisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;CART_ITEM_ADDED&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;cartId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;sku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quantity&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;removeItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// …&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;DomainEventPublisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;CART_ITEM_REMOVED&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;cartId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;sku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quantity&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// This object acts as both the Query Processor and Event Subscriber.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CartTotalStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Holds Query Models in memory.&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Subscribe to events that allows this store to update its Query Models.&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;DomainEventPublisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribeTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ITEM_ADDED_TO_CART&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleItemAdded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;DomainEventPublisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribeTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ITEM_REMOVED_FROM_CART&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleItemRemoved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Query method&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;forCart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;cartId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Methods to update Query Models.&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;handleItemAdded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cartId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newTotal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quantity&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newTotal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;handleItemRemoved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cartId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newTotal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quantity&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newTotal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// This Command Handler maps Commands to command methods ShoppingCart.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ShoppingCartCommandHandler&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CommandHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Assumes commands implement subscribe that appends the handler to themselves.&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;AddItemToCart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addItemToCart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;RemoveItemFromCart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeItemFromCart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;addItemToCart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This publishes a Domain Event&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;removeItemToCart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cartItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This publishes a Domain Event&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;You should now have an understanding of CQRS. Next, we will examine how Flux relates to CQRS.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在你应该已经对 CQRS 有了一定的了解。那么接下来，我们将会仔细介绍 Flux 与 CQRS 是如何搞基的。&lt;/p&gt;&lt;h2 id=&quot;flux-and-cqrs--flux-和-cqrs&quot;&gt;Flux and CQRS | Flux 和 CQRS&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Let’s see how the different types of object in Flux map to the CQRS pattern.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;让我们来看看如何将 Flux 中的不同对象映射到 CQRS 模式当中。&lt;/p&gt;&lt;h3 id=&quot;actions&quot;&gt;Actions&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Actions are exactly the same as Domain Events. They should represent events that have happened in the past, and will cause updates to Query Models in the system.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Actions 就跟领域事件一模一样。它们都代表着过去发生的一些事件，并且将会导致系统中的查询模型被修改。&lt;/p&gt;&lt;h3 id=&quot;dispatcher&quot;&gt;Dispatcher&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;The Dispatcher is the Domain Event Publisher. It is a centralized place where Actions are published to. It also allows Stores to subscribe to Actions that are published in the system.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Dispatcher 就是领域事件发布者。这是 Actions 被发布之后所到达的一个中心地，它还允许 Stores 订阅在系统中已经发布出去的 Actions。&lt;/p&gt;&lt;h3 id=&quot;stores&quot;&gt;Stores&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Stores listen for Actions published through the dispatcher, and update themselves accordingly. In CQRS, they would be the Event Subscriber.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Stores 监听通过 Dispatcher 所发布的 Actions，并相应地更新自己。在 CQRS 中，其实就是事件订阅者。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In addition to being the Event Subscribers, they also act as Query Processors. This is intentionally similar to our implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;CartTotalStore&lt;/code&gt;. In some CQRS systems, however, the Event Subscriber and Query Processor may not be the same object.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;除了作为事件订阅者，他们也作为查询处理器。这表面上类似于我们的 &lt;code class=&quot;highlighter-rouge&quot;&gt;CartTotalStore&lt;/code&gt; 的实现。但是在一些 CQRS 系统中，事件订阅者和查询处理器可能都不是同一个对象。&lt;/p&gt;&lt;h3 id=&quot;actioncreators&quot;&gt;ActionCreators&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;ActionCreators are the Command Handlers. In this case, though, submitting Commands just means calling methods on the ActionCreator. As opposed to having Commands exist as a separate object.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;ActionCreators 就是命令处理器。不过，在这种情况下，提交命令只是意味着调用 ActionCreator 上的方法，而不是让命令以一个单独对象的形态而存在。&lt;/p&gt;&lt;p&gt;e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartActionCreators.addItem(…)&lt;/code&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;As you see, the canonical Flux architecture is only one way of implementing CQRS in a system. It also adds a lot of objects into a system, compared with a normal DDD approach. Is added bloat worth it?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如你所见，规范的 Flux 只是一种 CQRS 在系统中的一种实现方式。相比于 一般的 DDD 方法，它也给一个系统添加了大量的对象。有必要因此得意而膨胀吗？&lt;/p&gt;&lt;h2 id=&quot;when-should-i-flux--何时应用-flux&quot;&gt;When should I Flux? | 何时应用 Flux？&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;I don’t think this architectural pattern is appropriate for all situations. Like other tools under our belt, don’t use mindlessly apply the same patterns everywhere.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我不认为这种架构模式适用于所有情况。就像我们面对过的其他工具一样，不要盲目地在所有地方都运用同一种模式。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In particular, Flux &lt;em&gt;may be inappropriate&lt;/em&gt; if your views map well to your domain models. For example, in a simple CRUD application, you may have exactly three views for each model: index, show, and edit + delete. In this system, you will likely have just one controller and one view for each CRUD operation on your model, making the data flow very simple.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;特别的是，Flux &lt;em&gt;可能不适用于&lt;/em&gt;视图和领域模型合理映射的情况。比如说，在一个简单的 CRUD 应用程序里，对于每种模型来说，你都可能有三种视图：index，show，以及 edit 和 delete。在这种系统里，你可能只需要给每个模型的 CRUD 操作配备一个控制器和视图就可以了，数据流就已经足够简单。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Where Flux &lt;em&gt;shines&lt;/em&gt; is in a system where you present multiple views that don’t map directly to your domain models. The views may be presenting data aggregated across multiple models and model classes.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在一个系统中，在你需要描述多个视图并且不能直接映射到领域模型的地方，Flux 能够&lt;em&gt;大展宏图&lt;/em&gt;。这些视图可能需要来自于多个模型和不同种类的聚合数据。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In our shopping cart example, we may have:&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;ol&gt;    &lt;li&gt;A view that lists out items in the cart.&lt;/li&gt;    &lt;li&gt;A view that handles displaying subtotals, taxes, shipping &amp;amp; handling, and totals.&lt;/li&gt;    &lt;li&gt;A view that displays amount of items in cart, with a detailed dropdown.&lt;/li&gt;  &lt;/ol&gt;&lt;/blockquote&gt;&lt;p&gt;在我们的购物车例子里，我们可能有：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;一个列出购物车所有物品的视图。&lt;/li&gt;  &lt;li&gt;一个处理显示汇总，税，配送和包装，以及总数的视图。&lt;/li&gt;  &lt;li&gt;一个处理购物车中物品的个数，以及下拉详情菜单的视图。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1467904299891.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In this system, we don’t want to tie different views and controllers directly to a ShoppingCart model because changes to the model causes a complex data flow that is hard to reason about.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在这个系统中，我们不想把不同的视图和控制器直接绑定到 ShoppingCart 一个模型上，因为这个模型的修改将会导致难以理解的复杂数据流。&lt;/p&gt;&lt;h2 id=&quot;closing-thoughts--结论&quot;&gt;Closing thoughts | 结论&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;As you have seen, we can think about the canonical Flux architecture in terms familiar in CQRS.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;就像你已经看到的那样，我们可以认为规范的 Flux 架构跟 CQRS 非常相似。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;There are several object roles in CQRS.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;ul&gt;    &lt;li&gt;Query Model&lt;/li&gt;    &lt;li&gt;Query Processor&lt;/li&gt;    &lt;li&gt;Command Model (Aggregate)&lt;/li&gt;    &lt;li&gt;Commands&lt;/li&gt;    &lt;li&gt;Command Handler&lt;/li&gt;    &lt;li&gt;Domain Event&lt;/li&gt;    &lt;li&gt;Domain Event Publisher&lt;/li&gt;    &lt;li&gt;Event Subscriber&lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;这是一些 CQRS 当中的对象角色。&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;Query Model - 查询模型&lt;/li&gt;  &lt;li&gt;Query Processor - 查询处理器&lt;/li&gt;  &lt;li&gt;Command Model (Aggregate) - 命令模型（聚合）&lt;/li&gt;  &lt;li&gt;Commands - 命令&lt;/li&gt;  &lt;li&gt;Command Handler - 命令处理器&lt;/li&gt;  &lt;li&gt;Domain Event - 领域事件&lt;/li&gt;  &lt;li&gt;Domain Event Publisher - 领域事件发布者&lt;/li&gt;  &lt;li&gt;Event Subscriber - 事件订阅者&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;p&gt;In Facebook Flux some objects take on more than one role. This is perfectly reasonable to do! When we encounter other Flux implementations, we could also discuss them using the different object roles in CQRS.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在 Facebook 的 Flux 里有一些对象承担了多个角色。这是非常合理的！当我们遇到其他的 Flux 实现，我们也可以讨论他们使用了哪些 CQRS 中的不同对象。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Does this mean we should buy books and materials about CQRS and become experts on that? Not necessarily. But I think it is interesting to see how some of these old concepts are becoming new again.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;难道这就意味着我们应该买一些与 CQRS 相关的书和材料，并且成为相关的专家吗？并不需要。但是我觉得呢，了解这些旧概念是怎样重新焕发新生的是一件非常有趣的事情。😃&lt;/p&gt;&lt;h3 id=&quot;further-readings--扩展阅读&quot;&gt;Further Readings | 扩展阅读&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;https://reactjsnews.com/the-state-of-flux/&quot;&gt;The State of Flux&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.infoq.com/minibooks/domain-driven-design-quickly&quot;&gt;Domain-Driven Design Quicky&lt;/a&gt; (ebook)&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://martinfowler.com/bliki/CQRS.html&quot;&gt;CQRS writeup by Martin Fowler&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;blockquote&gt;  &lt;p&gt;&lt;a href=&quot;http://facebook.github.io/flux/docs/overview.html&quot;&gt;Flux&lt;/a&gt; is an application architecture designed by Facebook for their JavaScript applications. It was first introduced by Facebook in May 2014, and it has since garnered much interest in the JavaScript community.&lt;/p&gt;&lt;/blockquote&gt;"
		} ,
	
		{
            "id"         : "/rules-for-structuring-redux-applications",
            "title"      : "【译】Redux + React 应用程序架构的 3 条规范（内附实例）",
            "category"   : "前端",
            "tags"       : "Redux, React, FED, DX, Architecture",
            "url"        : "/2016-07-04-rules-for-structuring-redux-applications/",
            "path"       : "_posts/前端/2016-07-04-rules-for-structuring-redux-applications.md",
            "next"       : "/2016-07-07-what-the-flux-on-flux-ddd-and-cqrs/",
            "previous"   : "/2016-07-03-a-better-file-structure-for-react-redux-applications/",
            "date"       : "2016-07-04 00:00:00 +0000",
            "shortdate"  : "July 04, 2016",
            "content"    : "&lt;p&gt;原文地址：&lt;a href=&quot;http://jaysoo.ca/2016/02/28/organizing-redux-application/&quot;&gt;http://jaysoo.ca/2016/02/28/organizing-redux-application/&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;As our applications grow, we often find that file structure and organization to be crucial for the maintainability of application code.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;随着应用程序的增长，通常我们就会发现文件结构和组织对于应用程序代码的可维护性来说就会变得非常重要。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;What I want to do in this post is to present three organizational rules that I personally follow on my own projects. By following the rules, your application code should be easier to reason about, and you will find yourself wasting less time on file navigation, tedious refactoring, and bug fixes.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在这篇文章里，我会介绍自己在项目中亲自实践的三条组织规则。通过遵循这些规则，你的应用程序代码将会变得更加易读，而且你会发现自己不用再把时间浪费在文件导航，频繁重构以及 Bug 修复上了。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;I hope that these tips will prove useful for developers who want to improve their application structure, but don’t know where to start.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我希望这些建议，可以给那些想要改善应用结构却不知从何入手的开发者们提供帮助。&lt;/p&gt;&lt;h2 id=&quot;three-rules-for-project-structure--项目结构的三条规则&quot;&gt;Three rules for project structure | 项目结构的三条规则&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;The following are some basic rules for structuring a project. It should be noted that the rules themselves are framework and language agnostic, so you should should be able to follow them in all situations. However, the examples are in React and Redux. Familiarity with these frameworks is useful.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;接下来的内容就是关于构建一个项目的一些基本规则。需要注意的是，这些规则本身是跟框架和语言无关的，所以你在所有的情况下都应该可以遵循这些规则。但在这里，我们是以 React 和 Redux 为例，熟悉这些框架将会很有帮助。&lt;/p&gt;&lt;h3 id=&quot;rule-1-organize-by-feature--规则-1-基于特性进行组织-id41&quot;&gt;Rule #1: Organize by feature | 规则 #1: 基于特性进行组织 id:41&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Let’s first start by going over what not to do. A common way that projects can be organized is by object roles.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;首先让我们来看看不该做什么，常见的一种方式就是根据对象角色来组织项目结构。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Redux + React:&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;actions/  todos.jscomponents/  todos/    TodoItem.js    ...constants/  actionTypes.jsreducers/  todos.jsindex.jsrootReducer.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;AngularJS:&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;controllers/directives/services/templates/index.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Ruby on Rails:&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/  controllers/  models/  views/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;It may seem reasonable to group similar objects together like this (controllers with controllers, components with components), however as the application grows this structure does not scale.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;将类似的对象（Controller 和 Controller，Component 和 Component）组织在一起，这看似合情合理，但伴随着应用的增长，这种结构将会不利于扩展。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;When you add and change features, you’ll start to notice that some groups of objects tend to change together. &lt;strong&gt;These objects group together to form a feature module&lt;/strong&gt;. For example, in a todo app, when you change the &lt;code class=&quot;highlighter-rouge&quot;&gt;reducers/todos.js&lt;/code&gt; file, it is likely that you will also change &lt;code class=&quot;highlighter-rouge&quot;&gt;actions/todos.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;components/todos/*.js&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;每当你添加或修改特性的时候，你就会开始注意到某些部分的对象倾向于同时发生改变。&lt;strong&gt;将这些对象归在一起可以共同构成一个特性模块&lt;/strong&gt;。比如说，在一个 Todo 应用里，每当你改变 &lt;code class=&quot;highlighter-rouge&quot;&gt;reducers/todos.js&lt;/code&gt; 文件，很可能你也会改变 &lt;code class=&quot;highlighter-rouge&quot;&gt;actions/todos.js&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;components/todos/*.js&lt;/code&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Instead of wasting time scrolling through your directories looking for todos related files, it is much better to have them sitting in the same location.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;相反，为了不再把时间浪费在浏览目录去寻找跟 todos 有关的文件，还是将它们放到同一个地方会明显比较好。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;A better way to structure Redux + React project:&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;一种更好的 React + Redux 项目文件目录：&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todos/  components/  actions.js  actionTypes.js  constants.js  index.js  reducer.jsindex.jsrootReducer.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I will go into the details of what’s inside the files later in this post.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;我将会在文章后面的部分详细描述这些文件的具体内容。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In a large project, organizing by feature affords you the ability to focus on the feature at hand, instead of having to worry about navigating the entire project. This means that if I need to change something related to todos, I can work soley within that module and not even think about the rest of the application. In a sense, it creates an &lt;strong&gt;application within the main application&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在一个大型项目当中，根据特性组织文件可以让你专注于近在手边儿的特性，而不会不得已而去担心整个项目的导航。这就意味着，如果我需要修改 todos 相关的东西，我可以单独工作在这个模块而不用考虑应用的其他部分。从感觉上来说，这就像是&lt;strong&gt;在主应用程序里面创建了另外一个应用程序&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;On the surface, organizing by feature may seem like an aesthetics concern, but as we will see in the next two rules, this way of structuring projects will help simplify your application code.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;从表面上来看，根据特性组织似乎看起来像是一种基于美学的考虑。但是，就如我们在接下来的两个规则中所看到的那样，这种构建项目的方式将会帮助简化你的应用程序代码。&lt;/p&gt;&lt;h3 id=&quot;rule-2-create-strict-module-boundaries--规则-2-设计严格的模块边界-id40&quot;&gt;Rule #2: Create strict module boundaries | 规则 #2: 设计严格的模块边界 id:40&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;In his Ruby Conf 2012 talk &lt;a href=&quot;https://www.youtube.com/watch?v=rI8tNMsozo0&quot;&gt;Simplicity Matters&lt;/a&gt;, Rich Hickey defines complexity as the &lt;strong&gt;complecting&lt;/strong&gt; (or interleaving) of things. When you couple modules together, you can picture an actual knot or braid forming in your code.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Rich Hickey 在他的 Ruby Conf 2012 演讲 &lt;a href=&quot;https://www.youtube.com/watch?v=rI8tNMsozo0&quot;&gt;Simplicity Matters&lt;/a&gt; 中，将复杂度定义为一种&lt;strong&gt;编织&lt;/strong&gt;（或交织）的东西。当你把模块耦合在一起，你将会从代码当中看到某种跟现实中的绳结或者辫子一样的形态。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1467619650283.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The relevence of complexity to project structure is that when you place objects in &lt;strong&gt;close proximity&lt;/strong&gt; to one another, the &lt;strong&gt;barrier to couple&lt;/strong&gt; them lowers dramatically.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;项目结构的复杂相关度就是，当你把一个对象&lt;strong&gt;靠近于&lt;/strong&gt;另外一个对象，将其&lt;strong&gt;耦合到一起的障碍&lt;/strong&gt;就会显著减少。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;As an example, let’s say that we want to add a new feature to our TODO app: We want the ability to manage TODO lists by &lt;em&gt;project&lt;/em&gt;. That means we will create a new module called projects.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;作为示例，让我们来给 TODO 应用添加一个新特性：我们想要根据 &lt;em&gt;project&lt;/em&gt; 来管理 TODO 列表。这就意味着我们将要创建一个名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;projects&lt;/code&gt; 的新模块。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;projects/  components/  actions.js  actionTypes.js  reducers.js  index.jstodos/index.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Now, it is obvious that the &lt;em&gt;projects&lt;/em&gt; module will have a dependency on todos. In this situation, it is important that we exercise discipline and only couple to the “public” API exposed in &lt;code class=&quot;highlighter-rouge&quot;&gt;todos/index.js&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在，&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;projects&lt;/code&gt;&lt;/em&gt; 模块显然会依赖于 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt;。在这种情况下，严格约束，以及仅耦合于由 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos/index.js&lt;/code&gt; 所暴露的「公共」接口就变得非常重要。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;BAD&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;../todos/actions&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TodoItem&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;../todos/components/TodoItem&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;GOOD&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;../todos&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TodoItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Another thing to &lt;strong&gt;avoid is coupling to the state of another module&lt;/strong&gt;. For example, say that within the projects module, we need to grab information out of todos state in order to render a component. It is better that the todos module exposes an interface for projects to query this information, rather than complecting the component with todos state.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;另外一件事就是&lt;strong&gt;避免跟其他模块的状态相耦合&lt;/strong&gt;。比如说，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;projects&lt;/code&gt; 模块内部，我们需要从 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; 的状态里面获取信息从而渲染组件。那么 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; 模块就最好能给 &lt;code class=&quot;highlighter-rouge&quot;&gt;projects&lt;/code&gt; 模块暴露一个接口用于查询信息，而不是让这个组件和 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt;  状态交织在一起。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;BAD&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const ProjectTodos = ({ todos }) =&amp;gt; (  &amp;lt;div&amp;gt;    {todos.map(t =&amp;gt; &amp;lt;TodoItem todo={t}/&amp;gt;)}  &amp;lt;/div&amp;gt;);// Connect to todos stateconst ProjectTodosContainer = connect(  // state is Redux state, props is React component props.  (state, props) =&amp;gt; {    const project = state.projects[props.projectID];    // This couples to the todos state. BAD!    const todos = state.todos.filter(      t =&amp;gt; project.todoIDs.includes(t.id)    );    return { todos };  })(ProjectTodos);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;GOOD&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { createSelector } from &#39;reselect&#39;;import todos from &#39;../todos&#39;;// Same as beforeconst ProjectTodos = ({ todos }) =&amp;gt; (  &amp;lt;div&amp;gt;    {todos.map(t =&amp;gt; &amp;lt;TodoItem todo={t}/&amp;gt;)}  &amp;lt;/div&amp;gt;);const ProjectTodosContainer = connect(  createSelector(    (state, props) =&amp;gt; state.projects[props.projectID],    // Let the todos module provide the implementation of the selector.    // GOOD!    todos.selectors.getAll,    // Combine previous selectors, and provides final props.    (project, todos) =&amp;gt; {      return {        todos: todos.filter(t =&amp;gt; project.todoIDs.includes(t.id))      };    }  ))(ProjectTodos);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;In the “GOOD” example, the projects module is not concerned with the internal state of todos module. This is powerful because we can freely change the structure of the todos state, without worrying about breaking other dependent modules. Of course we still need to maintain our selector contracts, but the alternative is having to search through a whole bunch of disparate components and refactor them one by one.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在「GOOD」的例子当中，&lt;code class=&quot;highlighter-rouge&quot;&gt;projects&lt;/code&gt; 模块并不用关心 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; 模块内部的状态。这是非常有用的，因为我们可以自由地改变 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; 状态的结构，而不用担心破坏其他依赖模块。当然，我们依旧需要维护我们的 selector 契约，但另一种选择则必须从一大堆不相干的组件中进行搜索并依次对其重构。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;By artificially creating strict module boundaries, we can simplify our application code, and in turn increase the maintainability of our application. &lt;strong&gt;Instead of haphazardly reaching inside other modules, we should think about forming and maintaining contracts between them.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;通过人为地设计严格的模块边界，我们可以简化应用代码，并且反过来增加应用的可维护性。&lt;strong&gt;无需涉及其他模块的内部，我们应当思考模块之间契约的形式和维护。&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Now that the projects are organized by features, and we have explicit boundaries between each feature, there is one last thing I want to cover: &lt;em&gt;circular dependencies&lt;/em&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;既然项目已经根据特性组织而成，并且在每个特性之间也有了清晰的边界，那么接下来就是我想要涉及的最后一件事：&lt;em&gt;循环依赖&lt;/em&gt;。&lt;/p&gt;&lt;h3 id=&quot;rule-3-avoid-circular-dependencies--规则-3-避免循环依赖-id42&quot;&gt;Rule #3: Avoid circular dependencies | 规则 #3: 避免循环依赖 id:42&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;It shouldn’t take too much convincing for you to believe me when I say that circular dependencies are bad. Yet, without proper project structure, it is all too easy to fall into this trap.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;「循环依赖是很糟糕的」，这应该不用太费口舌就能让你相信我说的话。但是，如果没有适当的项目结构的话，还是会很容易就掉进了这个坑里。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Most of the time, dependencies start out innoculously. We may &lt;em&gt;think&lt;/em&gt; that the projects module need to reduce some state based on todos actions. If we are not grouping by features, and we see a large manifest of all action types within a global &lt;code class=&quot;highlighter-rouge&quot;&gt;actionTypes.js&lt;/code&gt; file, it is all too easy for us to just reach in and grab what we need (at the time) without a second thought.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;大多数时候，依赖在一开始的时候都是无害的。我们可能会&lt;em&gt;认为&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;projects&lt;/code&gt; 模块需要根据 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; 的 actions 来 reduce 一些状态。如果我们没有根据特性分组的话，然后我们就会在一个全局的 &lt;code class=&quot;highlighter-rouge&quot;&gt;actionTypes.js&lt;/code&gt; 文件当中看到一个包含所有 action 类型的清单，这对我们来说，就很容易找到并且无需考虑就可以获取我们所需要的（在当时）。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Say, that within todos we want to reduce state based on an action type of projects. Easy enough if we have a global &lt;code class=&quot;highlighter-rouge&quot;&gt;actionTypes.js&lt;/code&gt; file. However, we will soon learn that this is no easy feat if we have explicit module boundaries. To illustrate why, consider the following example.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;假设，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; 内部我们又想要根据 &lt;code class=&quot;highlighter-rouge&quot;&gt;projects&lt;/code&gt; 的 action 类型来 reduce 状态。如果我们已经有了一个全局的 &lt;code class=&quot;highlighter-rouge&quot;&gt;actionTypes.js&lt;/code&gt; 文件的话，这应该已经足够简单了。但是很快我们就会明白，要是我们有了清晰的模块边界的话这些就不足挂齿了。为了说明原因，来看看以下的实例。&lt;/p&gt;&lt;h4 id=&quot;circular-dependency-example--循环依赖示例&quot;&gt;Circular dependency example | 循环依赖示例&lt;/h4&gt;&lt;p&gt;Given:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;a.js&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import b from &#39;./b&#39;;export const name = &#39;Alice&#39;;export default () =&amp;gt; console.log(b);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;b.js&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { name } from &#39;./a&#39;;export default `Hello ${name}!`;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;What happens with the following code?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;那么接下来的代码会发生什么呢？&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import a from &#39;./a&#39;;a(); // ???&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;We might expect “Hello Alice!” to be printed, but in actuality, a() would print “Hello undefined!”. This is because the name export of a is not available when a is imported by b (due to circular dependencies).&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们可能会期待 “Hello Alice!” 会被打印出来，但其实 &lt;code class=&quot;highlighter-rouge&quot;&gt;a()&lt;/code&gt; 会输出 “Hello undefined!”。这是因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 的命名导出，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 是由 &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; 引入的时候并不可用（由于循环引用）。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The implication here is that we &lt;strong&gt;cannot both have projects depend on action types within todos &lt;em&gt;and&lt;/em&gt; todos depend on action types within projects.&lt;/strong&gt; You can get around restriction in clever ways, but if you go down this road I can guarantee you that it will come to bite you later on!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这里隐含的意思就是，我们&lt;strong&gt;不能同时让 &lt;code class=&quot;highlighter-rouge&quot;&gt;projects&lt;/code&gt; 依赖于 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; 内部的 action 类型，&lt;em&gt;并且&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; 又依赖于 &lt;code class=&quot;highlighter-rouge&quot;&gt;projects&lt;/code&gt; 内部的 action 类型&lt;/strong&gt;。你可以使用聪明的方式绕过这种限制，但要是你继续这样下去的话，我保证你会在将来的时候被坑的！&lt;/p&gt;&lt;h4 id=&quot;dont-make-hairballs--不要制造毛团&quot;&gt;Don’t make hairballs! | 不要制造毛团！&lt;/h4&gt;&lt;blockquote&gt;  &lt;p&gt;Put another way, by creating circular dependencies, you are &lt;strong&gt;complecting in the worst possible way&lt;/strong&gt;. Imagine a module to be a strand of hair, then modules that are inter-dependent on each other form a big, messy hairball.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;换句话来说，制造循环依赖，你就是&lt;strong&gt;在用最糟糕的方式在打着绳子的结&lt;/strong&gt;。想象一下一个模块就是一缕头发，然后模块之间相互依赖着形成了一个巨大的，混乱的毛团。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1467640142143.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Whenever you want to use a small module within the hairball, you will have no choice but to pull in the giant mess. And even worse, when you change something inside the hairball, it would be hard &lt;em&gt;not&lt;/em&gt; to break something else.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;不论什么时候，你想要使用这块毛团中的一个小模块，你都别无选择只能陷入这种巨大的混乱当中。而且更糟糕的是，当你需要修改毛团当中的某些东西，要想&lt;em&gt;不&lt;/em&gt;破坏其他东西的话就变得很难了。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;By following Rule #2, it should make it hard for you to create these circular dependencies. Don’t fight against it. Instead, use that energy to properly factor your modules.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;遵循规则 #2，你就很难会制造出这种循环依赖了。不要与之对抗，而是用这份精力来适当地分解你的模块。&lt;/p&gt;&lt;h2 id=&quot;in-depth-example-and-recommendations--深入的实例和规范推荐&quot;&gt;In-depth example and recommendations | 深入的实例和规范推荐&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;I want to do a deeper dive into the contents of the different files within a Redux and React application. This section will be specifically about these frameworks, so feel free to skip if you are not interested in them. :)&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;接下来我想要深入到 Redux 和 React 应用当中不同文件的具体内容。这部分将会特别针对这些框架，要是你不感兴趣的话可以随你便跳过去。:)&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Let’s take a look at our TODO app again. (I added constants, model, and selectors into this example)&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;让我们来重新看看我们的 TODO 应用。（我在示例当中添加了 constants，model，以及 selectors）&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;todos/  components/  actions.js  actionTypes.js  constants.js  index.js  model.js  reducer.js  selectors.jsindex.jsrootReducer.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;We can break these modules down by their responsibilities.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们将会根据他们的职责来拆分这些模块。&lt;/p&gt;&lt;h3 id=&quot;module-index-and-constants--模块-index-和-常量&quot;&gt;Module index and constants | 模块 index 和 常量&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;The module index is responsible for maintaining its public API. This is the exposed surface where modules can interface with each other.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;模块 &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; 就是负责维护模块的公共 API。这是模块和模块之间相互进行交互而暴露的地方。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;A minimum Redux + React application should be something like this.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;一个最小化的 Redux + React 应用应该就会如下所示。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// todos/constants.js&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// This will be used later in our root reducer and selectors&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;todos&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// todos/index.js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./actions&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./components&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;constants&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./constants&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reducer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./reducer&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selectors&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./selectors&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selectors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is similar to the &lt;a href=&quot;https://github.com/erikras/ducks-modular-redux&quot;&gt;Ducks&lt;/a&gt; structure.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;这跟 &lt;a href=&quot;https://github.com/erikras/ducks-modular-redux&quot;&gt;Ducks&lt;/a&gt; 架构有所类似。&lt;/p&gt;&lt;h3 id=&quot;action-types--action-creators--action-类型--action-creators&quot;&gt;Action types &amp;amp; Action creators | Action 类型 &amp;amp; Action Creators&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Action types are just string constants within Redux. The only thing I’ve changed here is that I prefixed each type with “todos/” in order to create a namespace for the module. This avoid name collisions with other modules in the application.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Action 类型在 Redux 当中只是一些字符串常量。唯一修改的地方就是我给每个类型都加上了 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos/&lt;/code&gt; 前缀，以便于给这个模块创造一个命名空间。这就避免了跟应用中其他模块的名字发生冲突。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// todos/actionTypes.jsexport const ADD = &#39;todos/ADD&#39;;export const DELETE = &#39;todos/DELETE&#39;;export const EDIT = &#39;todos/EDIT&#39;;export const COMPLETE = &#39;todos/COMPLETE&#39;;export const COMPLETE_ALL = &#39;todos/COMPLETE_ALL&#39;;;export const CLEAR_COMPLETED = &#39;todos/CLEAR_COMPLETED&#39;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;As for action creators, not much changes from the usual Redux application.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;至于 action creators，跟往常的 Redux 应用没什么太大改变。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// todos/actions.jsimport t from &#39;./actionTypes&#39;;export const add = (text) =&amp;gt; ({  type: t.ADD,  payload: { text }});// ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Note that I don’t necessarily need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;addTodo&lt;/code&gt; since I’m already in the todos module. In other modules I may use an action creator as follows.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;注意到我并没有必要去使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;addTodo&lt;/code&gt;，因为我已经在这个 todos 模块里面了。在其他模块里我也就可以像下面这样使用一个 action creator。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import todos from &#39;todos&#39;;// ...todos.actions.add(&#39;Do that thing&#39;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;model&quot;&gt;Model&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;model.js&lt;/code&gt; file is where I like to keep things that are related to the module’s state.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;model.js&lt;/code&gt; 文件是我想要存放一些跟模块的状态相关的东西的地方。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;This is especially useful if you are using TypeScript or Flow.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你使用 TypeScript 或者 Flow 的话，这将会尤其有用。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// todos/model.js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Todo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// This is the model of our module state (e.g. return type of the reducer)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Some utility functions that operates on our model&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterCompleted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterActive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;reducers&quot;&gt;Reducers&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;For the reducers, each module should maintain their own state as before. However, there is one particular coupling that should be solved. That is, a module’s reducer does not usually get to choose where it is mounted in the overall application state atom.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;对于 reducers 来说，每个模块都应该跟以前一样只维护自己的状态。但是这儿有一种特殊的耦合应当被解决，即一个模块的 reducer 通常不会去决定它在哪里被装载到整个应用状态原子当中。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;This is problematic, because it means our &lt;strong&gt;module selectors&lt;/strong&gt; (which we will cover next) will be &lt;strong&gt;indirectly coupled to the root reducer&lt;/strong&gt;. In turn, the module components will also be coupled to the root reducer.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这是不确定的，因为它意味着我们的&lt;strong&gt;模块 selectors&lt;/strong&gt;（我们接下来会涉及到）将会&lt;strong&gt;间接地耦合到根 reducer 当中&lt;/strong&gt;。反过来，整个模块的组件也将会被耦合到根 reducer 中来。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;We can solve this issue by giving control to the todos module on where it should be mounted in the state atom.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们可以通过授权给 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; 模块来解决这个问题，让这个模块来决定应该在哪里被装载到状态原子。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// rootReducer.js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;combineReducers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;redux&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./todos&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;combineReducers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;This removes the coupling between our todos module and root reducer. Of course, you don’t &lt;em&gt;have&lt;/em&gt; to do it this way. Other options include relying on naming conventions (e.g. todos module state is mounted under “todos” key in the state atom), or you can use module factory functions instead of relying on a static key.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这就可以移除我们的 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; 模块和根 reducer 之间的耦合。当然，你也&lt;em&gt;不一定&lt;/em&gt;要通过这种方式。其他的选择也包括依赖命名约定（比如，将 &lt;code class=&quot;highlighter-rouge&quot;&gt;todos&lt;/code&gt; 模块状态装载到使用 todos 作为 key 的状态原子底下），或者你也可以使用模块工厂函数而不是依赖于静态 key。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;And the reducer would look as follows.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;然后 reducer 就可能长得跟下面一样。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// todos/reducer.js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./actionTypes&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./model&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Use Redux&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;selectors&quot;&gt;Selectors&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Selectors provide a way to query data from the module state. While they are not normally named as such in a Redux project, they are always present.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Selectors 提供了从模块状态中查询数据的一种方式。虽然它们不再像往常的 Redux 项目中所命名的那样，但是它们永远都是存在的。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The first argument of connect is a selector in that it selects values out of the state atom, and returns an object representing a component’s props.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;connect 的第一个参数就是一个 selector，从状态原子当中&lt;strong&gt;选择&lt;/strong&gt;想要的值，并且返回一个对象表示为一个组件的 props。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;I would urge that common selectors by placed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;selectors.js&lt;/code&gt; file so they can not only be reused within the module, but potentially be used by other modules in the application.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我想要强烈建议将公共的 selectors 放到这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;selectors.js&lt;/code&gt; 文件当中，以便于它们既可以在这个模块里面被复用，也可能被应用的其他模块所用到。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;I highly recommend that you check out &lt;a href=&quot;https://github.com/reactjs/reselect&quot;&gt;reselect&lt;/a&gt; as it provides a way to build composable selectors that are automatically memoized.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我非常推荐你去看看 &lt;a href=&quot;https://github.com/reactjs/reselect&quot;&gt;reselect&lt;/a&gt;，因为它提供了一种方式，可以用来构建可组合的 selectors，并且能够自动 memoized。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// todos/selectors.js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createSelector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;reselect&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;lodash&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./constants&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterCompleted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./model&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCompleted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filterCompleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getActive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filterActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCounts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;getCompleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;getActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;allTodos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;completedTodos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activeTodos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allTodos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;completedTodos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activeTodos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;components&quot;&gt;Components&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;And lastly, we have our React components. I encourage you to use shared selectors here as much as possible. It gives you the advantage of having an easy way to unit test the mapping of state to props without relying on component tests.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;最后，我们有了自己的 React 组件。我建议你在组件当中尽可能地使用共享的 selectors。其中一个好处就是可以很轻松地对从 state 到 props 的 mapping 进行单元测试，而不用依赖于组件的测试。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Here’s an example of a TODO list component.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这儿就有一个 TODO 列表组件的例子：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { createStructuredSelector } from &#39;reselect&#39;;import { getAll } from &#39;../selectors&#39;;import TodoItem from &#39;./TodoItem&#39;;const TodoList = ({ todos }) =&amp;gt; (  &amp;lt;div&amp;gt;    todos.map(t =&amp;gt; &amp;lt;TodoItem todo={t}/&amp;gt;)  &amp;lt;/div&amp;gt;);export default connect(  createStructuredSelector({    todos: getAll  }))(TodoList);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;That’s it in terms of my recommendations. But before we go, there is one last topic I want to discuss: How to detect project smells.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这就是按照我所推荐规范的内容了。但是在我们结束之前，还有最后一个我想要讨论的主题：如何发现项目坏味道。&lt;/p&gt;&lt;h2 id=&quot;litmus-test-for-project-structure--项目结构的石蕊测试&quot;&gt;Litmus test for project structure | 项目结构的石蕊测试&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;It is important for us to have the tools to tell us when something smells in our code. From experience, just because a project starts out clean doesn’t mean it’ll stay that way. Thus, I want to present an easy method to detect project structure smells.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;对我们来说，用于发现我们的代码坏味道的工具很重要。从经验上来看，仅仅因为一个项目从开始的时候很整洁，但这并不意味着它会一直如此。因此，我想要提出一种简单的方法用于发现项目结构的坏味道。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Every once in a while, pick a module in your application and &lt;strong&gt;try to extract it as an external module&lt;/strong&gt; (e.g. a NodeJS module, Ruby gem, etc). You don’t have to actually do it, but at least think it through. If you can perform this extraction without much effort then you know it is well factored. The term “effort” here remains undefined, so you need to come up with your own measure (whether subjective or objective).&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;每隔一段时间，从你的应用当中挑选一个模块，并且&lt;strong&gt;尝试将它抽取成一个外部模块&lt;/strong&gt;（比如，一个 NodeJS 模块，Ruby gem 等等）。你不用实际这么去做，但至少像那样去思考。如果你不用花太多 efforts 就可以完成抽取，那么你就知道这个模块已经被很好得分解了。在这里的 “effort” 并没有被下定义，所以你还是需要自己去衡量（无论是主观或者客观）。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Run this experiment with other modules in your application. Jot down any problems you find in your experiments: circular dependencies, modules breaching boundaries, etc.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在你的应用程序当中，跟其他模块一起试验一下。记下从实验当中所找到的任何问题：循环依赖，模块边界不清晰，等等。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Whether you choose to take action based on your findings is up to you. Afterall, the software industry is all about tradeoffs. But at the very least it should give you a much better insight into your project structure.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;基于你的发现，无论你选择采取何种操作都取决于你。毕竟，软件行业就是一个与折衷息息相关的行业。但至少这应该会让你对自己的项目结构有更深入的了解。&lt;/p&gt;&lt;h2 id=&quot;closing--收尾&quot;&gt;Closing | 收尾&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Project structure isn’t a particularly exciting topic to discuss. It is, however, an important one.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;项目结构并不是一个特别令人兴奋的话题讨论。然而，这又是非常重要的。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The three rules presented in this post are:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这篇文章所描述的三条规则就是：&lt;/p&gt;&lt;blockquote&gt;  &lt;ol&gt;    &lt;li&gt;Organize by featues&lt;/li&gt;    &lt;li&gt;Create strict module boundaries&lt;/li&gt;    &lt;li&gt;Avoid circular dependencies&lt;/li&gt;  &lt;/ol&gt;&lt;/blockquote&gt;&lt;ol&gt;  &lt;li&gt;基于特性组织&lt;/li&gt;  &lt;li&gt;设计严格的模块边界&lt;/li&gt;  &lt;li&gt;避免循环依赖&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;  &lt;p&gt;Whether you are using Redux and React or not, I highly recommend following these rules on your software projects.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;无论你是否正在使用 React 和 Redux，我都非常推荐你在自己的软件项目当中遵循这些规则。&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;原文地址：&lt;a href=&quot;http://jaysoo.ca/2016/02/28/organizing-redux-application/&quot;&gt;http://jaysoo.ca/2016/02/28/organizing-redux-application/&lt;/a&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/a-better-file-structure-for-react-redux-applications",
            "title"      : "【译】一种更好的 React/Redux 应用程序的文件目录结构",
            "category"   : "前端",
            "tags"       : "React, Redux, Test, FED, DX",
            "url"        : "/2016-07-03-a-better-file-structure-for-react-redux-applications/",
            "path"       : "_posts/前端/2016-07-03-a-better-file-structure-for-react-redux-applications.md",
            "next"       : "/2016-07-04-rules-for-structuring-redux-applications/",
            "previous"   : "/2016-06-24-learning-java/",
            "date"       : "2016-07-03 00:00:00 +0000",
            "shortdate"  : "July 03, 2016",
            "content"    : "&lt;p&gt;原文地址: &lt;a href=&quot;http://marmelab.com/blog/2015/12/17/react-directory-structure.html&quot;&gt;http://marmelab.com/blog/2015/12/17/react-directory-structure.html&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Most of the examples I could find about React/Redux applications (either client side or universal) are very simple. They choose to organize files by &lt;em&gt;nature&lt;/em&gt; (action, component, container, reducer). The result is a directory structure looking like the following:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我所能找到的大部分有关 React/Redux 应用的示例都非常简单（不论客户端或者同构方案）。它们都选择根据&lt;em&gt;功能属性&lt;/em&gt;（action，component，container，reducer）来组织文件。结果目录结构就会如下所示：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;actions/    CommandActions.js    UserActions.jscomponents/    Header.js    Sidebar.js    Command.js    CommandList.js    CommandItem.js    CommandHelper.js    User.js    UserProfile.js    UserAvatar.jscontainers/    App.js    Command.js    User.jsreducers/    index.js    command.js    user.jsroutes.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;The &lt;a href=&quot;http://redux.js.org/docs/advanced/ExampleRedditAPI.html&quot;&gt;Redux Book&lt;/a&gt; follows this convention, and I know at least two Redux boilerplate repositories following it, too: &lt;a href=&quot;https://github.com/GordyD/3ree&quot;&gt;3ree&lt;/a&gt;, and &lt;a href=&quot;https://github.com/erikras/react-redux-universal-hot-example&quot;&gt;react-redux-universal-hot-example&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这本 &lt;a href=&quot;http://redux.js.org/docs/advanced/ExampleRedditAPI.html&quot;&gt;Redux Book&lt;/a&gt; 也遵循了这一惯例，而且我已知的两个 Redux 样板文件仓库都是这样的：&lt;a href=&quot;https://github.com/GordyD/3ree&quot;&gt;3ree&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/erikras/react-redux-universal-hot-example&quot;&gt;react-redux-universal-hot-example&lt;/a&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;That’s nice, but what happens when I need to add code about a new domain, including actions, components, and a reducer? For instance, if I want to deal with a catalog of products, I need to add files in all of these directories, ending with:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这是很不错，但要是我需要新增一个 Domain，然后同时添加 actions, components 和 reducer 有关的代码，这个时候该怎么办呢？举例来说，如果我需要处理一个产品目录，那么我就需要在所有的文件夹中添加这么些个文件，然后目录结构就变成了这样：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;actions/    CommandActions.js    ProductActions.js   &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Here    UserActions.jscomponents/    Header.js    Sidebar.js    Command.js    CommandList.js    CommandItem.js    CommandHelper.js    Product.js          &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Here    ProductList.js      &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Here    ProductItem.js      &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Here    ProductImage.js     &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Here    User.js    UserProfile.js    UserAvatar.jscontainers/    App.js    Command.js    Product.js          &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Here    User.jsreducers/    index.js    foo.js    bar.js    product.js          &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Hereroutes.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;You see where this is going. Fast forward two months from now, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;components/&lt;/code&gt; directory contains dozens of files, and I need to open 4 files in 4 different directories each time I touch a single feature.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;你应该知道事情下一步会怎么发展了。过去两个月到现在，&lt;code class=&quot;highlighter-rouge&quot;&gt;components/&lt;/code&gt; 目录下面就包含了大量文件，而且每当我修改某个特性的时候，却需要在四个不同目录下打开四个文件。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Why not group files by &lt;em&gt;domain&lt;/em&gt; instead? To make the difference between actions, components, and reducers, I can still use a file suffix:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;为什么就不能通过 &lt;em&gt;domain&lt;/em&gt; 来组织文件呢？我依然可以使用文件后缀来区分 actions，components 和 reducers：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/    Header.js    Sidebar.js    App.js    reducers.js    routes.js&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;/    Command.js    CommandContainer.js    CommandActions.js    CommandList.js    CommandItem.js    CommandHelper.js    commandReducer.jsproduct/    Product.js    ProductContainer.js    ProductActions.js    ProductList.js    ProductItem.js    ProductImage.js    productReducer.jsuser/    User.js    UserContainer.js    UserActions.js    UserProfile.js    UserAvatar.js    userReducer.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;I can make things even a little easier to read by merging a container and the related component. Redux makes the difference between &lt;em&gt;containers&lt;/em&gt;, which are connected to the state, and &lt;em&gt;components&lt;/em&gt;, which are dumb and stateless. Most tutorials reflect this difference with two separate files:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;通过合并容器和相关组件还可以让代码变得更加易读。Redux 将连接状态的&lt;em&gt;容器&lt;/em&gt;和无状态的哑巴&lt;em&gt;组件&lt;/em&gt;区分开来。大部分教程都使用两个独立的文件来反映了这种区别：&lt;/p&gt;&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// in Product.js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// in ProductContainer.js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bindActionCreators&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;redux&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;react-redux&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProductActions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./ProductActions&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./Product&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapDispatchToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bindActionCreators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProductActions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapDispatchToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;The only practical interest to separate component and container is to facilitate the unit tests of the component (without using Redux at all). In 99% of the cases, the component is never used outside of the container. Well, ES6 allows to export more than one element, right? Then I can merge those two scripts into a single file, where the export default is the container, and export Product is the component:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;区分组件和容器的唯一一个实际好处就是有利于组件的单元测试（根本无需 Redux）。99% 的情况下，这个组件都不会在容器以外的地方被用到。那么，ES6 允许一个文件不止导出一个元素对吧？然后我就可以把这两部分代码合并到一个文件里，并且默认导出的是容器，而 Production 则导出作为组件：&lt;/p&gt;&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// in Product.js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bindActionCreators&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;redux&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;react-redux&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProductActions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./ProductActions&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// component part&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// container part&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapDispatchToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bindActionCreators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProductActions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapDispatchToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;That way, a unit test on the component can simply &lt;code class=&quot;highlighter-rouge&quot;&gt;import { Product } from &#39;./Product.js&#39;&lt;/code&gt;. Now the directory structure counts one less file per directory:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这样的话，组件中的单元测试就可以轻松地 &lt;code class=&quot;highlighter-rouge&quot;&gt;import { Product } from &#39;./Product.js&#39;&lt;/code&gt;。现在每个目录结构里就少了一个文件：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/    Header.js    Sidebar.js    App.js    reducers.js    routes.js&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;/    Command.js         // component &amp;amp; container    CommandActions.js    CommandList.js    CommandItem.js    CommandHelper.js    commandReducer.jsproduct/    Product.js         // component &amp;amp; container    ProductActions.js    ProductList.js    ProductItem.js    ProductImage.js    productReducer.jsuser/    User.js            // component &amp;amp; container    UserActions.js    UserProfile.js    UserAvatar.js    userReducer.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;And while we’re talking about tests, they usually live in their own &lt;code class=&quot;highlighter-rouge&quot;&gt;test/&lt;/code&gt; directory, far from the runtime code:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;当我们谈论测试的时候，他们通常都位于自己的 &lt;code class=&quot;highlighter-rouge&quot;&gt;test/&lt;/code&gt; 目录，并且远离运行时代码：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;src/    app/        Header.js        Sidebar.js        App.js        reducers.js        routes.js    &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;/        Command.js        CommandActions.js        CommandList.js        CommandItem.js        CommandHelper.js        commandReducer.js    product/        Product.js        ProductActions.js        ProductList.js        ProductItem.js        ProductImage.js        productReducer.js    user/        User.js        UserActions.js        UserProfile.js        UserAvatar.js        userReducer.js&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/    app/        Header.js        Sidebar.js        App.js        reducers.js        routes.js    &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;/        Command.js        CommandActions.js        CommandList.js        CommandItem.js        CommandHelper.js        commandReducer.js    product/        Product.js        ProductActions.js        ProductList.js        ProductItem.js        ProductImage.js        productReducer.js    user/        User.js        UserActions.js        UserProfile.js        UserAvatar.js        userReducer.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;I find it harder to spot missing tests for components, or to navigate the file structure once the domain expands. So I try to keep tests in the same directory as the element they test - simply using a &lt;code class=&quot;highlighter-rouge&quot;&gt;-spec.js&lt;/code&gt; suffix. If this were Python, tests would even be in the same file! All the scripts related to a bounded context, including tests, are now grouped in a single directory - easy to read and reason about.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我就发现这很难去定位那些缺失测试的组件，而且一旦 Domain 扩展过后就很难在文件结构之间进行导航了。所以我尝试将测试和被测试的元素放到同一个文件夹底下 —— 简单地使用一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;-spec.js&lt;/code&gt; 后缀。如果是 Python 的话，测试甚至就在同一个文件里面！所有相关的代码都处于同一边界的上下文之中，包括测试在内都被组织到同一个目录里 —— 易于阅读和理解。&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;src/    app/        Header.js        Header-spec.js        Sidebar.js        Sidebar-spec.js        App.js        App-spec.js        reducers.js        reducers-spec.js        routes.js        routes-spec.js    &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;/        Command.js        Commands-spec.js        CommandActions.js        CommandActions-spec.js        CommandList.js        CommandList-spec.js        CommandItem.js        CommandItem-spec.js        CommandHelper.js        CommandHelper-spec.js        commandReducer.js        commandReducer-spec.js    product/        Product.js        Product-spec.js        ProductActions.js        ProductActions-spec.js        ProductList.js        ProductList-spec.js        ProductItem.js        ProductItem-spec.js        ProductImage.js        ProductImage-spec.js        productReducer.js        productReducer-spec.js    user/        User.js        User-spec.js        UserActions.js        UserActions-spec.js        UserProfile.js        UserProfile-spec.js        UserAvatar.js        UserAvatar-spec.js        userReducer.js        userReducer-spec.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Configuring the test runner (either Jest or Mocha) is easy: just make it run the tests in ./src/&lt;em&gt;*/&lt;/em&gt;-spec.js.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;配置测试启动器（比如 Jest 或者 Mocha）也很容易：只需要让它跑一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;./src/**/*-spec.js&lt;/code&gt; 测试即可。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;This directory structure grows well with the project size. And when it’s time to split an app into independent repos to ease reusability across projects, then the code refactoring is really lightweight. I highly recommend it!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这种目录结构对于项目大小的增长特别友好。而且，当为了项目间灵活的复用性而将一个应用拆分成独立代码库的时候，代码重构就会变得非常轻量级。我强烈推荐这种方式！&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: It seems the Reddit community heard about this post; the discussion continues there: &lt;a href=&quot;https://www.reddit.com/r/reactjs/comments/47mwdd/a_better_file_structure_for_reactredux/&quot;&gt;https://www.reddit.com/r/reactjs/comments/47mwdd/a_better_file_structure_for_reactredux/&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;编辑&lt;/strong&gt;：看来是 Reddit 社区已经注意到了这篇文章；进一步的讨论在这里：&lt;a href=&quot;https://www.reddit.com/r/reactjs/comments/47mwdd/a_better_file_structure_for_reactredux/&quot;&gt;https://www.reddit.com/r/reactjs/comments/47mwdd/a_better_file_structure_for_reactredux/&lt;/a&gt;。&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;原文地址: &lt;a href=&quot;http://marmelab.com/blog/2015/12/17/react-directory-structure.html&quot;&gt;http://marmelab.com/blog/2015/12/17/react-directory-structure.html&lt;/a&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/learning-java",
            "title"      : "Python 基础如何学习 Java",
            "category"   : "编程",
            "tags"       : "Java, Python, 笔记, 总结",
            "url"        : "/2016-06-24-learning-java/",
            "path"       : "_posts/编程/2016-06-24-learning-java.md",
            "next"       : "/2016-07-03-a-better-file-structure-for-react-redux-applications/",
            "previous"   : "/2016-06-11-write-in-mac-os-x/",
            "date"       : "2016-06-24 00:00:00 +0000",
            "shortdate"  : "June 24, 2016",
            "content"    : "",
            "excerpt"    : ""
		} ,
	
		{
            "id"         : "/write-in-mac-os-x",
            "title"      : "敏捷写作：macOS 环境下写作系统的最优配置",
            "category"   : "思考",
            "tags"       : "写作, Mac, 学习, PKM, 个人成长, 敏捷, 效率",
            "url"        : "/2016-06-11-write-in-mac-os-x/",
            "path"       : "_posts/思考/2016-06-11-write-in-mac-os-x.md",
            "next"       : "/2016-06-24-learning-java/",
            "previous"   : "/2016-06-10-about-choice-time-and-attention/",
            "date"       : "2016-06-11 00:00:00 +0000",
            "shortdate"  : "June 11, 2016",
            "content"    : "&lt;h2 id=&quot;敏捷与个人成长&quot;&gt;敏捷与个人成长&lt;/h2&gt;&lt;p&gt;工具不再多，而是要定制化，深度适应个人需求，并应当 &lt;code class=&quot;highlighter-rouge&quot;&gt;infrastructure as assets&lt;/code&gt;，每个程序员都应该有属于自己的一套工具箱，这些基础设施的配置是伴随一个人最珍贵的资产，这绝对是这个成长期需要注重的事情。&lt;/p&gt;&lt;p&gt;就像软件开发一样，一个人的成长也应有自己的方法论。人的一生若是顺风顺水一成不变的话，那未免太无趣了，正是由于世界的未知在等着我们去探索，不一样的经历才会让人感到惊喜和有趣。 新时代新变化，而敏捷中最重要的一大前提就是「拥抱变化」：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;估算 &amp;gt;-&amp;lt; 不用执着于计划，计划永远赶不上变化&lt;/li&gt;  &lt;li&gt;小步迭代 &amp;gt;-&amp;lt; 挽起袖子就是干，避免完美主义失败恐惧症&lt;/li&gt;  &lt;li&gt;Retrospective &amp;gt;-&amp;lt; Reflection&lt;/li&gt;  &lt;li&gt;学习型组织 &amp;gt;-&amp;lt; 此刻没做好是因为过去没学习，从此恶性循环&lt;/li&gt;  &lt;li&gt;非单一角色，可靠交付为导向 &amp;gt;-&amp;lt; 全栈性选手，懂得直击要害&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;相比于软件开发这件小事儿，健康快乐地成长明显要更加重要。&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;新的起点爱上写作&quot;&gt;新的起点：爱上写作&lt;/h2&gt;&lt;p&gt;我在&lt;a href=&quot;https://blog.jimmylv.info/2015-10-09-three-types-of-knowledge/&quot;&gt;个人知识管理：知识的三种形态&lt;/a&gt;这篇文章中将我对于 Knowledge 的认识分为三种： 已内化的「知识」、可整理的「资料」、不可控的原始「材料」。于我而言，上一个阶段也许就是懂得了如何（更丰富地更准确地）获取资源和（更方便快捷地）收集资源；那么接下来，我就需要去认真做好更重要的事情，也就是（更高效地）筛选资源以及（更有效地）整理和吸收资源，并真真正正地有利于自己的学习、工作、生活。&lt;/p&gt;&lt;p&gt;其实写作在最开始对我来说，只是一个和自己慢慢谈话并最终和解的过程。在高中时代，我有一个专门的本子，从前面翻，记录着我的每一次模拟考成绩，点连成线彰显着我进步的趋势，还有每次考后的自我分析；而从后面翻，则是我每一次或低谷或骄傲的自我谈话，每一次心情不好都是在笔墨的挥洒之下渐渐好起来，慢慢说服自己重新振作，坚持走下去。其实在那时候以及后来，都是更喜欢用笔在纸上写写字，还可以随意的画画图、理理逻辑，但是后来电脑用多了吧就发现自己写字实在太丑不能看了，还有个原因就是写字的速度太慢跟不上思维的速度了。不管是纸笔还是键盘，写作带给我的就是一份难得的宁静吧，也比较喜欢以文字的形式记录下所学到的知识，分享自己的心得和经验。况且在这样一个微博 140 字的时代，阅读长段文字都已经变得很难得了，更何况沉下心来写这么一大段文字呢，越难得越珍贵。&lt;/p&gt;&lt;p&gt;其实对于写作者来说，文字的力量更多的是在写作的时候，那是任由思维发散并集结成句的时刻，思考的过程才是更快乐的更有意义的。不断的思考才会将前面所提到的各种「材料」和「资料」内化成真正属于自己的「知识」，整理的过程或许痛苦，但也就是在这样的过程中大脑的思维结构才开始形成，快速而有效地建立属于自己的内部索引，就是学习的一种形态。&lt;/p&gt;&lt;h2 id=&quot;工作流如何影响专注力&quot;&gt;工作流如何影响专注力&lt;/h2&gt;&lt;p&gt;一直以来都想好好总结一下做事情的工作流，类似于一种程序员思维吧，把要做的事情流程化并尽量简化其流程，而一般流程化的过程都可以被自动化。对于人来说，在工作流的确定和便利之后，便可以在肌肉记忆下无意识完成相关操作，从而将自己的意识回归到真真正正的写作上来。&lt;/p&gt;&lt;h3 id=&quot;专注于单一任务&quot;&gt;专注于单一任务&lt;/h3&gt;&lt;p&gt;专注，是&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/2755&quot;&gt;这个时代最稀缺的能力&lt;/a&gt;。对于写作、写代码这类事情来说，单线程作战绝对是效率提升的王道，多任务切换的成本对人脑来说是非常巨大的。&lt;/p&gt;&lt;p&gt;使用（全局、局部）快捷键打开特定软件、特定功能，并形成肌肉记忆：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^ + Number&lt;/code&gt; 打开不同的 Desktop，缺憾是不能打开全屏应用，故少用全屏为妙，当进入全屏后，即为专注于一个/两个软件的时候，不再切换，比如进入 Sublime 的专注模式（Distraction Free Mode）进行写作时。&lt;/li&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alt + Number&lt;/code&gt; 打开常用的必用软件，比如 Chrome，Sublime，IDEA。多谢 &lt;a href=&quot;http://indragie.com/snap/&quot;&gt;Snap - Launch apps in a snap!&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd + Number&lt;/code&gt; 就是在特定软件中，打开不同的 Tab，比如 Chrome 中和 iTerm2 中的不同标签页。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;减少切换，亦为隔离任务。&lt;strong&gt;在单一任务无需切换的时候，如果你发现你还在切换，那就说明你并没有专注在当前任务，依然在分心而已。&lt;/strong&gt;而大而全的应用也切中了少切换的首要要害，在 IDEA 中开发绝对比你同时打开多种工具要爽得多得多，并且和 Evernote 一样，也可以通过定制化使页面变得简洁。所以在机器性能够好的情况下，软件太笨重显然也变成了一个伪话题。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2b9a4booj31kw14ptd2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;通过 Alfred 和快捷键，就可以尽可能得减少切换成本，所以 &lt;a href=&quot;http://hocusfoc.us/&quot;&gt;Hocus Focus - A Mac menu bar utility that hides your inactive windows&lt;/a&gt; 自动隐藏其他窗口，大概是个伪需求。&lt;/li&gt;  &lt;li&gt;再比如全局可显示，即每个 Desktop 都能随处打开的窗口就是一个痒点，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;F12&lt;/code&gt; 之下的 iTerm2，以及 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd + Space&lt;/code&gt; 打开 Alfred 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;^ + Cmd + N&lt;/code&gt; 打开 Evernote 通知栏小窗口。很爽，随时随地就是干。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;自动整理，这是一个高阶话题，也就是达到自动化工作流的最高境界，在必要的时候输出固定规则下的内容，但此时也会出现很多没有经过大脑处理过滤的内容，所以只发生在外部索引而缺失了内部索引。但这个话题下的自动整理更倾向于自动化处理那些根本不值得要经过大脑处理的内容，也就是繁杂的琐事并不能够产生价值。&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;尽可能排除视觉干扰，使用 &lt;a href=&quot;https://www.noodlesoft.com/&quot;&gt;Noodlesoft – Simply Useful Software&lt;/a&gt; 可以实现桌面上文件的自动整理。&lt;/li&gt;  &lt;li&gt;Finder 中的 Smart Folder 可以自定义一些搜索结果集合，从而实现了在特定条件规则限制下的自动整合，也算是一种自动整理。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2b9bc4l0j31bg0swaaz.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;写作工具篇&quot;&gt;写作工具篇&lt;/h2&gt;&lt;h3 id=&quot;evernote-和-sublime-的无缝链接&quot;&gt;Evernote 和 Sublime 的无缝链接&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;Markdown 编辑端：Sublime 依旧是目前来说的最佳编辑方式    &lt;ul&gt;      &lt;li&gt;除了不能再中文词组间跳转以外（这个可以在 Evernote 中做到）&lt;/li&gt;      &lt;li&gt;放弃在 Evernote 编辑 Markdown 并预览的想法（通常有借助 &lt;a href=&quot;https://github.com/sandai/madever&quot;&gt;AppleScript&lt;/a&gt; 实现）&lt;/li&gt;      &lt;li&gt;进一步学习 Sublime 中 &lt;a href=&quot;https://github.com/SublimeText-Markdown/MarkdownEditing&quot;&gt;MarkdownEditing&lt;/a&gt; 的快捷键，好用到哭，以及完美格式高亮。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;富文本编辑端：    &lt;ul&gt;      &lt;li&gt;Evernote 作为富文本编辑的一端，主要功能更多在于预览显示（其中图片无法缩成 md link，故遮挡了视线）&lt;/li&gt;      &lt;li&gt;check 一下 Evernote 在 &lt;a href=&quot;https://www.zhihu.com/question/20651262&quot;&gt;Mac OS X 下的文件系统&lt;/a&gt;是怎么样的，可以打开看到在 content 目录下。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;版本管理：    &lt;ul&gt;      &lt;li&gt;经过实际使用效果来说，并没有什么情况下是需要用到这个功能的，若一切都是同步到 Evernote 的，就并不会出现误删除的情况了，还有就是 Evernote 付费账号是有历史版本的。 &lt;a href=&quot;https://help.evernote.com/hc/en-us/articles/208313858-How-to-access-and-use-note-history&quot;&gt;How to access and use note history – Evernote Help &amp;amp; Learning&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;而最近在用的 MarkEditor 是有自带的版本管理的，右键文件名就可以查看 History Versions。&lt;/li&gt;      &lt;li&gt;至于非自我产出的内容，比如 Session PPT，电子书，这些都可以到互联网上随时可找的，并不担心丢失。&lt;/li&gt;      &lt;li&gt;还有物理备份，即 TimeMachine 是同步到移动硬盘的，所以有了多重保障。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2b9chfxaj31kw1040zi.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;markdown-文件的预览和修改&quot;&gt;Markdown 文件的预览和修改&lt;/h3&gt;&lt;p&gt;使用 Markdown 进行书写的好处不必多说，但是在写作完毕过后，对于这篇文字来说更多的形态就是&lt;strong&gt;阅读&lt;/strong&gt;和&lt;strong&gt;修改&lt;/strong&gt;：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;对于 Markdown 文件，直接打开是用 &lt;a href=&quot;https://robots.thoughtbot.com/markoff-free-markdown-previewer&quot;&gt;Markoff: A Free Markdown Previewer for OS X&lt;/a&gt; 进行预览，然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd + E&lt;/code&gt; 则是打开 Sublime Text / MarkEditor 来进行编辑。&lt;/li&gt;  &lt;li&gt;而 Marboo 的作用就更加注重在对于文件夹级别的层级预览，在 Marboo 做打开和分享等操作最佳，特别是会自动切换预览当前正在被修改的文件。&lt;/li&gt;  &lt;li&gt;通过 Marboo 能够直接把生成的 HTML 内容映射到 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://192.168.199.123:56866/xxxx.html&lt;/code&gt;，同一局域网下可直接访问，还有贴心的二维码。&lt;/li&gt;  &lt;li&gt;如果需要映射到外网，那就在本地起了 Server 之后打开 &lt;a href=&quot;https://ngrok.com/&quot;&gt;ngork - Secure tunnels to localhost&lt;/a&gt; 神器来突破防火墙吧。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2b9dru3xj31kw14pdj1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;似乎完美解决了写作时的图片上传问题&quot;&gt;似乎完美解决了写作时的图片上传问题&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;换了个截图工具，&lt;a href=&quot;http://sspai.com/33021&quot;&gt;腾讯出品&lt;/a&gt;，可以直接截图后编辑，但是窗口截图的时候没办法消除阴影（虽然我觉得阴影挺好看的）。&lt;/li&gt;  &lt;li&gt;于是我自己设了一个 Alfred 的 WorkFlow 用来关闭和打开系统自带截图的阴影。参考：&lt;a href=&quot;http://www.ifanr.com/app/546621&quot;&gt;一篇文章，解决 Mac 截图的所有问题 - 爱范儿&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;另外用上了一个好用 Alfred 的 WorkFlow，&lt;a href=&quot;https://github.com/tiann/markdown-img-upload&quot;&gt;tiann/markdown-img-upload: markdown图片实用工具&lt;/a&gt;，可以直接快捷键上传文件并生成 Markdown 格式的图片链接。&lt;/li&gt;  &lt;li&gt;进一步考虑 GIF 的录制，感觉小功能需要演示才倍感酸爽啊。我已经下载过的有 Gifrocket，是将视频转成 GIF 的，而&lt;a href=&quot;https://zhuanlan.zhihu.com/p/20732038?refer=pinapps&quot;&gt;Mac 上怎么能少了一款好用的 GIF 录制工具？ - Pinapps - 感谢那些赐予我们力量的 apps - 知乎专栏&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2b9f3hkij317c12ijt0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;really-cool--fantastic&quot;&gt;Really cool =&amp;gt; Fantastic!!!&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;http://zrey.com/app/markeditor&lt;/li&gt;  &lt;li&gt;https://www.reflectapp.io&lt;/li&gt;  &lt;li&gt;https://www.evernote.com (use MardkownHere in web)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下一篇我就会根据应用场景来详细总结描述一下使用 MarkEditor 进行写作的过程，类似问答的形式会比较好，方便于初学者能够更好地理解。然后还要介绍一下 Reflection 在个人生活中是如何应用起来的，比如一些 App（如 Evernote 配合 reflectapp、Google 配合 Kifi）以及 Pocket 和 Kindle 的高阶用法。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;后续更新：&lt;/strong&gt;&lt;/p&gt;  &lt;ul&gt;    &lt;li&gt;MarkEditor 的设计确实非常好，若是初入写作这一大坑的人，我必然会大力推荐他直接用上 MarkEditor 而不用再去折腾其他乱七八糟的 Markdown 编辑器。但是由于我已然养成的操作习惯，我还是依赖于文件系统和 Alfred 直接对 Markdown 文件进行预览（Markoff）和编辑（Sublime），而且打开神速以及满足了我的可定制化需求，所以之前购买 MarkEditor 就权当对于美好事物的赞赏吧。&lt;/li&gt;    &lt;li&gt;对于 Reflection 还得说上几句，Kifi 已经被 Google 收购并且停止运营了，reflectapp 至今未支持 Evernote 中国版即印象笔记，从 Pocket 定期发到 Kindle 的文章也没能坚持阅读下去。现在的方案大概就是，输入端全靠 Diigo 大杀器（已付费），哪怕 PDF 也是可以收录并且评注的，然后标注的内容会通过 RSS 订阅的方式在手机端进行阅读，当然标注的内容也会随着 Google 的搜索关键词出现在页面右边。&lt;/li&gt;    &lt;li&gt;已经将 Pocket 替换为 Instapaper，Pocket 随着版本迭代已经越来越花哨，而 Instapaper 可以说依然保持着极致的阅读体验，并且在被 Pinterest 收购之后现在已经宣布所有付费功能（比如搜索和标注）全部免费。其实 Diigo 也有对应的 Read it later 的保存项，但是由于 Read it later 的时机往往都出现在碎片阅读时间即需要在移动端进行阅读，而 Diigo 现在的移动端就不说赶不上 Instapaper 的阅读体验吧，就连 Read it later 这一项都没有专门划分出来，不过也坐等 Diigo 更新移动端并且足够好得能够取代 Instapaper，现有的 IFTTT 方案减少了互相连通所需的操作，但也依然有其弊端即不能把 Instapaper 的标注内容同步到 Diigo。&lt;/li&gt;    &lt;li&gt;而说实话，实打实的碎片阅读在我的阅读时间占比越来越少了。一方面是有了微信阅读（得益于其奖励机制），我也就更倾向于去读一读整本书而不是一篇一篇的文章。另一方面也是由于碎片时间的疲劳性，人脑在这个时间会有两种倾向性：首先就是会避让深度思考，而 Instapaper 里面的东西可以说其实都是需要进一步思考的，因为毕竟都是通过筛选过后留下的偏向于干货的东西；要么就会去寻求新的刺激，比如刷一刷 RSS 里面的科技新闻，或者是给掘金里面的「标题党」技术文章点一点收藏。还有一个情况就是 Instapaper 里面也存了很多英文文章，在大脑疲劳的时候还去读英文岂不是难为自己？虽然可以点选词典或者直接加入 Seed 里面获得更佳的英语阅读体验，但是体验再好却还是无心享受啊。&lt;/li&gt;    &lt;li&gt;在畅想今后最理想的闭环系统时又想到一点，即 Instapaper 其实也充当了一个缓冲带的作用，保存的都是一些虽然是干货但还没有被标注的内容。这个地方很微妙，就是说这世间有价值的东西特别多，但若是没有被阅读，它对于个人的价值就依然为零。所以说我不否认 Instapaper 里面的东西都有价值，但是于我而言已经被标注到 Diigo 里面的东西会更有价值，至少对我来说是这样的。Instapaper 里面的东西要么就让它放着吧，反而会间接得让 Diigo 保持干净，不至于沦为第二个“印象笔记”。&lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;下图来自：&lt;a href=&quot;https://www.zhihu.com/question/49956820?rf=49985197&quot;&gt;如何看待 Pinterest 收购 Instapaper？ - 知乎&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2b9fl30fj30go0943zk.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;敏捷与个人成长&quot;&gt;敏捷与个人成长&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/about-choice-time-and-attention",
            "title"      : "随笔：关于选择、时间和注意力",
            "category"   : "思考",
            "tags"       : "互联网, 人性",
            "url"        : "/2016-06-10-about-choice-time-and-attention/",
            "path"       : "_posts/思考/2016-06-10-about-choice-time-and-attention.md",
            "next"       : "/2016-06-11-write-in-mac-os-x/",
            "previous"   : "/2016-06-10-thirteen-steps-to-a-faster-web-app/",
            "date"       : "2016-06-10 00:00:00 +0000",
            "shortdate"  : "June 10, 2016",
            "content"    : "&lt;blockquote&gt;  &lt;p&gt;前阵子对生活太没追求了。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;沉浸进去，而不是在那之前漫无目地得把精力浪费在选择之上。&lt;/p&gt;&lt;p&gt;这个世界上最困难的事情就是做选择，这也是最最最耗费一个人精力的事情，而一个善于管理的人一定是知道自己在什么情况下是最能做出正确选择的，而其他非最佳时间里，就会采取适当的方式获得休息，养精蓄锐为下一次征战做准备。&lt;/p&gt;&lt;p&gt;而我，恰恰不是这样的人。&lt;/p&gt;&lt;p&gt;但也是能享受到沉浸的如此快感之中的，只是这种感觉越发得少了。没有了高考备战做题时的专注，也没能在接下来的生活中有过安静的时刻。说到底，其实互联网时代各类软件对于人的注意力是有极大伤害的，各大厂商都在极尽所能地吸引流量，以此找机会变现。而打擦边球的黄色信息则是其中最为显著的一类转化手段，再者，就是各种世界罕见的奇闻轶事让有些人企图多一些吹牛逼的资本。&lt;/p&gt;&lt;p&gt;反正呢，就是在这样那样的时间黑洞里，光阴在毫无察觉之中就被吸取殆尽了。&lt;/p&gt;&lt;p&gt;我有想过，找到自己的目标，然后就只会专注于其中，其他事情一概不去过问。但事情却永远不是那么简单的，生活本无麻，我也没办法把其他事情全部都摒弃不顾。而在这样那样的琐事当中，我就像完成任务一般无趣地打量着。过得也是真无趣，给予目标的时间不可能永远都是百分之百，而鸡汤里的很多故事里都貌似可以一概不顾其他，但实际中又是如何的呢？每个人都需要跟自己和解，然后找到属于自己的节奏。没做到百分之百并不会令人蒙羞，而是在适当的时候投入十足的专注就够了，时间会给你答案。&lt;/p&gt;&lt;p&gt;你做的选择永远不可能一开始就正确，但是积累的能力会让你学会慢慢修正。飞机永远都不会在完全正确的航道上，但是却能够到达最终的目的地。或许每个人都会有最终一致的归属，也许是鸡汤里的平静，也许是世俗定义的幸福。但最终的结果，是自己想要的开心就好，不是自己想要的，就当它是惊喜吧。&lt;/p&gt;&lt;p&gt;做选择很痛苦，非常耗费精力，但是也并没有必要在每一个选择当中都投入太多，因为在选择之后，你依旧可以对其进行修正，果敢一点，为了自己真正想要的选择做出牺牲都是值得的。所有的已有规则和教条其实本质上就跟鸡汤一样，需要被质疑被打破，只有自己才能清晰地看到其中的规律，运用与否也取决于环境的变化，再加上那么一丝的运气。&lt;/p&gt;&lt;p&gt;一蹴而就的捷径每个人都在期盼，但却不是每个人都在追求，而落实到自己身上，也是一定做过中彩票发财的梦，但现实中也足够务实，足够幸运。我的努力得到过该有的回报，甚至于庆幸自己有着更高的起点，不该辜负于这份幸运。&lt;/p&gt;&lt;p&gt;再谈谈时间黑洞所带来的短期满足，也就是采铜所提倡的务实成功学中的短半衰期事件所带来的收益，这种收益或高或低，但却都是短期而又迅速消失甚至事后带来悔恨感的。短暂心理满足上的收益似乎都还是较低的，并不能带来实际生活或者经济上的改善，无法带来长期效应的收益似乎都不能算是高收益。&lt;/p&gt;&lt;p&gt;人性中的贪婪、色性等欲望其实有时都是可以被科学所解释的，远祖们进化的基因在随着时代的变迁被抑制或放大，把情感简化成化学物质的解释或许不够浪漫，却也确实能够指引我们更好地管理自我。精力就代表着葡萄糖在体内的含量，一旦下降就会使人注意力下降，需要补偿糖分和休息来进行恢复。而情感中的欲望或许就是多巴胺的短期快速分泌，只有通过运动或某种途径使之含量下降，俗称转移注意力。又或者，想要撸一发的科学解释就是因为睾丸中所产生的精液已满，若不是手动释放则又可能通过梦遗等其他途径进行排出。这样解释之后或许有趣，又或者有点儿无奈，我们都是被自私的基因所操控的肉体而已。&lt;/p&gt;&lt;p&gt;也许天生没有自适应的基因来适配调节体内化学物质的含量，那就来培养相应的意识和习惯，在该吃饭的时候吃饭，该运动的时候运动，在该满足的时候给予满足，只有一天中获得足够的满足才能够满意地睡去。不然的话，注意力就又会被各类各样刷不尽的微博头条或朋友圈夺人眼球的内容所吸引了去，堪称时间杀手。而背后的原因，不过是因为深谙人性的产品经理们对于流量的企图，天生利已的资本家们对于利益的追求。&lt;/p&gt;&lt;p&gt;我们都在互联网环境下，沦为了各类产品的免费劳工，在某一平台上所付出的时间越多，其“价值”也就越高，资本市场一如既往都是如此。信息的无穷无尽也使得获取有价值的信息和知识的成本在急剧增长，而时间和注意力，真的是这个时代对于个人最重要的东西了。&lt;/p&gt;",
            "excerpt"    : "&lt;blockquote&gt;  &lt;p&gt;前阵子对生活太没追求了。&lt;/p&gt;&lt;/blockquote&gt;"
		} ,
	
		{
            "id"         : "/thirteen-steps-to-a-faster-web-app",
            "title"      : "【译】唯快不破：Web 应用的 13 个优化步骤",
            "category"   : "前端",
            "tags"       : "Web, FED, Optimization, JavaScript",
            "url"        : "/2016-06-10-thirteen-steps-to-a-faster-web-app/",
            "path"       : "_posts/前端/2016-06-10-thirteen-steps-to-a-faster-web-app.md",
            "next"       : "/2016-06-10-about-choice-time-and-attention/",
            "previous"   : "/2016-05-18-working-with-reactjs-in-webstorm/",
            "date"       : "2016-06-10 00:00:00 +0000",
            "shortdate"  : "June 10, 2016",
            "content"    : "&lt;p&gt;原文地址: &lt;a href=&quot;https://auth0.com/blog/2016/02/22/12-steps-to-a-faster-web-app/&quot;&gt;12 Steps to a Faster Web App – Auth0&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Web apps are now more interactive than ever. Getting that last drop of performance can do a great deal to improve your end-users’ experience. Read the following tips and learn if there is anything more you can do to improve latency, render times and general performance!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;时过境迁，Web 应用比以往任何时候都更具交互性。搞定性能可以帮助你极大地改善终端用户的体验。阅读以下的技巧并学以致用，看看哪些可以用来改善延迟，渲染时间以及整体性能吧！&lt;/p&gt;&lt;hr /&gt;&lt;h2 id=&quot;a-faster-web-app--更快的-web-应用&quot;&gt;A Faster Web App | 更快的 Web 应用&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Optimizing web apps can be an arduous job. Not only are web apps split in client-side and server-side components, but they are also usually built using diverse technology stacks: there’s the database, the backend components (which are usually built on a stack of different technologies as well), the frontend (HTML + JavaScript + CSS + transpilers). Runtimes are diverse too: iOS, Android, Chrome, Firefox, Edge. If you come from a different, monolithic platform, where optimization is usually done against a single target (and even a single version of that target), you will probably reason this is a much more complex task. This can be correct. There are, however, common optimization guidelines that go a long way into improving an app. We will explore these guidelines in the following sections.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;优化 Web 应用是一项费劲的工作。Web 应用不仅处于客户端和服务器端的两部分组件当中，通常来说也是由多种多样的技术栈构建而成：数据库，后端组件（一般也是搭建在不同技术架构之上的），以及前端（HTML + JavaScript + CSS + 转化器）。运行时也是变化多端的：iOS，Android，Chrome，Firefox，Edge。如果你曾经工作在一个不同的单一庞大的平台之上，通过来说优化就只是针对于单一的目标（甚至只是目标的单一版本而已），你可能会意识到现在的任务复杂度要远超于此。这就对了。但是这儿也有一些通用的优化指南可以大大改进一个应用。我们将会在接下来的章节中探讨这些指南的内容。&lt;/p&gt;&lt;blockquote&gt;  &lt;blockquote&gt;    &lt;p&gt;A Bing study found that a 10ms increase in page load time costs the site $250K in revenue annually. - &lt;strong&gt;Rob Trace and David Walp, Senior Program Managers at Microsoft&lt;/strong&gt;&lt;/p&gt;  &lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;一份 Bing 的研究表明，页面加载时间每增加 10ms，网站的年收入就会减少 25 万美元。 —— &lt;strong&gt;Rob Trace 和 David Walp，微软高级程序经理&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;premature-optimization--过早优化&quot;&gt;Premature Optimization? | 过早优化？&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;The hard thing about optimization is finding the right point in the development life-cycle to do it. Donald Knuth famously said &lt;em&gt;“premature optimization is the root of all evil”&lt;/em&gt;. The reasoning behind these words is quite simple: it is quite easy to lose time gaining that last 1% of performance in places where it won’t make a significant impact. At the same time, some optimizations hinder readability or maintainability, or even introduce newer bugs. In other words, optimization should not be considered a “means to get the best performance out of an application”, but “the search for the &lt;em&gt;right way&lt;/em&gt; to optimize an app and get the &lt;em&gt;biggest benefits&lt;/em&gt;”. In other words, blind optimization can result in lost productivity and small gains. Keep this in mind when applying the following tips. Your biggest friend is the profiler: find the performance hotspots you can optimize to get the biggest improvements without impairing the development or maintainability of your app.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;优化最难的地方就是如何在开发生命周期中最适当的时候去做优化。Donald Knuth 有一句名言：&lt;em&gt;「过早优化乃万恶之源」&lt;/em&gt;。这句话背后的原因非常简单：因为一不小心就会浪费时间去优化某个 1% 的地方，但是结果却并不会对性能造成什么重大影响。与此同时，一些优化还妨碍了可读性或者是可维护性，甚至还会引入新的 Bug。换句话说，优化不应当被认为是「意味着得到应用程序的最佳性能」，而是「探索优化应用的&lt;em&gt;正确的方式&lt;/em&gt;，并得到&lt;em&gt;最大的效益&lt;/em&gt;」。再换句话说，盲目的优化可能会导致效率的丢失，而收益却很小。在你应用以下技巧的时候请将此铭记在心。你最好的朋友就是分析工具：找到你可以进行通过优化获得最大程度改善的性能点，而不用损害应用开发的进程或者可维护性。&lt;/p&gt;&lt;blockquote&gt;  &lt;blockquote&gt;    &lt;p&gt;Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%. - &lt;strong&gt;Donald Knuth&lt;/strong&gt;&lt;/p&gt;  &lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;程序员们浪费了大量时间来思考，或者说是担忧，他们的程序中非关键部分的运行速度。并且他们对于性能的这些尝试，实际上却对代码的调试和维护有着非常消极的影响。我们应当忘记那些不重要的性能影响，在 97% 的时间里都可以这么说：过早优化乃万恶之源。当然我们也不应当在那关键的 3% 上放弃我们的机会。—— &lt;strong&gt;Donald Knuth&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;1-javascript-minification-and-module-bundling--1-javascript-压缩和模块打包&quot;&gt;1. JavaScript minification and module bundling | 1. JavaScript 压缩和模块打包&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;parsing JavaScript apps are distributed in source-code form. Source-code parsing is less efficient than bytecode . For short scripts, the difference is negligible. For bigger apps, however, script size can have a negative impact in application startup time. In fact, one of the biggest improvements expected from the use of &lt;a href=&quot;https://auth0.com/blog/2015/10/14/7-things-you-should-know-about-web-assembly/&quot;&gt;WebAssembly&lt;/a&gt; are better startup times. Minification is the process of processing source-code to remove all unnecessary characters without changing functionality. This results in (unreadable) shorter code that can be parsed faster.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;JavaScript 应用是以源码形式进行分发的，而源码解析的效率是要比字节码低的。对于一小段脚本来说，区别可以忽略不计。但是对于更大型的应用，脚本的大小会对应用启动时间有着负面的影响。事实上，寄期望于使用 &lt;a href=&quot;https://auth0.com/blog/2015/10/14/7-things-you-should-know-about-web-assembly/&quot;&gt;WebAssembly&lt;/a&gt;  而获得最大程度的改善，其中之一就是可以得到更快的启动时间。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;On the other hand, module bundling deals with taking different scripts and bundling them together in a single file. Fewer HTTP requests and a single file to parse reduces load times. Usually, a single tool can handle bundling and minification. &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; is one of those tools.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;另一方面，模块打包则用于将不同脚本打包在一起并放进同一文件。更少的 HTTP 请求和单个文件解析都可以减少加载时间。通常情况下，单独一种工具就可以处理打包和压缩。&lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; 就是其中之一。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;For example this code:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;示例代码：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sample &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Results in:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;结果如下：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{},&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loaded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=!&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}([&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sample &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}]);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//# sourceMappingURL=bundle.min.js.map&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;further-bundling--进一步打包&quot;&gt;Further bundling | 进一步打包&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;You can also bundle CSS files and combine images with Webpack. These features can also help improve startup times. Explore the &lt;a href=&quot;http://webpack.github.io/docs/&quot;&gt;docs&lt;/a&gt; and run some tests!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;你也可以使用 Webpack 打包 CSS 文件以及合并图片。这些特性都可以有助于改善启动时间。研究一下 &lt;a href=&quot;http://webpack.github.io/docs/&quot;&gt;Webpack  文档&lt;/a&gt;来做些测试吧！&lt;/p&gt;&lt;h2 id=&quot;2-on-demand-loading-of-assets--2-按需加载资源&quot;&gt;2. On-demand loading of assets | 2. 按需加载资源&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;On-demand or &lt;em&gt;lazy loading&lt;/em&gt; of assets (images in particular) can help greatly in achieving better general performance of your web app. There are three benefits to lazy loading for image-heavy pages:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;资源（特别是图片）的按需加载或者说&lt;em&gt;惰性加载&lt;/em&gt;，可以有助于你的 Web 应用在整体上获得更好的性能。对于使用大量图片的页面来说惰性加载有着显著的三个好处：&lt;/p&gt;&lt;blockquote&gt;  &lt;ul&gt;    &lt;li&gt;Reduced number of concurrent requests to the server (which results in faster loading times for the rest of your page).&lt;/li&gt;    &lt;li&gt;Reduced memory usage in the browser (fewer images, less memory).&lt;/li&gt;    &lt;li&gt;Reduced load on the server.&lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;减少向服务器发出的并发请求数量（这就使得页面的其他部分获得更快的加载时间）&lt;/li&gt;  &lt;li&gt;减少浏览器的内存使用率（更少的图片，更少的内存）&lt;/li&gt;  &lt;li&gt;减少服务器端的负载&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;p&gt;The general idea is to load images or assets (such as videos) at the moment they are being displayed for the first or the moment they are about to get displayed. Since this is deeply connected to how you build your site, lazy loading solutions usually come in the form of plugins or extensions to other libraries. For instance, &lt;a href=&quot;https://github.com/loktar00/react-lazy-load&quot;&gt;react-lazy-load&lt;/a&gt; is a plugin to handle lazy loading of images for React:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;大体上的理念就是只在必要的时候才去加载图片或资源（如视频），比如在第一次被显示的时候，或者是在将要显示的时候对其进行加载。由于这种方式跟你建站的方式密切相关，惰性加载的解决方案通常需要借助其他库的插件或者扩展来实现。举个例子，&lt;a href=&quot;https://github.com/loktar00/react-lazy-load&quot;&gt;react-lazy-load&lt;/a&gt; 就是一个用于处理 React 惰性加载图片的插件：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;Scroll&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;filler&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LazyLoad&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;762&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offsetVertical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;http://apod.nasa.gov/apod/image/1502/HDR_MVMQ20Feb2015ouellet1024.jpg&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/LazyLoad&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;A great sample of how this looks in practice is the Google Images &lt;a href=&quot;https://www.google.com/search?site=&amp;amp;tbm=isch&amp;amp;source=hp&amp;amp;biw=1366&amp;amp;bih=707&amp;amp;q=parrots&amp;amp;oq=parrots&amp;amp;gs_l=img.12...0.0.0.4086.0.0.0.0.0.0.0.0..0.0....0...1ac..64.img..0.0.0.UJrFBFKkWMA&quot;&gt;search tool&lt;/a&gt;. Click on the previous link and scroll the page to see the effect.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;一个非常好的实践范例就像 Goggle Images 的&lt;a href=&quot;https://www.google.com/search?site=&amp;amp;tbm=isch&amp;amp;source=hp&amp;amp;biw=1366&amp;amp;bih=707&amp;amp;q=parrots&amp;amp;oq=parrots&amp;amp;gs_l=img.12...0.0.0.4086.0.0.0.0.0.0.0.0..0.0....0...1ac..64.img..0.0.0.UJrFBFKkWMA&quot;&gt;搜索工具&lt;/a&gt;一样。点击前面的链接并且滑动页面滚动条就可以看到效果了。&lt;/p&gt;&lt;h2 id=&quot;3-use-array-ids-when-using-dom-manipulation-libraries--3-在使用-dom-操作库时使用-array-ids&quot;&gt;3. Use array-ids when using DOM manipulation libraries | 3. 在使用 DOM 操作库时使用 array-ids&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;If you are using &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;http://emberjs.com/&quot;&gt;Ember&lt;/a&gt;, &lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular&lt;/a&gt; or other DOM manipulation libraries, using array-ids (or the track-by feature in Angular 1.x) can help a great deal in achieving good performance, in particular for dynamic sites. We saw the effects of this feature in our latest benchmarks article: &lt;a href=&quot;https://auth0.com/blog/2016/01/11/updated-and-improved-more-benchmarks-virtual-dom-vs-angular-12-vs-mithril-js-vs-the-rest/&quot;&gt;More Benchmarks: Virtual DOM vs Angular 1 &amp;amp; 2 vs Mithril.js vs cito.js vs The Rest (Updated and Improved!)&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你正在使用 &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;，&lt;a href=&quot;http://emberjs.com/&quot;&gt;Ember&lt;/a&gt;，&lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular&lt;/a&gt; 或者其他 DOM 操作库，使用 array-ids（或者 Angular 1.x 中的 track-by 特性）非常有助于实现高性能，对于动态网页尤其如此。我们已经在上一篇程序衡量标准的文章中看到这个特性的效果了： &lt;a href=&quot;https://auth0.com/blog/2016/01/11/updated-and-improved-more-benchmarks-virtual-dom-vs-angular-12-vs-mithril-js-vs-the-rest/&quot;&gt;More Benchmarks: Virtual DOM vs Angular 1 &amp;amp; 2 vs Mithril.js vs cito.js vs The Rest (Updated and Improved!)&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1465566744065.png&quot; alt=&quot;Benchmarks showing the difference between array-ids and no array-ids https://cdn.auth0.com/blog/newdombenchs2/usedheap.svg&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The main concept behind this feature is to reuse as much existing nodes as possible. &lt;strong&gt;Array ids&lt;/strong&gt; allow DOM-manipulation engines to “know” when a certain node can be mapped to a certain element in an array. Without &lt;strong&gt;array-ids&lt;/strong&gt; or &lt;strong&gt;track-by&lt;/strong&gt; most libraries resort to destroying the existing nodes and creating new ones. This impairs performance.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;此特性背后的主要概念就是尽可能多地重用已有的节点。&lt;strong&gt;Array ids&lt;/strong&gt; 使得 DOM 操作引擎可以「知道」在什么时候某个节点可以被映射到数组当中的某个元素。没有 &lt;strong&gt;array-ids&lt;/strong&gt; 或者 &lt;strong&gt;track-by&lt;/strong&gt; 的话，大部分库都会进行重新排序而摧毁已有的节点并重新创建新的。这就非常损耗性能了。&lt;/p&gt;&lt;h2 id=&quot;4-cache--4-缓存&quot;&gt;4. Cache | 4. 缓存&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_%28computing%29&quot;&gt;Caches&lt;/a&gt; are components that store static data that is frequently accessed so that subsequent requests to this data can be served faster or in a more efficient way. As web apps are composed of many moving parts, caches can be found in many parts of their architecture. For instance, a cache may be put in place between a dynamic content server and clients to prevent common request from increasing the load of the server and at the same time improving the response time. Other caches may be found in-code, optimizing certain common access patterns specific to the scripts in use. Other caches may be put in front of databases or long-running processes.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_%28computing%29&quot;&gt;Caches&lt;/a&gt; 是用于存储那些被频繁存取的静态数据的组件，便于随后对于这个数据的请求可以更快地被响应，或者说请求方式更加高效。由于 Web 应用是由很多可拆卸的部件组合而成，缓存就可以存在于架构中的很多部分。举例来说，缓存可以被放在动态内容服务器和客户端之间，就可以避免公共请求以减少服务器的负载，与此同时改善响应时间。其他缓存可能被放置在代码里，以优化某些用于脚本存取的通用模式，还有些缓存可能被放置在数据库或者是长运行进程之前。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In short, caches are a great way to improve response times and reduce CPU use in web applications. The hard part is getting to know which is the right place for a cache inside an architecture. Once again the answer is profiling: where are the common bottlenecks? Are the data or results cacheable? Are they invalidated too easily? These are all hard questions that need to be answered on a case by case basis.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;简而言之，在 Web 应用中使用缓存是一种改善响应时间和减少 CPU 使用的绝佳方式。难点就在于搞清楚哪里才是在架构中存放缓存的地方。再一次，答案就是性能分析：常见的瓶颈在哪里？数据或者结果可缓存吗？他们都太容易失效吗？这都是一些棘手的问题，需要从原理上来一点一点回答。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Uses of caches can get creative in web environments. For example, there is &lt;a href=&quot;https://addyosmani.com/basket.js/&quot;&gt;basket.js&lt;/a&gt;, a library that uses &lt;em&gt;Local Storage&lt;/em&gt; to cache scripts for your app. So the second time your web app runs scripts are loaded almost instantaneously.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;缓存的使用在 Web 环境中富有创造性。比如，&lt;a href=&quot;https://addyosmani.com/basket.js/&quot;&gt;basket.js&lt;/a&gt; 就是一个使用&lt;em&gt;Local Storage&lt;/em&gt; 来缓存应用脚本的库。所以你的 Web 应用在第二次运行脚本的时候就可以几乎瞬间加载了。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;A popular caching service nowadays is &lt;a href=&quot;https://aws.amazon.com/cloudfront/dynamic-content/&quot;&gt;Amazon CloudFront&lt;/a&gt;. CloudFront works as a general purpose content distribution network (CDN) that can be setup as a cache for dynamic content.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如今一个广受欢迎的缓存服务就是亚马逊的 &lt;a href=&quot;https://aws.amazon.com/cloudfront/dynamic-content/&quot;&gt;CloudFront&lt;/a&gt;。CloudFront 就跟通常的内容分发网络（CDN）用途一样，可以被设置作为动态内容的缓存。&lt;/p&gt;&lt;h2 id=&quot;5-enable-http2--5-启用-http2&quot;&gt;5. Enable HTTP/2 | 5. 启用 HTTP/2&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;More and more browsers are starting to support HTTP/2. This may sound superfluous but HTTP/2 introduces many benefits for concurrent connections to the same server. In other words, if there are many small assets to load (and there shouldn’t if you are bundling things!), HTTP/2 kills HTTP/1 in latency and performance. Check &lt;a href=&quot;https://http2.akamai.com/demo&quot;&gt;Akamai’s HTTP/2 demo&lt;/a&gt; on a recent browser to see the difference.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;越来越多的浏览器都开始支持 HTTP/2。这可能听起来没有必要，但是 HTTP/2 为同一服务器的并发连接问题带来了很多好处。换句话说，如果有很多小型资源需要加载（如果你打包过的话就没有必要了），在延迟和性能方面 HTTP/2 秒杀 HTTP/1。试试 &lt;a href=&quot;https://http2.akamai.com/demo&quot;&gt;Akamai 的 HTTP/2 demo&lt;/a&gt;，可以在最新的浏览器中看到区别。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1465566806854.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;6-profile-your-app--6-应用性能分析&quot;&gt;6. Profile Your App | 6. 应用性能分析&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Profiling is an essential step in optimizing any application. As mentioned in the introduction, blindly trying to optimize an app often results in lost productivity, negligible gains and harder maintainability. Profiling runs are an essential step in identifying your application hotspots.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;性能分析是优化任何应用程序时的重要一步。就像介绍中所提到的那样，盲目尝试优化应用经常会导致效率的浪费，微不足道的收益和更差的可维护性。执行性能分析是识别你的应用问题所在的一个重要步骤。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;When it comes to web applications, latency is one of the biggest complaints, so you want to make sure data is loading and getting displayed as fast as possible. Chrome provides great profiling tools. In particular, both the timeline view and the network view from Chrome’s Dev Tools help greatly in finding latency hotspots:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;对于 Web 应用来说，延迟时间是最大的抱怨之一，所以你需要确保数据的加载和显示都尽可能得快。Chrome 提供了非常棒的性能分析工具。特别是 Chrome Dev Tools 中的时间线和网络视图都对于定位延迟问题有着很大的帮助：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1465566860809.png&quot; alt=&quot;&quot; /&gt; ￼&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The timeline view can help in finding long running operations.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;时间线视图可以帮忙找到运行时间较长的操作。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1465566882266.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The network view can help identify additional latency generated by slow requests or serial access to an endpoint.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;网络视图可以帮助识别出额外的由缓慢请求导致的延迟或对于某一端点的串行访问。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Memory is another area that can result in gains if properly analyzed. If you are running a page with many visual elements (big, dynamic tables) or many interactive elements (for example, games), memory optimization can result in less stuttering and higher framerates. You can find good insights on how to use Chrome’s Dev Tools to do this in our recent &lt;a href=&quot;https://auth0.com/blog/2016/01/26/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/&quot;&gt;4 Types of Memory Leaks in JavaScript and How to Get Rid Of Them&lt;/a&gt; article.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;正确分析的话，内存则是另一块可能获得收益的部分。如果你正在运行着一个拥有很多虚拟元素的页面（庞大的动态表格）或者可交互式的元素（比如游戏），内存优化可以获得更少的卡顿和更高的帧率。从我们最近的文章 &lt;a href=&quot;https://auth0.com/blog/2016/01/26/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/&quot;&gt;4 Types of Memory Leaks in JavaScript and How to Get Rid Of Them&lt;/a&gt; 中，对于如何使用 Chrome 的开发工具有着进一步的深度理解。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;CPU profiling is also available in Chrome Dev Tools. See &lt;a href=&quot;https://developer.chrome.com/devtools/docs/cpu-profiling&quot;&gt;Profiling JavaScript Performance&lt;/a&gt; from Google’s docs.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;CPU 性能分析也可以在 Chrome Dev Tools 中找到。看看这篇来自 Google 官方文档中的文章 &lt;a href=&quot;https://developer.chrome.com/devtools/docs/cpu-profiling&quot;&gt;Profiling JavaScript Performance&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1465566917028.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Finding performance cost centers lets you target optimizations effectively.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;找到性能损耗的中心可以让你有效率地达到优化的目标。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Profiling the backend can be harder. Usually a notion of which requests are taking more time gives you a good idea of which services you should profile first. Profiling tools for the backend depend on which technology stack it was built with.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;对后端的性能分析会更加困难。通常情况下，确认一个耗费较多时间的请求可以让你明确应该优先分析哪一个服务。对于后端的分析工具来说，则取决于所构建的技术栈。&lt;/p&gt;&lt;h3 id=&quot;a-note-about-algorithms--一个关于算法的注意事项&quot;&gt;A note about algorithms | 一个关于算法的注意事项&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;In a majority of cases picking a more optimal algorithm stands to provide bigger gains than implementing specific optimizations around small cost centers. In a way, CPU and memory profiling should help you find big performance bottlenecks. When those bottlenecks are not related to coding issues, it is time to think about different algorithms.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在大多数情况下，选择一个更优的算法，比围绕着小成本中心所实现的具体优化策略能够获得更大的收益。在某种程度上，CPU 和内存分析应该可以帮你找到大的性能瓶颈。当这些瓶颈跟编码问题并不相关时，则是时候考虑考虑不同的算法了。&lt;/p&gt;&lt;h2 id=&quot;7-use-a-load-balancing-solution--7-使用负载均衡方案&quot;&gt;7. Use a Load Balancing Solution | 7. 使用负载均衡方案&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;We mentioned content distribution networks (CDNs) briefly when talking about caches. Distributing load among different servers (and even different geographical areas) can go a long way into providing better latency for your users. This is especially true when handling many concurrent connections.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们在之前讨论缓存的时候简要提到了内容分发网络（CDNs）。把负载分配到不同的服务器（甚至于不同的地理区域）可以给你的用户提供更好的延迟时间，但是这条路还很漫长，特别是在处理很多的并发连接的时候。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Load balancing can be as simple as a round-robin solution based on a &lt;a href=&quot;http://nginx.org/en/docs/http/load_balancing.html&quot;&gt;reverse nginx proxy&lt;/a&gt; or be based on a full-blown distributed network such as &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;Cloudflare&lt;/a&gt; or &lt;a href=&quot;https://aws.amazon.com/cloudfront/&quot;&gt;Amazon CloudFront&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;负载均衡就跟使用某个 round-robin（循环）解决方案一样简单，可以基于一个 &lt;a href=&quot;http://nginx.org/en/docs/http/load_balancing.html&quot;&gt;nginx 反向代理&lt;/a&gt; ，或者基于一个成熟的分布式网络，比如 &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;Cloudflare&lt;/a&gt; 或者 &lt;a href=&quot;https://aws.amazon.com/cloudfront/&quot;&gt;Amazon CloudFront&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1465566942211.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;blockquote&gt;    &lt;p&gt;The above diagram is based on &lt;a href=&quot;http://docs.citrix.com/content/dam/docs/en-us/legacy-edocs/netscaler-traffic-management-10-5-map/LB-Round_Robin_Mechanism.PNG&quot;&gt;this one&lt;/a&gt; from Citrix.For load-balancing to be really useful, dynamic and static content should be split for easy concurrent access. In other words, serial access to elements impairs the ability of the load balancer to find the best way to split the work. At the same time, concurrent access to resources can improve startup times.&lt;/p&gt;  &lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;以上的图来自于 &lt;a href=&quot;http://docs.citrix.com/content/dam/docs/en-us/legacy-edocs/netscaler-traffic-management-10-5-map/LB-Round_Robin_Mechanism.PNG&quot;&gt;Citrix&lt;/a&gt;。为了使负载均衡真正有效，动态内容和静态内容都应该被拆分成易于并发访问的。换句话说，元素的串形访问会削弱负载均衡器以最佳形式进行分流的能力。与此同时，对于资源的并发访问可以改善启动时间。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;Load balancing can be complex, though. Data models that are not friendly to eventual consistency algorithms or caching make things harder. Fortunately, most apps usually require a high level of consistency for a reduced set of data. If your application was not designed with this in mind, a refactor may be necessary.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;虽然负载均衡可能会很复杂。对最终一致性算法不友好的数据模型，或者缓存都会让事情更加困难。幸运的是，大多数应用对于已简化的数据集都只需要保证高层次的一致性即可。如果你的应用程序没有这样设计的话，就有必要重构一下了。&lt;/p&gt;&lt;h2 id=&quot;8-consider-isomorphic-javascript-for-faster-startup-times--8-为了更快的启动时间考虑一下同构-javascript&quot;&gt;8. Consider Isomorphic JavaScript for Faster Startup Times | 8. 为了更快的启动时间考虑一下同构 JavaScript&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;One way of improving the feel of web applications is reducing the startup time or the time to render the first view of the page. This is particularly important in newer single-page applications that do a lot of work on the client-side. Doing more work on the client-side usually means more information needs to be downloaded before the first render can be performed. Isomorphic JavaScript can solve this issue: since JavaScript can run in both the client and the server it is possible for the server to perform the first render of the page, send the rendered page and then have client-side scripts take over. This limits options for the backend (JavaScript frameworks that support this must be used), but can result in a much better user experience. For instance, React can be &lt;a href=&quot;https://github.com/DavidWells/isomorphic-react-example&quot;&gt;adapted&lt;/a&gt; to do this, as shown in the following code:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;改善 Web 应用程序观感的方式之一，就是减少启动时间或者减少首页渲染时间。这对于新兴的单页面应用尤为重要，其需要在客户端执行大量任务。在客户端做更多事情通常就意味着，在第一次渲染被执行之前就需要下载更多的信息。同构 JavaScript 可以解决这个问题：自从 JavaScript 可以同时运行在客户端和服务器端，这就让在服务器端来执行页面的首次渲染成为可能，先把已渲染的页面发送出去然后再由客户端的脚本接管。这限制了所使用的后端（必须使用支持该特性的 JavaScript 框架），但却能获得更好的用户体验。举例来说，React 就很&lt;a href=&quot;https://github.com/DavidWells/isomorphic-react-example&quot;&gt;适合于&lt;/a&gt;做这个，就像以下代码所示：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;react/addons&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;../components/ReactApp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ReactApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// React.renderToString takes your component&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// and generates the markup&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reactHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ReactApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({}));&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// Output html rendered by react&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// console.log(myAppHtml);&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;index.ejs&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reactOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reactHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;a href=&quot;https://www.meteor.com/&quot;&gt;Meteor.js&lt;/a&gt; has great support for mixing client side with server side JavaScript:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://www.meteor.com/&quot;&gt;Meteor.js&lt;/a&gt; 对于客户端和服务器端的 JavaScript 混用有着非常棒的支持。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Welcome to myapp.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&#39;click input&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// template data, if any, is available in &#39;this&#39;&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;undefined&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;You pressed the button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;Meteor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// code to run on server at startup&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;However, to support server-side rendering, plugins like &lt;a href=&quot;https://github.com/meteorhacks/meteor-ssr&quot;&gt;meteor-ssr&lt;/a&gt; are required.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;但是，为了支持服务器端渲染，需要像 &lt;a href=&quot;https://github.com/meteorhacks/meteor-ssr&quot;&gt;meteor-ssr&lt;/a&gt; 这样的插件。&lt;/p&gt;&lt;blockquote&gt;  &lt;blockquote&gt;    &lt;p&gt;Thanks to gabrielpoca for pointing this out in the comments. If you have a complex or mid-sized app that supports isomorphic deployments, give this a try. You might be surprised.&lt;/p&gt;  &lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;谢谢 gabrielpoca 在评论中指出这一点。如果你有复杂的或者中等大小的应用需要支持同构部署，试试这个，你可能会感到惊讶的。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;9-speed-up-database-queries-with-indexing--9-使用索引加速数据库查询&quot;&gt;9. Speed up database queries with indexing | 9. 使用索引加速数据库查询&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;If your database queries are taking too much time to be resolved (profile your app to see if this is the case!), it is time to look for ways to speedup your database. Every database and data-model carries its own trade-offs. Database optimization is a subject in its own: data-models, database types, specific implementation options, etc. Speedups may not be easy. Here is a tip, however, that may help with some databases: &lt;a href=&quot;https://en.wikipedia.org/wiki/Database_index&quot;&gt;indexing&lt;/a&gt;. Indexing is a process whereby a database creates fast-access data structures that internally map to keys (columns in a relational database) that can improve retrieval speed of associated data. Most modern databases support indexing. Indexing is not specific to either document-based databases (such as &lt;a href=&quot;https://docs.mongodb.org/manual/indexes/&quot;&gt;MongoDB&lt;/a&gt;) nor relational databases (such as &lt;a href=&quot;http://www.postgresql.org/docs/9.1/static/indexes.html&quot;&gt;PostgreSQL&lt;/a&gt;).&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你需要解决数据库查询耗费大量时间的问题（分析你的应用看看是否是这种情况！），是时候找出加速数据库的方法了。每个数据库和数据模型都有自己的权衡。数据库优化在每一方面都是一个主题：数据模型，数据库类型，具体实现方案，等等。提速可能不是那么的简单。但是这儿有个建议，可能可以对某些数据库有所帮助：&lt;a href=&quot;https://en.wikipedia.org/wiki/Database_index&quot;&gt;索引&lt;/a&gt;。索引是一个过程，即数据库所创建的快速访问数据结构，从内部映射到键（在关系数据库中的列），可以提高检索相关数据的速度。大多数现代数据库都支持索引。索引并不是文档型数据库（比如 &lt;a href=&quot;https://docs.mongodb.org/manual/indexes/&quot;&gt;MongoDB&lt;/a&gt;）所独有的，也包括关系型数据库（比如 &lt;a href=&quot;http://www.postgresql.org/docs/9.1/static/indexes.html&quot;&gt;PostgreSQL&lt;/a&gt;）。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;To have indexes optimize your queries you will need to study the access patterns of your application: what are the most common queries, on which keys or columns do they perform the search, etc.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;为了使用索引来优化你的查询，你将需要研究一下应用程序的访问模式：什么是最常见的查询，在哪个键或列中执行搜索，等等。&lt;/p&gt;&lt;h2 id=&quot;10-use-faster-transpiling-solutions--10-使用更快的转译方案&quot;&gt;10. Use faster transpiling solutions | 10. 使用更快的转译方案&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;The JavaScript software stack is as complex as ever. This has increased the need for improvements to the language. Unfortunately, JavaScript as a target platform is limited by the runtime of its users. Although improvements have been implemented in form of ECMAScript 2015 (with 2016 in progress) it is usually not possible to depend on this version for client side code. This trend has spurred a series of &lt;em&gt;transpilers&lt;/em&gt;: tools that process ECMAScript 2015 code and implement missing features using only ECMAScript 5 constructs. At the same time, module bundling and minification have been integrated into the process to produce what could be called &lt;em&gt;built-for-release&lt;/em&gt; versions of the code. These tools transform the code, and can, in a limited fashion, affect the performance of the resulting code. Google developer Paul Irish &lt;a href=&quot;https://github.com/paulirish/The-cost-of-transpiling-es2015-in-2016&quot;&gt;spent some time&lt;/a&gt; looking at how different transpiling solutions affect the performance and size of the resulting code. Although in most cases gains can be small, it is worth having a look at the data before committing to any toolstack. For big applications, the difference might be significant.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;JavaScript 软件技术栈一如既往的复杂。而改善语言本身的需求则又增加了复杂度。不幸地是，JavaScript 作为目标平台又会被用户的运行时所限制。尽管很多改进已经以 ECMAScript 2015（2016正在进行）的形式实现了，但是通常情况下，对客户端代码来说又不可能依赖于这个版本。这种趋势促使了一系列的&lt;em&gt;转译器&lt;/em&gt;：用于处理 ECMAScript 2015 代码的工具和只使用 ECMAScript 5 结构实现其中所缺失的特性。与此同时，模块绑定和压缩处理也已经被集成到这个生产过程中，被称为&lt;em&gt;为发布而构建&lt;/em&gt;的代码版本。这些工具可以转化代码，并且能够以有限的方式影响到最终代码的性能。Google 开发者 Paul Irish &lt;a href=&quot;https://github.com/paulirish/The-cost-of-transpiling-es2015-in-2016&quot;&gt;花了一些时间&lt;/a&gt;来寻找这些转译方案会如何影响性能和最终代码的大小。尽管大多数情况下收益会很小，但也值得在正式采用某个工具栈之前看看这些数据。对于大型应用程序来说，这种区别可能会影响重大。&lt;/p&gt;&lt;h2 id=&quot;11-avoid-or-minimize-the-use-of-render-blocking-javascript-and-css--11-避免或最小化-javascript-和-css-的使用阻塞渲染&quot;&gt;11. Avoid or minimize the use of render blocking JavaScript and CSS | 11. 避免或最小化 JavaScript 和 CSS 的使用阻塞渲染&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Both JavaScript and CSS resources can block the rendering of the page. By applying certain rules you can make sure both your scripts and your CSS get processed as quickly as possible so that the browser can display your site’s content.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;JavaScript 和 CSS 资源都会阻塞页面的渲染。通过采取某些的规则，你可以保证你的脚本和 CSS 被尽可能快速地处理，以便于浏览器能够显示你的网站内容。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;For the case of CSS it is of the essence that all CSS rules that are not relevant to the specific media on which you are displaying the page are given a lower priority for processing. This can be achieved through the use of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries&quot;&gt;CSS media queries&lt;/a&gt;. Media queries tell the browser which CSS stylesheets apply to a specific display media. For instance, certain rules that are specific to printing can be given a lower priority than the rules used for displaying on the screen.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在 CSS 的情况下这是非常重要的，所有的 CSS 规则都不能与特定媒体直接相关，规则只用于处理你准备在页面上所显示内容的优先级。这可以通过使用 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries&quot;&gt;CSS 媒体查询&lt;/a&gt;来实现。媒体查询告诉浏览器，哪些 CSS 样式表应用在某个特定的显示媒体上。举个例子，用于打印的某些规则可以被赋予比用于屏幕显示更低的优先级。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Media queries can be set as &lt;link /&gt; tag attributes:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;媒体查询可以被设置成 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 标签属性：&lt;/p&gt;&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;only screen and (max-device-width: 480px)&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mobile-device.css&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;When it comes to JavaScript, the key lies in following certain rules for inline JavaScript (i.e. code that is inlined in the HTML file). Inline JavaScript should be as short as possible and put in places where it won’t stop the parsing of the rest of the page. In other words, inline HTML that is put in the middle of an HTML tree stops the parser at that point and forces it to wait until the script is done executing. This can be a killer for performance if there are big blocks of code or many small blocks littered through the HTML file. Inlining can be helpful to prevent additional network fetches for specific scripts. For repeatedly used scripts or big blocks of code this advantage is eliminated.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;轮到 JavaScript 了，关键就在于遵循某些用于内联 JavaScript 的规则（比如内联在 HTML 文件当中的代码）。内联 JavaScript 应该尽可能短，并将其放在不会阻塞页面剩余部分解析的地方。换句话说，被放在 HTML 树中间的内联 JavaScript 将会在这个地方阻塞解析器，并强制其等待直到脚本被执行完毕。如果在 HTML 文件中随意放了一些大的代码块或者很多小的代码块，对于性能来说这会成为性能杀手。内联可以有效减少额外对于某些特定脚本的网络请求。但是对于重复使用的脚本或者大的代码块来说，这个好处就可以忽略不计了。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;A way to prevent JavaScript from blocking the parser and renderer is to mark the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag as &lt;em&gt;asynchronous&lt;/em&gt;. This limits our access to the DOM (no document.write) but lets the browser continue parsing and rendering the site regardless of the execution status of the script. In other words, to get the best startup times, make sure that non-essential scripts for rendering are correctly marked as asynchronous via the async attribute.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;防止 JavaScript 阻塞解析器和渲染器的一种方法就是将 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签标记为&lt;em&gt;异步的&lt;/em&gt;。这限制了我们对于 DOM 的访问但是可以让浏览器不管脚本的执行状态而继续解析和渲染页面。换句话说，为了获得最佳的启动时间，确保那些对于渲染不重要的脚本已经通过异步属性的方式标记成异步的了。&lt;/p&gt;&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;async.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;12-one-for-the-future-use-service-workers--streams--12-用于未来的一个建议使用-service-workers--流&quot;&gt;12. One for the future: use service workers + streams | 12. 用于未来的一个建议：使用 service workers + 流&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;A &lt;a href=&quot;https://jakearchibald.com/2016/streams-ftw/#streaming-results&quot;&gt;recent post by Jake Archibald&lt;/a&gt; details an interesting technique for speeding up render times: combining service workers with streams. The results can be quite compelling:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://jakearchibald.com/2016/streams-ftw/#streaming-results&quot;&gt;Jake Archibald&lt;/a&gt; 最近的一篇博文详细描述了一种有趣的技术，可以用于加速渲染时间：将 service workers 和流结合起来。结果非常令人叹服：&lt;/p&gt;&lt;iframe width=&quot;600&quot; height=&quot;400&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; src=&quot;https://www.youtube.com/embed/Cjo9iq8k-bc&quot;&gt;VIDEO&lt;/iframe&gt;&lt;blockquote&gt;  &lt;p&gt;Unfortunately this technique requires APIs that are still in flux, which is why it is an interesting concept but can’t really be applied now. The gist of the idea is to put a service worker between a site and the client. The service worker can cache certain data (like headers and stuff that doesn’t change often) while fetching what is missing. The content that is missing can then be streamed to the page to be rendered as soon as possible.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;不幸的是这个技术所需要的 APIs 都还不稳定，这也是为什么这是一种有趣的概念但现在还没有真正被应用的原因。这个想法的主旨就是在网站和客户端之间放置一个 service worker。这个 service worker 可以在获取缺失信息的同时缓存某些数据（比如 header 和一些不会经常改变的东西）。缺失的内容就可以尽可能快速地流向被渲染的页面。&lt;/p&gt;&lt;h2 id=&quot;13-update-image-encoding-optimizations--13-更新图片编码优化&quot;&gt;13. UPDATE: image encoding optimizations | 13. 更新：图片编码优化&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;One of &lt;a href=&quot;https://twitter.com/dennisl/status/702123202118447105&quot;&gt;our readers&lt;/a&gt; pointed a very important omission: image encoding optimizations. Both PNGs and JPGs are usually encoded using sub-optimal settings for web publishing. By changing the encoder and its settings, significant savings can be realized for image-heavy sites. Popular solutions include &lt;a href=&quot;http://optipng.sourceforge.net/&quot;&gt;OptiPNG&lt;/a&gt; and &lt;a href=&quot;http://jpegclub.org/jpegtran/&quot;&gt;jpegtran&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们的&lt;a href=&quot;https://twitter.com/dennisl/status/702123202118447105&quot;&gt;一个读者&lt;/a&gt;指出了一个非常重要的遗漏：图片编码优化。PNGs 和 JPGs 在 Web 发布时都会使用次优的设置进行编码。通过改变编码器和它的设置，对于需要大量图片的网站来说可以获得有效的改善。流行的解决方案包括 &lt;a href=&quot;http://optipng.sourceforge.net/&quot;&gt;OptiPNG&lt;/a&gt; 和 &lt;a href=&quot;http://jpegclub.org/jpegtran/&quot;&gt;jpegtran&lt;/a&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;a href=&quot;http://optipng.sourceforge.net/pngtech/optipng.html&quot;&gt;A guide to PNG optimization&lt;/a&gt; details how OptiPNG can be used to optimize PNGs.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://optipng.sourceforge.net/pngtech/optipng.html&quot;&gt;A guide to PNG optimization&lt;/a&gt; 详细描述了 OptiPNG 可以如何用于优化 PNGs。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;a href=&quot;http://linux.die.net/man/1/jpegtran&quot;&gt;The man page for jpegtran&lt;/a&gt; provides a good intro to some of its features.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://linux.die.net/man/1/jpegtran&quot;&gt;The man page for jpegtran&lt;/a&gt; 对它的一些特性提供了很好的介绍。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;If you find these guides too complex for your requirements, there are online sites that provide optimization as a service. There are also GUIs such as &lt;a href=&quot;http://luci.criosweb.ro/riot/&quot;&gt;RIOT&lt;/a&gt; that help greatly in doing batch operations and checking the results.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你发现这些指南相对于你的要求来说都太复杂了的话，这儿有一些在线网站可以提供优化服务。也有一些像 &lt;a href=&quot;http://luci.criosweb.ro/riot/&quot;&gt;RIOT&lt;/a&gt; 一样的图形化界面，非常有助于批量操作和结果检查。&lt;/p&gt;&lt;h2 id=&quot;further-reading--扩展阅读&quot;&gt;Further reading | 扩展阅读&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;You can read more information and find helpful tools for optimizing your site in the following links:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;你可以在下面的链接中阅读更多信息，以及找到有助于优化网站的工具：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/paulirish/The-cost-of-transpiling-es2015-in-2016&quot;&gt;Best Practices for Speeding up Your Website - Yahoo Developer Network&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://yslow.org/&quot;&gt;YSlow - a tool that checks for Yahoo’s recommended optimizations&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/speed/docs/insights/rules&quot;&gt;PageSpeed Insights - Google Developers&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/speed/pagespeed/&quot;&gt;PageSpeed Tools - Google Developers&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/ie/archive/2014/10/08/http-2-the-long-awaited-sequel.aspx&quot;&gt;HTTP/2: The Long-Awaited Sequel&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;aside-common-optimizations-at-auth0--悄悄话auth0-中常见的优化&quot;&gt;Aside: common optimizations at Auth0 | 悄悄话：Auth0 中常见的优化&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;We are a web company. As such, we have deployed specific optimizations for certain parts of our infrastructure. For instance, for the landing pages which you can find at the &lt;code class=&quot;highlighter-rouge&quot;&gt;/learn&lt;/code&gt; path of our domain (for example, the &lt;a href=&quot;https://auth0.com/learn/how-to-implement-single-sign-on/&quot;&gt;single sign on landing page&lt;/a&gt;), we have resorted to a particular optimization: for convenience we use a CMS to create each post. As posts have no central index but are meant to be found by search engines, a crawler using a &lt;a href=&quot;https://webtask.io&quot;&gt;webtask&lt;/a&gt; pre-renders each page and generates a static version of it which is then uploaded to our CDN. This reduces load on our servers as no dynamic server-side content is generated for each visitor. At the same time this improves latency (and isolates us from security issues related to the CMS we picked).&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们是一个 Web 公司。就以这种身份来说，我们为我们的基础设施的某些部分部署了一些特定的优化。举例来说，在登录页面你可以发现，在我们域名的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/learn&lt;/code&gt; 路径下（比如，&lt;a href=&quot;https://auth0.com/learn/how-to-implement-single-sign-on/&quot;&gt;登录页面的单点登录&lt;/a&gt;），我们采用了一种特别的优化：为了方便我们使用 CMS 来创建每篇文章。因为文章都没有中心索引，但是为了能够被搜索引擎发现，使用了 &lt;a href=&quot;https://webtask.io&quot;&gt;webtask&lt;/a&gt; 的爬虫来预渲染每个页面并生成了一个静态版本然后上传到我们 CDN。这减少了我们在服务器端上的压力，因为无须为每个访客都生成动态的服务器端内容。与此同时还改善了延迟（并且隔离了我们发现与 CMS 相关的安全问题）。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;For the &lt;a href=&quot;https://auth0.com/docs&quot;&gt;docs area&lt;/a&gt; we are using &lt;em&gt;isomorphic JavaScript&lt;/em&gt; which gives us great startup times and easy integration between our backend and frontend teams.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;对于&lt;a href=&quot;https://auth0.com/docs&quot;&gt;文档部分&lt;/a&gt;，我们正在使用&lt;em&gt;同构 JavaScript&lt;/em&gt;，这让我们获得了非常棒的启动时间，并且使我们的后端和前端团队能够轻松集成。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Want to see our code in action? Sign-up.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;想要实战看看我们的代码？注册一下吧。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Are you a web developer with a taste for speed? Are you interested in working in an awesome development team? Show us how we can optimize our site along with a short intro about yourself to &lt;a href=&quot;mailto:jobs@auth0.com&quot;&gt;jobs@auth0.com&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;你是一个爱好速度的 web 开发者吗？你有兴趣和优秀的开发团队共事吗？向我们展示一下可以如何优化我们的网站，并附带一个简单的自我介绍发送至 &lt;a href=&quot;mailto:jobs@auth0.com&quot;&gt;jobs@auth0.com&lt;/a&gt; 吧。&lt;/p&gt;&lt;h2 id=&quot;conclusion--结论&quot;&gt;Conclusion | 结论&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Performance optimizations are getting more and more important for web development as applications get bigger and more complex. Targeted improvements are essential to make any optimization attempt worth the time and potential future costs. Web applications have long ago crossed the boundary of mostly static content and learning common optimization patterns can make all the difference between a barely usable application and an enjoyable one (which goes a long way to keeping your visitors!). No rules are absolute, however: profiling and studying the intricacies of your specific software stack are the only way of finding out how to optimize it. Have you found any other tips that made a big difference for your app? Let us know in the comments. Hack on!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;由于应用程序变得越来越大和越来越复杂，性能优化对于 Web 开发来说正在变得越来越重要。在做出任何值得的时间和潜在的未来成本的优化尝试时，有针对性的改进都是必不可少的。Web 应用程序早已突破了大多数静态内容的边界，学习常见模式进行优化则是令人愉悦的应用和完全不可用的应用之间最大的区别（这是让你的访客留下来的长远之计！）。没有什么规则是绝对的，但是：性能分析和研究特定软件技术栈的错综复杂之处，是找出如何优化它的唯一方式。你曾经发现过对你的应用产生巨大影响的其他建议吗？请留言让我们知道。Hack on！&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;原文地址: &lt;a href=&quot;https://auth0.com/blog/2016/02/22/12-steps-to-a-faster-web-app/&quot;&gt;12 Steps to a Faster Web App – Auth0&lt;/a&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/working-with-reactjs-in-webstorm",
            "title"      : "【译】在 Webstorm 中使用 ReactJS：编码辅助、代码规范、重构以及编译",
            "category"   : "前端",
            "tags"       : "React, Intellij, IDE, DX",
            "url"        : "/2016-05-18-working-with-reactjs-in-webstorm/",
            "path"       : "_posts/前端/2016-05-18-working-with-reactjs-in-webstorm.md",
            "next"       : "/2016-06-10-thirteen-steps-to-a-faster-web-app/",
            "previous"   : "/2016-04-19-redux-and-the-command-pattern/",
            "date"       : "2016-05-18 00:00:00 +0000",
            "shortdate"  : "May 18, 2016",
            "content"    : "&lt;h2 id=&quot;1-working-with-reactjs-in-webstorm-coding-assistance&quot;&gt;1. &lt;a href=&quot;https://blog.jetbrains.com/webstorm/2015/10/working-with-reactjs-in-webstorm-coding-assistance/&quot;&gt;Working with ReactJS in WebStorm: Coding Assistance&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Posted on &lt;em&gt;October 5, 2015&lt;/em&gt; by &lt;a href=&quot;https://blog.jetbrains.com/webstorm/author/ekaterina-prigara/&quot;&gt;Ekaterina Prigara&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;ReactJS&lt;/a&gt; is no doubt one of the trendiest JavaScript libraries released recently and as such is seeing wide adoption.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;ReactJS&lt;/a&gt; 无疑是最新发布的 JavaScript 库当中最为新潮的，有目共睹地被广泛采用。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;React support was introduced in WebStorm 10 and has undergone continuous improvement since then. In this blog post we’d like to show how WebStorm can help you write code with React. We are using WebStorm 11 that you can get &lt;a href=&quot;https://www.jetbrains.com/webstorm/whatsnew/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;最开始是在 WebStorm 10 中就初步支持了 React，并在那之后持续不断地进行了改进。这篇文章我们就将为你展现一下 WebStorm 将如何在编写 React 代码时助你一臂之力。我们将使用 WebStorm 11，你可以&lt;a href=&quot;https://www.jetbrains.com/webstorm/whatsnew/&quot;&gt;这儿&lt;/a&gt;获取最新版本。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;React introduces &lt;strong&gt;JSX&lt;/strong&gt;, an XML-like syntax that you can use inside your JavaScript code, but you can also use React in pure JavaScript.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;React 首次引入了 &lt;strong&gt;JSX&lt;/strong&gt;，一种可以直接在 JavaScript 代码当中直接使用的类 XML 语法，但是你也可以使用纯 JavaScript 的方式使用 React。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;If you’re using JSX, WebStorm will suggest switching language version to &lt;em&gt;JSX Harmony&lt;/em&gt; so that it may understand JSX syntax in &lt;em&gt;.js&lt;/em&gt; files. That’s it, now you can write JSX code and enjoy &lt;strong&gt;code&lt;/strong&gt; &lt;strong&gt;completion&lt;/strong&gt; for JSX tags,&lt;strong&gt;navigation&lt;/strong&gt; and &lt;strong&gt;code analysis&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你正在使用 JSX，WebStorm 将会建议你将语言版本切换至 &lt;em&gt;JSX Harmony&lt;/em&gt;，从而 IDE 可以在 &lt;em&gt;.js&lt;/em&gt; 文件当中理解 JSX 语法。就是这种，现在你可以愉快得编写 JSX 代码，并且享受 JSX 标签的&lt;strong&gt;代码补全&lt;/strong&gt;，&lt;strong&gt;导航&lt;/strong&gt;，&lt;strong&gt;代码分析&lt;/strong&gt;等功能。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/10/jsx_language_level.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;You can also switch language version to &lt;em&gt;JSX Harmony&lt;/em&gt; manually in &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences | Languages &amp;amp; Frameworks | JavaScript&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;你可以手动地在 &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences | Languages &amp;amp; Frameworks | JavaScript&lt;/code&gt;&lt;/em&gt; 当中切换语言版本到 &lt;em&gt;JSX Harmony&lt;/em&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; Once you have &lt;em&gt;react.js&lt;/em&gt; library file somewhere in your project, WebStorm will provide you code completion for &lt;strong&gt;React methods&lt;/strong&gt; and &lt;strong&gt;React-specific attributes&lt;/strong&gt;. By default, the code completion popup displays automatically as you type. For example:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;只要你在项目的任何地方有了 &lt;em&gt;react.js&lt;/em&gt; 的库文件，WebStorm 就会为你提供 &lt;strong&gt;React 方法&lt;/strong&gt;和 &lt;strong&gt;React 特定属性&lt;/strong&gt;提供代码自动补全。默认情况下，代码补全会根据你的输入自动显示弹出框。比如：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/10/react_code_completion.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;From your code you can jump to the method definition in the library with &lt;em&gt;Cmd-click (Ctrl+click)&lt;/em&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;使用 &lt;em&gt;Cmd-click (Ctrl+click)&lt;/em&gt; 可以从你的代码直接跳转到库中的方法定义。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;To enhance code completion with typed parameter information we recommend that you add a TypeScript definition file for &lt;a href=&quot;https://github.com/borisyankov/DefinitelyTyped/blob/master/react/react.d.ts&quot;&gt;react.d.ts&lt;/a&gt; as a JavaScript library for the project.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;为了增强代码补全的类型参数信息，我们推荐你可以添加一个 TypeScript 类型定义文件 &lt;a href=&quot;https://github.com/borisyankov/DefinitelyTyped/blob/master/react/react.d.ts&quot;&gt;react.d.ts&lt;/a&gt;，作为当前项目的 JavaScript 库。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Go to &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences | Languages &amp;amp; Frameworks | JavaScript | Libraries&lt;/code&gt;&lt;/em&gt;, click &lt;em&gt;Download…&lt;/em&gt;, search for &lt;em&gt;react&lt;/em&gt; and click Download. The file will be added as &lt;a href=&quot;http://blog.jetbrains.com/webstorm/2014/07/how-webstorm-works-completion-for-javascript-libraries/&quot;&gt;JavaScript library&lt;/a&gt; for WebStorm to use in coding assistance.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;到 &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences | Languages &amp;amp; Frameworks | JavaScript | Libraries&lt;/code&gt;&lt;/em&gt; 选项下，点击 &lt;em&gt;Download…&lt;/em&gt;，搜索 &lt;em&gt;react&lt;/em&gt; 并点击下载。这个文件将会被添加作为 &lt;a href=&quot;http://blog.jetbrains.com/webstorm/2014/07/how-webstorm-works-completion-for-javascript-libraries/&quot;&gt;JavaScript 库&lt;/a&gt;，给 WebStorm 用来做为编码辅助。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Now when you type, you’ll also see information on parameters that you can use in this method:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在的话，只要你一输入，你就有看到可以在方法中使用的参数信息：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/10/react_param_info.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Press &lt;em&gt;Cmd-P&lt;/em&gt; to invoke a popup with information about arguments and types again.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;按住 &lt;em&gt;Cmd-P&lt;/em&gt; 就可以重新调出参数和类型相关信息的弹出框。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;WebStorm can also provide code completion for HTML tags and component names that you have defined inside methods in JavaScript or inside other components.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;WebStorm 也可以为 HTML 标签和组件名称提供代码补全，只要你已经在 JavaScript 的方法或者是其他组件中定义好了。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/10/react_component_competion.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Completion also works for imported components with ES6 style syntax:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;自动补全也适用于使用 ES6 语法所导入的组件：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/10/react_imported_component_completion.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;From there you can also jump to the component definition with &lt;em&gt;Cmd-click&lt;/em&gt; (&lt;em&gt;Ctrl+click&lt;/em&gt; on Windows and Linux) on component name or see a definition in a popup with &lt;em&gt;Cmd-Y&lt;/em&gt; (&lt;em&gt;Ctrl+Shift+I&lt;/em&gt;).&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;当然这里你也可以用使用 &lt;em&gt;Cmd-click&lt;/em&gt; (&lt;em&gt;Ctrl+click&lt;/em&gt; on Windows and Linux) 点击组件名称跳转到组件定义的地方，或者可以使用 &lt;em&gt;Cmd-Y&lt;/em&gt; (&lt;em&gt;Ctrl+Shift+I&lt;/em&gt;) 直接在弹出框中查看定义。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/10/react_quick_definition.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In JSX tags, the IDE provides coding assistance for &lt;a href=&quot;https://facebook.github.io/react/docs/tags-and-attributes.html#html-attributes&quot;&gt;React-specific attributes&lt;/a&gt; such as &lt;em&gt;className&lt;/em&gt; or classID. Moreover, for class names you can autocomplete classes defined in the project’s CSS files.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在 JSX 标签中，IDE 给&lt;a href=&quot;https://facebook.github.io/react/docs/tags-and-attributes.html#html-attributes&quot;&gt;特定的 React 属性&lt;/a&gt; 提供代码辅助，比如 &lt;em&gt;className&lt;/em&gt; 或 &lt;em&gt;classID&lt;/em&gt;。而且对于 class 来说还可以自动补全那些项目 CSS 文件中已有的 class 名。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/10/react_classname.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Of course there is also code completion for JavaScript expressions inside the curly braces. That includes all methods and functions that you have defined:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;当然在花括号当中的 JavaScript 表达式也可以有代码补全。这包括所有已定义的方法和函数：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/10/react_javascript_expression.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;emmet-in-jsx--在-jsx-中使用-emmet&quot;&gt;Emmet in JSX | 在 JSX 中使用 Emmet&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;With &lt;a href=&quot;http://docs.emmet.io/cheat-sheet/&quot;&gt;Emmet&lt;/a&gt; support in WebStorm, you can generate HTML markup really fast. You type an abbreviation that expands to HTML code when you press Tab. You can also use Emmet in JSX code, and that brings us to some special React twists. For example, the abbreviation &lt;em&gt;div.my-class&lt;/em&gt; would expand in JSX to &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div className=”my-class&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/strong&gt; and not to &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div class=”my-class&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/strong&gt; like it would in HTML.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;通过 WebStrom 中的 &lt;a href=&quot;http://docs.emmet.io/cheat-sheet/&quot;&gt;Emmet&lt;/a&gt; 支持，可以让你非常迅速地生成 HTML 标记。你可以在输入缩写后再按 Tab 键就可以自动扩展至 HTML 代码。你也可以在 JSX 代码中使用 Emmet，给我们带来一些专用于 React 的特殊扩展。比如，&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;div.my-class&lt;/code&gt;&lt;/em&gt; 缩写就可以展开成 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div className=”my-class&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; 而不是像 HTML 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div class=”my-class&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/10/react_emmet.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;live-templates--动态模板&quot;&gt;Live templates | 动态模板&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Live templates work very similar to Emmet – type a special abbreviation and it will expand into a code snippet. WebStorm has a predefined set of templates for JavaScript and HTML, and you can also create your custom templates for React in &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences | Editor | Live templates&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;动态模板和 Emmet 工作方式很像 —— 输入特殊缩写就可以自动展开成代码片段。WebStorm 有着一系列预先定义好的 JavaScript 和 HTML 模板，而且你也可以在 &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences | Editor | Live templates&lt;/code&gt;&lt;/em&gt; 中为 React 创建自己的自定义模板。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;As an example let’s create a live template for creating a new React component:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们给新建 React 组件创建一个动态模板来作为例子：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var $NAME$ = React.createClass({    render: function () {        return (            &amp;lt;div&amp;gt;$END$&amp;lt;/div&amp;gt;        )    }});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Let’s set the abbreviation to &lt;em&gt;rC&lt;/em&gt;. With &lt;em&gt;$variable_name$&lt;/em&gt; syntax, we can set the edit points for variable and function names (we have multiple edit points in one template), and with &lt;em&gt;$END$&lt;/em&gt; we specify a location of the cursor at the end.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;让我们将缩写设为 &lt;em&gt;rC&lt;/em&gt;。通过 &lt;em&gt;$variable_name$&lt;/em&gt; 语法，我们可以给变量和函数名字预留一些编辑点（我们可以在同一个模板中有多个编辑点），然后通过 &lt;em&gt;$END$&lt;/em&gt; 我们可以给光标在最后特别指定一个位置。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/10/new_live_template.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;We also need to specify the kind of files in which this template can be invoked; in our case it will be JSX.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们还需要指定哪些文件可以调用这些模板，这种情况当然就是 JSX。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Now when you type &lt;em&gt;rC&lt;/em&gt; and press &lt;em&gt;Tab&lt;/em&gt;, the code snippet will expand. Type the component name and press &lt;em&gt;Tab&lt;/em&gt; again to jump to the end edit location:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在当你输入 &lt;em&gt;rC&lt;/em&gt; 并且按 &lt;em&gt;Tab&lt;/em&gt; 的时候，代码片段就会展开。输入组件名称并再次按 &lt;em&gt;Tab&lt;/em&gt; 键既可以跳到编辑的最后位置：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/10/react_live_template1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Another way to go is to import a set of templates created by community members for development with React in WebStorm. See &lt;a href=&quot;https://github.com/Minwe/jetbrains-react&quot;&gt;GitHub&lt;/a&gt; for details on the installation process.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;另外一种方式就是直接导入模板集合，社区成员已经给 WebStorm 中的 React 开发创建好了的。可以到 &lt;a href=&quot;https://github.com/Minwe/jetbrains-react&quot;&gt;GitHub&lt;/a&gt; 上获取更多安装过程的细节。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In a&lt;a href=&quot;http://blog.jetbrains.com/webstorm/2015/12/working-with-reactjs-in-webstorm-linting-refactoring-and-compiling/&quot;&gt; follow-up blog post&lt;/a&gt; we’ll talk more about the available refactoring options, code quality analysis, and compiling code. Stay tuned!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在&lt;a href=&quot;http://blog.jetbrains.com/webstorm/2015/12/working-with-reactjs-in-webstorm-linting-refactoring-and-compiling/&quot;&gt;接下来的一篇文章中&lt;/a&gt;，我们将会讨论更多关于可用的重构项，代码质量分析，以及代码编译。敬请期待！&lt;/p&gt;&lt;h2 id=&quot;2-working-with-reactjs-in-webstorm-linting-refactoring-and-compiling&quot;&gt;2. &lt;a href=&quot;http://blog.jetbrains.com/webstorm/2015/12/working-with-reactjs-in-webstorm-linting-refactoring-and-compiling/&quot;&gt;Working with ReactJS in WebStorm: Linting, refactoring and compiling&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Posted on &lt;em&gt;December 30, 2015&lt;/em&gt; by &lt;a href=&quot;http://blog.jetbrains.com/webstorm/author/ekaterina-prigara/&quot;&gt;Ekaterina Prigara&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;We recently explored &lt;a href=&quot;http://blog.jetbrains.com/webstorm/2015/10/working-with-reactjs-in-webstorm-coding-assistance/&quot;&gt;coding assistance&lt;/a&gt; that WebStorm provides for React and JSX. Now we would like to talk a bit about the tools in the React ecosystem. In this area it’s not easy to provide a complete overview as tools are developing at a crazy pace. So right now we’ll focus on linters (code quality tools), refactoring and tools that can help us compile code.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们最近探索了 WebStorm 给 React 和 JSX 所提供的 &lt;a href=&quot;http://blog.jetbrains.com/webstorm/2015/10/working-with-reactjs-in-webstorm-coding-assistance/&quot;&gt;编码辅助&lt;/a&gt;。现在我们就来讨论一些 React 生态中的工具。在这方面提供一个完整的概述并不容易，因为工具正在以疯狂的速度发展。所以现在我们就只会专注于 linters（代码质量分析工具），重构，以及可以帮助我们编译代码的工具。&lt;/p&gt;&lt;h3 id=&quot;code-analysis--代码分析&quot;&gt;Code analysis | 代码分析&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;As you may know, WebStorm has a wide range of built-in inspections for JavaScript and HTML, and these inspections also work for JSX code.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;由于你可能已经知道了，WebStorm 内置很多对于 JavaScript 和 HTML 的广泛检查。这些检查对于 JSX 代码同样有效。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;For example, WebStorm alerts you in case of unused variables and functions, missing closing tags, missing statements and much more. For some inspections WebStorm provides quick-fixes, like add a missing semicolon:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;比如，WebStorm 可以在一些情况下提醒你，比如无用的变量和函数，缺失语句乃至更多。对于一些检查 WebStorm 可以给你提供快速修复，比如添加缺失的分号：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/12/react-inspection.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;You can customize the list of inspections in &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences | Editor | Inspections&lt;/code&gt;&lt;/em&gt;. Disable those you don’t want to see, or change severity level from warning to error or vice versa.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;你可以在 &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences | Editor | Inspections&lt;/code&gt;&lt;/em&gt; 中定制这一系列的检查。禁掉那些你并不想看到的，或者将安全等级从警告改成错误，反之亦然。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;On top of such inspections, you can also use linters like ESLint and JSCS for the JSX code. Let’s talk about these in more detail.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在以上的检查之外，你也可以给 JSX 代码用上一些如 ESLint 和 JSCS 之类的 linters。让我们来谈论更多有关细节。&lt;/p&gt;&lt;h3 id=&quot;eslint&quot;&gt;ESLint&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://eslint.org/&quot;&gt;ESLint&lt;/a&gt;&lt;/strong&gt; is a linting utility that provides a wide range of linting rules, which can also be extended with plugins. WebStorm integrates with ESLint and allows you to see warnings as errors reported by ESLint right in the editor, as you type.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;**&lt;a href=&quot;http://eslint.org/&quot;&gt;ESLint**&lt;/a&gt; 是一种规范工具，提供了非常广泛的 linting 规则，并可以通过插件的方式进行扩展。WebStorm 集成了 ESLint， 并且让你在输入的时候就可以在编辑器中看到 ESLint 所报告的警告和错误。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;While ESLint itself understands JSX syntax, authors &lt;a href=&quot;https://github.com/eslint/eslint#does-eslint-support-jsx&quot;&gt;recommend&lt;/a&gt; using &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-react&quot;&gt;eslint-plugin-react&lt;/a&gt; if you are working with React. To get started, add &lt;em&gt;eslint&lt;/em&gt; and &lt;em&gt;eslint-plugin-react&lt;/em&gt; modules to your project via npm, then add an ESLint configuration file &lt;em&gt;.eslintrc&lt;/em&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;ESLint 本身就可以理解 JSX 语法，如果你在使用 React 的话，作者&lt;a href=&quot;https://github.com/eslint/eslint#does-eslint-support-jsx&quot;&gt;推荐&lt;/a&gt;使用 &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-react&quot;&gt;eslint-plugin-react&lt;/a&gt;。通过 npm 安装 &lt;em&gt;eslint&lt;/em&gt; 和 &lt;em&gt;eslint-plugin-react&lt;/em&gt; 模块到你的项目就可以上手了，然后添加一个 ESLint 的配置文件 &lt;em&gt;.eslintrc&lt;/em&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Here’s what &lt;em&gt;.eslint&lt;/em&gt; file structure looks like when using ESLint 1.x and react plugin:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这儿有一个使用 ESLint 1.x 和 React 的 &lt;em&gt;.eslint&lt;/em&gt; 文件结构示例：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{    &quot;ecmaFeatures&quot;: {        &quot;jsx&quot;: true    },    &quot;plugins&quot;: [        &quot;react&quot;    ],    &quot;rules&quot;: {}}                    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;In &lt;a href=&quot;http://eslint.org/docs/2.0.0/user-guide/configuring.html#specifying-parser-options&quot;&gt;ecmaFeatures&lt;/a&gt; object you can specify additional language features you’d like to use, for example ES6 classes, modules, etc.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在 &lt;a href=&quot;http://eslint.org/docs/2.0.0/user-guide/configuring.html#specifying-parser-options&quot;&gt;ecmaFeatures&lt;/a&gt; 对象当中你可以指定额外你想要使用的语言特性，比如 ES6 类，模块，等等。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In rules object you can list ESLint &lt;a href=&quot;http://eslint.org/docs/rules/&quot;&gt;built-in rules&lt;/a&gt; that you would like to enable, as well as &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react#list-of-supported-rules&quot;&gt;rules&lt;/a&gt; available via the react plugin.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在规则对象中你可以列出想要启用的 ESLint &lt;a href=&quot;http://eslint.org/docs/rules/&quot;&gt;内置规则&lt;/a&gt;，通过 React 插件实现的&lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react#list-of-supported-rules&quot;&gt;规则&lt;/a&gt;也是一样的。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;For example, thanks to ESLint with react plugin we can get warnings when the display name is not set for React component, or when some dangerous JSX properties are used. Here’s how it looks in the editor, if you have ESLint integration enabled in WebStorm:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;比如，得益于 ESLint 的 React 插件，我们可以获得一些警告，比如当显示的名字不属于 React 组件，或者一些危险的 JSX 属于被使用的时候。这就是在 WebStorm 集成了 ESLint 后编辑器中的样子：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/12/eslint-react.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;To enable ESLint, go to &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences | Languages &amp;amp; Frameworks | JavaScript | Code quality | ESLint&lt;/code&gt;&lt;/em&gt; (or simply search for ESLint in Preferences) and check the &lt;em&gt;Enable&lt;/em&gt; checkbox. WebStorm will automatically locate ESLint in your project’s node_modules folder and then use &lt;em&gt;.eslintrc&lt;/em&gt; configuration by default.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;为了启用 ESLint，可以到 &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences | Languages &amp;amp; Frameworks | JavaScript | Code quality | ESLint&lt;/code&gt;&lt;/em&gt; （或者直接在 Preferences 中搜索 ESLint）然后选中 &lt;em&gt;Enable&lt;/em&gt; 选项。WebStorm 将会自动找到项目 node_modules 文件夹下的 ESLint 并默认使用 &lt;em&gt;.eslintrc&lt;/em&gt; 配置。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/12/eslint-enable.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;refactoring--重构&quot;&gt;Refactoring | 重构&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;WebStorm offers lots of different refactorings to modify and maintain your code. For example, when you rename a file with &lt;em&gt;Refactor -&amp;gt; Rename&lt;/em&gt;, all the references will be renamed automatically. Or, you can easily rename a variable, class or method throughout your whole project.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;WebStorm 提供了种类繁多的重构方式来修改和维护你的代码。比如，当你使用 &lt;em&gt;Refactor -&amp;gt; Rename&lt;/em&gt; 重命名一个文件的时候，所有的引用都会自动被重新命名。或者是，你可以轻松重命名一个贯穿整个项目的变量，类，或者方法。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;For React applications, WebStorm can also help you rename components. Place the cursor on the component name and press &lt;strong&gt;Ctrl+T&lt;/strong&gt; to open the &lt;em&gt;Refactor This&lt;/em&gt; popup. Select &lt;em&gt;Rename…&lt;/em&gt;, type the new name and press Enter. Done!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;对于 React 应用来说，WebStorm 也可以帮助你重命名组件。只要把光标放到组件的名字上，并按 &lt;strong&gt;Ctrl+T&lt;/strong&gt; 打开 &lt;em&gt;Refactor This&lt;/em&gt; 弹出框，然后选择 &lt;em&gt;Rename…&lt;/em&gt;，输入新的名字并按 Enter 键，完成！&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Here’s an example of renaming a component that is refined and used in only one file:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这儿有个重命名组件的例子，这个组件只在这一个文件中被定义和使用：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/12/rename-component.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In the same way, you can rename components defined in one file and then imported using a named export to another file:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;同样地，你可以重命名一个导入的组件，这个组件在其他文件中所定义然后被导出到另外一个文件：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/12/rename-component-import.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;compiling-the-code--编译代码&quot;&gt;Compiling the code | 编译代码&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;You can set up a build process for your React app in multiple ways. &lt;a href=&quot;https://facebook.github.io/react/docs/getting-started.html&quot;&gt;The React Getting started page&lt;/a&gt; suggests using &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; or &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; which are CommonJS module systems. You will also need Babel and, if using Babel 6 and ES6 code, &lt;a href=&quot;https://www.npmjs.com/package/babel-preset-react&quot;&gt;babel-preset-react&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/babel-preset-es2015&quot;&gt;babel-preset-es2015&lt;/a&gt; to compile your code. You can find lots of articles and tutorials with recommendations for the build process using various tools.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;你可以通过多种方式给你的 React 应用准备一个构建进程。&lt;a href=&quot;https://facebook.github.io/react/docs/getting-started.html&quot;&gt;React Getting started 页面&lt;/a&gt;上就建议使用 &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; 或者 &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt;，这些都支持 CommonJS 模块系统。你也将使用到 Babel，如果使用 Babel 6 和 ES6 代码的话，&lt;a href=&quot;https://www.npmjs.com/package/babel-preset-react&quot;&gt;babel-preset-react&lt;/a&gt; 和 &lt;a href=&quot;https://www.npmjs.com/package/babel-preset-es2015&quot;&gt;babel-preset-es2015&lt;/a&gt; 可以用来编译你的代码。你可以找到大量的文章和教程，都会推荐使用各种各样工具来进行构建处理。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;As the &lt;a href=&quot;https://facebook.github.io/react/docs/getting-started.html&quot;&gt;Getting started tutorial&lt;/a&gt; suggests, install the following modules via npm:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;就像 &lt;a href=&quot;https://facebook.github.io/react/docs/getting-started.html&quot;&gt;Getting started 教程&lt;/a&gt;中所建议的那样，通过 npm 安装以下模块：&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save react react-dom browserify babelify babel-preset-es2015 babel-preset-react&lt;/code&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;To automate the build process a little bit, let’s add the command suggested in the tutorial to the scripts section of the project’s &lt;em&gt;package.json&lt;/em&gt; file:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;为了更加自动化构建的过程，让我们来添加教程中所建议的命令，作为项目 &lt;em&gt;package.json&lt;/em&gt; 文件中的脚本部分：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;scripts&quot;: {    &quot;build&quot;: &quot;browserify -t [ babelify --presets [ react ] ] main.js -o bundle.js&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;where &lt;em&gt;main.js&lt;/em&gt; is the main app file and &lt;em&gt;bundle.js&lt;/em&gt; is the output file.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;em&gt;main.js&lt;/em&gt; 文件作为应用的主文件，&lt;em&gt;bundle.js&lt;/em&gt; 作为输出文件。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;WebStorm displays npm tasks listed in package.json in a separate tool window. Just double-click on the task name to run it. No need to run commands in the terminal.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;WebStorm 可以在单独的工具窗口显示在 package.json 中所定义好的 npm 任务。只需要双击任务名称就可以运行它。不需要再在终端中运行命令。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://d3nmt5vlzunoa1.cloudfront.net/webstorm/files/2015/12/npm-build.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In a similar way you can start &lt;a href=&quot;https://youtu.be/EI62ZhMx4lI&quot;&gt;Gulp or Grunt tasks&lt;/a&gt; in WebStorm.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;同样地，你也可以在 WebStorm 中启动 &lt;a href=&quot;https://youtu.be/EI62ZhMx4lI&quot;&gt;Gulp 或者 Grunt 任务&lt;/a&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;You can also set up a File watcher for Babel and Browserify in WebStorm to execute similar tasks (you can read about it &lt;a href=&quot;http://blog.jetbrains.com/webstorm/2015/05/ecmascript-6-in-webstorm-transpiling/&quot;&gt;here&lt;/a&gt;), but running tasks via npm scripts or Gulp gives you more flexibility if you add more steps.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;你也可以在 WebStorm 中给 Babel 和 Browserify 装一个文件监听器，用来执行相似命令（你可以阅读&lt;a href=&quot;http://blog.jetbrains.com/webstorm/2015/05/ecmascript-6-in-webstorm-transpiling/&quot;&gt;这里&lt;/a&gt;），但是如果你需要很多步骤的话，通过 npm 脚本或者 Gulp 的方式就可以给你更多的可扩展性。&lt;/p&gt;&lt;p&gt;&lt;em&gt;Develop with pleasure!– JetBrains WebStorm Team&lt;/em&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;1-working-with-reactjs-in-webstorm-coding-assistance&quot;&gt;1. &lt;a href=&quot;https://blog.jetbrains.com/webstorm/2015/10/working-with-reactjs-in-webstorm-coding-assistance/&quot;&gt;Working with ReactJS in WebStorm: Coding Assistance&lt;/a&gt;&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/redux-and-the-command-pattern",
            "title"      : "【译】Redux 和 命令模式",
            "category"   : "前端",
            "tags"       : "React, Redux, Design Pattern",
            "url"        : "/2016-04-19-redux-and-the-command-pattern/",
            "path"       : "_posts/前端/2016-04-19-redux-and-the-command-pattern.md",
            "next"       : "/2016-05-18-working-with-reactjs-in-webstorm/",
            "previous"   : "/2016-04-08-react-v15-the-big-and-great-latest-version/",
            "date"       : "2016-04-19 00:00:00 +0000",
            "shortdate"  : "April 19, 2016",
            "content"    : "&lt;p&gt;原文地址：&lt;a href=&quot;https://medium.com/@abhiaiyer/the-command-pattern-c51292e22ea7&quot;&gt;Redux and The Command Pattern (Apr 7, by Abhi Aiyer)&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;There are two things I know for absolute certainty in the Software industry.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;据我所知，软件行业有两件必然确定的事情：&lt;/p&gt;&lt;h2 id=&quot;1-frameworks-always-change--1-框架永远都在变化&quot;&gt;1. Frameworks Always Change | 1. 框架永远都在变化&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;We’ve all been there. The Vicious cycle:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;而，我们都曾在那里，恶性循环：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*bl67_i5wn3Hro-eXBHa-TA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;If things always change, then as a Software Engineer your job is to constantly be learning and making the right bets in libraries or frameworks you decide to use.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果事情总是在变化，那么作为一名软件工程师，你的工作就是持续不断的学习，以及在你决定使用的库或框架上做出正确的押注。&lt;/p&gt;&lt;h2 id=&quot;2-design-patterns-are-the-foundation-of-software-engineering--2-设计模式是软件工程的基础&quot;&gt;2. Design Patterns are the foundation of Software Engineering | 2. 设计模式是软件工程的基础&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;So if we know Frameworks always change, then we have to stick to the foundation of great software: Design Patterns.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;既然我们已经知道了框架永远都会变化，那我们就必须坚持优秀软件的基础：设计模式。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Design patterns represent the &lt;strong&gt;best practices&lt;/strong&gt; used by experienced software developers. Design Patterns &lt;strong&gt;teach you how to think&lt;/strong&gt;. The main benefit of learning design patterns is that you can come up with solutions to your problems a lot faster and if your co-workers are aware of these patterns, everyone can speak the same language. Now I’m advocating Design Patterns, but they are not the end all be all of solutions. Its okay if you are not using every piece of a design pattern as long you have a better solution to your particular problem.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;设计模式就代表着&lt;strong&gt;最佳实践&lt;/strong&gt;，这些实践都是由经验丰富的软件开发者所使用并总结出来的。设计模式&lt;strong&gt;教会你如何思考&lt;/strong&gt;。学习设计模式的主要好处就是，你在面对问题的时候能够更加快速地提出解决方案，如果你的同事也有设计模式方面的知识的话，那么每个人就是在说着同样一种语言。虽然现在我在提倡设计模式，但他们并不是最终的解决方案。只要你对于特定问题能有更好的解决方案，那么即使你并没有使用任何设计模式也是 okay 的。&lt;/p&gt;&lt;h2 id=&quot;history-lesson--历史的教诲&quot;&gt;History Lesson | 历史的教诲&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;We can trace design patterns back to Christopher Alexander, author of &lt;a href=&quot;https://en.wikipedia.org/wiki/A_Pattern_Language&quot;&gt;Pattern Language&lt;/a&gt;. Alexander realized that certain methods, over time, created constructs to achieve efficiency. It was then, stemming from Alexander’s work, other publications started coming out. A great one to read is &lt;em&gt;&lt;a href=&quot;http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612&quot;&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;&lt;/em&gt;. This describes patterns that provided solutions to common software development problems.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;对于设计模式我们可以追溯到 Christopher Alexander，&lt;a href=&quot;https://en.wikipedia.org/wiki/A_Pattern_Language&quot;&gt;Pattern Language&lt;/a&gt; （中译名：&lt;a href=&quot;https://book.douban.com/subject/1157145/&quot;&gt;《建筑模式语言》&lt;/a&gt;）的作者，Alexander 意识到，随着时间的推移，某些方法所创造的结构可以达成效率。当时，由于 Alexander 的工作，其他出版物也开始出来了。其中很棒的一本读物就是 &lt;em&gt;&lt;a href=&quot;http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612&quot;&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;&lt;/em&gt; （中译名：&lt;a href=&quot;https://book.douban.com/subject/1052241/&quot;&gt;《设计模式:可复用面向对象软件的基础》&lt;/a&gt;）。这本书描述了给常见的软件开发问题提供解决方案的各种模式。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;A great book for JavaScript developers is by Addy Osmani. It’s available online &lt;a href=&quot;https://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;对于 JavaScript 开发者来说，这儿有一本来自于 Addy Osmani 的好书。你可以在&lt;a href=&quot;https://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot;&gt;这里&lt;/a&gt;在线查看。&lt;/p&gt;&lt;h2 id=&quot;command-pattern--命令模式&quot;&gt;Command Pattern | 命令模式&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;The Command Pattern is a great pattern for architecting really clean decoupled systems. The motivation of this pattern is to execute some piece of business logic at some point in the future. The reason why I wanted to touch on the Command Pattern specifically is because I believe its the root pattern of &lt;strong&gt;Redux&lt;/strong&gt;. Let’s get into the Command Pattern, then translate this to Redux.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在设计真正解耦合的整洁系统架构时，命令模式是一种非常棒的模式。这种模式的缘由就是为了能够在未来的某个时刻执行某个部分业务逻辑。在这里我想要特别提及命令模式的原因，是因为我认为这是 &lt;strong&gt;Redux&lt;/strong&gt; 模式的根源。现在就让我们来走进命令模式，然后将其「翻译」成 Redux。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;There are several elements to the Command Pattern: the &lt;strong&gt;Receiver&lt;/strong&gt;, &lt;strong&gt;Command&lt;/strong&gt;, and the &lt;strong&gt;Executor&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;首先要理解命令模式当中的一些基本要素：&lt;strong&gt;Receiver&lt;/strong&gt;， &lt;strong&gt;Command&lt;/strong&gt;，以及 &lt;strong&gt;Executor&lt;/strong&gt;。&lt;/p&gt;&lt;h3 id=&quot;the-receiver--接收器&quot;&gt;&lt;strong&gt;The Receiver&lt;/strong&gt; | &lt;strong&gt;接收器&lt;/strong&gt;&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;The receivers job is to hold our business logic. When given a command, it knows how to fulfill that request.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;接收器&lt;/strong&gt;的职责就是保存我们的业务逻辑。每当给到一个命令，它都能知道如何满足相应的要求。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Imagine we are running sales for Tesla’s new Model 3. Let’s write some code to describe how this would look:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;想象一下我们正在销售特斯拉的新车型 Model 3。让我们写些代码来描述一下这是如何工作的：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/** + Request information about the car + @param model - model of car + @param id - id of car **/function requestInfo(model, id) {  return `${model} with id: ${id}`;}/** + Buy the car + @param model - model of car + @param id - id of car **/function buyVehicle(model, id) {  return `You purchased ${model} with id: ${id}`;}/**  + Arrange viewing for car + @param model - model of car + @param id - id of car **/function arrangeViewing(model, id) {  return `You have successfully booked a viewing of ${model} (${id})`;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;In the traditional command pattern we would encapsulate this information in an object.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在传统的命令模式下，我们通常会将这些信息包裹在一个对象当中。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const TeslaSalesControl = {  buyVehicle,  requestInfo,  arrangeViewing}export default TeslaSalesControl;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;the-command--命令&quot;&gt;&lt;strong&gt;The Command&lt;/strong&gt; | &lt;strong&gt;命令&lt;/strong&gt;&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;This contains information about the action being called, and its required parameters. It is represented as an object.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;这会包含行为调用时的一些信息，及其所需要的参数，通常就表示为一个对象。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const sampleCommand = {  action: &quot;arrangeViewing&quot;,   params: [&#39;Tesla 3&#39;, &#39;1337&#39;]};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;As you can see, the command defines the action. This corresponds to the method that is on our control object. In the example above, our sample command is taking the action “arrangeViewing”. It also passes the required params to arrangeViewing: &lt;strong&gt;model&lt;/strong&gt; and &lt;strong&gt;carId&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如你所见，一个&lt;strong&gt;命令&lt;/strong&gt;就定义着一个行为， 这与我们在控制对象当中的方法是一致的。在上面的例子中，我们的命令就是执行 “arrangeViewing” 行为。与此同时它也给 arrangeViewing 传入了两个必需的参数：&lt;strong&gt;model&lt;/strong&gt; 和 &lt;strong&gt;carId&lt;/strong&gt;。&lt;/p&gt;&lt;h3 id=&quot;the-executor--执行器&quot;&gt;&lt;strong&gt;The Executor&lt;/strong&gt; | &lt;strong&gt;执行器&lt;/strong&gt;&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;The next thing we need is an interface to executes commands. Lets give our Sales control an execution function. For this function I wanted to write a generic executor that can accept and receiver. The executors job is pass the command to the receiver and call our business logic.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;接下来我们需要做的就是一个执行命令的接口。让我们来给 Sales 控制器加上一个执行函数。对这个函数来说我想要实现一个能够用于接收的通用执行器，以及接收器。执行器的职责就是传入命令给接收器，并且调用我们的业务逻辑。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/** + A generic execute function + Takes a receiver and a command **/export default function execute(receiver, command) {  return receiver[command.action] &amp;amp;&amp;amp; receiver[command.action](...command.params);}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Now we can execute commands from anywhere at any time!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在我们无论在何时何地都可以执行这些命令了。&lt;/p&gt;&lt;h3 id=&quot;make-things-happen--让奇迹发生&quot;&gt;&lt;strong&gt;Make things happen&lt;/strong&gt; | 让奇迹发生&lt;/h3&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import execute from &#39;executor.js&#39;;import TeslaSalesControl from &#39;receiver.js&#39;;    // Arrange a viewingexecute(TeslaSalesControl, {  action: &quot;arrangeViewing&quot;,  param: [&quot;Model S&quot;, &quot;123&quot;]});// Request Infoexecute(TeslaSalesControl, {  action: &quot;requestInfo&quot;,  param: [&quot;Model S Battery&quot;, &quot;123342&quot;]});// Buy a Car!execute(TeslaSalesControl, {  action: &quot;buyVehicle&quot;,  param: [&quot;Tesla 3&quot;, &quot;23243425&quot;]});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Thats it, now how does this compare to Redux! In Redux:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;就是这样，现在让我们来对比一下 Redux！在 Redux 中：&lt;/p&gt;&lt;h2 id=&quot;the-store--the-receiver--store-即接收器&quot;&gt;The Store = The Receiver | Store 即接收器&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;The Store is instantiated with “&lt;strong&gt;reducers&lt;/strong&gt;”, descriptions on how the Store change. These reducers are pure functions that when called return a new state rather than causing mutations in place. This allows you to have highly predictable and testable code.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Store 会根据 “&lt;strong&gt;reducers&lt;/strong&gt;” 进行初始化，描述 Store 是如何变化的。这些 reducers 都是一些纯函数，每当被调用的时候都会返回一个新的 state，而不会导致莫名其妙地发生变化。这使得我们的代码具有高度的可预测性以及可测试性。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { combineReducers } = &#39;redux&#39;;function arrangeViewing(state, action) {  switch(action.type) {    case &quot;ARRANGE_VIEWING&quot;:      const { model, id } = action.data;      return `${model} and ${id}`    default:      return &quot;&quot;  }}function requestInfo(state, action) {  switch(action.type) {    case &quot;REQUEST_INFO&quot;:      const { model, id } = action.data;      return `${model} and ${id}`    default:      return &quot;&quot;  }}function buyVehicle(state, action) {  switch(action.type) {    case &quot;BUY_VEHICLE&quot;:      const { model, id } = action.data;      return `${model} and ${id}`    default:      return false  }}const rootReducer = combineReducers({  arrangeViewing,  requestInfo,  buyVehicle});export default rootReducer;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;.&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { applyMiddleware, createStore } from &#39;redux&#39;;import createLogger from &#39;redux-logger&#39;;import ReduxThunk from &#39;redux-thunk&#39;;import rootReducer from &#39;../imports/client/reducers/rootReducer&#39;;// create a loggerconst logger = createLogger();const middleware = [ReduxThunk, logger];const Store = createStore(rootReducer, {}, applyMiddleware(...middleware));export default Store;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;the-action--the-command--action-即命令&quot;&gt;The Action = The Command | Action 即命令&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;The action object represents the description of the command and parameters it needs to execute our state change.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Action 对象则代表着对命令的描述，以及它在执行 state 更改时所需要的参数。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const sampleActionObject = {  type: &quot;BUY_CAR&quot;,  data: {    model: &quot;TESLA&quot;,    id: &quot;1234&quot;  }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;dispatch--executor--dispatch-即执行器&quot;&gt;Dispatch = Executor | Dispatch 即执行器&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;The difference between vanilla Flux and Redux, is the dispatch is a method of the store. The Store can dispatch actions to change the state of our application.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;普通的 Flux 和 Redux 之间的区别，就在于 dispatch 属于 store 当中的一个方法。Store 可以直接分派 action 从而改变我们应用程序的 state。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Store from &#39;store&#39;;Store.dispatch({  type: &quot;ARRANGE_VIEWING&quot;,  data: {    model: &quot;Model S&quot;,    id: &quot;123&quot;  }});Store.dispatch({  type: &quot;REQUEST_INFO&quot;,  data: {    model: &quot;Model S Battery&quot;,    id: &quot;123342&quot;  }});Store.dispatch({  type: &quot;BUY_VEHICLE&quot;,  data: {    model: &quot;TESLA 3&quot;,    id: &quot;23243425&quot;  }});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;As you can see, pretty similar right!? Knowing the Command Pattern makes learning Redux a lot easier! Trust me!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如你所见，非常相似是不是！？弄懂了命令模式可以让 Redux 的学习变得容易很多！相信我！&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Design Patterns in general help you stay rooted in your application architecture!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;总之，设计模式会帮助你掌握应用程序架构的本质！&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*kvdXC-IpoTjaXeuHcaVGuQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;原文地址：&lt;a href=&quot;https://medium.com/@abhiaiyer/the-command-pattern-c51292e22ea7&quot;&gt;Redux and The Command Pattern (Apr 7, by Abhi Aiyer)&lt;/a&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/react-v15-the-big-and-great-latest-version",
            "title"      : "【译】Facebook 正式发布 ReactJS v15.0 稳定版",
            "category"   : "前端",
            "tags"       : "React, Release",
            "url"        : "/2016-04-08-react-v15-the-big-and-great-latest-version/",
            "path"       : "_posts/前端/2016-04-08-react-v15-the-big-and-great-latest-version.md",
            "next"       : "/2016-04-19-redux-and-the-command-pattern/",
            "previous"   : "/2016-03-28-js-moudle-history-and-webpack-in-action/",
            "date"       : "2016-04-08 00:00:00 +0000",
            "shortdate"  : "April 08, 2016",
            "content"    : "&lt;p&gt;原文地址：&lt;a href=&quot;https://facebook.github.io/react/blog/2016/04/07/react-v15.html&quot;&gt;React v15.0 (April 7, 2016 by Dan Abramov)&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;We would like to thank the React community for reporting issues and regressions in the release candidates on our &lt;a href=&quot;https://github.com/facebook/react/issues/&quot;&gt;issue tracker&lt;/a&gt;. Over the last few weeks we fixed those issues, and now, after two release candidates, we are excited to finally release the stable version of React 15.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们想要特别感谢 React 社区对已发布的候选版本所作出的贡献，谢谢你们在 GitHub 上的 &lt;a href=&quot;https://github.com/facebook/react/issues/&quot;&gt;issue 追踪系统&lt;/a&gt; 中所提供的反馈和支持。在过去的几个星期，我们修复了这些 issues，历经两个候选版本后，在此我们非常兴奋地发布最终的 React 15 稳定版。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;As a reminder, &lt;a href=&quot;https://facebook.github.io/react/blog/2016/02/19/new-versioning-scheme.html&quot;&gt;we’re switching to major versions&lt;/a&gt; to indicate that we have been using React in production for a long time. This 15.0 release follows our previous 0.14 version and we’ll continue to follow semver like we’ve been doing since 2013. It’s also worth noting that &lt;a href=&quot;https://facebook.github.io/react/blog/2016/01/12/discontinuing-ie8-support.html&quot;&gt;we no longer actively support Internet Explorer 8&lt;/a&gt;. We believe React will work in its current form there but we will not be prioritizing any efforts to fix new issues that only affect IE8.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;作为纪念，&lt;a href=&quot;https://facebook.github.io/react/blog/2016/02/19/new-versioning-scheme.html&quot;&gt;我们特意切换到一个比较大的版本之上&lt;/a&gt;，以象征我们已经在产品环境下使用了很长时间的 React。这次 15.0 版本的发布紧随之前的 0.14 版本而来，就像我们自 2013 年以来所做的那样，我们将继续关注着 SemVer (&lt;a href=&quot;http://abdulapopoola.com/2015/10/26/what-is-semver/&quot;&gt;What’s Semantic Versioning&lt;/a&gt;) 版本。另外值得关注的就是我们不再积极支持 &lt;a href=&quot;https://facebook.github.io/react/blog/2016/01/12/discontinuing-ie8-support.html&quot;&gt;Internet Explorer 8&lt;/a&gt; 了，我们相信 React 在现有的形态下可以很好地工作，而我们将不会再优先修复仅在 IE8 出现的新问题了。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;React 15 brings significant improvements to how we interact with the DOM:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;React 15 在如何与 DOM 进行交互这方面提供了重大改善：&lt;/p&gt;&lt;blockquote&gt;  &lt;ul&gt;    &lt;li&gt;We are now using &lt;code class=&quot;highlighter-rouge&quot;&gt;document.createElement&lt;/code&gt; instead of setting &lt;code class=&quot;highlighter-rouge&quot;&gt;innerHTML&lt;/code&gt; when mounting components. This allows us to get rid of the &lt;code class=&quot;highlighter-rouge&quot;&gt;data-reactid&lt;/code&gt; attribute on every node and make the DOM lighter. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;document.createElement&lt;/code&gt; is also faster in modern browsers and fixes a number of edge cases related to SVG elements and running multiple copies of React on the same page.&lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;现在我们在装载组件的时候将使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.createElement&lt;/code&gt; 而不是去设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;innerHTML&lt;/code&gt; 。这使得我们摆脱了每个节点上的 &lt;code class=&quot;highlighter-rouge&quot;&gt;data-reactid&lt;/code&gt; 属性，从而保持 DOM 更加轻量级。在现代浏览器中使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.createElement&lt;/code&gt; 性能也会更快，与此同时修复了与 SVG 元素相关的一系列边缘问题，以及支持在同一页面同时运行多个 React 拷贝。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;ul&gt;    &lt;li&gt;Historically our support for SVG has been incomplete, and many tags and attributes were missing. We heard you, and in React 15 we &lt;a href=&quot;https://github.com/facebook/react/pull/6243&quot;&gt;added support for all the SVG attributes that are recognized by today’s browsers&lt;/a&gt;. If we missed any of the attributes you’d like to use, please &lt;a href=&quot;https://github.com/facebook/react/issues/1657&quot;&gt;let us know&lt;/a&gt;. As a bonus, thanks to using &lt;code class=&quot;highlighter-rouge&quot;&gt;document.createElement&lt;/code&gt;, we no longer need to maintain a list of SVG tags, so any SVG tags that were previously unsupported should work just fine in React 15.&lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;过往我们对 SVG 的支持不够完善，缺失了很多标签和属性。我们听从意见，所以在 React 15 当中&lt;a href=&quot;https://github.com/facebook/react/pull/6243&quot;&gt;添加了对当今浏览器所识别的所有 SVG 属性的支持&lt;/a&gt;。如果我们遗漏了任何你可能会用到的属性，麻烦&lt;a href=&quot;https://github.com/facebook/react/issues/1657&quot;&gt;告知我们&lt;/a&gt;。作为奖励，得益于使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.createElement&lt;/code&gt;，我们将不再需要维护一连串的 SVG 标签了，所以任何之前无法被支持的 SVG 标签在 React 15 当中都可以很好地工作。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;ul&gt;    &lt;li&gt;We received some amazing contributions from the community in this release, and we would like to highlight &lt;a href=&quot;https://github.com/facebook/react/pull/5753&quot;&gt;this pull request&lt;/a&gt; by &lt;a href=&quot;https://github.com/mwiencek&quot;&gt;Michael Wiencek&lt;/a&gt; in particular. Thanks to Michael’s work, React 15 no longer emits extra &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt; nodes around the text, making the DOM output much cleaner. This was a longstanding annoyance for React users so it’s exciting to accept this as an outside contribution.&lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;我们本次版本发布当中，也得到了一些非常优秀的社区贡献，我们觉得应当特别强调一下由 &lt;a href=&quot;https://github.com/mwiencek&quot;&gt;Michael Wiencek&lt;/a&gt; 所提供的这个 &lt;a href=&quot;https://github.com/facebook/react/pull/5753&quot;&gt;pull request&lt;/a&gt;。归功于 Michael，React 15 不再需要为文本单独包裹一层额外的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 节点，这使得 DOM 输出更加整洁了。这是一个困扰 React 用户已久的问题，所以这是所采纳的一个非常令人兴奋的外部贡献。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;p&gt;While this isn’t directly related to the release, we understand that in order to receive more community contributions like Michael’s, we need to communicate our goals and priorities more openly, and review pull requests more decisively. As a first step towards this, we started publishing &lt;a href=&quot;https://github.com/reactjs/core-notes&quot;&gt;React core team weekly meeting notes&lt;/a&gt; again. We also intend to introduce an RFC process inspired by &lt;a href=&quot;https://github.com/emberjs/rfcs&quot;&gt;Ember RFCs&lt;/a&gt; so external contributors can have more insight and influence in the future development of React. We will keep you updated about this on our blog.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;尽管这不与本次的发布直接相关，但是我们明白，为了接受更多 Michael 这样来自于社区的贡献，我们需要更加开放地传达我们的目标和优先级，并且更加果断地审查 pull request。为此我们所做的第一步就是，我们开始再次公布 &lt;a href=&quot;https://github.com/reactjs/core-notes&quot;&gt;React 核心团队每周会议记录&lt;/a&gt;。我们也有打算引入一种名为 RFC 的流程，启发自 &lt;a href=&quot;https://github.com/emberjs/rfcs&quot;&gt;Ember RFCs&lt;/a&gt;，从而外部贡献者们能够对 React 的未来开发工作提供更多的意见和影响力。我们将会在博客中通知后续事宜。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;We are also experimenting with a new changelog format in this post. Every change now links to the corresponding pull request and mentions the author. Let us know whether you find this useful!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们也在本篇博文当中试验一种新的 changelog 格式，每一个修改现在都会链接到相对应的 pull request，并且提及相关作者。请让我们知道这是否有效！&lt;/p&gt;&lt;h2 id=&quot;upgrade-guide--升级指南&quot;&gt;Upgrade Guide | 升级指南&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;As usual with major releases, React 15 will remove support for some of the patterns deprecated nine months ago in React 0.14. We know changes can be painful (the Facebook codebase has over 20,000 React components, and that’s not even counting React Native), so we always try to make changes gradually in order to minimize the pain.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;跟以往的大版本更新一样，在九个月前所发布的 React 0.14 版本中标记为废弃的一些模式，将会在React 15 当中被彻底移除。我们知道这很痛苦（Facebook 代码库中有着超过 20,000 的 React 组件，这还不包括 React Native 的数量），所以我们就一直都在尝试着逐步修改，就是为了尽量减少这种痛苦。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;If your code is free of warnings when running under React 0.14, upgrading should be easy. The bulk of changes in this release are actually behind the scenes, impacting the way that React interacts with the DOM. The other substantial change is that React now supports the full range of SVG elements and attributes. Beyond that we have a large number of incremental improvements and additional warnings aimed to aid developers. We’ve also laid some groundwork in the core to bring you some new capabilities in future releases.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你的代码在 React 0.14 版本下没有任何警告的话，那么本次升级将会非常容易。本次发布的大部分更改实际上都在幕后，影响着 React 与 DOM 的交互，其他的重要修改就是现在的 React 全面支持了 SVG 的元素和属性。在此之外，我们还有着大量的增量改进和旨在帮助开发人员的额外警告。我们已经在核心部分也奠定了一些基础，以便于在将来的版本当中给你带来一些新的功能。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;See the changelog below for more details.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;（从原文）查看 &lt;a href=&quot;https://facebook.github.io/react/blog/#installation&quot;&gt;changelog&lt;/a&gt; 以便得知更多详情。&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;原文地址：&lt;a href=&quot;https://facebook.github.io/react/blog/2016/04/07/react-v15.html&quot;&gt;React v15.0 (April 7, 2016 by Dan Abramov)&lt;/a&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/js-moudle-history-and-webpack-in-action",
            "title"      : "前端模块化小史，Webpack 入门",
            "category"   : "演讲",
            "tags"       : "Webpack, JavaScript, 工程化",
            "url"        : "/2016-03-28-js-moudle-history-and-webpack-in-action/",
            "path"       : "_posts/演讲/2016-03-28-js-moudle-history-and-webpack-in-action.md",
            "next"       : "/2016-04-08-react-v15-the-big-and-great-latest-version/",
            "previous"   : "/2016-03-13-webpack-in-action/",
            "date"       : "2016-03-28 00:00:00 +0000",
            "shortdate"  : "March 28, 2016",
            "content"    : "&lt;p&gt;30 min = 15 min * 2&lt;/p&gt;&lt;p&gt;[slide data-on-enter=”incallback”]&lt;/p&gt;&lt;div id=&quot;incallback&quot; style=&quot;margin-bottom: 30px; font-size: 60px;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;incallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Done is better than perfect.  -  via Facebook&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;incallback&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Welcome to my session!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;前端模块化小屎史webpack-入门&quot;&gt;前端模块化小~~屎~~史，Webpack 入门&lt;/h1&gt;&lt;p&gt;&lt;small&gt;by &lt;strong&gt;Jimmy Lv&lt;/strong&gt;&lt;/small&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;模块化管理&quot;&gt;模块化管理？&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;javascript-模块化&quot;&gt;JavaScript 模块化&lt;/h1&gt;&lt;hr /&gt;&lt;ul&gt;  &lt;li&gt;ES6 Module {:&amp;amp;.fadeIn}&lt;/li&gt;  &lt;li&gt;CommonJS&lt;/li&gt;  &lt;li&gt;AMD&lt;/li&gt;  &lt;li&gt;UMD&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide data-on-leave=”outcallback”]&lt;/p&gt;&lt;h1 id=&quot;现在即未来es6-模块规范&quot;&gt;现在即未来：ES6 模块规范&lt;/h1&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// profile.js&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Michael&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Jackson&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;I am &#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;,&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`I am &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// main.js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./profile&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./profile&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;民间两大规范&quot;&gt;民间两大规范&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;CommonJS: 同步加载，主要用于 NodeJS &lt;strong&gt;服务器&lt;/strong&gt;端；&lt;/li&gt;  &lt;li&gt;AMD: 异步加载，通过 RequireJS 等工具适用于&lt;strong&gt;浏览器&lt;/strong&gt;端。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;过去式commonjs-规范&quot;&gt;过去式：CommonJS 规范&lt;/h1&gt;&lt;blockquote&gt;  &lt;p&gt;NodeJS: &lt;del&gt;JavaScript 要逆袭！我是窜天&lt;/del&gt; 🐵，&lt;del&gt;我要上天！&lt;/del&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;firstModule&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//playing code...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anotherModule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;javascript-组件发布平台npm&quot;&gt;JavaScript 组件发布平台：NPM&lt;/h1&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;🐒🐒🐒🐒🐒：前端项目要是能在&lt;strong&gt;浏览器&lt;/strong&gt;中更方便地使用 &lt;strong&gt;NPM 资源&lt;/strong&gt;就好了！&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;过去式amd-规范&quot;&gt;过去式：AMD 规范&lt;/h1&gt;&lt;blockquote&gt;  &lt;p&gt;即 (Asynchronous Module Definition) {:&amp;amp;.pull-right}&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;firstModule&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//playing code...&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anotherModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;browserifyjs&quot;&gt;Browserify.js&lt;/h1&gt;&lt;blockquote&gt;  &lt;p&gt;🐒🐒🐒🐒🐒：要是能在浏览器使用 &lt;em&gt;require&lt;/em&gt; 同步语法加载 NPM 模块就好了！&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;firstModule&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//playing code...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anotherModule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;firstModule&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//playing code...&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anotherModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;通用模式umd&quot;&gt;「通用」模式：UMD&lt;/h1&gt;&lt;blockquote&gt;  &lt;p&gt;即 (Universal Module Definition) {:&amp;amp;.pull-right}&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;function&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;amd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// AMD&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;jquery&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;object&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// Node, CommonJS&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;jquery&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 浏览器全局变量(root 即 window)&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;returnExports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//    方法&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//    暴露公共方法&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;前端工程化需求&quot;&gt;前端工程化需求&lt;/h1&gt;&lt;blockquote&gt;  &lt;p&gt;前端模块化框架肩负着 模块管理、资源加载 两项重要的功能，这两项功能与工具、性能、业务、部署等工程环节都有着非常紧密的联系。因此，模块化框架的设计应该最高优先级考虑工程需要。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;依赖管理 {:&amp;amp;.rollIn}&lt;/li&gt;  &lt;li&gt;按需加载&lt;/li&gt;  &lt;li&gt;请求合并&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;关键原因就在于&lt;a href=&quot;https://github.com/fouber/blog/issues/4&quot;&gt;「纯前端方式只能在运行时分析依赖关系」&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;新思路不在运行时分析依赖&quot;&gt;新思路：「不」在运行时分析依赖。&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;借助构建工具来做线下分析:&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;利用构建工具在线下进行模块依赖分析，然后把依赖关系数据写入到构建结果中，并调用模块化框架的依赖关系声明接口，实现模块管理、请求合并以及按需加载等功能。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;主角webpack&quot;&gt;主角：Webpack&lt;/h1&gt;&lt;blockquote&gt;  &lt;p&gt;「任何静态资源都可以视作模块，然后模块之间还可以相互依赖。」&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://webpack.github.io/assets/what-is-webpack.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;特性&quot;&gt;特性&lt;/h1&gt;&lt;ol&gt;  &lt;li&gt;兼容CommonJS 、 AMD 、ES6语法 {:&amp;amp;.rollIn}&lt;/li&gt;  &lt;li&gt;支持打包 JS、CSS、图片等资源文件&lt;/li&gt;  &lt;li&gt;串联式 loader 以及插件机制&lt;/li&gt;  &lt;li&gt;独立配置文件 &lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/li&gt;  &lt;li&gt;代码切割 chunk，实现按需加载&lt;/li&gt;  &lt;li&gt;支持 SourceUrls 和 SourceMaps&lt;/li&gt;  &lt;li&gt;具有强大的 Plugin 接口，使用灵活&lt;/li&gt;  &lt;li&gt;支持异步 IO 并具有多级缓存，增量编译速度快&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;一个简单的-react-例子&quot;&gt;一个简单的 React 例子&lt;/h1&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// hello.js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// entry.js&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./hello&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Jimmy&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;webpack-配置文件&quot;&gt;Webpack 配置文件&lt;/h1&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;path&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./src/entry.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./assets&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;        &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bundle.js&#39;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;na&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;babel-loader&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/node_modules/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;        &lt;span class=&quot;na&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;打包完毕&quot;&gt;打包完毕&lt;/h1&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// index.html&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;React Sample&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./assets/bundle.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;实战重构现有项目&quot;&gt;实战：重构现有项目&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;代码热加载&lt;/li&gt;  &lt;li&gt;配置 NPM Script&lt;/li&gt;  &lt;li&gt;babel-loader: 预编译 ES6&lt;/li&gt;  &lt;li&gt;ng-annotate-loader: 确保依赖安全注入&lt;/li&gt;  &lt;li&gt;less-loader: 使用 Less 替换 CSS&lt;/li&gt;  &lt;li&gt;ngtemplate-loader: String 化 HTML 模板&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;代码热加载webpack-dev-server&quot;&gt;代码热加载：webpack-dev-server&lt;/h1&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;webpack-dev-server&lt;/strong&gt; 是一个基于 Express.js 框架的静态资源 Web 服务器。开发服务器会监听每一个文件的变化，进行实时打包，并推送通知给前端页面，从而实现自动刷新。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;webpack/hot/dev-server&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./assets&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bundle.js&#39;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;默认端口 8080：&lt;a href=&quot;localhost:8080/webpack-dev-server/&quot;&gt;localhost:8080/webpack-dev-server/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;配置-npm-script&quot;&gt;配置 NPM Script&lt;/h1&gt;&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;webpack -w --bail --display-error-details&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;webpack-dev-server --history-api-fallback --hot --inline --progress&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;webpack -p&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run dev &lt;span class=&quot;c&quot;&gt;# 提供 watch 方法，实时进行打包更新并打印出错信息&lt;/span&gt;npm start &lt;span class=&quot;c&quot;&gt;# 启动服务器，浏览器直接访问的是 index.html&lt;/span&gt;npm run build &lt;span class=&quot;c&quot;&gt;# 输出 production 环境下的压缩打包代码&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;babel-loader-预编译-es6&quot;&gt;babel-loader 预编译 ES6&lt;/h1&gt;&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/\.js$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/node_modules/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;ng-annotate!babel?presets=es&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./style/base.less&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;angular&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ngRoute&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;angular-route&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;githubService&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./app/services/githubService&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MainCtrl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./app/controllers/mainController&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Components&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./app/components/components.module&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;ng-annotate-loader-依赖安全注入&quot;&gt;ng-annotate-loader 依赖安全注入&lt;/h1&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$routeParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;&#39;ngInject&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$onInit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$http&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$routeParams&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;base64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ngInject&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...}]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;使用-less-替换-css&quot;&gt;使用 Less 替换 CSS&lt;/h1&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;less$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;style!css!less&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;eot|woff|woff2|ttf|svg&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)(\?\S&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;url?limit=100000&amp;amp;name=./fonts/[name].[ext]&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;png|jpe&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;g|gif&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;url-loader?limit=8192&amp;amp;name=./images/[hash].[ext]&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;../../node_modules/font-awesome/css/font-awesome.css&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;../../assets/styles/bootstrap.css&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;../../assets/styles/yue.css&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;../../assets/styles/base.less&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;string-化-html-模板&quot;&gt;String 化 HTML 模板&lt;/h1&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;html$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;ngtemplate!html?attrs[]=img:src img:ng-src&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./post.less&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./post.html&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;pageContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;showToc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;&#39;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./post/post&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;app.note&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;post&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;angularjs-组件结构&quot;&gt;AngularJS 组件结构&lt;/h1&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/├── app.js├── commons│   ├── commons.module.js│   ├── footer│   │   ├── footer.html│   │   └── footer.js│   ├── header│   │   ├── header.html│   │   ├── header.js│   │   └── header.less├── configs│   ├── app.config.js│   ├── app.routes.js│   ├── app.run.js│   └── configs.module.js├── features│   ├── features.module.js│   ├── apps│   │   ├── apps.html│   │   └── apps.js│   └── note│       ├── note.html│       ├── note.js│       ├── note.less│       ├── note.module.js│       ├── page│       │   ├── page.html│       │   ├── page.js│       │   └── page.less│       ├── post│       │   ├── post.html│       │   ├── post.js│       │   └── post.less└── services    ├── githubService.js    ├── musicService.js    └── services.module.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;越痛苦的事情越要早做&quot;&gt;「越痛苦的事情越要早做」&lt;/h1&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;path&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;webpack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;webpack&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;webpack/hot/dev-server&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./app/app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./dist&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bundle.js&#39;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;js$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/node_modules/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;ng-annotate?add=true!babel-loader&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;css$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;style!css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;less$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;style!css!less&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;eot|woff|woff2|ttf|svg&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)(\?\S&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;url?limit=100000&amp;amp;name=./fonts/[name].[ext]&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;png|jpe&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;g|gif&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;url-loader?limit=8192&amp;amp;name=./images/[hash].[ext]&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;html$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;ngtemplate!html?attrs[]=img:src img:ng-src&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;noParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;webpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HotModuleReplacementPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;.json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;s1&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./pages/build/react&#39;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;modulesDirectories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;node_modules&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bower_components&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;nobackend-website&quot;&gt;&lt;a href=&quot;http://nobackend.website&quot;&gt;NoBackend Website&lt;/a&gt;&lt;/h1&gt;&lt;hr /&gt;&lt;iframe data-src=&quot;http://nobackend.website&quot; src=&quot;about:blank;&quot;&gt;&lt;/iframe&gt;",
            "excerpt"    : "&lt;p&gt;30 min = 15 min * 2&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/webpack-in-action",
            "title"      : "搞定 Webpack (2)：使用 Webpack 大幅提升前端开发体验",
            "category"   : "前端",
            "tags"       : "Webpack, Angular, 重构, 工程化, DX",
            "url"        : "/2016-03-13-webpack-in-action/",
            "path"       : "_posts/前端/2016-03-13-webpack-in-action.md",
            "next"       : "/2016-03-28-js-moudle-history-and-webpack-in-action/",
            "previous"   : "/2016-03-10-getting-webpack-done-and-js-module-history/",
            "date"       : "2016-03-13 00:00:00 +0000",
            "shortdate"  : "March 13, 2016",
            "content"    : "&lt;h2 id=&quot;安装运行热加载&quot;&gt;安装，运行，热加载&lt;/h2&gt;&lt;p&gt;首先当然是安装，当然是使用更加符合中国社会主义国情的 &lt;a href=&quot;http://npm.taobao.org/&quot;&gt;CNPM&lt;/a&gt; 来安装，道理大家都懂的。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cnpm install webpack webpack-dev-server -g&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-dev-server&lt;/code&gt; 是一个基于 Express.js 框架的静态资源 Web 服务器，对于简单静态页面或者仅依赖于独立服务的前端页面，都可以直接使用这个开发服务器进行开发。在开发过程中，开发服务器会监听每一个文件的变化，进行实时打包，并且可以推送通知前端页面代码发生了变化，从而可以实现页面的自动刷新。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在项目根目录下添加最基本的 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt; 配置文件，运行 Webpack 时则会默认加载该文件内的配置。如果要指定另外的配置文件，可以执行：&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack --config webpack.custom.config.js&lt;/code&gt;，进阶的用法就是在不同环境下，可以通过 Script 指定不同的 Webpack 打包策略。代码热加载功能当然也必不可少，只需要将 &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;webpack/hot/dev-server&#39;&lt;/code&gt; 加入到 &lt;code class=&quot;highlighter-rouge&quot;&gt;entry&lt;/code&gt; 当中，Webpack 模块下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;dev-server.js&lt;/code&gt; 就可以跟项目代码共同打包到一起了：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module.exports = {    entry: {        app: [&#39;webpack/hot/dev-server&#39;, &#39;./app.js&#39;]    },    output: {        path: &#39;./assets&#39;,        filename: &#39;bundle.js&#39;    },    ...}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;然而！没想到一来就出错了：&lt;code class=&quot;highlighter-rouge&quot;&gt;Module not found: Error: Cannot resolve module ‘webpack/hot/dev-server’&lt;/code&gt;，从&lt;a href=&quot;http://react-china.org/t/module-not-found-error-cannot-resolve-module-webpack-hot-dev-server/4454&quot;&gt;这个链接&lt;/a&gt;得知需要将 Webpack 直接安装到当前项目依赖当中，前面所提到的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;webpack/hot/dev-server&#39;&lt;/code&gt; 其实就对应 &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/webpack/&lt;/code&gt; 目录当中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;dev-server.js&lt;/code&gt; 文件。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cnpm install webpack --save--dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;至此，就可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-dev-server&lt;/code&gt; 命令直接启动服务了，默认启动端口 8080，通过 &lt;a href=&quot;localhost:8080/webpack-dev-server/&quot;&gt;localhost:8080/webpack-dev-server/&lt;/a&gt; 路径就可以访问到页面了，文件修改后会在页面头部看到 Sever 的状态变化，并且会进行热替换，实现页面的自动刷新。&lt;/p&gt;&lt;p&gt;对于 React 的配置来说稍有所不同，参考文章 &lt;a href=&quot;https://segmentfault.com/a/1190000002551952#articleHeader10&quot;&gt;https://segmentfault.com/a/1190000002551952#articleHeader10&lt;/a&gt;，还可以实现组件级的刷新，甚至不用刷新整个页面，所以就&lt;a href=&quot;http://blog.jimmylv.info/2016-02-21-Chinese-Version-of-React.js-Best-Practices-for-2016#title17&quot;&gt;避免了在调试的时候每次刷新都要重新来过的痛苦&lt;/a&gt;。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;entry: [  &#39;webpack-dev-server/client?http://0.0.0.0:8080&#39;, // WebpackDevServer host and port  &#39;webpack/hot/only-dev-server&#39;,  &#39;./scripts/index&#39; // Your appʼs entry point]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;配置-npm-script&quot;&gt;配置 NPM Script&lt;/h2&gt;&lt;p&gt;程序员总是要学会偷懒的并且应当「以偷懒为傲」，在开发过程中所发现的重复工作都应该利用构建工具来实现自动化，常见的前端构建工具可能有 Grunt/Gulp 之流，辅于各类插件就可以实现很多工程构建功能了。但其实利用 webpack 本身的模块打包能力及其各式各样的 loader 和插件，我们甚至无需引入 Grunt/Gulp 就可以满足前端的工程构建需求，比如预处理、编译、混淆、压缩、打包等等。我们就直接借助 NPM Script 来进一步简化和管理 Webpack 的相关命令。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;scripts&quot;: {    &quot;build&quot;: &quot;webpack -w --bail --display-error-details&quot;,    &quot;start&quot;: &quot;webpack-dev-server --history-api-fallback --hot --inline --progress&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;打包，启动：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run build # 提供 watch 方法，实时进行打包更新并打印出错信息npm start # 启动服务器，浏览器直接访问的是 index.html&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;重构项目代码&quot;&gt;重构项目代码&lt;/h2&gt;&lt;p&gt;先就一股脑把所有 loader 都安装好吧，我之后会再一一介绍每个 loader 所提供的预处理功能：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cnpm install babel-core babel-loader style-loader css-loader less-loader file-loader url-loader html-loader ng-annotate-loader ngtemplate-loader --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;然后在 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt; 配置文件当中添加每种文件类型所对应的 loader 以及参数配置：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module: {    loaders: [      {test: /\.js$/, exclude: /node_modules/, loader: &#39;ng-annotate?add=true!babel-loader&#39;},      {test: /\.css$/, loader: &quot;style!css&quot;},      {test: /\.less$/, loader: &quot;style!css!less&quot;},      {test: /\.(eot|woff|woff2|ttf|svg)(\?\S*)?$/, loader: &#39;url?limit=100000&amp;amp;name=./fonts/[name].[ext]&#39;},      {test: /\.(png|jpe?g|gif)$/, loader: &#39;url-loader?limit=8192&amp;amp;name=./images/[hash].[ext]&#39;},      {test: /\.html$/, loader: &#39;ngtemplate!html?attrs[]=img:src img:ng-src&#39;}    ],    noParse: []},&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;babel-loader-预编译-es6&quot;&gt;babel-loader 预编译 ES6&lt;/h3&gt;&lt;p&gt;即便现在的浏览器并没有实现多少 ES6 语法规范的功能，但是在 Babel 等转译工具的引领之下，ES6 的普及速度也远比想象中要快得多得多。很不幸地又遇到了问题，&lt;code class=&quot;highlighter-rouge&quot;&gt;You may need an appropriate loader to handle this file type&lt;/code&gt;，但是非常棒的是，Webpack 能够实时打印出错误信息，似乎是因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;babel-loader&lt;/code&gt; 没有正确地解析到 ES6 语法。参考 Babel &lt;a href=&quot;[http://babeljs.io/docs/setup/#webpack]&quot;&gt;官方文档&lt;/a&gt;，需要首先安装 es2015 预处理模块，再给 babel-loader 添加相应的 &lt;code class=&quot;highlighter-rouge&quot;&gt;es2015&lt;/code&gt; 参数。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cnpm install babel-preset-es2015 --save-devecho &#39;{ &quot;presets&quot;: [&quot;es2015&quot;] }&#39; &amp;gt; .babelrc # 也可以直接写 loader 参数里。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;结果犯了个小错误，漏掉在 loaders 上一层写 module 了，实为罪过啊喂，折腾了半天。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module: {    loaders: [      {test: /\.js$/, exclude: /node_modules/, loader: &#39;ng-annotate!babel-loader&#39;}    ]},&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;与此同时，把之前放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;bower_components&lt;/code&gt; 底下的模块全部转移到 &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; 文件夹底下，抛弃 Bower，统一使用 NPM 进行前端的依赖管理。接下来就可以使用 ES6 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;export default&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;import from&lt;/code&gt; 语法导入相关依赖了：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require (&#39;./style/base.less&#39;);import angular from &#39;angular&#39;import ngRoute from &#39;angular-route&#39;import githubService from &#39;./app/services/githubService&#39;import MainCtrl from &#39;./app/controllers/mainController&#39;import Components from &#39;./app/components/components.module&#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;虽说 Webpack 对 CommonJS，AMD 和 ES6 模块都做了兼容，但依然有一些只使用 Angular 模块所定义的插件，这就没办法通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; 导入了，还是只能通过 HTML 脚本的传统方式引入，待我再想想解决办法，好像 Webpack 还可以对模块做 &lt;a href=&quot;https://webpack.github.io/docs/shimming-modules.html&quot;&gt;Shimming 处理&lt;/a&gt; 摊手 ┑(￣Д ￣)┍&lt;/p&gt;&lt;h3 id=&quot;ng-annotate-loader-确保依赖安全注入&quot;&gt;ng-annotate-loader 确保依赖安全注入&lt;/h3&gt;&lt;p&gt;一个小坑：添加 Angular &lt;code class=&quot;highlighter-rouge&quot;&gt;$inject&lt;/code&gt; 的压缩插件，&lt;a href=&quot;https://www.npmjs.com/package/ng-annotate-loader&quot;&gt;https://www.npmjs.com/package/ng-annotate-loader&lt;/a&gt;，官方文档没有更新，应该用 &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt; 符号来联接多个 loader。&lt;/p&gt;&lt;p&gt;然后就只需要在函数参数的下面添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;ngInject&#39;;&lt;/code&gt; 注释，就可以被自动转化为安全的数组写法了，从而保证了变量名被压缩之后依旧能够通过数组中的字符串找到相对应的依赖：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;controller($http, $routeParams, base64) {    &#39;ngInject&#39;;    var vm = this;    vm.$onInit = () =&amp;gt; {        ...    }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;使用这个 loader 之后的压缩效果如下：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;controller:[&quot;$http&quot;,&quot;$routeParams&quot;,&quot;base64&quot;,function(e,t,n){&quot;ngInject&quot; ...}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;使用-less-替换-css&quot;&gt;使用 Less 替换 CSS&lt;/h3&gt;&lt;p&gt;Webpack 最棒的一点就是将 JavaScript、CSS、 字体、图片等资源文件统统视为模块，所有的静态文件都支持打包。配合 loader 加载器，就可以支持 Sass，Less 等 CSS 预处理器，而且串联式模块加载器以及插件机制就使得处理流程特别地灵活。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{test: /\.less$/, loader: &quot;style!css!less&quot;},&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;添加 Less 相关的 loader 便可以使用 Less 语法来书写样式了，所支持的&lt;a href=&quot;http://lesscss.org/features/#features-overview-feature&quot;&gt;扩展语法&lt;/a&gt;可以说大大提高了编程效率，也提高了 CSS 代码的可读性。干掉了项目所依赖的遗留文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;app.min.css&lt;/code&gt; 之后，不得不说边改代码边自动刷新的感觉实在太爽啦，当然需要注意的是修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt; 里边的代码时还是需要重启一下 Webpack。&lt;/p&gt;&lt;p&gt;值得一提的是在 CSS 文件（比如 BootStrap 和 FontAwesome 等依赖）引用自定义字体的时候，需要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;url-loader&lt;/code&gt; 来对相关字体进行预处理，并且可以设置相关参数比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;limit&lt;/code&gt; 来限制文件大小，以及 &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; 参数来指定字体文件被打包到的具体文件路径。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{test: /\.(eot|woff|woff2|ttf|svg)(\?\S*)?$/, loader: &#39;url?limit=100000&amp;amp;name=./fonts/[name].[ext]&#39;},{test: /\.(png|jpe?g|gif)$/, loader: &#39;url-loader?limit=8192&amp;amp;name=./images/[hash].[ext]&#39;},&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;string-化-html-模板&quot;&gt;String 化 HTML 模板&lt;/h3&gt;&lt;p&gt;在 AngularJS 1.x 里边儿可以使用单独的 HTML 文件来作为组件模板，我在重构的时候首先使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;raw-loader&lt;/code&gt; 来直接 &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; 组件所对应的模板文件，其效果就是将该 HTML 文件在引入 JS 之前就转化成了字符串，所以在 Angular 当中只需指定 &lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt; 属性即可，并且都不再需要写相对路径了，&lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;./features/note/note.html&#39;&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;./note.html&#39;&lt;/code&gt;。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export default  {  template: require(&#39;./note.html&#39;),  bindings: {    postContent: &#39;&amp;lt;&#39;,    siteInfo: &#39;&amp;lt;&#39;,    index: &#39;&amp;lt;&#39;  },  ...}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;然后第二种方案就直接更进一步了，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ngtemplate-loader&lt;/code&gt; 来使用 AngularJS 的模板 Cache 功能，其原理也是将 HTML 文件转化为 String 并保存在 JavaScript 代码当中，所以就可以通过 ID 的形式来获取模板字符串，从而免去了页面刷新后重新加载 HTML 模板文件的时间了。在 HTTP 2.0 还没有普及之前，哪怕减少一个 HTTP request 也是能够在一定程度上减少客户端浏览器进行网络请求的压力，特别是在渣渣网速的移动设备上。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{test: /\.html$/, loader: &#39;ngtemplate!html?attrs[]=img:src img:ng-src&#39;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;从而我们的写法又变成了 &lt;code class=&quot;highlighter-rouge&quot;&gt;templateUrl&lt;/code&gt; 的形式，但是最终 Angular 组件的 HTML 模板都已经被保存在了 JS 当中，这其实又跟 React 的 JSX 语法和 Angular 2.0 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Component&lt;/code&gt; 殊途同归了。并且在组件化的思想越发清晰之后，反而会觉得在不同的 JS、CSS、HTML 文件之间进行跳转实在太麻烦，而且并没有什么必要。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export default {  transclude: true,  templateUrl: require(&#39;./post.html&#39;),  bindings: {    pageContent: &#39;&amp;lt;&#39;,    showToc: &#39;&amp;lt;&#39;  },&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;想起了 Vue 组件化的代码组织就是将三种类型的代码放在同一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.vue&lt;/code&gt; 文件当中，实乃明智之举啊，开发体验一定很棒，我已经厌倦了每次修改一个组件却要频繁辗转于 3 个以上的文件了。&lt;/p&gt;&lt;p&gt;最后，整个 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt; 配置文件在&lt;a href=&quot;https://github.com/JimmyLv/nobackend.website/blob/gh-pages/webpack.config.js&quot;&gt;这里&lt;/a&gt;，欢迎围观 &lt;a href=&quot;https://github.com/JimmyLv/nobackend.website&quot;&gt;nobackend.website&lt;/a&gt; 这个项目：&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;A powerful rich interactive web application by using nobackend tech stack.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;&lt;p&gt;我司一位前辈谈 CI/CD 的时候有句话说到：&lt;strong&gt;「越痛苦的事情越要早做」&lt;/strong&gt;。在我做个人项目的时候，虽然听说了 Yoman，Gulp，Webpack 等前端构建神器，但迟迟都没有行动起来去真正用起来，还是在傻傻地在 HTML 标签里面直接引入 JavaScript 和 CSS 文件，而且每次修改文件之后还习惯性得 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd + R&lt;/code&gt; 手动刷新，现在看来真是一个大写的「傻~~逼~~」。「越痛苦的事情越要早做」，虽然折腾了很久的 Webpack 终于是把开发的基础设施搭好了，但是一旦配置完成就可以一劳永逸地享受着源源不断的开发快感，真是太棒！&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;http://www.shmck.com/webpack-angular-part-1/&quot;&gt;Webpack &amp;amp; Angular: Part 1 - Part 3&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/dmachat/angular-webpack-cookbook/wiki&quot;&gt;dmachat/angular-webpack-cookbook&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://angular-tips.com/blog/2015/06/using-angular-1-dot-x-with-es6-and-webpack/&quot;&gt;Using Angular 1.x With ES6 and Webpack&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/AngularClass/NG6-starter/blob/master/webpack.config.js&quot;&gt;AngularClass/NG6-starter&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;h2 id=&quot;安装运行热加载&quot;&gt;安装，运行，热加载&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/getting-webpack-done-and-js-module-history",
            "title"      : "搞定 Webpack (1)：前端模块化实践小史与 Webpack 入门",
            "category"   : "前端",
            "tags"       : "Webpack, 工程化, JavaScript",
            "url"        : "/2016-03-10-getting-webpack-done-and-js-module-history/",
            "path"       : "_posts/前端/2016-03-10-getting-webpack-done-and-js-module-history.md",
            "next"       : "/2016-03-13-webpack-in-action/",
            "previous"   : "/2016-03-08-introduction-of-angular-new-features-by-examples/",
            "date"       : "2016-03-10 00:00:00 +0000",
            "shortdate"  : "March 10, 2016",
            "content"    : "&lt;h2 id=&quot;javascript-模块化管理&quot;&gt;JavaScript 模块化管理&lt;/h2&gt;&lt;h3 id=&quot;未来即现在es6-模块&quot;&gt;未来即现在：ES6 模块&lt;/h3&gt;&lt;p&gt;via &lt;a href=&quot;http://es6.ruanyifeng.com/#docs/module&quot;&gt;《ECMAScript 6 入门》 —— 阮一峰&lt;/a&gt;：&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;历史上，JavaScript一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如Ruby的require、Python的import，甚至就连CSS都有@import，但是JavaScript任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;在ES6之前，社区制定了一些模块加载方案，最主要的有CommonJS和AMD两种。前者用于服务器，后者用于浏览器。ES6在语言规格的层面上，实现了模块功能，而且实现得相当简单，完全可以取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;ES6模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD模块，都只能在运行时确定这些东西。比如，CommonJS模块就是对象，输入时必须查找对象属性。&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// profile.jsvar firstName = &#39;Michael&#39;;var lastName = &#39;Jackson&#39;;var year = 1958;export {firstName, lastName, year};// main.jsimport {firstName, lastName, year} from &#39;./profile&#39;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;—&lt;em&gt;然而那是未来，我们来看看过去，以及现在&lt;/em&gt;—&lt;/p&gt;&lt;h3 id=&quot;commonjsamd以及-umd&quot;&gt;CommonJS，AMD，以及 UMD&lt;/h3&gt;&lt;p&gt;CommonJS 和 AMD 就在在 JavaScript 还没有模块管理的情况下民间所制定的两大规范，前者定义的是模块的同步加载，主要用于 NodeJS；而后者则是异步加载，通过 RequireJS 等工具适用于浏览器。&lt;/p&gt;&lt;p&gt;众所周知，NodeJS 的出现使 JavaScript 一下子有了新的用武之地，同时在 NodeJS 推动下的 CommonJS 模块系统也是逐渐深入人心。使用 CommonJS 的写法大致如下：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var firstModule = require(&quot;firstModule&quot;);//your code...module.export = anotherModule&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;但是&lt;/strong&gt;，随着 NPM 成为主流的 JavaScript 组件发布平台，越来越多的前端项目也依赖于 NPM 上的项目，或者自身就会发布到 NPM 平台。因此，让前端项目&lt;strong&gt;在浏览器中更方便地使用 NPM 上的资源&lt;/strong&gt;成为一大需求。&lt;/p&gt;&lt;p&gt;而浏览器加载脚本的方式天生不支持同步的加载，无法通过文件 I/O 同步的方式 require 加载一个 JavaScript 脚本。所以就&lt;a href=&quot;https://leohxj.gitbooks.io/front-end-database/content/javascript-modules/modules-tools-compare.html&quot;&gt;从 CommonJS 中逐渐分裂出了 AMD&lt;/a&gt;，即 Asynchronous Module Definition，属于&lt;strong&gt;异步加载&lt;/strong&gt;的模块机制。这个在浏览器环境有很好支持的 module 规范，其中最有代表性的实现则是 RequireJS。使用 Require.js 的写法大致如下：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;define([&#39;firstModule&#39;], function(module) {    //your code...    return anotherModule})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;其实我们单比较写法，就知道 CommonJS 是更为优秀的。它是一种同步的写法，对 Human 友好，而且代码也不会繁琐臃肿。而 Browserify 工具的出现，则满足了在浏览器当中直接使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;require()&lt;/code&gt; 的同步语法加载 NPM 模块的需求。&lt;/p&gt;&lt;p&gt;既然 CommonJS 和 AMD 风格非常流行，似乎就缺少了一个统一的规范。所以人们产生了这样的需求，希望能够同时支持两种风格的「通用」模式，而 UMD (Universal Module Definition) 即通用模块规范的出现，就是希望提供一个前后端跨平台的解决方案(支持 AMD 与 CommonJS 模块方式)。&lt;/p&gt;&lt;p&gt;不得不承认，这个模式略难看，但是它兼容了 AMD 和 CommonJS，同时还支持老式的「全局」变量规范：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(function (root, factory) {    if (typeof define === &#39;function&#39; &amp;amp;&amp;amp; define.amd) {        // AMD        define([&#39;jquery&#39;], factory);    } else if (typeof exports === &#39;object&#39;) {        // Node, CommonJS之类的        module.exports = factory(require(&#39;jquery&#39;));    } else {        // 浏览器全局变量(root 即 window)        root.returnExports = factory(root.jQuery);    }}(this, function ($) {    //    方法    function myFunc(){};    //    暴露公共方法    return myFunc;}));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;UMD 的实现其实很简单：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;先判断是否支持 AMD（&lt;code class=&quot;highlighter-rouge&quot;&gt;define&lt;/code&gt; 是否存在），存在则使用 AMD 方式加载模块。&lt;/li&gt;  &lt;li&gt;再判断是否支持 Node.js 模块格式（&lt;code class=&quot;highlighter-rouge&quot;&gt;exports&lt;/code&gt; 是否存在），存在则使用 Node.js 模块格式。&lt;/li&gt;  &lt;li&gt;前两个都不存在，则将模块公开到全局（window 或 global）。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;只能在运行时分析依赖&quot;&gt;只能在运行时分析依赖？&lt;/h3&gt;&lt;p&gt;以上所提到的类似于 RequireJS 等模块化框架在工程方面都依旧存在缺点，其关键原因就在于&lt;a href=&quot;https://github.com/fouber/blog/issues/4&quot;&gt;&lt;strong&gt;「纯前端方式只能在运行时分析依赖关系」&lt;/strong&gt;&lt;/a&gt;，不能同时满足&lt;strong&gt;按需加载&lt;/strong&gt;，&lt;strong&gt;请求合并&lt;/strong&gt;和&lt;strong&gt;依赖管理&lt;/strong&gt;这三个需求。&lt;/p&gt;&lt;p&gt;既然根本问题出在运行时分析依赖，那么新思路的策略就很简单了：不在运行时分析依赖。当然，这就要借构建工具来做线下分析了，其基本原理就是：利用构建工具&lt;strong&gt;在线下进行模块依赖分析&lt;/strong&gt;，然后把依赖关系数据写入到构建结果中，并调用模块化框架的依赖关系声明接口，实现模块管理、请求合并以及按需加载等功能。&lt;/p&gt;&lt;h2 id=&quot;资源模块化&quot;&gt;资源模块化&lt;/h2&gt;&lt;h3 id=&quot;webpack-的特性介绍&quot;&gt;Webpack 的特性介绍&lt;/h3&gt;&lt;p&gt;长久以来，Web 开发者都是把所需的 Javascript、CSS 等文件一股脑放进 HTML 里边儿，这对于庞大的项目来说管理起来非常麻烦，也无法满足前端在模块管理、资源加载等方面的工程需求。&lt;/p&gt;&lt;p&gt;而在 Webpack 当中，最酷的一点就是将 Web 开发中常用的如 JavaScript、CSS 以及图片、字体等各种静态文件统称为模块，并对它们进行统一的模块化加载，预处理以及打包发布，从而让开发过程变得更为高效。而且，&lt;strong&gt;任何静态资源都可以视作模块，然后模块之间还可以相互依赖&lt;/strong&gt;，通过 Webpack 对模块进行处理后，就可以打包成我们想要的静态资源。其官方主页用下面这张图来说明 Webpack 的作用：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://webpack.github.io/assets/what-is-webpack.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;就像前面所提到的那样，Webpack 具有和 RequireJS， Browserify 等模块化工具相类似的功能，但还有更多独有的新特性：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;对 CommonJS 、 AMD 、ES6的语法做了兼容，以及特殊模块的 Shim 处理，也就是说基本可以无痛迁移旧项目。&lt;/li&gt;  &lt;li&gt;对 JS、CSS、图片等资源文件都支持打包，配合 loader 加载器，也可以支持 Sass，Less 等 CSS 预处理器。&lt;/li&gt;  &lt;li&gt;串联式模块加载器以及插件机制，让其具有更好的灵活性和扩展性，例如通过 babel-loader 就可以直接使用 ES6 的模块机制（当然 &lt;a href=&quot;https://gist.github.com/sokra/27b24881210b56bbaff7&quot;&gt;Webpack 2 将会直接支持 ES6 模块&lt;/a&gt;）。&lt;/li&gt;  &lt;li&gt;有独立的配置文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt;，并可以根据环境的不同加载特定的配置文件，配置好就可以一劳永逸了。&lt;/li&gt;  &lt;li&gt;可以将代码切割成不同的 chunk，实现按需加载，有效利用浏览器的缓存功能提升性能，从而降低了初始化时间，提高用户体验。&lt;/li&gt;  &lt;li&gt;支持 SourceUrls 和 SourceMaps，即使打包在一起依旧方便调试。&lt;/li&gt;  &lt;li&gt;具有强大的 Plugin 接口，大多是内部插件，使用起来比较灵活。&lt;/li&gt;  &lt;li&gt;Webpack 使用异步 IO 并具有多级缓存。这使得 Webpack 很快且在增量编译上更加快。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;简单来说，Webpack 可以把你的应用代码分离成许多文件，如果你有许多页面在你的单页应用里面，用户只需要下载当前页面所需要的代码。如果你跳转到另一个页面，他们不需要重新加载通用的代码。与此同时也能替代 Grunt 或者 Gulp 大部分的功能，因为它自己就可以构建和打包 CSS，预处理 CSS，编译 JS 和打包处理图片，甚至更多事情。&lt;/p&gt;&lt;h3 id=&quot;一个简单的-react-例子&quot;&gt;一个简单的 React 例子&lt;/h3&gt;&lt;p&gt;首先来安装我们的主角 Webpack：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cnpm i webpack -g&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;虽然在目前的情况下，浏览器还未完全支持 ES6 新特性，当我们依旧可以通过 Webpack 的 babel-loader 来将 ES6 语法预编译成现在浏览器都已经支持的 ES5 代码。首先使用 ES6 定义一个简单的 React 组件：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// hello.jsimport React, {Component} from &#39;react&#39;;class Hello extends Component {    render(){        return (            &amp;lt;div&amp;gt;Hello, {this.props.name}!&amp;lt;/div&amp;gt;        );    }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;entry.js&lt;/code&gt; 作为应用的入口文件，将一个 Hello 组件输出到界面：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// entry.jsimport React from &#39;react&#39;;import Hello from &#39;./hello&#39;;React.render(&amp;lt;Hello name=&quot;Nate&quot; /&amp;gt;, document.body);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt; 文件通常放在项目的根目录中，它本身也是一个标准的 CommonJS 规范的模块：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var path = require(&#39;path&#39;);module.exports = {    entry: path.resolve(__dirname, &#39;./src/entry.js&#39;),    output: {        path: path.resolve(__dirname, &#39;./assets&#39;),        filename: &#39;bundle.js&#39;    },    module: {        loaders: [            { test: /\.js?$/, loaders: [&#39;babel&#39;], exclude: /node_modules/ },            { test: /\.js$/, loader: &#39;babel-loader&#39;, exclude: /node_modules/}        ]    },    resolve:{        extensions:[&#39;&#39;,&#39;.js&#39;,&#39;.json&#39;]    },};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;可以看到，&lt;code class=&quot;highlighter-rouge&quot;&gt;entry&lt;/code&gt;参数和&lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt;参数分别定义了输入输出文件的位置及名字，定义好的所有入口文件都会打包生成一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;filename&lt;/code&gt; 文件，然后就只需要在 HTML 文件中引入打包完成的 &lt;code class=&quot;highlighter-rouge&quot;&gt;./assets/bundle.js&lt;/code&gt; 即可。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// index.html&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;React Sample&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./assets/bundle.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;整个代码在&lt;a href=&quot;https://github.com/dwqs/react_practice/tree/master/react-sample&quot;&gt;这里&lt;/a&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt; 之后切换到 react-sample 目录下，在终端运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i &amp;amp;&amp;amp; npm run build&lt;/code&gt; 即可进行打包。更多有关 Webpack 的详细设置请参考原文章，&lt;a href=&quot;https://segmentfault.com/a/1190000003970448&quot;&gt;详解前端模块化工具-Webpack&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&quot;reference最佳实践&quot;&gt;Reference：最佳实践&lt;/h2&gt;&lt;p&gt;Webpack 最酷的就是按「模块」预处理，最终按需打包，官方提供了很多很好用的 &lt;a href=&quot;http://webpack.github.io/docs/list-of-loaders.html&quot;&gt;loader&lt;/a&gt; 和 &lt;a href=&quot;https://webpack.github.io/docs/list-of-plugins.html&quot;&gt;plugins&lt;/a&gt;。化繁为简，结合 NPM Script 及其庞大的生态圈就可以搞定几乎全部的前端构建需求了，从而大幅度提升了开发体验。前端也在工程化的道路上越走越远，刀耕火种的时代正在慢慢改善，能够见证并参与其中享受着创造的乐趣，真是一件幸事。&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;http://webpack.github.io/docs/tutorials/getting-started/&quot;&gt;Getting Started - Webpack&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://qiutc.me/post/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8webpack%E2%80%94webpack-howto.html&quot;&gt;如何使用webpack —— webpack-howto&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.html-js.com/article/Webpack%203009&quot;&gt;Webpack，101入门体验&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000003970448&quot;&gt;详解前端模块化工具 Webpack&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002551952&quot;&gt;Webpack 入门指迷 —— 题叶&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004511992&quot;&gt;基于webpack的前端工程化开发之多页站点篇（一）&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;h2 id=&quot;javascript-模块化管理&quot;&gt;JavaScript 模块化管理&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/introduction-of-angular-new-features-by-examples",
            "title"      : "升级 AngularJS 1.5：新特性对比与最佳实践",
            "category"   : "前端",
            "tags"       : "AngularJS, JavaScript",
            "url"        : "/2016-03-08-introduction-of-angular-new-features-by-examples/",
            "path"       : "_posts/前端/2016-03-08-introduction-of-angular-new-features-by-examples.md",
            "next"       : "/2016-03-10-getting-webpack-done-and-js-module-history/",
            "previous"   : "/2016-02-21-Chinese-Version-of-React.js-Best-Practices-for-2016/",
            "date"       : "2016-03-08 00:00:00 +0000",
            "shortdate"  : "March 08, 2016",
            "content"    : "&lt;h2 id=&quot;图谋不轨帮助勾引开发者过渡到-angular-20&quot;&gt;图谋不轨：帮助（&lt;del&gt;勾引&lt;/del&gt;）开发者过渡到 Angular 2.0&lt;/h2&gt;&lt;p&gt;私以为，本次更新最重要的两个部分就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.component()&lt;/code&gt; 方法和支持了 Multi-slot 的 transclusion：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;组件与 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;angular.component()&lt;/code&gt;&lt;/strong&gt; 方法：&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;首先最大的一个变化就是引入了组件的概念，并新增了 &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.component()&lt;/code&gt; 方法。经过这么长时间的摸爬滚打，Angular 社区乃至整个前端领域也慢慢地总结出了符合实际项目开发的最佳实践，其中最大的一个共识就是组件化，在 Angular 1.x 中我们就已经可以通过元素指令的方式定义可复用的组件，而其实 Components 就是一种特别的元素指令，通过自定义的 HTML 元素将之激活。&lt;/p&gt;&lt;p&gt;本次更新的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.component()&lt;/code&gt; 方法其实就是一种更加方便定义元素指令的方式，并自带默认配置使之符合最佳实践。而组件开发的方式也就使应用更加符合 &lt;a href=&quot;http://www.angular.io/&quot;&gt;Angular 2.0&lt;/a&gt; 的架构风格，所以说，Angular 1.5 就是为了方便开发者能够更加顺利地过渡到 Angular 2.0。为了 Angular 2.0 的未来 Google 也是迫不得已啊，要知道很多前端开发者在经历过 Angular 1.x 的「折磨」过后都转投了其他框架的怀抱。可以说前有 &lt;a href=&quot;https://github.com/facebook/react&quot;&gt;React.js&lt;/a&gt; 携着组件化，虚拟 DOM ，单向数据流等利器，给前端 UI 构建掀起了一波声势浩大的函数式新潮流；后有 &lt;a href=&quot;http://vuejs.org/&quot;&gt;Vue.js&lt;/a&gt; 等更轻便的 MVVM 框架穷追猛赶，据说用过 Vue 的开发者都一致叫好。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1466241519959.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;终于支持了 &lt;strong&gt;Multi-slot transclusion&lt;/strong&gt;：&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在之前，使用 Directive 定义组件的时候老是感觉有点儿憋屈，我们的组件只有一个 transclusion 也就是说只能在一个地方被填充，这就完全限制乃至丧失了组件的模板自定义功能。在构建复杂组件元素的时候，也就需要更多类似于 &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-if&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-switch&lt;/code&gt; 等方式辅助，从而导致组件模板的样板文件越来越多。而 &lt;strong&gt;Multi-slot transclusion&lt;/strong&gt; 则可以把自定义的主动权交出去，我并不需要知道这个地方会变成什么样，我只需要告诉你这个地方能够被填充就好了。当然，新版本也支持了默认的 transclusion 内容，这也就让配置组件模板的成本进一步降低了。&lt;/p&gt;&lt;h2 id=&quot;举个栗子angularcomponent&quot;&gt;举个栗子：&lt;code class=&quot;highlighter-rouge&quot;&gt;angular.component()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;需要说明的就是，没有什么事是 Component 能做而 Directive 不能够做的，下面就来看个对比的例子：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;my-component first-name=&quot;&#39;Alan&#39;&quot; last-name=&quot;&#39;Rickman&#39;&quot;&amp;gt;&amp;lt;/my-component&amp;gt;myModule.component(&#39;myComponent&#39;, {  template: &#39;&amp;lt;h1&amp;gt;Hello &amp;lt;/h1&amp;gt;&#39;,  bindings: {    firstName: &#39;&amp;lt;&#39;,    lastName: &#39;&amp;lt;&#39;  },  controller: function() {    this.getFullName = function() {      return this.firstName + &#39; &#39; + this.lastName;    };  }});myModule.directive(&#39;myComponent&#39;, function() {    return {        restrict: &#39;E&#39;,        template: &#39;&amp;lt;h1&amp;gt;Hello &amp;lt;/h1&amp;gt;&#39;,        scope: {},        bindToController: {            firstName: &#39;&amp;lt;&#39;,            lastName: &#39;&amp;lt;&#39;        },        controller: function() {            this.getFullName = function() {                return this.firstName + &#39; &#39; + this.lastName;            };        },        controllerAs: &#39;ctrl&#39;    })};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;.component()&lt;/code&gt; 方法定义的组件默认就是一个元素组件，并且拥有自己的独立 Scope。与此同时使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;bindings&lt;/code&gt; 替代了 &lt;code class=&quot;highlighter-rouge&quot;&gt;bindToController&lt;/code&gt;，并且可以通过 ‘&amp;lt;’ 符号单向绑定一个变量，即只有父 Scope 的变化会影响子 Scope 的值，这样也就避免了一些 Scope 黑魔法所造成的误伤。还有比较重要的就是，组件拥有默认为空的 Controller 方法，并且不需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;controllerAs&lt;/code&gt; 语法就可以在模板中直接使用默认的 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ctrl&lt;/code&gt; 别名。更多详细对比请看&lt;a href=&quot;https://docs.angularjs.org/guide/component&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;&lt;h3 id=&quot;新的-oninit-生命周期&quot;&gt;新的 &lt;code class=&quot;highlighter-rouge&quot;&gt;$onInit()&lt;/code&gt; 生命周期&lt;/h3&gt;&lt;p&gt;新加入 AngularJS 豪华午餐的 &lt;code class=&quot;highlighter-rouge&quot;&gt;$onInit()&lt;/code&gt; 方法，其实就 相当于 React 组件的 &lt;a href=&quot;https://facebook.github.io/react/docs/component-specs.html#lifecycle-methods&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount()&lt;/code&gt;&lt;/a&gt; 方法，在组件内 Controller 初始化的时候统一加载数据。其实这种方式在之前的版本当中，已经被约定俗成作为一种最佳实践了，可以参考 &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide&quot;&gt;johnpapa/angular-styleguide&lt;/a&gt; 中所提到的 &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1%2Fi18n%2Fzh-CN.md#controller-activation-promises&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;activate()&lt;/code&gt;&lt;/a&gt; 方法。只不过 AngularJS 1.5 进一步提供了官方的支持，&lt;code class=&quot;highlighter-rouge&quot;&gt;$onInit()&lt;/code&gt; 方法会在组件及其所有 binding 初始化之后被 compiler 调用，从而我们就有了一个清晰的地方统一存放数据初始化的逻辑。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;controller: function ($location, githubService) {  &#39;ngInject&#39;;  var vm = this;  vm.$onInit = function () {    githubService.getConfig().then(res =&amp;gt;      vm.config = res.data    );    githubService.getIndex().then(res =&amp;gt;      vm.posts = res.data.paginator    );  };}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;当然，这也更加便于用户向  Angular 2.0 迁移，如果你对 Angular 2.0 的&lt;a href=&quot;https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html&quot;&gt;生命周期&lt;/a&gt;有所了解的话，这里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;$onInit()&lt;/code&gt; 其实就等同于 &lt;code class=&quot;highlighter-rouge&quot;&gt;ngOnInit&lt;/code&gt; 函数。&lt;/p&gt;&lt;h3 id=&quot;controlleras-语法是什么鬼&quot;&gt;ControllerAs 语法是什么鬼？&lt;/h3&gt;&lt;p&gt;AngularJS 在早些版本引入了 &lt;code class=&quot;highlighter-rouge&quot;&gt;controllerAs&lt;/code&gt; 语法，相当于给 ViewModel 定义了一个命名空间，从而避免了不同层级 Scope 关系的混淆不清。并且，&lt;code class=&quot;highlighter-rouge&quot;&gt;controllerAs&lt;/code&gt;语法也更加从语法层面上体现了 Controller 初始化 ViewModel 数据的单一职责，若把 &lt;code class=&quot;highlighter-rouge&quot;&gt;as&lt;/code&gt; 看做面向对象编程当中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;，其实就相当于将 Controller 这个 Function() 进行实例化，从而我们就拥有了 ViewModel 这么一个可以在模板当中直接使用的对象。而其实现原理，则是直接把这个对象再次挂在当前 Controller 所对应的 $scope 之上，可以试着在 &lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt; 方法里边儿判断一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ctrl === $scope.vm&lt;/code&gt;，其结果为 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div ng-controller=&quot;MainCtrl as main&quot;&amp;gt;    &amp;lt;my-component        first-name=&quot;&#39;Alan&#39;&quot;        last-name=&quot;&#39;Rickman&#39;&quot;        name=&quot;main.name&quot;&amp;gt;    &amp;lt;/my-component&amp;gt;&amp;lt;/div&amp;gt;myModule.controller(&#39;MainCtrl&#39;, function () {  this.name = &#39;JimmyLv&#39;;});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1466241548419.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;但与此同时，在指令使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;controllerAs&lt;/code&gt; 语法也会遇到问题：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myModule.directive(&#39;myComponent&#39;, {  restrict: &#39;E&#39;,  template: &#39;&amp;lt;h1&amp;gt;Hello  to &amp;lt;/h1&amp;gt;&#39;,  scope: {    firstName: &#39;@&#39;,    lastName: &#39;&amp;lt;&#39;,    name: &#39;=&#39;  },  controller: function($scope) {    this.getFullName = function() {      return this.firstName + &#39; &#39; + this.lastName;    };      this.name = &#39;Pascal&#39;;      $scope.$watch(&#39;name&#39;, function (newValue) {        this.name = newValue;      }.bind(this));  },  controllerAs: &#39;ctrl&#39;});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;当某一个变量需要双向绑定的时候，我们不得已重新使用只有挂载在 $scope 底下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;$watch()&lt;/code&gt; 方法来动态监测这个值在指令当中是否发生了改变，好不容易消失的 $scope 又出来丢人现眼了。也就是因为这个原因，Angular 又加入新的 &lt;code class=&quot;highlighter-rouge&quot;&gt;bindToController&lt;/code&gt; 语法，从字面上就很容易看懂它的意思，即将这个变量直接绑定到指令自带的 Controller，从而也就不用 &lt;code class=&quot;highlighter-rouge&quot;&gt;$watch()&lt;/code&gt; 方法了，至此，彻底摆脱了 $scope。&lt;/p&gt;&lt;h3 id=&quot;再论-scope-黑魔法&quot;&gt;再论 Scope 黑魔法&lt;/h3&gt;&lt;p&gt;在 AngularJS 当中，Scope 可以说是最难理解也是最强大的一部分，在没有理解其背后原理的时候感觉处处都是坑，理解过后又觉得 Angular 恰恰因此而获得了 JavaScript 原型继承的强大力量。首先，子 Scope 总是会自动继承自父 Scope，一切的源头就是所谓的 &lt;code class=&quot;highlighter-rouge&quot;&gt;$rootScope&lt;/code&gt;，试着把它在 console 里面打印出来，可以看到其 &lt;code class=&quot;highlighter-rouge&quot;&gt;$id&lt;/code&gt; 为 1，之后的所有子 Scope &lt;code class=&quot;highlighter-rouge&quot;&gt;$id&lt;/code&gt; 依次增加。&lt;/p&gt;&lt;p&gt;回到正题，我们来看看指令当中的 Scope，对于指令来说会有三种情况：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scope: false&lt;/code&gt; —— 定义指令时 &lt;code class=&quot;highlighter-rouge&quot;&gt;.directive()&lt;/code&gt; 的默认设置，此时不会创建子 Scope，将会直接共享父 Scope，所以说没有理解的时候就可能出现莫名其妙改变了上一层 Scope 当中某个值的情况。&lt;/li&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scope: { ... }&lt;/code&gt; —— 创建新的「独立」 Scope，但是不会继承父 Scope，当需要传入某些值的时候，只需要在花括号当中写入该变量名称以及绑定方式即可，1.5 新版本增加了单向绑定，所以共有四种方式：’@’、’&amp;lt;’、’=’、’&amp;amp;’，而这在 &lt;code class=&quot;highlighter-rouge&quot;&gt;.component()&lt;/code&gt; 创建组件的时候是默认的，Scope 永远都是隔离的，通过绑定变量和方法的方式定义组件的输入输出，这一点之后会提到。&lt;/li&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scope: true&lt;/code&gt; —— 创建新的「独立」 Scope 并且继承自父 Scope，所以说能够在 Directive 当中访问到所有父 Scope 当中的值。其原理需要大家去理解一下 JavaScript 的原型链，就能够明白 Angular 是如何一层层往上查找并获得该变量的值了。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;理想的组件树&quot;&gt;（理想的）组件树&lt;/h3&gt;&lt;p&gt;理想情况下，整个 Web 应用就是一颗组件树，并且每个组件都有着非常的输入输出，数据流从根部扩散至每个部分，很少会出现双向绑定的情况。通过这种方式，就可以很容易预测数据的改变会如何影响到 UI 组件的状态改变。&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;&lt;strong&gt;组件只能控制自身的输入输出&lt;/strong&gt;：组件绝不应该修改不属于自身 Scope 的任何数据和 DOM。通常来说，Angular 通过 Scope 继承的方式提供了随时随处可修改数据的能力。但其实，当修改数据职责不清晰的时候就会导致问题，这也就是为什么组件指令要默认使用独立 Scope，从而避免了跨 Scope 操作的可能，&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;&lt;strong&gt;组件应该拥有清晰的公共API - Inputs 和 Outputs&lt;/strong&gt;：隔离 Scope 的方式也难以避免 Angular 的双向绑定，如果你通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;bindings: {item: &#39;=&#39;}&lt;/code&gt; 这种方式将一个对象传入组件，你依然可以改变父组件当中的属性。所以说，组件应该只能修改属于它自己的数据，这样的话就很容易控制什么时候要进行修改，以及为什么要修改。所以说纯粹的组件 Inputs 应该只使用 ‘&amp;lt;’ 和 ‘@’ 单向数据绑定，而 Outputs 应当通过 ‘&amp;amp;’ 进行函数方法的绑定，作为组件内事件的 callbacks。&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;比如说一个删除操作，组件不再直接操作输入的数据，而是去调用正确的 Outputs 事件来改变数据，这就意味着组件不会删除数据本身，而是通过事件的形式将其返回到拥有该数据的组件当中。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;button ng-click=&quot;$ctrl.onDelete({hero: $ctrl.hero})&quot;&amp;gt;Delete&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;通过这种方式，父组件就可以根据这个事件再来决定最终的操作，比如说彻底删除该项数据，或者只是更新自己的属性而已。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctrl.deleteHero(hero) {  $http.delete(...).then(function() {    var idx = ctrl.list.indexOf(hero);    if (idx &amp;gt;= 0) {      ctrl.list.splice(idx, 1);    }  });}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;ngroute-路由的-resolve&quot;&gt;ngRoute 路由的 &lt;code class=&quot;highlighter-rouge&quot;&gt;$resolve&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;我们都知道，Controller 应该保持初始化 ViewModel 的单一职责，不应该把数据获取的逻辑放入 Controller，所以说在进入 Controller 之前数据就应该已经准备好了。最通常的办法就是将数据在 Route 的时候就 Resolve 出来，而 ngRoute 也提供了非常方便的方式来获取 &lt;code class=&quot;highlighter-rouge&quot;&gt;$resolve&lt;/code&gt; 当中的数据并将其传入组件。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var myMod = angular.module(&#39;myMod&#39;, [&#39;ngRoute&#39;]);myMod.component(&#39;home&#39;, {  template: &#39;&amp;lt;h1&amp;gt;Home&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Hello,  !&amp;lt;/p&amp;gt;&#39;,  bindings: {    user: &#39;&amp;lt;&#39;  }});myMod.config(function($routeProvider) {  $routeProvider.when(&#39;/&#39;, {    template: &#39;&amp;lt;home user=&quot;$resolve.user&quot;&amp;gt;&amp;lt;/home&amp;gt;&#39;,    resolve: {      user: function($http) { return $http.get(&#39;...&#39;); }    }  });});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;多个-slot-的-transclusion&quot;&gt;多个 slot 的 Transclusion&lt;/h2&gt;&lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;transclude: {...}&lt;/code&gt; 的方式就可以直接定义支持多个 slot 的 transclusion，而以往我们只能设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;transclude: true&lt;/code&gt; 而且只能定义一个 transclusion。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myMod.controller(&#39;ExampleController&#39;, [&#39;$scope&#39;, function($scope) {    $scope.title = &#39;Lorem Ipsum&#39;;    $scope.link = &#39;https://google.com&#39;;    $scope.text = &#39;Neque porro quisquam est qui dolorem ipsum quia dolor...&#39;;  }]).directive(&#39;pane&#39;, function(){    return {      restrict: &#39;E&#39;,      transclude: {        &#39;title&#39;: &#39;?paneTitle&#39;,        &#39;body&#39;: &#39;paneBody&#39;,        &#39;footer&#39;: &#39;?paneFooter&#39;      },      template: &#39;&amp;lt;div ng-transclude=&quot;title&quot;&amp;gt;Fallback Title&amp;lt;/div&amp;gt;&#39; +                &#39;&amp;lt;p ng-transclude=&quot;body&quot;&amp;gt;&amp;lt;/p&amp;gt;&#39; +                &#39;&amp;lt;div ng-transclude=&quot;footer&quot;&amp;gt;Fallback Footer&amp;lt;/div&amp;gt;&#39;    };});&amp;lt;div ng-controller=&quot;ExampleController as ctrl&quot;&amp;gt;    &amp;lt;input ng-model=&quot;ctrl.title&quot;&amp;gt;    &amp;lt;textarea ng-model=&quot;ctrl.text&quot;&amp;gt;&amp;lt;/textarea&amp;gt;    &amp;lt;pane&amp;gt;        &amp;lt;pane-title&amp;gt;            &amp;lt;a ng-href=&quot;&quot;&amp;gt;&amp;lt;/a&amp;gt;        &amp;lt;/pane-title&amp;gt;        &amp;lt;pane-body&amp;gt;&amp;lt;/pane-body&amp;gt;    &amp;lt;/pane&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;首先可以看到 &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-transclude=&quot;footer&quot;&lt;/code&gt; 这一部分，我们可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;footer&#39;: &#39;?paneFooter&#39;&lt;/code&gt; 当中的问号形式表明这个 transclusion 其实是可选的，在组件模板当中已经有了默认值。而其他两部分，通过自定义 HTML 的方式可以任意得传入我们想要填充的模板，这带来的一个明显好处就是，不需要再把一些不必要的值都统统传进去了，比如说这里的``，我们在上一层进行计算过后就直接替换了 ng-transclusion 的位置。&lt;/p&gt;&lt;p&gt;而我们再来看看不使用 Multi-slot transclusion 定义 Component 的方式，不但需要传入所有的值，而且更重要的是丧失了定义 HTML 模板的机会，而这种能力在定义不同形式的复杂组件时是非常重要的。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myMod.component(&#39;pane&#39;, function(){    return {      template: &#39;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&#39; +                &#39;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&#39; +                &#39;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&#39;,      bindings: {        &#39;title&#39;: &#39;&amp;lt;paneTitle&#39;,        &#39;body&#39;: &#39;&amp;lt;paneBody&#39;,        &#39;footer&#39;: &#39;&amp;lt;?paneFooter&#39;      }    };})&amp;lt;div ng-controller=&quot;ExampleController as ctrl&quot;&amp;gt;  &amp;lt;input ng-model=&quot;ctrl.title&quot;&amp;gt;  &amp;lt;textarea ng-model=&quot;ctrl.text&quot;&amp;gt;&amp;lt;/textarea&amp;gt;  &amp;lt;pane pane-title=&quot;ctrl.title&quot;        pane-body=&quot;ctrl.text&quot;&amp;gt;  &amp;lt;/pane&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;reference重构实战手册&quot;&gt;Reference：重构实战手册&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;http://teropa.info/blog/2015/10/18/refactoring-angular-apps-to-components.html&quot;&gt;Refactoring Angular Apps to Component Style&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://docs.angularjs.org/guide/component&quot;&gt;Understanding Components - Developer Guide&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1%2Fi18n%2Fzh-CN.md&quot;&gt;Angular Style Guide&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://twofuckingdevelopers.com/category/angularjs/&quot;&gt;AngularJS Best Practices - Two Fucking Developers&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://angularclass.com/blog/&quot;&gt;AngularJS Archives - AngularClass&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://blog.thoughtram.io/categories/angular/&quot;&gt;Angular articles by thoughtram Blog&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.codelord.net/blog/archives/&quot;&gt;Angular Blog Archive - codelord.net&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;h2 id=&quot;图谋不轨帮助勾引开发者过渡到-angular-20&quot;&gt;图谋不轨：帮助（&lt;del&gt;勾引&lt;/del&gt;）开发者过渡到 Angular 2.0&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/Chinese-Version-of-React.js-Best-Practices-for-2016",
            "title"      : "【译】展望2016，React.js 最佳实践",
            "category"   : "前端",
            "tags"       : "React, 总结, 最佳实践",
            "url"        : "/2016-02-21-Chinese-Version-of-React.js-Best-Practices-for-2016/",
            "path"       : "_posts/前端/2016-02-21-Chinese-Version-of-React.js-Best-Practices-for-2016.md",
            "next"       : "/2016-03-08-introduction-of-angular-new-features-by-examples/",
            "previous"   : "/2016-02-16-rethink-angularjs-in-action/",
            "date"       : "2016-02-21 00:00:00 +0000",
            "shortdate"  : "February 21, 2016",
            "content"    : "&lt;blockquote&gt;  &lt;p&gt;React.js 作为前端框架的后起之秀，却在2015年携着虚拟 DOM，组件化，单向数据流等利器，给前端 UI 构建掀起了一波声势浩大的函数式新潮流。新鲜出炉的一篇 React.js 最佳实践，基本涵盖了所有的 React.js 生态周边，可用于实践参考。文章不仅表明了 Flux 经常被滥用的观点，也推荐开发者使用 Redux 作为 JavaScript 的可预测状态容器，并且提出保持状态扁平化和使用 Immutable.js 等数据处理解决方案。与此同时，也从高阶组件，组件测试以及组件级别热重载等方面提供了建议，当然也涉及了 Webpack，HTTP 2，使用 ES2015 乃至 Linters 等代码层面的建议。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;译展望2016reactjs-最佳实践&quot;&gt;【译】展望2016，React.js 最佳实践&lt;/h1&gt;&lt;p&gt;原文地址：&lt;a href=&quot;https://blog.risingstack.com/react-js-best-practices-for-2016/&quot;&gt;https://blog.risingstack.com/react-js-best-practices-for-2016/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;过去的2015年，&lt;strong&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;&lt;/strong&gt; 在全世界范围都是一派欣欣向荣的景象，开发者会议无一不热衷于这个话题。在过去一年中发生了很多重要的里程碑事件，更多详情可以查看我们关于 &lt;a href=&quot;https://blog.risingstack.com/react-in-2015/&quot;&gt;React in 2015&lt;/a&gt; 的总结。&lt;/p&gt;&lt;p&gt;在新的2016年里，最有趣的问题来了：&lt;strong&gt;我们该如何开发一个应用&lt;/strong&gt;，有什么推荐使用的库？&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;作为一名长时间使用 React.js 的开发者来说，我对这个问题有自己的答案以及最佳实践，但也有可能你不会完全认同。我也非常乐于倾听你的想法和观点：请留言以便讨论。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://risingstack-blog.s3.amazonaws.com/2016/Jan/react_best_practices-1453211146748.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;如果你才刚刚开始学习 React.js，可以查看我们的 &lt;a href=&quot;https://blog.risingstack.com/the-react-way-getting-started-tutorial/&quot;&gt;React.js 教程&lt;/a&gt;，或者 Pete Hunt 所写的 &lt;a href=&quot;https://github.com/petehunt/react-howto&quot;&gt;React howto&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&quot;数据处理&quot;&gt;数据处理&lt;/h2&gt;&lt;p&gt;在 React.js 应用中处理数据轻而易举，与此同时亦充满挑战。&lt;/p&gt;&lt;p&gt;这是因为你可以通过各种方式将属性数据传递给 React 组件，并从中构建渲染树；然而这种方式也并非那么显而易见，到底该如何更新视图。&lt;/p&gt;&lt;p&gt;2015之初诞生了很多不同 Flux 库，并不断产出了更加实用的响应式方案。&lt;/p&gt;&lt;p&gt;让我们看看现在的情况：&lt;/p&gt;&lt;h3 id=&quot;flux&quot;&gt;Flux&lt;/h3&gt;&lt;p&gt;根据我们的经验，Flux 经常被滥用，&lt;em&gt;（这意味着大家总是在不需要的时候就用上它）&lt;/em&gt;。&lt;/p&gt;&lt;p&gt;Flux 提供了一种非常清晰的方式来存储和更新应用状态，并且只会在必要的时候才触发页面渲染。&lt;/p&gt;&lt;p&gt;Flux 致力于&lt;strong&gt;应用的全局状态管理&lt;/strong&gt;，比如：管理已登录用户状态，路由状态，或者是活跃账户状态，但若是用来管理临时数据或者本地数据，瞬间就变成了痛苦。&lt;/p&gt;&lt;p&gt;我们不推荐使用 Flux 来管理路由相关的数据，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;/items/:itemId&lt;/code&gt;。而只是获取路由数据并存储在组件的 state 之中。在这种情况下，它会在组件消失之后一起被销毁。&lt;/p&gt;&lt;p&gt;&lt;em&gt;如果你想了解更多关于 Flux 的信息，&lt;a href=&quot;https://medium.com/@dan_abramov/the-evolution-of-flux-frameworks-6c16ad26bb31#.90lamiv5l&quot;&gt;The Evolution of Flux Frameworks&lt;/a&gt; 非常值得一读。&lt;/em&gt;&lt;/p&gt;&lt;h4 id=&quot;使用-redux&quot;&gt;使用 Redux&lt;/h4&gt;&lt;blockquote&gt;  &lt;p&gt;Redux 是一个 JavaScript 应用的可预测状态容器。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你觉得需要 Flux 或者一种类似的解决方案，你应该了解一下 &lt;a href=&quot;https://github.com/rackt/redux&quot;&gt;redux&lt;/a&gt;，以及学习 &lt;a href=&quot;https://twitter.com/dan_abramov&quot;&gt;Dan Abramov&lt;/a&gt; 的&lt;a href=&quot;https://egghead.io/series/getting-started-with-redux&quot;&gt;Getting started with redux&lt;/a&gt; 课程，这能够迅速提高你的开发技能。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Redux 延续并改进了 Flux 的思想，并从 Elm 架构中取经，规避了 Flux 的复杂度。（译者注：Elm 是一门面向 Web 的函数式编程语言，致力于改善客户端 Web 编程体验。）&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 id=&quot;保持状态扁平化&quot;&gt;保持状态扁平化&lt;/h4&gt;&lt;p&gt;API 经常会返回嵌套资源。这在 Flux 或基于 Redux 的架构中处理起来会非常困难。我们推荐使用 &lt;a href=&quot;https://github.com/gaearon/normalizr&quot;&gt;normalizr&lt;/a&gt; 之类的库将数据进行扁平化处理，&lt;strong&gt;保持状态尽可能地扁平化&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;示意：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const data = normalize(response, arrayOf(schema.user))state = _.merge(state, data.entities)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;（我们使用 &lt;a href=&quot;https://www.npmjs.com/package/isomorphic-fetch&quot;&gt;isomorphic-fetch&lt;/a&gt; 来与 APIs 进行交互）&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;使用-immutable-状态&quot;&gt;使用 immutable 状态&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;共享的可变性状态乃万恶之源。 —— &lt;em&gt;Pete Hunt, React.js Conf 2015&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://risingstack-blog.s3.amazonaws.com/2016/Jan/immutable_logo_for_react_js_best_practices-1453211749818.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Immutable_object&quot;&gt;不可变对象&lt;/a&gt;是一种在创建之后就不可修改的对象。&lt;/p&gt;&lt;p&gt;不可变对象可以让我们免于痛楚，并通过引用级别的比对检查来&lt;strong&gt;改善渲染性能&lt;/strong&gt; 。比如说在 &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate&lt;/code&gt; 中：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shouldComponentUpdate(nexProps) { // instead of object deep comparsion return this.props.immutableFoo !== nexProps.immutableFoo}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;如何在 JavaScript 中实现不可变呢？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;最痛苦的方式就是小心为之，示例代码如下，你需要在单元测试中通过 &lt;a href=&quot;https://www.npmjs.com/package/deep-freeze-node&quot;&gt;deep-freeze-node&lt;/a&gt; 来反复验证。（在修改之前冻结，并在结束后验证结果。）&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return {  ...state,  foo}return arr1.concat(arr2)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;相信我，这是最平淡无奇的例子了。&lt;/p&gt;&lt;p&gt;更简单也更自然的方式就是使用 &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;Immutable.js&lt;/a&gt;。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { fromJS } from &#39;immutable&#39;const state = fromJS({ bar: &#39;biz&#39; })const newState = foo.set(&#39;bar&#39;, &#39;baz&#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Immutable.js 非常之快，背后理念也异常漂亮。哪怕你并不想使用它，我也推荐阅读这个由 &lt;a href=&quot;https://twitter.com/leeb&quot;&gt;Lee Byron&lt;/a&gt; 所制作的视频 &lt;a href=&quot;https://www.youtube.com/watch?v=I7IdS-PbEgI&quot;&gt;Immutable Data and React&lt;/a&gt;。视频对于 Immutable.js 的工作原理有着非常深刻的讲解。&lt;/p&gt;&lt;h3 id=&quot;观察式与响应式方案&quot;&gt;观察式与响应式方案&lt;/h3&gt;&lt;p&gt;如果你不喜欢 Flux/Redux 或者只是想要更加 reactive，不要失望！这儿有很多其他数据处理的解决方案。这就有一个相关库的简要列表供你参考：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;http://cycle.js.org/&quot;&gt;cycle.js&lt;/a&gt; &lt;em&gt;(“A functional and reactive *JavaScript&lt;/em&gt; framework for cleaner code”)*&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/fdecampredon/rx-flux&quot;&gt;rx-flux&lt;/a&gt; &lt;em&gt;(“The Flux architecture with RxJS”)&lt;/em&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/acdlite/redux-rx&quot;&gt;redux-rx&lt;/a&gt; &lt;em&gt;(“RxJS utilities for Redux.”)&lt;/em&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://mweststrate.github.io/mobservable/&quot;&gt;mobservable&lt;/a&gt; &lt;em&gt;(“Observable data. Reactive functions. Simple code.”)&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;路由&quot;&gt;路由&lt;/h2&gt;&lt;p&gt;几乎所有的客户端应用都或多或少需要使用路由。如果你在浏览器中使用 React.js，你就会在挑选库的时候碰到这个分歧点。&lt;/p&gt;&lt;p&gt;我们的选择是出自优秀的 &lt;a href=&quot;https://github.com/rackt&quot;&gt;rackt&lt;/a&gt; 社区的 &lt;a href=&quot;https://github.com/rackt/react-router&quot;&gt;react-router&lt;/a&gt;。Racket 给 React.js 的拥簇者带来了很多高质量资源。&lt;/p&gt;&lt;p&gt;你可以查看他们的&lt;a href=&quot;https://github.com/rackt/react-router/tree/master/docs&quot;&gt;文档&lt;/a&gt;以便于集成 &lt;code class=&quot;highlighter-rouge&quot;&gt;react-router&lt;/code&gt;，但是更重要的是：如果你使用 Flux/Redux，我们建议你将路由状态和你的 store 或全局状态&lt;strong&gt;保持同步&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;同步的路由状态可以帮助你对 Flux/Redux 的 Actions 所提供的路由行为有所控制，并且能够在组件中读取路由状态和参数。&lt;/p&gt;&lt;p&gt;Redux 用户可以通过 &lt;a href=&quot;https://github.com/rackt/redux-simple-router&quot;&gt;redux-simple-router&lt;/a&gt; 这个库轻松实现它。&lt;/p&gt;&lt;h4 id=&quot;代码分割惰性加载&quot;&gt;代码分割，惰性加载&lt;/h4&gt;&lt;p&gt;只有一小部分 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt; 用户知道应用代码是可以分割的，将 bundler 的输出拆分成多个 &lt;em&gt;JavaScript&lt;/em&gt; 块：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require.ensure([], () =&amp;gt; {  const Profile = require(&#39;./Profile.js&#39;)  this.setState({    currentComponent: Profile  })})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;这在大型应用中会非常有用，因为在每次部署之后，用户浏览器就&lt;strong&gt;没有必要下载那些很少用到的代码&lt;/strong&gt;，比如 profile 页面。&lt;/p&gt;&lt;p&gt;更多代码块将导致更多 HTTP 请求 —— 但是使用 &lt;a href=&quot;https://http2.github.io/faq/#why-is-http2-multiplexed&quot;&gt;HTTP/2 multiplexed&lt;/a&gt; 的话就不成问题。&lt;/p&gt;&lt;p&gt;结合 &lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook/Optimizing-caching.html&quot;&gt;chunk hashing&lt;/a&gt;，你也可以在代码改变之后优化缓存命中率。（译者注：终端用户访问加速节点时，如果该节点有缓存住了要被访问的数据时就叫做命中，如果没有的话需要回原服务器获取，就是没有命中。）&lt;/p&gt;&lt;p&gt;react-router 的下个版本就将在代码分割这方面提供更多帮助。&lt;/p&gt;&lt;p&gt;想要了解 react-router 的未来走向，可以查看 &lt;a href=&quot;https://twitter.com/ryanflorence&quot;&gt;Ryan Florence&lt;/a&gt; 所写的这篇博文： &lt;a href=&quot;https://medium.com/@ryanflorence/welcome-to-future-of-web-application-delivery-9750b7564d9f#.vuf3e1nqi&quot;&gt;Welcome to Future of Web Application Delivery&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&quot;组件&quot;&gt;组件&lt;/h2&gt;&lt;p&gt;大部分人都对 JSX 存有怨言。首先，你需要知道的是这在 React 中并不是必须的。&lt;/p&gt;&lt;p&gt;在最后，JSX 都会通过 Babel 被编译成 &lt;em&gt;JavaScript&lt;/em&gt;。你可以直接编写 &lt;em&gt;JavaScript&lt;/em&gt; 来替代 JSX，但是在处理 HTML 的时候使用 JSX 会感觉更加自然。&lt;/p&gt;&lt;p&gt;特别是对于不懂技术的人来说，他们依然可以理解和修改必要的部分。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;JSX 是一种与 XML 类似的 &lt;em&gt;JavaScript&lt;/em&gt; 语法扩展。你可以通过一个简单的 JSX 语法转换器来编译 React。 —— &lt;a href=&quot;https://facebook.github.io/react/docs/jsx-in-depth.html&quot;&gt;JSX in depth&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你想要了解更多关于 JSX 的信息，可以查看 &lt;a href=&quot;https://medium.com/javascript-scene/jsx-looks-like-an-abomination-1c1ec351a918#.ca28nvee6&quot;&gt;JSX Looks Like An Abomination - But it’s Good for You&lt;/a&gt; 这篇文章。&lt;/p&gt;&lt;h3 id=&quot;使用-class&quot;&gt;使用 Class&lt;/h3&gt;&lt;p&gt;React 和 ES2015 的 Class 语法搭配完美。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class HelloMessage extends React.Component {  render() {    return &amp;lt;div&amp;gt;Hello {this.props.name}&amp;lt;/div&amp;gt;  }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;我们喜欢&lt;a href=&quot;http://jamesknelson.com/structuring-react-applications-higher-order-components/&quot;&gt;高阶组件&lt;/a&gt;更胜于 mixins，所以对于我们来说，保留 &lt;code class=&quot;highlighter-rouge&quot;&gt;createClass&lt;/code&gt; 就更像一个语法问题而不是技术问题。我们相信使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;createClass&lt;/code&gt; 而不是 &lt;code class=&quot;highlighter-rouge&quot;&gt;React.Component&lt;/code&gt; 绝对无可厚非，反之亦然。&lt;/p&gt;&lt;h3 id=&quot;属性类型&quot;&gt;属性类型&lt;/h3&gt;&lt;p&gt;如果你在2016年依然没有检查 properties，那么你应该从现在开始做起，这将为你节省大量时间，相信我。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MyComponent.propTypes = {  isLoading: PropTypes.bool.isRequired,  items: ImmutablePropTypes.listOf(    ImmutablePropTypes.contains({      name: PropTypes.string.isRequired,    })  ).isRequired}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;当然，验证 Immutable.js 所编写的 properties 也是可能的，可以使用&lt;a href=&quot;https://www.npmjs.com/package/react-immutable-proptypes&quot;&gt;react-immutable-proptypes&lt;/a&gt;。&lt;/p&gt;&lt;h3 id=&quot;高阶组件&quot;&gt;高阶组件&lt;/h3&gt;&lt;p&gt;目前来说，&lt;a href=&quot;https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750&quot;&gt;mixins 已死&lt;/a&gt;，而且在 ES6 Class 组件中已经不再被支持，我们应当寻找不同的替代方案。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;那什么是高阶组件呢？&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PassData({ foo: &#39;bar&#39; })(MyComponent)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;本质上来说，你可以由原始组件创造一个新的组件并且扩展它的行为。你可以在多种情况下使用它，比如授权：&lt;code class=&quot;highlighter-rouge&quot;&gt;requireAuth({ role: &#39;admin&#39; })(MyComponent)&lt;/code&gt; &lt;em&gt;（检查上层组件中的用户，若是未登录则需要重定向）&lt;/em&gt;，或者是连接你的组件和 Flux/Redux 仓库。&lt;/p&gt;&lt;p&gt;在RisingStack，我们也将数据获取和类似 Controller 的逻辑分割成高阶组件，并保持视图层尽可能简单。&lt;/p&gt;&lt;h2 id=&quot;测试&quot;&gt;测试&lt;/h2&gt;&lt;p&gt;在开发周期中，维持测试的高覆盖率是非常重要的一部分。幸运的是， React.js 社区诞生了很多优秀的库可以帮助我们达到这一点。&lt;/p&gt;&lt;h3 id=&quot;组件测试&quot;&gt;组件测试&lt;/h3&gt;&lt;p&gt;我们最喜爱的库之一是由 AirBnb 所开发的 &lt;a href=&quot;https://github.com/airbnb/enzyme&quot;&gt;enzyme&lt;/a&gt;，可用于组件测试。非常神奇的是，它的浅渲染特性可以对组件的逻辑及其渲染输出进行测试。尽管它还不能替代你的 selenium 测试，但是将前端测试提升到了一个新的水平。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;it(&#39;simulates click events&#39;, () =&amp;gt; {  const onButtonClick = sinon.spy()  const wrapper = shallow(    &amp;lt;Foo onButtonClick={onButtonClick} /&amp;gt;  )  wrapper.find(&#39;button&#39;).simulate(&#39;click&#39;)  expect(onButtonClick.calledOnce).to.be.true})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;看起来就非常简洁，不是么？&lt;/p&gt;&lt;p&gt;你在使用 chai 作为测试断言库嘛？相信你会喜欢 &lt;a href=&quot;https://github.com/producthunt/chai-enzyme&quot;&gt;chai-enyzime&lt;/a&gt; 的！&lt;/p&gt;&lt;h3 id=&quot;redux-测试&quot;&gt;Redux 测试&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;测试一个 reducer&lt;/strong&gt; 非常简单，它响应新到来的 actions，并且将原来的状态进行更新：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;it(&#39;should set token&#39;, () =&amp;gt; {  const nextState = reducer(undefined, {    type: USER_SET_TOKEN,    token: &#39;my-token&#39;  })  // immutable.js state output  expect(nextState.toJS()).to.be.eql({    token: &#39;my-token&#39;  })})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;测试 actions&lt;/strong&gt; 也很简单，但是异步 actions 就不太一样了。对于测试异步的 Redux actions 来说，我们推荐使用 &lt;a href=&quot;https://www.npmjs.com/package/redux-mock-store&quot;&gt;redux-mock-store&lt;/a&gt;，非常有帮助。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;it(&#39;should dispatch action&#39;, (done) =&amp;gt; {  const getState = {}  const action = { type: &#39;ADD_TODO&#39; }  const expectedActions = [action]  const store = mockStore(getState, expectedActions, done)  store.dispatch(action)})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;更深度地了解 &lt;a href=&quot;http://rackt.org/redux/docs/recipes/WritingTests.html&quot;&gt;redux 测试&lt;/a&gt;，可以查看官方文档。&lt;/p&gt;&lt;h3 id=&quot;使用-npm&quot;&gt;使用 npm&lt;/h3&gt;&lt;p&gt;虽然 React.js 并不依赖代码打包工具就可以很好地工作，但我们还是推荐使用 &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; 或者 &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; 来发挥 &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; 的能力。Npm 上满是高质量的 React.js 包，还可以帮你非常优雅地管理依赖。&lt;/p&gt;&lt;p&gt;&lt;em&gt;（请不要忘记复用你自己的组件，这是一种绝佳的代码优化方式。）&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;bundle-大小&quot;&gt;Bundle 大小&lt;/h3&gt;&lt;p&gt;这本身不是一个 React 相关的问题，但是大多数人都在打包他们的 React 应用，所以我认为提到这点很重要。&lt;/p&gt;&lt;p&gt;当你打包源代码的时候，时刻警惕打包后的文件大小。为了&lt;strong&gt;保持体积最小化&lt;/strong&gt;，你应该考虑如何 require/import 依赖。&lt;/p&gt;&lt;p&gt;对比以下代码片段，这两种不同的方式对输出的影响区别巨大：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { concat, sortBy, map, sample } from &#39;lodash&#39;// vs.import concat from &#39;lodash/concat&#39;;import sortBy from &#39;lodash/sortBy&#39;;import map from &#39;lodash/map&#39;;import sample from &#39;lodash/sample&#39;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;可以查看这篇文章 &lt;a href=&quot;https://lacke.mn/reduce-your-bundle-js-file-size/&quot;&gt;Reduce Your bundle.js File Size By Doing This One Thing&lt;/a&gt; 获取更多详情。&lt;/p&gt;&lt;p&gt;我们也喜欢将代码分离出至少 &lt;code class=&quot;highlighter-rouge&quot;&gt;vendors.js&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; 两个文件，因为 vendors 相对于我们的代码库来说更新不是那么频繁。&lt;/p&gt;&lt;p&gt;将输出文件名称进行哈希化处理 &lt;em&gt;(Webpack 中的 chunk hash)&lt;/em&gt;，并使用长缓存，我们可以大大减少用户需要下载的代码大小。结合惰性加载，优化效果可想而知。&lt;/p&gt;&lt;p&gt;如果你还不太熟悉 Webpack，可以查看这本优秀的 &lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook&quot;&gt;React webpack 手册&lt;/a&gt;。&lt;/p&gt;&lt;h3 id=&quot;组件级别热重载&quot;&gt;组件级别热重载&lt;/h3&gt;&lt;p&gt;如果你曾经使用过热加载来编写单页面应用，当你在处理某些与状态相关的事情时，可能你就会明白当你在编辑器中点击保存，整个页面就重新加载了是多么令人讨厌。这样子就不得不重新点击一遍应用，重复如此会令人抓狂的。&lt;/p&gt;&lt;p&gt;通过 React，在重载组件的同时&lt;strong&gt;保持组件状态&lt;/strong&gt;已经成为可能 —— 耶，从此不再痛苦！（&lt;del&gt;没有蛀牙！&lt;/del&gt;）&lt;/p&gt;&lt;p&gt;关于如何搭建热重载，可以参考 &lt;a href=&quot;https://github.com/gaearon/react-transform-boilerplate&quot;&gt;react-transform-boilerplate&lt;/a&gt;。&lt;/p&gt;&lt;h3 id=&quot;使用es2015&quot;&gt;使用ES2015&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://risingstack-blog.s3.amazonaws.com/2016/Jan/babel_logo_in_react_js_best_practices_2016-1453212218011.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;前面有提到过，我们可以在 React.js 组件中使用 JSX，然后使用&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel.js&lt;/a&gt;进行编译。&lt;/p&gt;&lt;p&gt;其实 Babel 的能力远不止如此，它也可以让我们现在就可以给浏览器编写 ES6/ES2015 代码。在 RisingStack，我们在服务器端和客户端都使用了 ES2015 特性，这都已经在最新的 LTS Node.js 版本中被实现了。&lt;/p&gt;&lt;h3 id=&quot;linters&quot;&gt;Linters&lt;/h3&gt;&lt;p&gt;或许你已经给你的 &lt;em&gt;JavaScript&lt;/em&gt; 代码制定了代码规范，但是你知道也有用于 React 的代码规范了吗？我们强烈推荐挑选一个并开始遵循它。&lt;/p&gt;&lt;p&gt;在 RisingStack，我们也将 linters 强制运行在 CI 系统上，&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; 亦然。可以试试 &lt;a href=&quot;https://www.npmjs.com/package/pre-push&quot;&gt;pre-push&lt;/a&gt; 或者 &lt;a href=&quot;https://www.npmjs.com/package/pre-commit&quot;&gt;pre-commit&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;我们使用标准的 &lt;em&gt;JavaScript&lt;/em&gt; 代码风格，并使用了 &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-react&quot;&gt;eslint-plugin-react&lt;/a&gt;对 React.js 代码进行规范 。&lt;/p&gt;&lt;p&gt;&lt;em&gt;（就是，我们不再使用分号。）&lt;/em&gt;&lt;/p&gt;&lt;h2 id=&quot;graphql-和-relay&quot;&gt;GraphQL 和 Relay&lt;/h2&gt;&lt;p&gt;GraphQL 和 Relay 相对而言属于新技术，在 RisingStack，目前我们还没有在产品环境中使用它们，暂时保持关注。&lt;/p&gt;&lt;p&gt;我们曾经写过一个 Relay 的 MongoDB ORM库，叫做 &lt;a href=&quot;https://github.com/risingstack/graffiti&quot;&gt;graffiti&lt;/a&gt;，可以使用已有的 mongoose 模型直接创建一个 GraphQL 服务器。&lt;/p&gt;&lt;p&gt;如果你想要学习这些新技术，我们建议你可以找来玩一玩。&lt;/p&gt;&lt;h2 id=&quot;尽情享用这些-reactjs-最佳实践&quot;&gt;尽情享用这些 React.js 最佳实践&lt;/h2&gt;&lt;p&gt;有些突出的技术和库其实跟 React.js 并不相关 —— 但是保持视野开阔，关注社区的其他人都在做些什么。React 社区在2015年里就受到了 &lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial/&quot;&gt;Elm 架构&lt;/a&gt; 的很多启发。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;如果你知道其它在2016年必不可少的 React.js 工具，请留言让我们知道！&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;&lt;h4 id=&quot;原作者-péter-márton&quot;&gt;原作者: &lt;a href=&quot;https://blog.risingstack.com/author/peter-marton/&quot;&gt;Péter Márton&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;CTO at RisingStack, brewing beer with Node.js&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/slashdotpeter&quot;&gt;https://twitter.com/slashdotpeter&lt;/a&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;blockquote&gt;  &lt;p&gt;React.js 作为前端框架的后起之秀，却在2015年携着虚拟 DOM，组件化，单向数据流等利器，给前端 UI 构建掀起了一波声势浩大的函数式新潮流。新鲜出炉的一篇 React.js 最佳实践，基本涵盖了所有的 React.js 生态周边，可用于实践参考。文章不仅表明了 Flux 经常被滥用的观点，也推荐开发者使用 Redux 作为 JavaScript 的可预测状态容器，并且提出保持状态扁平化和使用 Immutable.js 等数据处理解决方案。与此同时，也从高阶组件，组件测试以及组件级别热重载等方面提供了建议，当然也涉及了 Webpack，HTTP 2，使用 ES2015 乃至 Linters 等代码层面的建议。&lt;/p&gt;&lt;/blockquote&gt;"
		} ,
	
		{
            "id"         : "/rethink-angularjs-in-action",
            "title"      : "Rethink AngularJS in Action",
            "category"   : "演讲",
            "tags"       : "AngularJS, Rethink, Summary",
            "url"        : "/2016-02-16-rethink-angularjs-in-action/",
            "path"       : "_posts/演讲/2016-02-16-rethink-angularjs-in-action.md",
            "next"       : "/2016-02-21-Chinese-Version-of-React.js-Best-Practices-for-2016/",
            "previous"   : "/2016-02-11-optimistic-ui-with-meteor/",
            "date"       : "2016-02-16 00:00:00 +0000",
            "shortdate"  : "February 16, 2016",
            "content"    : "&lt;p&gt;30 min = 15 min * 2&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;done-is-better-than-perfect&quot;&gt;「Done is better than perfect.」&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;angular-in-action&quot;&gt;Angular in Action&lt;/h1&gt;&lt;p&gt;&lt;small&gt;by Jimmy Lv&lt;/small&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;mvvm-双向绑定&quot;&gt;MVVM: 双向绑定&lt;/h2&gt;&lt;iframe id=&quot;preview&quot; style=&quot;height: 600px;&quot; frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;100%&quot; src=&quot;https://laracasts.com/series/learning-vue-step-by-step/episodes/1&quot;&gt;&lt;/iframe&gt;&lt;blockquote&gt;  &lt;p&gt;很讽刺的是，需要使用 Vue 来演示 AngularJS 的 MVVM 概念，需要 React 来演示 Component，以及单向数据流。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;templatedirective&quot;&gt;Template&amp;amp;Directive&lt;/h2&gt;&lt;p&gt;基于DOM &amp;lt;=&amp;gt; Vitural DOM&lt;/p&gt;&lt;p&gt;ng-controller=”MainCtrl as main”&lt;/p&gt;&lt;p&gt;content Editable&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;modelview-data-binding&quot;&gt;Model&amp;amp;View Data binding&lt;/h2&gt;&lt;p&gt;“single-source-of-truth” 其实只需要关注data，易测试，灵活性高&lt;/p&gt;&lt;p&gt;双向数据绑定，dirty check -&amp;gt; $watch -&amp;gt; 影响性能&lt;/p&gt;&lt;p&gt;View 和 Model 应该分开?&lt;/p&gt;&lt;p&gt;React: 数据只会由parent流向children，只会由逻辑流向页面，更好理解和维护。&lt;/p&gt;&lt;p&gt;onChange={this.handleChange.bind(this, “pass”)} in React&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;dependency-injection&quot;&gt;Dependency Injection&lt;/h2&gt;&lt;p&gt;动态语言、ES5没有包管理/注入？ -&amp;gt; Angular module -&amp;gt; ES6 or RequireJS&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;学习曲线&quot;&gt;学习曲线&lt;/h2&gt;&lt;p&gt;最开始只要Controller&amp;amp;Directive就实现了hello world&lt;/p&gt;&lt;p&gt;但是一旦深入，就必须接受一大堆Angular自创术语&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;module&quot;&gt;module&lt;/h2&gt;&lt;div ng-app=&quot;app&quot;&gt;```&lt;div ng-controller=&quot;MainCtrl&quot;&gt;    &lt;p&gt;&lt;/p&gt;&lt;/div&gt;```&lt;/div&gt;&lt;p&gt;angular.module(‘app’, []);angular.module(‘app’).controller(‘MainCtrl’, function ($scope){&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$scope.message = &#39;hello&#39;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;});&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;controller&quot;&gt;Controller&lt;/h2&gt;&lt;p&gt;to expose data to our view via $scope &amp;amp; add functions to $scope&lt;/p&gt;&lt;p&gt;nested or multiple nested controllers 可以继承，每 ng-controller 指令会创建新的子级 scope，三层div结构，也就对应有三层 scope 继承关系的层级结构&lt;/p&gt;&lt;p&gt;不要操作具体的DOM和filter等其他事情，专注单个view的业务逻辑&lt;/p&gt;&lt;p&gt;Presentation logic should remain within views and directives.&lt;/p&gt;&lt;p&gt;相互间操作使用Service（across app/module），再注入controller&lt;/p&gt;&lt;p&gt;old? &amp;gt; controller as syntax : -&amp;gt; this = self . create a reference to this so that we don’t lose context of our controller when we create/call functions within our controller.&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;scope&quot;&gt;$scope&lt;/h2&gt;&lt;p&gt;不显式注入$scope了，语法是这样：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function CtrlB() {  this.a = 1;  this.foo = function() {  };}&amp;lt;div ng-controller=&quot;CtrlB as instanceB&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;在任意一个已有的作用域上调用$new()，就能创建一个新的作用域：&lt;/p&gt;&lt;p&gt;var newScope = scope.$new();刚创建出来的作用域是一个“悬空”的作用域，也就是说，它跟任何界面模板都不存在绑定关系，创建它的作用域会成为它的$parent。这种作用域可以经过$compile阶段，与某视图模板进行融合。&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;service&quot;&gt;Service&lt;/h2&gt;&lt;p&gt;to share data&lt;/p&gt;&lt;p&gt;singletons that can be injected into controllers and other services: reusable&lt;/p&gt;&lt;p&gt;like $http&lt;/p&gt;&lt;p&gt;最明显的DI体现&lt;/p&gt;&lt;p&gt;Lazily instantiated:  not registering a service instance, but rather a factory function -&amp;gt;  angular.module(‘myModule’, []).factory(‘serviceId’,&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;test&quot;&gt;Test&lt;/h2&gt;&lt;p&gt;Controller的数据测试，&lt;/p&gt;&lt;p&gt;Jasmine spy (mock) a real browser alert.&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;form&quot;&gt;Form&lt;/h2&gt;&lt;p&gt;只支持一部分js表达式，支持三元&lt;/p&gt;&lt;p&gt;angular.copy(user)&lt;/p&gt;&lt;p&gt;form 可以直接用css&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;promise-q&quot;&gt;Promise $q&lt;/h2&gt;&lt;p&gt;Deferred:&lt;/p&gt;&lt;p&gt;$q.defer()  resolve(), reject(), and notify()&lt;/p&gt;&lt;p&gt;$q(function(resolve, reject) {&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $timeout(function() {    if(Math.round(Math.random())) {      resolve(&#39;data received!&#39;)    } else {      reject(&#39;oh no an error! try again&#39;)    }  }, 2000)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Promise:&lt;/p&gt;&lt;p&gt;then().then().finally()&lt;/p&gt;&lt;p&gt;catch(errorCallback) – shorthand for promise.then(null, errorCallback)&lt;/p&gt;&lt;p&gt;$http - success() error()&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;filters&quot;&gt;Filters&lt;/h2&gt;&lt;p&gt;Chaining built-in filters: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p ng-repeat=&quot;person in test.people | filter:search | orderBy:&#39;name&#39;  | limitTo: 5&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;directive&quot;&gt;Directive&lt;/h2&gt;&lt;p&gt;add things like behaviors:&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;“A” is for attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div welcome&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; (default restrict property）&lt;/li&gt;  &lt;li&gt;“E” is for element &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;welcome&amp;gt;&amp;lt;/welcome&amp;gt;&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;“C” is for class ` &amp;lt;div class=&quot;welcome&quot;&amp;gt;&amp;lt;/div&amp;gt;`&lt;/li&gt;  &lt;li&gt;“M” for comment &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;!-- directive: welcome --&amp;gt;&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;functionalities:&lt;/p&gt;&lt;p&gt;addClass() removeClass()&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div entering=&quot;activeClass&quot;&amp;gt;&amp;lt;/div&amp;gt;function(scope, element, attrs) {  element.bind(&quot;mouseenter&quot;, function(){    element.addClass(attrs.entering);  })}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;can be used in controller&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;route&quot;&gt;$Route&lt;/h2&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$routeProvider.when(&quot;/:firstName/:middleName/:lastName&quot;,    {      templateUrl: &quot;app.html&quot;,      controller: &quot;AppCtrl&quot;,      controllerAs: &quot;app&quot;    }  );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;$routeParams.firstName + “ “ + $routeParams.middleName + “ “ + $routeParams.lastName;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;mindmap&quot;&gt;MindMap&lt;/h2&gt;&lt;p&gt;http://www.xmind.net/m/xDmL&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;30 min = 15 min * 2&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/optimistic-ui-with-meteor",
            "title"      : "【译】使用 Meteor 构建「积极的用户界面」",
            "category"   : "前端",
            "tags"       : "Meteor, JavaScript",
            "url"        : "/2016-02-11-optimistic-ui-with-meteor/",
            "path"       : "_posts/前端/2016-02-11-optimistic-ui-with-meteor.md",
            "next"       : "/2016-02-16-rethink-angularjs-in-action/",
            "previous"   : "/2016-01-22-reactjs-best-practices-for-2016/",
            "date"       : "2016-02-11 00:00:00 +0000",
            "shortdate"  : "February 11, 2016",
            "content"    : "&lt;h1 id=&quot;optimistic-ui-with-meteor&quot;&gt;Optimistic UI with Meteor&lt;/h1&gt;&lt;p&gt;原文地址：&lt;a href=&quot;http://info.meteor.com/blog/optimistic-ui-with-meteor-latency-compensation&quot;&gt;http://info.meteor.com/blog/optimistic-ui-with-meteor-latency-compensation&lt;/a&gt;&lt;/p&gt;&lt;p&gt;May 27, 2015  By &lt;a href=&quot;http://info.meteor.com/blog/author/sashko-stubailo&quot;&gt;Sashko Stubailo&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In this post we’ll look at the collection of technologies that Meteor provides to enable ‘Optimistic UI’ updating. This capability is crucial to user expectations for modern web apps and is fundamental to Meteor.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在这篇博文中，我们就来看看 Meteor 为实现「积极 UI 更新」所提供的一系列技术。从用户对于现代 web 应用的期望来说，这种能力非常重要，而这在 Meteor 当中也是最基本的。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Meteor is a full-stack &lt;em&gt;JavaScript&lt;/em&gt; platform with default technologies for every layer of the stack, starting with the database and ending with reactive UI re-rendering. You can swap these technologies out to suit your preference; for instance you can exchange the default &lt;a href=&quot;https://www.meteor.com/blaze&quot;&gt;Blaze&lt;/a&gt; front-end for &lt;a href=&quot;https://github.com/reactjs/react-meteor&quot;&gt;React&lt;/a&gt;, &lt;em&gt;&lt;a href=&quot;http://angular-meteor.com/?__hstc=256467284.fe209fe52e5c6f2f467c8fba76fdf5a5.1436786287820.1454516487610.1454572978838.27&amp;amp;__hssc=256467284.2.1454572978838&amp;amp;__hsfp=1792478999&quot;&gt;Angular&lt;/a&gt;&lt;/em&gt;, or a native &lt;a href=&quot;https://github.com/martijnwalraven/meteor-ios&quot;&gt;iOS front-end&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Meteor 是一个全栈 &lt;em&gt;JavaScript&lt;/em&gt; 平台，在从数据库到响应式 UI 渲染的每一层技术架构上，都提供了默认的解决方案。当然你也可以将其替换成适合于自己的选择，比如说你可以将默认的 &lt;a href=&quot;https://www.meteor.com/blaze&quot;&gt;Blaze&lt;/a&gt; 前端换成 &lt;a href=&quot;https://github.com/reactjs/react-meteor&quot;&gt;React&lt;/a&gt;，&lt;em&gt;&lt;a href=&quot;http://angular-meteor.com/?__hstc=256467284.fe209fe52e5c6f2f467c8fba76fdf5a5.1436786287820.1454516487610.1454572978838.27&amp;amp;__hssc=256467284.2.1454572978838&amp;amp;__hsfp=1792478999&quot;&gt;Angular&lt;/a&gt;&lt;/em&gt;，或者是原生的 &lt;a href=&quot;https://github.com/martijnwalraven/meteor-ios&quot;&gt;iOS 前端&lt;/a&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;But there’s one part that represents the core of the Meteor platform: full-stack data integration with &lt;a href=&quot;https://www.meteor.com/ddp&quot;&gt;DDP&lt;/a&gt;, &lt;a href=&quot;https://www.meteor.com/livequery&quot;&gt;LiveQuery&lt;/a&gt;, and &lt;a href=&quot;https://www.meteor.com/mini-databases&quot;&gt;Minimongo&lt;/a&gt;. In this case the full-stack integration provides real value that would be hard to rebuild from separate components. Let me tell you why.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;但本文所讨论的这部分则代表着 Meteor 平台的核心：使用 &lt;a href=&quot;https://www.meteor.com/ddp&quot;&gt;DDP&lt;/a&gt;，&lt;a href=&quot;https://www.meteor.com/livequery&quot;&gt;LiveQuery&lt;/a&gt;，&lt;a href=&quot;https://www.meteor.com/mini-databases&quot;&gt;Minimongo&lt;/a&gt; 进行构建的全栈数据集成方案。在这种情况下，全栈集成方案则提供了难以对单独的部分重新进行构建的真正价值。就让我来告诉你为什么。&lt;/p&gt;&lt;h2 id=&quot;tldr--too-long-didnt-read--太长不读版&quot;&gt;TL;DR | “Too long; didn’t read” / 太长不读版&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Your app should be able to respond to user inputs faster than it takes to make a whole roundtrip to the server — we call this Optimistic UI updating. It’s very hard to build an app that correctly implements client-side simulations as it takes a lot of work to make your UI consistent, avoid loading duplicate data over and over, and keep your client up to date with your server data. Keep reading to see why you need this, why it’s hard and how Meteor makes it easy.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;你的应用应当更快地响应用户输入，而不是等待它从服务器完成了整个来回 —— 我们称之为 Optimistic UI 更新（此文均译为「积极的 UI」）。构建应用时，正确模拟客户端实现是非常困难的，因为这需要大量工作来保持 UI 一致、避免重复数据加载、以及保持客户端与服务器端之间的数据更新。继续看下去，你就知道为什么需要这样做，又为何如此之难，以及 Meteor 是如何使之变得容易。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://cdn2.hubspot.net/hubfs/520701/Blog/optimistic-ui-latency-compensation.png?t=1454978788743&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;users-of-modern-web-apps-expect-the-ui-to-respond-instantly--用户期望现代-web-应用-ui-能够即时响应&quot;&gt;Users of modern web apps expect the UI to respond instantly | 用户期望现代 web 应用 UI 能够即时响应&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;When a user pushes a button in a website or a mobile app, they don’t want to wait for a request to be sent all the way to the server to calculate the new state of the screen. Using the basic AJAX model of calculating the results on the server and then displaying them to the user will cause your app to feel laggy, and sometimes inconsistent with the user’s input. Mobile developers especially need to worry about this because cellular networks can be unreliable, sometimes taking a second or more to deliver a result from your server.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;当用户点击了网站或者移动应用的按钮之后，他们并不想要等待一个请求发送至服务器进行计算之后，再从屏幕上看到新的状态。使用基础的 AJAX 模型，需要在服务器端进行计算后才能够显示给用户，这会导致你的应用感觉滞后，并且有时还会出现与用户输入不一致的情况。对移动开发者来说，尤其需要担心这种问题，因为移动网络的稳定性较差，所以从服务器端返回结果，有时需要花上一秒甚至更长时间。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;There are four elements required to satisfy this expectation and requirement. Let’s explore those.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;满足以上期望和需求的四个必要元素如下，让我们来探究一下：&lt;/p&gt;&lt;h2 id=&quot;1-to-have-your-app-respond-instantly-you-need-to-render-the-ui-on-the-client--为了应用即时响应需要在客户端渲染-ui&quot;&gt;1. To have your app respond instantly, you need to render the UI on the client | 为了应用即时响应，需要在客户端渲染 UI&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;This is one explanation for the rise of client-side rendering frameworks like &lt;em&gt;Angular&lt;/em&gt; and React — you need to be able to compute your HTML directly in the browser to be able to update the view without doing a round trip to the server. Whenever the user takes an action, you need to first update your UI to make things look fast, then send a request to the server to do that modification on the real database. At Meteor, we call this Optimistic UI, or latency compensation.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这是 &lt;em&gt;Angular&lt;/em&gt; 和 React 等客户端渲染框架兴起的一种解释 —— 你需要在浏览器中直接计算 HTML，而不是从服务器端重新走了一圈再来更新视图。无论何时用户触发了一个操作，你需要优先更新 UI 使之看起来反应迅速，然后再发送给服务器端去做真正的数据库修改操作。在 Meteor 中，我们称之为「积极的 UI」，或者是延时补偿。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In order to make optimistic updates and be able to predict the state of the UI after some user action, you will need to keep some of your application data on the client.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;为了达到「积极更新」，并且能够预测用户操作后的 UI 状态，你需要在客户端保存一些应用数据。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;One option is to directly store things inside the front-end framework’s local state — &lt;em&gt;Angular&lt;/em&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt; or React’s component state — but you can imagine how this would easily result in duplication of data or inconsistency. If you have two widgets on the page showing the same data in different ways, then they will each have one copy of the data, and worse those copies might not be consistent. Having two UI elements on your page showing inconsistent results sounds like a great way to end up with confused users.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;其中一种选项就是直接将其存储到前端框架的本地状态当中 —— 比如 &lt;em&gt;Angular&lt;/em&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt; 或者是 React 的组件状态 —— 但可想而知，这很容易就会导致数据的重复和不一致。如果你在同一页面的两个地方分别使用不同的方式显示相同的数据，然后他们都会有这个数据的一份拷贝，更糟糕的是这些拷贝很可能不一致。在页面上拥有两个显示不同结果的 UI 元素，这会使用户非常困惑，从而导致用户流失。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;So what’s the solution - how do we keep all of our UI state de-duplicated and internally consistent?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;所以何来解决之道 —— 我们如何让所有的 UI 状态避免重复并且保证本质的一致性？&lt;/p&gt;&lt;h2 id=&quot;2-to-have-your-ui-consistent-and-avoid-data-duplication-you-need-a-global-data-cache-on-the-client--为了保持-ui-一致避免数据重复客户端需要全局数据缓存&quot;&gt;2. To have your UI consistent and avoid data duplication, you need a global data cache on the client | 为了保持 UI 一致，避免数据重复，客户端需要全局数据缓存&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;If you want your UI to be consistent and avoid loading the same data sets over and over again, you need to render everything from the same data source. When you make some action on the page and update this global data source, that can trigger updates in all of the relevant UI elements on the page to keep everything consistent. It’s almost like magic — you can update your whole UI before you even hit the server.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你想要 UI 保持一致，并且避免相同数据集的反复加载，则需要从同一数据源渲染所有东西。当你在页面上触发了某些操作，就是更新全局的数据源，那么这些数据就会触发页面上所有的相关 UI 元素进行更新，从而使一切都保持一致性。这就像魔法一样 —— 你可以在连接服务器之前就更新了整个 UI。&lt;/p&gt;&lt;h3 id=&quot;minimongo-is-meteors-single-source-of-truth-for-the-client--minimongo-就是-meteor-在客户端上单一数据源的真相&quot;&gt;Minimongo is Meteor’s single source of truth for the client | Minimongo 就是 Meteor 在客户端上单一数据源的真相&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Meteor is the only framework that includes a first-class solution for this problem, and it’s called &lt;a href=&quot;https://www.meteor.com/mini-databases&quot;&gt;Minimongo&lt;/a&gt;. The same way that your database is a single source of truth for your server, Minimongo is a single source of truth for the client. If you have two widgets that display overlapping data, you can render them both from a reactive query on this client-side database and they are guaranteed to be consistent.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Meteor 是唯一的框架对此问题提供了一流的解决方案，称之为 &lt;a href=&quot;https://www.meteor.com/mini-databases&quot;&gt;Minimongo&lt;/a&gt;。与此同时，数据库则是在服务器端的单一真实数据源，而 Minimongo 则是客户端的单一真实数据源。如果你有两个用于显示相同数据的部件，你可以从客户端数据库的响应式查询中同时渲染这两部分，两者的结果必然是一致的。&lt;/p&gt;&lt;h3 id=&quot;run-the-same-queries-on-the-client-and-server--在客户端和服务器端执行相同的查询操作&quot;&gt;Run the same queries on the client and server | 在客户端和服务器端执行相同的查询操作&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;As you might be able to tell from the name, Minimongo uses a direct clone of MongoDB’s query language to client-side &lt;em&gt;JavaScript&lt;/em&gt;. This is nice because you can use the same code on the client and the server to get and update your data, making it even easier to write optimistic UI update code. Meteor has had this component since day one — it’s a core part of how Meteor’s magic works.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;可能你已经从名字中猜到，Minimongo 在客户端 &lt;em&gt;JavaScript&lt;/em&gt; 中直接使用了与 MongoDB 完全相同的查询语言。这非常棒，因为你可以在客户端和服务器端使用同样的代码来获取和更新数据，这使得编写 「积极 UI 更新」的代码变得更加容易。Meteor 自打第一天开始就拥有了这个部件 —— 这是 Meteor 魔法如何工作的一个核心部分。&lt;/p&gt;&lt;h2 id=&quot;3-to-populate-your-data-cache-you-need-a-protocol-for-data-subscriptions--为了实现数据缓存需要数据订阅协议&quot;&gt;3. To populate your data cache, you need a protocol for data subscriptions | 为了实现数据缓存，需要数据订阅协议&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Now that you know you need to put some of our data in a local cache on the client, you need a way to get it there and keep it up to date. This is where another core part of Meteor comes in — data subscriptions over &lt;a href=&quot;https://www.meteor.com/ddp&quot;&gt;DDP&lt;/a&gt;, Meteor’s data synchronization protocol.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;既然你知道需要将数据放入客户端的本地缓存当中，那么就需要一种方式从中获取数据，并使其保持更新。这是 Meteor 诞生的另一个核心部分 —— 建立于 &lt;a href=&quot;https://www.meteor.com/ddp&quot;&gt;DDP&lt;/a&gt; 之上的数据订阅，Meteor 的数据同步协议。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;When a new part of your application is displayed, it can request data to be loaded by registering a subscription, which is a request to the server to send over some data and put it into Minimongo on the client. Now, you can just render your UI components from Minimongo, and trust that the correct data will be there as soon as it is loaded. When the data is no longer needed, you can just unsubscribe and it will go away.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;当你的应用程序显示一个新的部分时，它可以通过注册一个订阅来请求数据。这将会发送请求给服务器端并返回一些数据，然后将其放入客户端的 Minimongo 当中。现在，你就可以直接从 Minimongo 中渲染 UI 组件了，相信正确的数据只要一被加载就会出现在那里。而当你这些数据不再需要的时候，你只需要取消订阅，它也就会随之消失。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Subscriptions in Meteor have some awesome features:&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;ol&gt;    &lt;li&gt;They de-duplicate data. You will never end up with two copies of the same data inside Minimongo.&lt;/li&gt;    &lt;li&gt;They deliver realtime updates. You don’t have to manually poll or ask for updates; when new data shows up on the server, it will be automatically delivered to all of the clients that have subscribed to it.&lt;/li&gt;  &lt;/ol&gt;&lt;/blockquote&gt;&lt;p&gt;Meteor 中的订阅有一些非常棒的特性：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;没有重复数据。你就不用在 Minimongo 中存储相同数据的两份拷贝了。&lt;/li&gt;  &lt;li&gt;实现实时更新。你不再需要手动检查或请求更新；每当有新的数据出现在服务器当中，它将会自动被投递到所有已经订阅该数据的的客户端。&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;  &lt;p&gt;Subscriptions and Minimongo also work together with Meteor methods, which are the last piece of the puzzle to enabling correct optimistic UI rendering.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;通过 Meteor 的方法，订阅也可以与 Minimongo 共同工作，这是解释「积极 UI 渲染」能够正常工作的最后一部分。&lt;/p&gt;&lt;h2 id=&quot;4-to-solve-client-and-server-disagreements-you-need-to-be-able-to-patch-your-ui-with-the-real-result--为了解决客户端和服务器端的不一致需要使用真正的结果来修正-ui&quot;&gt;4. To solve client and server disagreements, you need to be able to patch your UI with the real result | 为了解决客户端和服务器端的不一致，需要使用真正的结果来修正 UI&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;When you are doing optimistic UI updates, the client tries to predict the outcome of some operation. Most of the time, this works great, but sometimes the client just doesn’t have enough information to make an accurate prediction. Maybe it’s missing some permissions data, maybe it doesn’t know about some modification that a different client made, etc. Plus, as any experienced developer will know, you can’t ever trust client code to do the right thing since users can modify the code running in their browser.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;当你在做「积极 UI 更新」的时候，客户端会尝试预测某些操作的结果。大部分的情况下效果很好，但也有时候，客户端并没有足够多的信息来保证预测正确无误。也许是因为无权访问某些数据，也许是不知道某些修改是来自于不同的客户端，等等。此外，任何有经验的开发者都知道，任何时候都不能相信客户端代码能做正确的事情，因为用户可以在自己的浏览器中修改正在运行的代码。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;At first, this sounds like an easy problem — of course, the server always wins, so can’t you just use the result from the server? The answer is yes, but you need to make sure you have rolled back all of the operations done on the client as part of the optimistic UI update. It turns out it is actually really hard to do this when you have multiple user actions happening in parallel.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;乍一听起来,这像是一个简单的问题 —— 当然，服务器总是更胜一筹，所以难道就不可以只使用来自于服务器的结果吗？答案是肯定的，但是你需要确保你已经将由客户端的「积极 UI 更新」的所有操作都进行了回滚。而事实上，当你有多个用户同时进行操作的时候，这就会变得非常困难。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;To run an optimistic update and then roll back the changes to make room for the server result, you need the last piece of the Meteor data story: Methods.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;要实现「积极更新」然后回滚已完成的更改，来为服务器结果腾出空间，你需要了解 Meteor 数据故事的最后一部分：Methods。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Meteor methods are functions that run first on the client against Minimongo, then on the server, on the real MongoDB. Any modifications made during the simulation on the client are tracked, and then rolled back when the real modifications from the server are reported. You don’t need to do anything about tracking changes on the client and rolling them back - you get automatic eventual consistency with the server, and it just works.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Meteor 的方法，是依托于 Minimongo 所优先运行在客户端中的函数，然后才会到达服务器数据库，也就是真正的 MongoDB。任何已经在客户端进行模拟的修改都会被追踪，当服务器端真正的修改上报的时候就会进行回滚。你无需在客户端做任何更改追踪和回滚的事情 —— 客户端将自动与服务器保持最终的一致，它就是这样好用。&lt;/p&gt;&lt;h2 id=&quot;meteor-provides-these-benefits-no-matter-which-front-end-framework-you-are-using--不论你使用何种前端框架都能享受-meteor-所提供的这些好处&quot;&gt;Meteor provides these benefits no matter which front-end framework you are using | 不论你使用何种前端框架，都能享受 Meteor 所提供的这些好处。&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;As you may have noticed throughout this article, none of these features depend on your rendering framework. You can use Meteor’s integrated rendering engine Blaze, the Meteor-&lt;em&gt;Angular&lt;/em&gt; project, or one of several React integrations, and still get all of the benefits of Meteor’s data caching and optimistic UI updates. If you are writing a native iOS app, you can also use the excellent &lt;a href=&quot;https://github.com/martijnwalraven/meteor-ios&quot;&gt;iOS-DDP&lt;/a&gt; project, which implements the same front-end logic but switches out Minimongo for iOS CoreData, letting you write your app in a completely native style.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;通过这篇文章，就像你可能已经注意到的那样，没有任何特性中会依赖于你的渲染框架。你可以使用 Meteor 已集成的渲染引擎 Blaze，也可以是 Meteor-&lt;em&gt;Angular&lt;/em&gt; 项目，或者是某种 React 的集成方案，都依然能够获得 Meteor 的数据缓存和「积极 UI 更新」所带来的好处。如果你正在编写原生 iOS 应用，你也可以使用非常棒的 &lt;a href=&quot;https://github.com/martijnwalraven/meteor-ios&quot;&gt;iOS-DDP&lt;/a&gt; 项目，这个项目实现了同样的前端逻辑，只是为了 iOS 将 Minimongo 换成了 CoreData，从而让你能够使用一种完全原生的方式编写应用。&lt;/p&gt;&lt;h2 id=&quot;try-it-out-for-yourself--为自己试一试吧&quot;&gt;Try it out for yourself | 为自己试一试吧！&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;If you’re not convinced yet that Meteor will let you build a first-class user experience without any of the hassle, try this experiment:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你还不是很确信 Meteor 可以让你毫无障碍地构建一流的用户体验，可以亲自尝试一下：&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;First, &lt;a href=&quot;https://www.meteor.com/try&quot;&gt;complete the official Meteor tutorial&lt;/a&gt;. Then, try building the same app with all of the same features, including optimistic UI updates and data caching, without Meteor. Measure how long it takes and how many lines of code you had to write — I bet you’ll find it will take a lot less time and code with Meteor. Let me know how it goes!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;首先，完成 Meteor 的&lt;a href=&quot;https://www.meteor.com/try&quot;&gt;官方教程&lt;/a&gt;。然后，尝试一下不使用 Meteor 来构建一个应用，要求涵盖包含「积极 UI 更新」和数据缓存在内的所有相同的特性。估计一下总共会花多长时间，以及会写多少行不得已而为之的代码 —— 我打个赌，你会发现远不如使用 Meteor 所花的时间和代码少。请让我拭目以待吧！&lt;/p&gt;",
            "excerpt"    : "&lt;h1 id=&quot;optimistic-ui-with-meteor&quot;&gt;Optimistic UI with Meteor&lt;/h1&gt;"
		} ,
	
		{
            "id"         : "/reactjs-best-practices-for-2016",
            "title"      : "【译】展望2016，React.js 最佳实践 (中英对照版)",
            "category"   : "前端",
            "tags"       : "React, 总结",
            "url"        : "/2016-01-22-reactjs-best-practices-for-2016/",
            "path"       : "_posts/前端/2016-01-22-reactjs-best-practices-for-2016.md",
            "next"       : "/2016-02-11-optimistic-ui-with-meteor/",
            "previous"   : "/2016-01-01-introduction-of-node-ppt/",
            "date"       : "2016-01-22 00:00:00 +0000",
            "shortdate"  : "January 22, 2016",
            "content"    : "&lt;h1 id=&quot;reactjs-best-practices-for-2016&quot;&gt;React.js Best Practices for 2016&lt;/h1&gt;&lt;p&gt;原文地址：&lt;a href=&quot;https://blog.risingstack.com/react-js-best-practices-for-2016/&quot;&gt;https://blog.risingstack.com/react-js-best-practices-for-2016/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Tags: &lt;a href=&quot;https://blog.risingstack.com/tag/react/&quot;&gt;React&lt;/a&gt; · &lt;a href=&quot;https://blog.risingstack.com/tag/reactjs/&quot;&gt;ReactJS&lt;/a&gt; · &lt;a href=&quot;https://blog.risingstack.com/tag/best-practices/&quot;&gt;best practices&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;2015 was the year of &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;&lt;/strong&gt; with tons of new releases and developer conferences dedicated to the topic all over the world. For a detailed list of the most important milestones of last year, check out our &lt;a href=&quot;https://blog.risingstack.com/react-in-2015/&quot;&gt;React in 2015&lt;/a&gt; wrap up.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;过去的2015年，&lt;strong&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;&lt;/strong&gt; 在全世界范围都是一派欣欣向荣的景象，开发者会议无一不热衷于这个话题。在过去一年中发生了很多重要的里程碑事件，更多详情可以查看我们关于 &lt;a href=&quot;https://blog.risingstack.com/react-in-2015/&quot;&gt;React in 2015&lt;/a&gt; 的总结。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The most interesting question for 2016: &lt;strong&gt;How should we write an application&lt;/strong&gt; and what are the recommended libraries?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在新的2016年里，最有趣的问题来了：&lt;strong&gt;我们该如何开发一个应用&lt;/strong&gt;，有什么推荐使用的库？&lt;/p&gt;&lt;blockquote&gt;  &lt;blockquote&gt;    &lt;p&gt;As a developer working for a long time with React.js I have my own answers and best practices, but it’s possible that you won’t agree on everything with me. I’m interested in your ideas and opinions: please leave a comment so we can discuss them.&lt;/p&gt;  &lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;作为一名长时间使用 React.js 的开发者来说，我对这个问题有自己的答案以及最佳实践，但也有可能你不会完全认同。我也非常乐于倾听你的想法和观点：请留言以便讨论。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://risingstack-blog.s3.amazonaws.com/2016/Jan/react_best_practices-1453211146748.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;If you are just getting started with React.js, check out our &lt;a href=&quot;https://blog.risingstack.com/the-react-way-getting-started-tutorial/&quot;&gt;React.js tutorial&lt;/a&gt;, or the &lt;a href=&quot;https://github.com/petehunt/react-howto&quot;&gt;React howto&lt;/a&gt; by Pete Hunt.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你才刚刚开始学习 React.js，可以查看我们的 &lt;a href=&quot;https://blog.risingstack.com/the-react-way-getting-started-tutorial/&quot;&gt;React.js 教程&lt;/a&gt;，或者 Pete Hunt 所写的 &lt;a href=&quot;https://github.com/petehunt/react-howto&quot;&gt;React howto&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&quot;dealing-with-data--数据处理&quot;&gt;Dealing with data | 数据处理&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Handling data in a React.js application is super easy, but challenging at the same time.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在 React.js 应用中处理数据轻而易举，与此同时亦充满挑战。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;It happens because you can pass properties to a React component in a lot of ways to build a rendering tree from it; however it’s not always obvious how you should update your view.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这是因为你可以通过各种方式将属性数据传递给 React 组件，并从中构建渲染树；然而这种方式也并非那么显而易见，到底该如何更新视图。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;2015 started with the releases of different Flux libraries and continued with more functional and reactive solutions.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2015之初诞生了很多不同 Flux 库，并不断产出了更加实用的响应式方案。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Let’s see where we are now:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;让我们看看现在的情况：&lt;/p&gt;&lt;h3 id=&quot;flux&quot;&gt;Flux&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;According to our experience, Flux is often overused &lt;em&gt;(meaning that people use it even if they don’t even need it)&lt;/em&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;根据我们的经验，Flux 经常被滥用，&lt;em&gt;（这意味着大家总是在不需要的时候就用上它）&lt;/em&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Flux provides a clean way to store and update your application’s state and trigger rendering when it’s needed.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Flux 提供了一种非常清晰的方式来存储和更新应用状态，并且只会在必要的时候才触发页面渲染。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Flux can be &lt;strong&gt;useful for the app’s global states&lt;/strong&gt; like: managing logged in user, the state of a router or active account but it can turn quickly into pain if you start to manage your temporary or local data with it.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Flux 致力于&lt;strong&gt;应用的全局状态管理&lt;/strong&gt;，比如：管理已登录用户状态，路由状态，或者是活跃账户状态，但若是用来管理临时数据或者本地数据，瞬间就变成了痛苦。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;We don’t recommend using Flux for managing route-related data like &lt;code class=&quot;highlighter-rouge&quot;&gt;/items/:itemId&lt;/code&gt;. Instead, just fetch it and store it in your component’s state. In this case, it will be destroyed when your component goes away.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们不推荐使用 Flux 来管理路由相关的数据，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;/items/:itemId&lt;/code&gt;。而只是获取路由数据并存储在组件的 state 之中。在这种情况下，它会在组件消失之后一起被销毁。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;em&gt;If you need more info about Flux, &lt;a href=&quot;https://medium.com/@dan_abramov/the-evolution-of-flux-frameworks-6c16ad26bb31#.90lamiv5l&quot;&gt;The Evolution of Flux Frameworks&lt;/a&gt; is a great read.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;em&gt;如果你想了解更多关于 Flux 的信息，&lt;a href=&quot;https://medium.com/@dan_abramov/the-evolution-of-flux-frameworks-6c16ad26bb31#.90lamiv5l&quot;&gt;The Evolution of Flux Frameworks&lt;/a&gt; 非常值得一读。&lt;/em&gt;&lt;/p&gt;&lt;h4 id=&quot;use-redux--使用-redux&quot;&gt;Use Redux | 使用 Redux&lt;/h4&gt;&lt;blockquote&gt;  &lt;blockquote&gt;    &lt;p&gt;Redux is a predictable state container for &lt;em&gt;JavaScript&lt;/em&gt; apps.&lt;/p&gt;  &lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;Redux 是一个 JavaScript 应用的可预测状态容器。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;If you think you need Flux or a similar solution you should check out &lt;a href=&quot;https://github.com/rackt/redux&quot;&gt;redux&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/dan_abramov&quot;&gt;Dan Abramov&lt;/a&gt;’s &lt;a href=&quot;https://egghead.io/series/getting-started-with-redux&quot;&gt;Getting started with redux&lt;/a&gt; course to quickly boost your development skills.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你觉得需要 Flux 或者一种类似的解决方案，你应该了解一下 &lt;a href=&quot;https://github.com/rackt/redux&quot;&gt;redux&lt;/a&gt;，以及学习 &lt;a href=&quot;https://twitter.com/dan_abramov&quot;&gt;Dan Abramov&lt;/a&gt; 的&lt;a href=&quot;https://egghead.io/series/getting-started-with-redux&quot;&gt;Getting started with redux&lt;/a&gt; 课程，这能够迅速提高你的开发技能。&lt;/p&gt;&lt;blockquote&gt;  &lt;blockquote&gt;    &lt;p&gt;Redux evolves the ideas of Flux but avoids its complexity by taking cues from Elm.&lt;/p&gt;  &lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;Redux 延续并改进了 Flux 的思想，并从 Elm 架构中取经，规避了 Flux 的复杂度。（译者注：Elm 是一门面向 Web 的函数式编程语言，致力于改善客户端 Web 编程体验。）&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 id=&quot;keep-your-state-flat--保持状态扁平化&quot;&gt;Keep your state flat | 保持状态扁平化&lt;/h4&gt;&lt;blockquote&gt;  &lt;p&gt;API’s often return nested resources. It can be hard to deal with them in a Flux or Redux-based architecture. We recommend to flatten them with a library like &lt;a href=&quot;https://github.com/gaearon/normalizr&quot;&gt;normalizr&lt;/a&gt; and &lt;strong&gt;keep your state as flat as possible&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;API 经常会返回嵌套资源。这在 Flux 或基于 Redux 的架构中处理起来会非常困难。我们推荐使用 &lt;a href=&quot;https://github.com/gaearon/normalizr&quot;&gt;normalizr&lt;/a&gt; 之类的库将数据进行扁平化处理，&lt;strong&gt;保持状态尽可能地扁平化&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Hint for pros:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;示意：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const data = normalize(response, arrayOf(schema.user))state = _.merge(state, data.entities)  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;em&gt;(we use &lt;a href=&quot;https://www.npmjs.com/package/isomorphic-fetch&quot;&gt;isomorphic-fetch&lt;/a&gt; to communicate with our APIs)&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;em&gt;（我们使用 &lt;a href=&quot;https://www.npmjs.com/package/isomorphic-fetch&quot;&gt;isomorphic-fetch&lt;/a&gt; 来与 APIs 进行交互）&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;use-immutable-states--使用-immutable-状态&quot;&gt;Use immutable states | 使用 immutable 状态&lt;/h3&gt;&lt;blockquote&gt;  &lt;blockquote&gt;    &lt;p&gt;Shared mutable state is the root of all evil - &lt;em&gt;Pete Hunt, React.js Conf 2015&lt;/em&gt;&lt;/p&gt;  &lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;共享的可变性状态乃万恶之源。 —— &lt;em&gt;Pete Hunt, React.js Conf 2015&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://risingstack-blog.s3.amazonaws.com/2016/Jan/immutable_logo_for_react_js_best_practices-1453211749818.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Immutable_object&quot;&gt;Immutable object&lt;/a&gt; is an object whose state cannot be modified after it is created.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Immutable_object&quot;&gt;不可变对象&lt;/a&gt;是一种在创建之后就不可修改的对象。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Immutable objects can save us all a headache and &lt;strong&gt;improve the rendering performance&lt;/strong&gt; with their reference-level equality checks. Like in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate&lt;/code&gt;:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;不可变对象可以让我们免于痛楚，并通过引用级别的比对检查来&lt;strong&gt;改善渲染性能&lt;/strong&gt; 。比如说在 &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate&lt;/code&gt; 中：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shouldComponentUpdate(nexProps) {   // instead of object deep comparsion return this.props.immutableFoo !== nexProps.immutableFoo}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;How to achieve immutability in &lt;em&gt;JavaScript&lt;/em&gt;?&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;如何在 JavaScript 中实现不可变呢？&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The hard way is to be careful and write code like the example below, which you should always check in your unit tests with &lt;a href=&quot;https://www.npmjs.com/package/deep-freeze-node&quot;&gt;deep-freeze-node&lt;/a&gt; &lt;em&gt;(freeze before the mutation and verify the result after it)&lt;/em&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;最痛苦的方式就是小心为之，示例代码如下，你需要在单元测试中通过 &lt;a href=&quot;https://www.npmjs.com/package/deep-freeze-node&quot;&gt;deep-freeze-node&lt;/a&gt; 来反复验证。（在修改之前冻结，并在结束后验证结果。）&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return {    ...state,  foo}return arr1.concat(arr2)  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Believe me, these were the pretty obvious examples.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;相信我，这是最平淡无奇的例子了。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The less complicated way but also less natural one is to use &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;Immutable.js&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;更简单也更自然的方式就是使用 &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;Immutable.js&lt;/a&gt;。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { fromJS } from &#39;immutable&#39;const state = fromJS({ bar: &#39;biz&#39; })  const newState = foo.set(&#39;bar&#39;, &#39;baz&#39;)  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Immutable.js is fast, and the idea behind it is beautiful. I recommend watching the &lt;a href=&quot;https://www.youtube.com/watch?v=I7IdS-PbEgI&quot;&gt;Immutable Data and React&lt;/a&gt; video by &lt;a href=&quot;https://twitter.com/leeb&quot;&gt;Lee Byron&lt;/a&gt; even if you don’t want to use it. It will give deep insight to understand how it works.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Immutable.js 非常之快，背后理念也异常漂亮。哪怕你并不想使用它，我也推荐阅读这个由 &lt;a href=&quot;https://twitter.com/leeb&quot;&gt;Lee Byron&lt;/a&gt; 所制作的视频 &lt;a href=&quot;https://www.youtube.com/watch?v=I7IdS-PbEgI&quot;&gt;Immutable Data and React&lt;/a&gt;。视频对于 Immutable.js 的工作原理有着非常深刻的讲解。&lt;/p&gt;&lt;h3 id=&quot;observables-and-reactive-solutions--观察式与响应式方案&quot;&gt;Observables and reactive solutions | 观察式与响应式方案&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;If you don’t like Flux/Redux or just want to be more reactive, don’t be disappointed! There are other solutions to deal with your data. Here is a short list of libraries what you are probably looking for:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你不喜欢 Flux/Redux 或者只是想要更加 reactive，不要失望！这儿有很多其他数据处理的解决方案。这就有一个相关库的简要列表供你参考：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;http://cycle.js.org/&quot;&gt;cycle.js&lt;/a&gt; &lt;em&gt;(“A functional and reactive *JavaScript&lt;/em&gt; framework for cleaner code”)*&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/fdecampredon/rx-flux&quot;&gt;rx-flux&lt;/a&gt; &lt;em&gt;(“The Flux architecture with RxJS”)&lt;/em&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/acdlite/redux-rx&quot;&gt;redux-rx&lt;/a&gt; &lt;em&gt;(“RxJS utilities for Redux.”)&lt;/em&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://mweststrate.github.io/mobservable/&quot;&gt;mobservable&lt;/a&gt; &lt;em&gt;(“Observable data. Reactive functions. Simple code.”)&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;routing--路由&quot;&gt;Routing | 路由&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Almost every client side application has some routing. If you are using React.js in a browser, you will reach the point when you should pick a library.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;几乎所有的客户端应用都或多或少需要使用路由。如果你在浏览器中使用 React.js，你就会在挑选库的时候碰到这个分歧点。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Our chosen one is the &lt;a href=&quot;https://github.com/rackt/react-router&quot;&gt;react-router&lt;/a&gt; by the excellent &lt;a href=&quot;https://github.com/rackt&quot;&gt;rackt&lt;/a&gt; community. Rackt always ships quality resources for React.js lovers.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们的选择是出自优秀的 &lt;a href=&quot;https://github.com/rackt&quot;&gt;rackt&lt;/a&gt; 社区的 &lt;a href=&quot;https://github.com/rackt/react-router&quot;&gt;react-router&lt;/a&gt;。Racket 给 React.js 的拥簇者带来了很多高质量资源。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;To integrate &lt;code class=&quot;highlighter-rouge&quot;&gt;react-router&lt;/code&gt; check out their &lt;a href=&quot;https://github.com/rackt/react-router/tree/master/docs&quot;&gt;documentation&lt;/a&gt;, but what’s more important here: if you use Flux/Redux we recommend to &lt;strong&gt;keep your router’s state in sync&lt;/strong&gt; with your store/global state.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;你可以查看他们的&lt;a href=&quot;https://github.com/rackt/react-router/tree/master/docs&quot;&gt;文档&lt;/a&gt;以便于集成 &lt;code class=&quot;highlighter-rouge&quot;&gt;react-router&lt;/code&gt;，但是更重要的是：如果你使用 Flux/Redux，我们建议你将路由状态和你的 store 或全局状态&lt;strong&gt;保持同步&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Synchronized router states will help you to control router behaviors by Flux/Redux actions and read router states and parameters in your components.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;同步的路由状态可以帮助你对 Flux/Redux 的 Actions 所提供的路由行为有所控制，并且能够在组件中读取路由状态和参数。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Redux users can simply do it with the &lt;a href=&quot;https://github.com/rackt/redux-simple-router&quot;&gt;redux-simple-router&lt;/a&gt; library.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Redux 用户可以通过 &lt;a href=&quot;https://github.com/rackt/redux-simple-router&quot;&gt;redux-simple-router&lt;/a&gt; 这个库轻松实现它。&lt;/p&gt;&lt;h4 id=&quot;code-splitting-lazy-loading--代码分割惰性加载&quot;&gt;Code splitting, lazy loading | 代码分割，惰性加载&lt;/h4&gt;&lt;blockquote&gt;  &lt;p&gt;Only a few of &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt; users know that it’s possible to split your application’s code to separate the bundler’s output to multiple &lt;em&gt;JavaScript&lt;/em&gt; chunks:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;只有一小部分 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt; 用户知道应用代码是可以分割的，将 bundler 的输出拆分成多个 &lt;em&gt;JavaScript&lt;/em&gt; 块：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require.ensure([], () =&amp;gt; {    const Profile = require(&#39;./Profile.js&#39;)  this.setState({    currentComponent: Profile  })})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;It can be extremely useful in large applications because the user’s browser &lt;strong&gt;doesn’t have to download rarely used codes&lt;/strong&gt; like the profile page after every deploy.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这在大型应用中会非常有用，因为在每次部署之后，用户浏览器就&lt;strong&gt;没有必要下载那些很少用到的代码&lt;/strong&gt;，比如 profile 页面。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Having more chunks will cause more HTTP requests - but that’s not a problem with &lt;a href=&quot;https://http2.github.io/faq/#why-is-http2-multiplexed&quot;&gt;HTTP/2 multiplexed&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;更多代码块将导致更多 HTTP 请求 —— 但是使用 &lt;a href=&quot;https://http2.github.io/faq/#why-is-http2-multiplexed&quot;&gt;HTTP/2 multiplexed&lt;/a&gt; 的话就不成问题。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Combining with &lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook/Optimizing-caching.html&quot;&gt;chunk hashing&lt;/a&gt; you can also optimize your cache hit ratio after code changes.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;结合 &lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook/Optimizing-caching.html&quot;&gt;chunk hashing&lt;/a&gt;，你也可以在代码改变之后优化缓存命中率。（译者注：终端用户访问加速节点时，如果该节点有缓存住了要被访问的数据时就叫做命中，如果没有的话需要回原服务器获取，就是没有命中。）&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The next version of react-router will help a lot in code splitting.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;react-router 的下个版本就将在代码分割这方面提供更多帮助。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;For the future of react-router check out this blog post by &lt;a href=&quot;https://twitter.com/ryanflorence&quot;&gt;Ryan Florence&lt;/a&gt;: &lt;a href=&quot;https://medium.com/@ryanflorence/welcome-to-future-of-web-application-delivery-9750b7564d9f#.vuf3e1nqi&quot;&gt;Welcome to Future of Web Application Delivery&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;想要了解 react-router 的未来走向，可以查看 &lt;a href=&quot;https://twitter.com/ryanflorence&quot;&gt;Ryan Florence&lt;/a&gt; 所写的这篇博文： &lt;a href=&quot;https://medium.com/@ryanflorence/welcome-to-future-of-web-application-delivery-9750b7564d9f#.vuf3e1nqi&quot;&gt;Welcome to Future of Web Application Delivery&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&quot;components--组件&quot;&gt;Components | 组件&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;A lot of people are complaining about JSX. First of all, you should know that it’s optional in React.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;大部分人都对 JSX 存有怨言。首先，你需要知道的是这在 React 中并不是必须的。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;At the end of the day, it will be compiled to &lt;em&gt;JavaScript&lt;/em&gt; with Babel. You can write &lt;em&gt;JavaScript&lt;/em&gt; instead of JSX, but it feels more natural to use JSX while you are working with HTML.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在最后，JSX 都会通过 Babel 被编译成 &lt;em&gt;JavaScript&lt;/em&gt;。你可以直接编写 &lt;em&gt;JavaScript&lt;/em&gt; 来替代 JSX，但是在处理 HTML 的时候使用 JSX 会感觉更加自然。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Especially because even less technical people could still understand and modify the required parts.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;特别是对于不懂技术的人来说，他们依然可以理解和修改必要的部分。&lt;/p&gt;&lt;blockquote&gt;  &lt;blockquote&gt;    &lt;p&gt;JSX is a &lt;em&gt;JavaScript&lt;/em&gt; syntax extension that looks similar to XML. You can use a simple JSX syntactic transform with React. - &lt;a href=&quot;https://facebook.github.io/react/docs/jsx-in-depth.html&quot;&gt;JSX in depth&lt;/a&gt;&lt;/p&gt;  &lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;JSX 是一种与 XML 类似的 &lt;em&gt;JavaScript&lt;/em&gt; 语法扩展。你可以通过一个简单的 JSX 语法转换器来编译 React。 —— &lt;a href=&quot;https://facebook.github.io/react/docs/jsx-in-depth.html&quot;&gt;JSX in depth&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;If you want to read more about JSX check out the &lt;a href=&quot;https://medium.com/javascript-scene/jsx-looks-like-an-abomination-1c1ec351a918#.ca28nvee6&quot;&gt;JSX Looks Like An Abomination - But it’s Good for You&lt;/a&gt; article.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你想要了解更多关于 JSX 的信息，可以查看 &lt;a href=&quot;https://medium.com/javascript-scene/jsx-looks-like-an-abomination-1c1ec351a918#.ca28nvee6&quot;&gt;JSX Looks Like An Abomination - But it’s Good for You&lt;/a&gt; 这篇文章。&lt;/p&gt;&lt;h3 id=&quot;use-classes--使用类&quot;&gt;Use Classes | 使用类&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;React works well with ES2015 classes.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;React 和 ES2015 的 Class 语法搭配完美。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class HelloMessage extends React.Component {    render() {    return &amp;lt;div&amp;gt;Hello {this.props.name}&amp;lt;/div&amp;gt;  }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;We prefer higher order components over mixins so for us leaving &lt;code class=&quot;highlighter-rouge&quot;&gt;createClass&lt;/code&gt; was more like a syntactical question rather than a technical one. We believe there is nothing wrong with using &lt;code class=&quot;highlighter-rouge&quot;&gt;createClass&lt;/code&gt; over &lt;code class=&quot;highlighter-rouge&quot;&gt;React.Component&lt;/code&gt; and vice-versa.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们喜欢&lt;a href=&quot;http://jamesknelson.com/structuring-react-applications-higher-order-components/&quot;&gt;高阶组件&lt;/a&gt;更胜于 mixins，所以对于我们来说，保留 &lt;code class=&quot;highlighter-rouge&quot;&gt;createClass&lt;/code&gt; 就更像一个语法问题而不是技术问题。我们相信使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;createClass&lt;/code&gt; 而不是 &lt;code class=&quot;highlighter-rouge&quot;&gt;React.Component&lt;/code&gt; 绝对无可厚非，反之亦然。&lt;/p&gt;&lt;h3 id=&quot;proptype--属性类型&quot;&gt;PropType | 属性类型&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;If you still don’t check your properties, you should start 2016 with fixing this. It can save hours for you, believe me.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你在2016年依然没有检查 properties，那么你应该从现在开始做起，这将为你节省大量时间，相信我。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MyComponent.propTypes = {    isLoading: PropTypes.bool.isRequired,  items: ImmutablePropTypes.listOf(    ImmutablePropTypes.contains({      name: PropTypes.string.isRequired,    })  ).isRequired}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Yes, it’s possible to validate Immutable.js properties as well with &lt;a href=&quot;https://www.npmjs.com/package/react-immutable-proptypes&quot;&gt;react-immutable-proptypes&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;当然，验证 Immutable.js 所编写的 properties 也是可能的，可以使用&lt;a href=&quot;https://www.npmjs.com/package/react-immutable-proptypes&quot;&gt;react-immutable-proptypes&lt;/a&gt;。&lt;/p&gt;&lt;h3 id=&quot;higher-order-components--高阶组件&quot;&gt;Higher order components | 高阶组件&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Now that &lt;a href=&quot;https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750&quot;&gt;mixins are dead&lt;/a&gt; and not supported in ES6 Class components we should look for a different approach.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;目前来说，&lt;a href=&quot;https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750&quot;&gt;mixins 已死&lt;/a&gt;，而且在 ES6 Class 组件中已经不再被支持，我们应当寻找不同的替代方案。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;What is a higher order component?&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;那什么是高阶组件呢？&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PassData({ foo: &#39;bar&#39; })(MyComponent)  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Basically, you compose a new component from your original one and extend its behaviour. You can use it in various situations like authentication: &lt;code class=&quot;highlighter-rouge&quot;&gt;requireAuth({ role: &#39;admin&#39; })(MyComponent)&lt;/code&gt; &lt;em&gt;(check for a user in higher component and redirect if the user is not logged in)&lt;/em&gt; or connecting your component with Flux/Redux store.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;本质上来说，你可以由原始组件创造一个新的组件并且扩展它的行为。你可以在多种情况下使用它，比如授权：&lt;code class=&quot;highlighter-rouge&quot;&gt;requireAuth({ role: &#39;admin&#39; })(MyComponent)&lt;/code&gt; &lt;em&gt;（检查上层组件中的用户，若是未登录则需要重定向）&lt;/em&gt;，或者是连接你的组件和 Flux/Redux 仓库。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;At RisingStack, we also like to separate data fetching and controller-like logic to higher order components and keep our views as simple as possible.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在RisingStack，我们也将数据获取和类 Controller 的逻辑分割成高阶组件，并保持视图层尽可能简单。&lt;/p&gt;&lt;h2 id=&quot;testing--测试&quot;&gt;Testing | 测试&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Testing with good test coverage must be an important part of your development cycle. Luckily, the React.js community came up with excellent libraries to help us achieve this.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在开发周期中，维持测试的高覆盖率是非常重要的一部分。幸运的是， React.js 社区诞生了很多优秀的库可以帮助我们达到这一点。&lt;/p&gt;&lt;h3 id=&quot;component-testing--组件测试&quot;&gt;Component testing | 组件测试&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;One of our favorite library for component testing is &lt;a href=&quot;https://github.com/airbnb/enzyme&quot;&gt;enzyme&lt;/a&gt; by AirBnb. With it’s shallow rendering feature you can test logic and rendering output of your components, which is pretty amazing. It still cannot replace your selenium tests, but you can step up to a new level of frontend testing with it.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们最喜爱的库之一是由 AirBnb 所开发的 &lt;a href=&quot;https://github.com/airbnb/enzyme&quot;&gt;enzyme&lt;/a&gt;，可用于组件测试。非常神奇的是，它的浅渲染特性可以对组件的逻辑及其渲染输出进行测试。尽管它还不能替代你的 selenium 测试，但是将前端测试提升到了一个新的水平。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;it(&#39;simulates click events&#39;, () =&amp;gt; {    const onButtonClick = sinon.spy()  const wrapper = shallow(    &amp;lt;Foo onButtonClick={onButtonClick} /&amp;gt;  )  wrapper.find(&#39;button&#39;).simulate(&#39;click&#39;)  expect(onButtonClick.calledOnce).to.be.true})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Looks neat, isn’t it?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;看起来就非常简洁，不是么？&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Do you use chai as assertion library? You will like &lt;a href=&quot;https://github.com/producthunt/chai-enzyme&quot;&gt;chai-enyzime&lt;/a&gt;!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;你在使用 chai 作为测试断言库嘛？相信你会喜欢 &lt;a href=&quot;https://github.com/producthunt/chai-enzyme&quot;&gt;chai-enyzime&lt;/a&gt; 的！&lt;/p&gt;&lt;h3 id=&quot;redux-testing--redux-测试&quot;&gt;Redux testing | Redux 测试&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;Testing a reducer&lt;/strong&gt; should be easy, it responds to the incoming actions and turns the previous state to a new one:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;测试一个 reducer&lt;/strong&gt; 非常简单，它响应新到来的 actions，并且将原来的状态进行更新：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;it(&#39;should set token&#39;, () =&amp;gt; {    const nextState = reducer(undefined, {    type: USER_SET_TOKEN,    token: &#39;my-token&#39;  })  // immutable.js state output  expect(nextState.toJS()).to.be.eql({    token: &#39;my-token&#39;  })})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;Testing actions&lt;/strong&gt; is simple until you start to use async ones. For testing async redux actions we recommend to check out &lt;a href=&quot;https://www.npmjs.com/package/redux-mock-store&quot;&gt;redux-mock-store&lt;/a&gt;, it can help a lot.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;测试 actions&lt;/strong&gt; 也很简单，但是异步 actions 就不太一样了。对于测试异步的 Redux actions 来说，我们推荐使用 &lt;a href=&quot;https://www.npmjs.com/package/redux-mock-store&quot;&gt;redux-mock-store&lt;/a&gt;，非常有帮助。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;it(&#39;should dispatch action&#39;, (done) =&amp;gt; {    const getState = {}  const action = { type: &#39;ADD_TODO&#39; }  const expectedActions = [action]  const store = mockStore(getState, expectedActions, done)  store.dispatch(action)})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;For deeper &lt;a href=&quot;http://rackt.org/redux/docs/recipes/WritingTests.html&quot;&gt;redux testing&lt;/a&gt; visit the official documentation.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;更深度地了解 &lt;a href=&quot;http://rackt.org/redux/docs/recipes/WritingTests.html&quot;&gt;redux 测试&lt;/a&gt;，可以查看官方文档。&lt;/p&gt;&lt;h3 id=&quot;use-npm--使用-npm&quot;&gt;Use npm | 使用 npm&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;However React.js works well without code bundling we recommend using &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; or &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; to have the power of &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;. Npm is full of quality React.js packages, and it can help to manage your dependencies in a nice way.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;虽然 React.js 并不依赖代码打包工具就可以很好地工作，但我们还是推荐使用 &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; 或者 &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; 来发挥 &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; 的能力。Npm 上满是高质量的 React.js 包，还可以帮你非常优雅地管理依赖。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;em&gt;(Please don’t forget to reuse your own components, it’s an excellent way to optimize your code.)&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;em&gt;（请不要忘记复用你自己的组件，这是一种绝佳的代码优化方式。）&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;bundle-size--bundle-大小&quot;&gt;Bundle size | Bundle 大小&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;This question is not React-related but because most people bundle their React application I think it’s important to mention it here.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这本身不是一个 React 相关的问题，但是大多数人都在打包他们的 React 应用，所以我认为提到这点很重要。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;While you are bundling your source code, always be aware of your bundle’s file size. To &lt;strong&gt;keep it at the minimum&lt;/strong&gt; you should consider how you require/import your dependencies.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;当你打包源代码的时候，时刻警惕打包后的文件大小。为了&lt;strong&gt;保持体积最小化&lt;/strong&gt;，你应该考虑如何 require/import 依赖。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Check the following code snippet, the two different way can make a huge difference in the output:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;对比以下代码片段，这两种不同的方式对输出的影响区别巨大：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { concat, sortBy, map, sample } from &#39;lodash&#39;// vs.import concat from &#39;lodash/concat&#39;;  import sortBy from &#39;lodash/sortBy&#39;;  import map from &#39;lodash/map&#39;;  import sample from &#39;lodash/sample&#39;;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Check out the &lt;a href=&quot;https://lacke.mn/reduce-your-bundle-js-file-size/&quot;&gt;Reduce Your bundle.js File Size By Doing This One Thing&lt;/a&gt; for more details.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;可以查看这篇文章 &lt;a href=&quot;https://lacke.mn/reduce-your-bundle-js-file-size/&quot;&gt;Reduce Your bundle.js File Size By Doing This One Thing&lt;/a&gt; 获取更多详情。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;We also like to split our code to least &lt;code class=&quot;highlighter-rouge&quot;&gt;vendors.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; because vendors updates less frequently than our code base.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们也喜欢将代码分离出至少 &lt;code class=&quot;highlighter-rouge&quot;&gt;vendors.js&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; 两个文件，因为 vendors 相对于我们的代码库来说更新不是那么频繁。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;With hashing the output file names &lt;em&gt;(chunk hash in WebPack)&lt;/em&gt; and caching them for the long term, we can dramatically reduce the size of the code what needs to be downloaded by returning visitors on the site. Combining it with lazy loading you can imagine how optimal can it be.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;将输出文件名称进行哈希化处理 &lt;em&gt;(Webpack 中的 chunk hash)&lt;/em&gt;，并使用长缓存，我们可以大大减少用户需要下载的代码大小。结合惰性加载，优化效果可想而知。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;If you are new to Webpack, check out this excellent &lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook&quot;&gt;React webpack cookbook&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你还不太熟悉 Webpack，可以查看这本优秀的 &lt;a href=&quot;https://christianalfoni.github.io/react-webpack-cookbook&quot;&gt;React webpack 手册&lt;/a&gt;。&lt;/p&gt;&lt;h3 id=&quot;component-level-hot-reload--组件级别热重载&quot;&gt;Component-level hot reload | 组件级别热重载&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;If you ever wrote a single page application with livereload, probably you know how annoying it is when you are working on something stateful, and the whole page just reloads while you hit a save in your editor. You have to click through the application again, and you will go crazy repeating this a lot.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你曾经使用过热加载来编写单页面应用，当你在处理某些与状态相关的事情时，可能你就会明白当你在编辑器中点击保存，整个页面就重新加载了是多么令人讨厌。这样子就不得不重新点击一遍应用，重复如此会令人抓狂的。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;With React, it’s possible to reload a component while &lt;strong&gt;keeping its states&lt;/strong&gt; - boom, no more pain!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;通过 React，在重载组件的同时&lt;strong&gt;保持组件状态&lt;/strong&gt;已经成为可能 —— 耶，从此不再痛苦！（&lt;del&gt;没有蛀牙！&lt;/del&gt;）&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;To setup hot reload check out the &lt;a href=&quot;https://github.com/gaearon/react-transform-boilerplate&quot;&gt;react-transform-boilerplate&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;关于如何搭建热重载，可以参考 &lt;a href=&quot;https://github.com/gaearon/react-transform-boilerplate&quot;&gt;react-transform-boilerplate&lt;/a&gt;。&lt;/p&gt;&lt;h3 id=&quot;use-es2015--使用es2015&quot;&gt;Use ES2015 | 使用ES2015&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://risingstack-blog.s3.amazonaws.com/2016/Jan/babel_logo_in_react_js_best_practices_2016-1453212218011.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;I mentioned that we use JSX in our React.js components what we transpile with &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel.js&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;前面有提到过，我们可以在 React.js 组件中使用 JSX，然后使用&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel.js&lt;/a&gt;进行编译。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Babel can do much more and also makes possible to write ES6/ES2015 code for browsers today. At RisingStack, we use ES2015 features on both server and client side which are available in the latest LTS Node.js version.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;其实 Babel 的能力远不止如此，它也可以让我们现在就可以给浏览器编写 ES6/ES2015 代码。在 RisingStack，我们在服务器端和客户端都使用了 ES2015 特性，这都已经在最新的 LTS Node.js 版本中被实现了。&lt;/p&gt;&lt;h3 id=&quot;linters&quot;&gt;Linters&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Maybe you already use a style guide for your &lt;em&gt;JavaScript&lt;/em&gt; code but did you know that there are style guides for React as well? We highly recommend to pick one and start following it.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;或许你已经给你的 &lt;em&gt;JavaScript&lt;/em&gt; 代码制定了代码规范，但是你知道也有用于 React 的代码规范了吗？我们强烈推荐挑选一个并开始遵循它。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;At RisingStack, we also enforce our linters to run on the CI system and for &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; as well. Check out &lt;a href=&quot;https://www.npmjs.com/package/pre-push&quot;&gt;pre-push&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/pre-commit&quot;&gt;pre-commit&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在 RisingStack，我们也将 linters 强制运行在 CI 系统上，&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; 亦然。可以试试 &lt;a href=&quot;https://www.npmjs.com/package/pre-push&quot;&gt;pre-push&lt;/a&gt; 或者 &lt;a href=&quot;https://www.npmjs.com/package/pre-commit&quot;&gt;pre-commit&lt;/a&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;We use &lt;em&gt;JavaScript&lt;/em&gt; Standard Style for &lt;em&gt;JavaScript&lt;/em&gt; with &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-react&quot;&gt;eslint-plugin-react&lt;/a&gt; to lint our React.js code.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们使用标准的 &lt;em&gt;JavaScript&lt;/em&gt; 代码风格，并使用了 &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-react&quot;&gt;eslint-plugin-react&lt;/a&gt;对 React.js 代码进行规范 。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;em&gt;(That’s right, we do not use semicolons anymore.)&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;em&gt;（就是，我们不再使用分号。）&lt;/em&gt;&lt;/p&gt;&lt;h2 id=&quot;graphql-and-relay--graphql-和-relay&quot;&gt;GraphQL and Relay | GraphQL 和 Relay&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;GraphQL and Relay are relatively new technologies. At RisingStack, we don’t use it in production for now, just keeping our eyes open.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;GraphQL 和 Relay 相对而言属于新技术，在 RisingStack，目前我们还没有在产品环境中使用它们，暂时保持关注。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;We wrote a library called &lt;a href=&quot;https://github.com/risingstack/graffiti&quot;&gt;graffiti&lt;/a&gt; which is a MongoDB ORM for Relay and makes it possible to create a GraphQL server from your existing mongoose models.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们曾经写过一个 Relay 的 MongoDB ORM库，叫做 &lt;a href=&quot;https://github.com/risingstack/graffiti&quot;&gt;graffiti&lt;/a&gt;，可以使用已有的 mongoose 模型直接创建一个 GraphQL 服务器。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;If you would like to learn these new technologies we recommend to check it out and play with it.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你想要学习这些新技术，我们建议你可以找来玩一玩。&lt;/p&gt;&lt;h2 id=&quot;takeaway-from-these-reactjs-best-practices--尽情享用这些-reactjs-最佳实践&quot;&gt;Takeaway from these React.js Best Practices | 尽情享用这些 React.js 最佳实践&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Some of the highlighted techniques and libraries are not React.js related at all - always keep your eyes open and check what others in the community do. The React community is inspired a lot by the &lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial/&quot;&gt;Elm architecture&lt;/a&gt; in 2015.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;有些突出的技术和库其实跟 React.js 并不相关 —— 但是保持视野开阔，关注社区的其他人都在做些什么。React 社区在2015年里就受到了 &lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial/&quot;&gt;Elm 架构&lt;/a&gt; 的很多启发。&lt;/p&gt;&lt;blockquote&gt;  &lt;blockquote&gt;    &lt;p&gt;If you know about other essential React.js tools that people should use in 2016, let us know in the comments!&lt;/p&gt;  &lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;如果你知道其它在2016年必不可少的 React.js 工具，请留言让我们知道！&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;&lt;h4 id=&quot;原作者-péter-márton&quot;&gt;原作者: &lt;a href=&quot;https://blog.risingstack.com/author/peter-marton/&quot;&gt;Péter Márton&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;CTO at RisingStack, brewing beer with Node.js&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/slashdotpeter&quot;&gt;https://twitter.com/slashdotpeter&lt;/a&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;h1 id=&quot;reactjs-best-practices-for-2016&quot;&gt;React.js Best Practices for 2016&lt;/h1&gt;"
		} ,
	
		{
            "id"         : "/introduction-of-node-ppt",
            "title"      : "Node PPT Markdown 演示（转）",
            "category"   : "演讲",
            "tags"       : "Node, 技能",
            "url"        : "/2016-01-01-introduction-of-node-ppt/",
            "path"       : "_posts/演讲/2016-01-01-introduction-of-node-ppt.md",
            "next"       : "/2016-01-22-reactjs-best-practices-for-2016/",
            "previous"   : "/2015-12-10-spring-mvc-in-action/",
            "date"       : "2016-01-01 00:00:00 +0000",
            "shortdate"  : "January 01, 2016",
            "content"    : "&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodeppt&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;markdown&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;演示&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;三水清&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//github.com/ksky521/nodePPT&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/css/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/js/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moon&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;nodeppt&quot;&gt;nodePPT&lt;/h1&gt;&lt;h2 id=&quot;这可能是迄今为止最好的网页版演示库&quot;&gt;这可能是迄今为止最好的网页版演示库&lt;/h2&gt;&lt;p&gt;&lt;small style=&quot;vertical-align:middle;display:inline-block&quot;&gt;&amp;lt;iframe src=&quot;http://ghbtns.com/github-btn.html?user=ksky521&amp;amp;repo=nodeppt&amp;amp;type=watch&amp;amp;count=true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;110&quot; height=&quot;20&quot; style=&quot;width:110px;height:20px;  background-color: transparent;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;iframe src=&quot;http://ghbtns.com/github-btn.html?user=ksky521&amp;amp;repo=nodeppt&amp;amp;type=fork&amp;amp;count=true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;110&quot; height=&quot;20&quot; style=&quot;width:110px;height:20px;  background-color: transparent;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;iframe src=&quot;http://ghbtns.com/github-btn.html?user=ksky521&amp;amp;repo=nodeppt&amp;amp;type=follow&amp;amp;count=false&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;170&quot; height=&quot;20&quot; style=&quot;width:170px;height:20px;  background-color: transparent;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/small&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;为什么选择nodeppt&quot;&gt;为什么选择nodePPT&lt;/h2&gt;&lt;hr /&gt;&lt;ul&gt;  &lt;li&gt;基于GFM的markdown语法编写 {:&amp;amp;.rollIn}&lt;/li&gt;  &lt;li&gt;支持html混排，再复杂的demo也可以做！&lt;/li&gt;  &lt;li&gt;导出网页或者pdf更容易分享&lt;/li&gt;  &lt;li&gt;支持单页背景图片&lt;/li&gt;  &lt;li&gt;多种模式：纵览模式，双屏模式，远程控制&lt;/li&gt;  &lt;li&gt;可以使用画板，可以使用note做备注&lt;/li&gt;  &lt;li&gt;支持语法高亮，自由选择highlight样式&lt;/li&gt;  &lt;li&gt;可以单页ppt内部动效，单步动效&lt;/li&gt;  &lt;li&gt;支持进入/退出回调，做在线demo很方便&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;基本语法和样式演示&quot;&gt;基本语法和样式演示&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;封面样式&quot;&gt;封面样式&lt;/h1&gt;&lt;h2 id=&quot;h1是作为封面用的内部的都用h2&quot;&gt;h1是作为封面用的，内部的都用h2&lt;/h2&gt;&lt;p&gt;&lt;small&gt;演讲者：xxx&lt;/small&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;样式展示-flexboxvleft&quot;&gt;样式展示 {:&amp;amp;.flexbox.vleft}&lt;/h1&gt;&lt;blockquote&gt;  &lt;p&gt;nodePPT 让每个人都爱上做分享！&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;基本语法指南&quot;&gt;基本语法指南&lt;/h2&gt;&lt;hr /&gt;&lt;pre&gt;&lt;code class=&quot;markdown&quot;&gt;/* 先写总的配置 */title: 这是title，网页名称speaker: 演讲者名称url: https://github.com/ksky521/nodePPTtransition: 全局转场动效files: 引入的js和css文件，多个以半角逗号隔开theme: 皮肤样式highlightStyle: 代码高亮样式，默认monokai_sublimeusemathjax: yes 启用MathJax渲染公式/* 以&amp;#91;slide&amp;#93; 隔开每个ppt页面 */&amp;#91;slide&amp;#93;## 二级标题这里写内容即可&amp;#91;slide&amp;#93;...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[slide style=”background-image:url(‘/img/bg1.png’)”]&lt;/p&gt;&lt;h1 id=&quot;支持添加背景图片-flexboxvleft&quot;&gt;支持添加背景图片 {:&amp;amp;.flexbox.vleft}&lt;/h1&gt;&lt;p&gt;使用方法：[slide style=”background-image:url(‘/img/bg1.png’)”]&lt;/p&gt;&lt;p&gt;完全style写法，更加灵活，视频背景、repeat背景更不在话下&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;使用latex公式&quot;&gt;使用LaTex公式：&lt;/h2&gt;&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;x = {-b \pm \sqrt{b^2-4ac} \over 2a}.    s = ut + \frac{1}{2}at^2&lt;/script&gt;矩阵：\( x = {\begin{bmatrix} 1 &amp;amp; 2 &amp;amp; 3 \\ 4 &amp;amp; 5 &amp;amp; 6 \end{bmatrix}}  \)&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;支持classid自定义属性样式&quot;&gt;支持.class/#id/自定义属性样式&lt;/h2&gt;&lt;hr /&gt;&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;使用：.class{:.class}使用：#id{:#id}组合使用：{:.class.class2 width=&quot;200px&quot;}父元素样式使用&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;：{:&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;.class}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;主页面样式&quot;&gt;主页面样式&lt;/h2&gt;&lt;h3 id=&quot;-是上下分界线&quot;&gt;—-是上下分界线&lt;/h3&gt;&lt;hr /&gt;&lt;p&gt;nodeppt是基于nodejs写的支持 &lt;strong&gt;Markdown!&lt;/strong&gt; 语法的网页PPT&lt;/p&gt;&lt;p&gt;nodeppt：https://github.com/ksky521/nodePPT&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;表格示例&quot;&gt;表格示例&lt;/h2&gt;&lt;h3 id=&quot;市面上主要的css预处理器lesssassstylus&quot;&gt;市面上主要的css预处理器：Less\Sass\Stylus&lt;/h3&gt;&lt;hr /&gt;&lt;p&gt;| Less | Sass | Stylus:——-|:——:|——-:|——–环境 |js/nodejs | Ruby(这列右对齐) | nodejs(高亮) {:.highlight}扩展名 | .less | .scss/.sass | .styl特点 | 老牌，用户多，支持js解析 | 功能全，有成型框架，发展快 | 语法多样，小众案例/框架 | &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt; | &lt;a href=&quot;http://beta.compass-style.org&quot;&gt;Compass&lt;/a&gt; &lt;a href=&quot;http://getbootstrap.com/css/#sass&quot;&gt;Bootstrap&lt;/a&gt; &lt;a href=&quot;http://foundation.zurb.com/&quot;&gt;Foundation&lt;/a&gt; &lt;a href=&quot;http://bourbon.io&quot;&gt;Bourbon&lt;/a&gt; &lt;a href=&quot;https://github.com/jsw0528/base.sass&quot;&gt;Base.Sass&lt;/a&gt; |&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;text&quot;&gt;text&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;&lt;span class=&quot;text-danger&quot;&gt;.text-danger&lt;/span&gt; &lt;span class=&quot;text-success&quot;&gt;.text-sucess&lt;/span&gt;&lt;span class=&quot;text-primary&quot;&gt;.text-primary&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;text-warning&quot;&gt;.text-warning&lt;/span&gt;&lt;span class=&quot;text-info&quot;&gt;.text-info&lt;/span&gt;&lt;span class=&quot;text-white&quot;&gt;.text-white&lt;/span&gt;&lt;span class=&quot;text-dark&quot;&gt;.text-dark&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;blue&quot;&gt;.blue&lt;/span&gt;&lt;span class=&quot;blue2&quot;&gt;.blue2&lt;/span&gt;&lt;span class=&quot;blue3&quot;&gt;.blue3&lt;/span&gt;&lt;span class=&quot;gray&quot;&gt;.gray&lt;/span&gt;&lt;span class=&quot;gray2&quot;&gt;.gray2&lt;/span&gt;&lt;span class=&quot;gray3&quot;&gt;.gray3&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;red&quot;&gt;.red&lt;/span&gt;&lt;span class=&quot;red2&quot;&gt;.red2&lt;/span&gt;&lt;span class=&quot;red3&quot;&gt;.red3&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;yellow&quot;&gt;.yellow&lt;/span&gt;&lt;span class=&quot;yellow2&quot;&gt;.yellow2&lt;/span&gt;&lt;span class=&quot;yellow3&quot;&gt;.yellow3&lt;/span&gt;&lt;span class=&quot;green&quot;&gt;.green&lt;/span&gt;&lt;span class=&quot;green2&quot;&gt;.green2&lt;/span&gt;&lt;span class=&quot;green3&quot;&gt;.green3&lt;/span&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;label-and-link&quot;&gt;label and link&lt;/h2&gt;&lt;p&gt;&lt;span class=&quot;label label-primary&quot;&gt;.label.label-primary&lt;/span&gt;&lt;span class=&quot;label label-warning&quot;&gt;.label.label-warning&lt;/span&gt;&lt;span class=&quot;label label-danger&quot;&gt;.label.label-danger&lt;/span&gt;&lt;span class=&quot;label label-default&quot;&gt;.label.label-default&lt;/span&gt;&lt;span class=&quot;label label-success&quot;&gt;.label.label-success&lt;/span&gt;&lt;span class=&quot;label label-info&quot;&gt;.label.label-info&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;#&quot;&gt;link style&lt;/a&gt; &lt;mark&gt;mark&lt;/mark&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;blockquote&quot;&gt;blockquote&lt;/h2&gt;&lt;hr /&gt;&lt;blockquote&gt;  &lt;p&gt;nodeppt可能是迄今为止最好用的web presentation &lt;small&gt;三水清&lt;/small&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;下面是另外一种样式&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;这是一个class是：pull-right的blockquote &lt;small&gt;small一下&lt;/small&gt; {:&amp;amp;.pull-right}&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;buttons&quot;&gt;buttons&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;&lt;button class=&quot;btn btn-default&quot;&gt;.btn .btn-default&lt;/button&gt;  &lt;button class=&quot;btn btn-primary&quot;&gt;.btn.btn-lg.btn-primary&lt;/button&gt; &lt;button class=&quot;btn btn-warning&quot;&gt;.btn.btn-waring&lt;/button&gt; &lt;button class=&quot;btn btn-success&quot;&gt;.btn.btn-success&lt;/button&gt; &lt;button class=&quot;btn btn-danger&quot;&gt;.btn.btn-danger&lt;/button&gt;&lt;/p&gt;&lt;p&gt;&lt;button class=&quot;btn btn-lg btn-default&quot;&gt;.btn.btn-lg.btn-default&lt;/button&gt; &lt;button class=&quot;btn btn-xs btn-success&quot;&gt;.btn.btn-xs.btn-success&lt;/button&gt; &lt;button class=&quot;btn btn-sm btn-primary&quot;&gt;.btn.btn-sm.btn-primary&lt;/button&gt; &lt;button class=&quot;btn btn-rounded btn-warning&quot;&gt;.btn.btn-rounded.btn-waring&lt;/button&gt;  &lt;button class=&quot;btn btn-danger&quot; disabled=&quot;disabled&quot;&gt;disabled.btn.btn-danger&lt;/button&gt;&lt;/p&gt;&lt;p&gt;&lt;button class=&quot;btn btn-success&quot;&gt;&lt;i class=&quot;fa fa-share mr5&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;icons-font-awesome&quot;&gt;icons: Font Awesome&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;&lt;i class=&quot;fa fa-apple&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fa fa-android&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fa fa-google&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fa fa-linux&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fa fa-css3&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fa fa-html5&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fa fa-usd&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fa fa-pie-chart&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fa fa-file-video-o&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fa fa-cog&quot;&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;代码格式化&quot;&gt;代码格式化&lt;/h2&gt;&lt;h3 id=&quot;使用-highlightjs-进行语法高亮&quot;&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;highlightjs&lt;/code&gt; 进行语法高亮&lt;/h3&gt;&lt;hr /&gt;&lt;div class=&quot;columns-2&quot;&gt;    &lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;(function(window, document){    var a = 1;    var test = function(){        var b = 1;        alert(b);    };    //泛数组转换为数组    function toArray(arrayLike) {        return [].slice.call(arrayLike);    }}(window, document));    &lt;/code&gt;&lt;/pre&gt;    &lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;(function(window, document){    var a = 1;    var test = function(){        var b = 1;        alert(b);    };    //泛数组转换为数组    function toArray(arrayLike) {        return [].slice.call(arrayLike);    }}(window, document));    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;[slide data-on-enter=”testScriptTag”]&lt;/p&gt;&lt;h2 id=&quot;支持-html-和-markdown-语法混编&quot;&gt;支持 HTML 和 markdown 语法混编&lt;/h2&gt;&lt;hr /&gt;&lt;div class=&quot;file-setting&quot;&gt;    &lt;p&gt;这是html&lt;/p&gt;&lt;/div&gt;&lt;p id=&quot;css-demo&quot;&gt;这是css样式&lt;/p&gt;&lt;p&gt;将html代码直接混编到**markdown**文件中即可&lt;/p&gt;&lt;p&gt;我是js控制的颜色 black {:#testScriptTag}&lt;/p&gt;&lt;script&gt;    function testScriptTag(){        document.getElementById(&#39;testScriptTag&#39;).style.color = &#39;black&#39;;    }&lt;/script&gt;&lt;style&gt;#css-demo{    color: red;}&lt;/style&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;iframe效果&quot;&gt;iframe效果&lt;/h2&gt;&lt;hr /&gt;&lt;iframe data-src=&quot;http://www.baidu.com&quot; src=&quot;about:blank;&quot;&gt;&lt;/iframe&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;内置多套皮肤&quot;&gt;内置多套皮肤&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;支持多种皮肤&quot;&gt;支持多种皮肤&lt;/h2&gt;&lt;hr /&gt;&lt;div class=&quot;columns6&quot;&gt;    &lt;a href=&quot;?theme=color&quot; class=&quot;label-danger&quot;&gt;color&lt;/a&gt;    &lt;a href=&quot;?theme=blue&quot; class=&quot;label-primary&quot;&gt;blue&lt;/a&gt;    &lt;a href=&quot;?theme=dark&quot; class=&quot;label-info&quot;&gt;dark&lt;/a&gt;    &lt;a href=&quot;?theme=green&quot; class=&quot;label-success&quot;&gt;green&lt;/a&gt;    &lt;a href=&quot;?theme=light&quot; class=&quot;label-warning&quot;&gt;light&lt;/a&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;多窗口和远程控制演示&quot;&gt;多窗口和远程控制演示&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;多窗口演示&quot;&gt;多窗口演示&lt;/h2&gt;&lt;h2 id=&quot;双屏演示不out&quot;&gt;双屏演示不out！&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;本页面网址改成 &lt;a href=&quot;?_multiscreen=1&quot;&gt;url?_multiscreen=1&lt;/a&gt;，支持多屏演示哦！&lt;/p&gt;&lt;p&gt;跟powderpoint/keynote一样的双屏功能，带有备注信息。&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;nodeppt动效和转场演示&quot;&gt;nodePPT动效和转场演示&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;第一部分介绍单页slide内动效&quot;&gt;第一部分：介绍单页slide内动效&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;p&gt;[magic data-transition=”earthquake”]&lt;/p&gt;&lt;h2 id=&quot;演示magic标签效果&quot;&gt;演示magic标签效果&lt;/h2&gt;&lt;hr /&gt;&lt;div class=&quot;columns3&quot;&gt;    &lt;img src=&quot;//o7mw3gkkh.qnssl.com//girl.jpg&quot; height=&quot;450&quot; /&gt;    &lt;img src=&quot;//o7mw3gkkh.qnssl.com//girl.jpg&quot; height=&quot;450&quot; /&gt;    &lt;img src=&quot;//o7mw3gkkh.qnssl.com//girl.jpg&quot; height=&quot;450&quot; /&gt;&lt;/div&gt;&lt;p&gt;========&lt;/p&gt;&lt;h2 id=&quot;演示earthquake转场效果&quot;&gt;演示earthquake转场效果&lt;/h2&gt;&lt;hr /&gt;&lt;div class=&quot;columns4&quot;&gt;    &lt;img src=&quot;//o7mw3gkkh.qnssl.com//girl.jpg&quot; height=&quot;320&quot; /&gt;    &lt;img src=&quot;//o7mw3gkkh.qnssl.com//girl.jpg&quot; height=&quot;320&quot; /&gt;    &lt;img src=&quot;//o7mw3gkkh.qnssl.com//girl.jpg&quot; height=&quot;320&quot; /&gt;    &lt;img src=&quot;//o7mw3gkkh.qnssl.com//girl.jpg&quot; height=&quot;320&quot; /&gt;&lt;/div&gt;&lt;p&gt;[/magic]&lt;/p&gt;&lt;p&gt;[slide][magic data-transition=”cover-circle”]&lt;/p&gt;&lt;h2 id=&quot;换个magic动效效果&quot;&gt;换个magic动效效果&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com//girl.jpg&quot; alt=&quot;&quot; /&gt;====&lt;img src=&quot;//o7mw3gkkh.qnssl.com//girl.jpg&quot; alt=&quot;&quot; /&gt;[/magic]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;动效fadein&quot;&gt;动效：fadeIn&lt;/h2&gt;&lt;hr /&gt;&lt;ul&gt;  &lt;li&gt;列表支持渐显动效哦 {:&amp;amp;.fadeIn}    &lt;ul&gt;      &lt;li&gt;使用方法&lt;/li&gt;      &lt;li&gt;markdown列表第一条加上：{:&amp;amp;.动效类型}&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;动效类型    &lt;ul&gt;      &lt;li&gt;fadeIn&lt;/li&gt;      &lt;li&gt;rollIn&lt;/li&gt;      &lt;li&gt;bounceIn&lt;/li&gt;      &lt;li&gt;moveIn&lt;/li&gt;      &lt;li&gt;zoomIn&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;动效zoomin&quot;&gt;动效：zoomIn&lt;/h2&gt;&lt;hr /&gt;&lt;ul&gt;  &lt;li&gt;列表支持渐显动效哦 {:&amp;amp;.zoomIn}&lt;/li&gt;  &lt;li&gt;动效类型    &lt;ul&gt;      &lt;li&gt;fadeIn&lt;/li&gt;      &lt;li&gt;rollIn&lt;/li&gt;      &lt;li&gt;bounceIn&lt;/li&gt;      &lt;li&gt;moveIn&lt;/li&gt;      &lt;li&gt;zoomIn&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;动效bouncein&quot;&gt;动效：bounceIn&lt;/h2&gt;&lt;hr /&gt;&lt;ul&gt;  &lt;li&gt;列表支持渐显动效哦 {:&amp;amp;.bounceIn}&lt;/li&gt;  &lt;li&gt;动效类型    &lt;ul&gt;      &lt;li&gt;fadeIn&lt;/li&gt;      &lt;li&gt;rollIn&lt;/li&gt;      &lt;li&gt;bounceIn&lt;/li&gt;      &lt;li&gt;moveIn&lt;/li&gt;      &lt;li&gt;zoomIn&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;nodeppt支持多达20多个转场动效&quot;&gt;nodePPT支持多达20多个转场动效&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;20种转场动效随心换&quot;&gt;20种转场动效随心换&lt;/h2&gt;&lt;hr /&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;?transition=slide&quot;&gt;slide&lt;/a&gt;/&lt;a href=&quot;?transition=slide2&quot;&gt;slide2&lt;/a&gt;/&lt;a href=&quot;?transition=slide3&quot;&gt;slide3&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;?transition=newspaper&quot;&gt;newspaper&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;?transition=glue&quot;&gt;glue&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;?transition=kontext&quot;&gt;kontext&lt;/a&gt;/&lt;a href=&quot;?transition=vkontext&quot;&gt;vkontext&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;?transition=move&quot;&gt;move&lt;/a&gt;/&lt;a href=&quot;?transition=circle&quot;&gt;circle&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;?transition=horizontal&quot;&gt;horizontal&lt;/a&gt;/&lt;a href=&quot;?transition=horizontal3d&quot;&gt;horizontal3d&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;?transition=vertical3d&quot;&gt;vertical3d&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;?transition=zoomin&quot;&gt;zoomin&lt;/a&gt;/&lt;a href=&quot;?transition=zoomout&quot;&gt;zoomout&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;?transition=cards&quot;&gt;cards&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;?transition=earthquake&quot;&gt;earthquake&lt;/a&gt;/&lt;a href=&quot;?transition=pulse&quot;&gt;pulse&lt;/a&gt;/&lt;a href=&quot;?transition=stick&quot;&gt;stick&lt;/a&gt;…&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide data-transition=”glue”]&lt;/p&gt;&lt;h2 id=&quot;这是一个glue的动效&quot;&gt;这是一个glue的动效&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;使用方法（全局设置） 1：&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;transition: glue&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;[slide data-transition=”glue”]&lt;/p&gt;&lt;h2 id=&quot;这是一个glue的动效-1&quot;&gt;这是一个glue的动效&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;使用方法 2：&lt;/p&gt;&lt;p&gt;[slide data-transition=”glue”]&lt;/p&gt;&lt;p&gt;[slide data-transition=”zoomin”]&lt;/p&gt;&lt;h2 id=&quot;这是一个zoomin的动效&quot;&gt;这是一个zoomin的动效&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;使用方法：&lt;/p&gt;&lt;p&gt;[slide data-transition=”zoomin”]&lt;/p&gt;&lt;p&gt;[slide data-transition=”vertical3d”]&lt;/p&gt;&lt;h2 id=&quot;这是一个vertical3d的动效&quot;&gt;这是一个vertical3d的动效&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;使用方法：&lt;/p&gt;&lt;p&gt;[slide data-transition=”vertical3d”]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;nodeppt快捷键介绍&quot;&gt;nodePPT快捷键介绍&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;快速翻页&quot;&gt;快速翻页&lt;/h2&gt;&lt;hr /&gt;&lt;ol&gt;  &lt;li&gt;输入页码，然后enter&lt;/li&gt;  &lt;li&gt;使用O键，开启纵览模式，然后翻页&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;动效样式强调&quot;&gt;动效样式强调&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;这段话里面的&lt;strong&gt;加粗&lt;/strong&gt;和&lt;em&gt;em&lt;/em&gt;字体会动效哦~&lt;/p&gt;&lt;p&gt;按下【H】键查看效果&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;支持zoomjs&quot;&gt;支持zoom.js&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;增加了zoom.js的支持，在演示过程中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt;+鼠标点击，则点击的地方就开始放大，再次&lt;code class=&quot;highlighter-rouge&quot;&gt;alt+click&lt;/code&gt;则回复原状&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;图片点击全屏&quot;&gt;图片，点击全屏&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com//girl.jpg&quot; alt=&quot;小萝莉&quot; title=&quot;小萝莉&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide][note]##这里是note&lt;/p&gt;&lt;p&gt;使用n键，才能显示[/note]&lt;/p&gt;&lt;h2 id=&quot;使用note笔记&quot;&gt;使用note笔记&lt;/h2&gt;&lt;h3 id=&quot;note笔记是多窗口或者自己做一些笔记用的&quot;&gt;note笔记是多窗口，或者自己做一些笔记用的&lt;/h3&gt;&lt;hr /&gt;&lt;p&gt;按下键盘【N】键测试下note，&lt;/p&gt;&lt;p&gt;markdown语法如下：&lt;/p&gt;&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;这里是note，{ 要换成中括号啊！！{/note]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;使用画笔&quot;&gt;使用画笔&lt;/h2&gt;&lt;h3 id=&quot;使用画笔做标记哦你也可以随便作画啊&quot;&gt;使用画笔做标记哦~你也可以随便作画啊！&lt;/h3&gt;&lt;hr /&gt;&lt;p&gt;按下键盘【P】键：按下鼠标左键，在此处乱花下看看效果。&lt;/p&gt;&lt;p&gt;按下键盘【B/Y/R/G/M】：更换颜色，按下【1~4】：更换粗细&lt;/p&gt;&lt;p&gt;按下键盘【C】键：清空画板&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;宽度不够&quot;&gt;宽度不够？？&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;按下键盘【W】键，切换到更宽的页面看效果，第二次按键返回&lt;/p&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th style=&quot;text-align: left&quot;&gt;less&lt;/th&gt;      &lt;th style=&quot;text-align: center&quot;&gt;sass&lt;/th&gt;      &lt;th style=&quot;text-align: right&quot;&gt;stylus&lt;/th&gt;      &lt;th&gt; &lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td style=&quot;text-align: left&quot;&gt;环境&lt;/td&gt;      &lt;td style=&quot;text-align: center&quot;&gt;js/nodejs&lt;/td&gt;      &lt;td style=&quot;text-align: right&quot;&gt;Ruby(这列右对齐)&lt;/td&gt;      &lt;td&gt;nodejs(高亮) {:.highlight}&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td style=&quot;text-align: left&quot;&gt;扩展名&lt;/td&gt;      &lt;td style=&quot;text-align: center&quot;&gt;.less&lt;/td&gt;      &lt;td style=&quot;text-align: right&quot;&gt;.sass/.scss&lt;/td&gt;      &lt;td&gt;.styl&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td style=&quot;text-align: left&quot;&gt;特点&lt;/td&gt;      &lt;td style=&quot;text-align: center&quot;&gt;老牌，用户多，支持js解析&lt;/td&gt;      &lt;td style=&quot;text-align: right&quot;&gt;功能全，有成型框架，发展快&lt;/td&gt;      &lt;td&gt;语法多样，小众&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td style=&quot;text-align: left&quot;&gt;案例/框架&lt;/td&gt;      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;&lt;/td&gt;      &lt;td style=&quot;text-align: right&quot;&gt;&lt;a href=&quot;http://compass-style.org&quot;&gt;compass&lt;/a&gt; &lt;a href=&quot;http://bourbon.io&quot;&gt;bourbon&lt;/a&gt;&lt;/td&gt;      &lt;td&gt; &lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;使用overview模式&quot;&gt;使用overview模式&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;按下键盘【O】键。看下效果。&lt;/p&gt;&lt;p&gt;在overview模式下，方向键下一页，【enter】键进入选中页&lt;/p&gt;&lt;p&gt;或者按下键盘【O】键，退出overview模式&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;介绍下nodeppt的函数和事件&quot;&gt;介绍下nodePPT的函数和事件&lt;/h1&gt;&lt;p&gt;[slide]支持单个slide事件：build/enter/leave/keypress，事件统一在[slide]中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;data-on-X&lt;/code&gt;来指定一个全局函数名&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;build：当触发下一步操作的时会触发，event具有stop方法&lt;/li&gt;  &lt;li&gt;keypress：在当前页面按键触发，event具有stop方法&lt;/li&gt;  &lt;li&gt;enter/leave：进入/离开 此页面触发的事件，event无stop方法&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide data-on-leave=”outcallback” data-on-enter=”incallback” ]&lt;/p&gt;&lt;h2 id=&quot;使用回调&quot;&gt;使用回调&lt;/h2&gt;&lt;hr /&gt;&lt;ul&gt;  &lt;li&gt;[slide data-on-leave=”fnName”]    &lt;ul&gt;      &lt;li&gt;进入执行回调incallback函数&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;[slide data-on-enter=”fnName”]    &lt;ul&gt;      &lt;li&gt;退出执行outcallback函数&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;亦可以组合写：&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;[slide data-on-leave=”foo” data-on-enter=”bar”]&lt;/p&gt;&lt;/blockquote&gt;&lt;p id=&quot;incallback&quot;&gt;&lt;/p&gt;&lt;p id=&quot;outcallback&quot;&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;远程执行函数&quot;&gt;远程执行函数&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;在多屏和远程模式中，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;proxyFn&lt;/code&gt;来远程执行函数。&lt;/p&gt;&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;globalFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Slide.proxyFn(&#39;globalFunc&#39;)&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-default&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;远程执行函数&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;button onclick=&quot;Slide.proxyFn(&#39;globalFunc&#39;,&#39;args&#39;)&quot; class=&quot;btn btn-default&quot;&gt;测试远程执行函数&lt;/button&gt;&lt;a href=&quot;?_multiscreen=1#33&quot;&gt;在多屏中测试远程执行&lt;/a&gt;&lt;script&gt;    function globalFunc(a){        alert(&#39;proxyFn success: &#39;+a+location.href);    }&lt;/script&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;更多玩法&quot;&gt;更多玩法&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;https://github.com/ksky521/nodePPT&lt;/p&gt;&lt;p&gt;什么？这些功能还不够用？&lt;/p&gt;&lt;p&gt;socket远程控制可以在手机上摇一摇换页哦~&lt;/p&gt;&lt;p&gt;查看项目目录ppts获取更多帮助信息&lt;/p&gt;",
            "excerpt"    : "&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodeppt&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;markdown&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;演示&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;三水清&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//github.com/ksky521/nodePPT&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/css/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/js/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moon&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;"
		} ,
	
		{
            "id"         : "/spring-mvc-in-action",
            "title"      : "思沃讲堂：Spring MVC 实战",
            "category"   : "演讲",
            "tags"       : "Spring, MVC, Web",
            "url"        : "/2015-12-10-spring-mvc-in-action/",
            "path"       : "_posts/演讲/2015-12-10-spring-mvc-in-action.md",
            "next"       : "/2016-01-01-introduction-of-node-ppt/",
            "previous"   : "/2015-12-08-rest-in-action/",
            "date"       : "2015-12-10 00:00:00 +0000",
            "shortdate"  : "December 10, 2015",
            "content"    : "&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;th-wo---bookshelf&quot;&gt;Th Wo - Bookshelf&lt;/h1&gt;&lt;p&gt;&lt;small&gt;by Jimmy Lv&lt;/small&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;mvc-workshop&quot;&gt;MVC Workshop&lt;/h2&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h3 id=&quot;step-0&quot;&gt;Step 0:&lt;/h3&gt;&lt;p&gt;GET: hello {name}!&lt;/p&gt;&lt;p&gt;via &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-servlet&quot;&gt;Spring Web MVC DispatcherServlet&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h3 id=&quot;step-1&quot;&gt;Step 1:&lt;/h3&gt;&lt;p&gt;// given&lt;/p&gt;&lt;p&gt;GET: show all books in index page.&lt;/p&gt;&lt;p&gt;// when&lt;/p&gt;&lt;p&gt;// then&lt;/p&gt;&lt;p&gt;implement &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch book details&lt;/code&gt; functionality.&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h3 id=&quot;step-2&quot;&gt;Step 2:&lt;/h3&gt;&lt;p&gt;// given&lt;/p&gt;&lt;p&gt;a ready-to-wear &lt;code class=&quot;highlighter-rouge&quot;&gt;form&lt;/code&gt; for book information.&lt;/p&gt;&lt;p&gt;// when&lt;/p&gt;&lt;p&gt;// then&lt;/p&gt;&lt;p&gt;implement &lt;code class=&quot;highlighter-rouge&quot;&gt;create new book&lt;/code&gt; functionality.&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h3 id=&quot;step-3&quot;&gt;Step 3:&lt;/h3&gt;&lt;p&gt;Edit / Delete / …&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;extendibility&quot;&gt;Extendibility&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;What’s Spring IoC &amp;amp; DI?&lt;/li&gt;  &lt;li&gt;Service interface =&amp;gt; different implementation&lt;/li&gt;  &lt;li&gt;Data Repository =&amp;gt; using different database&lt;/li&gt;  &lt;li&gt;Split front-end &amp;amp; back-end =&amp;gt; return data with JSON format&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;作业&quot;&gt;作业&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;先把书架CURD的功能，使用&lt;strong&gt;后端MVC&lt;/strong&gt;的形式完善。    &lt;ul&gt;      &lt;li&gt;当然你可以改用其他模板语言，比如Jade什么的，这儿用的是Thymeleadf。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;然后再改用&lt;strong&gt;JSON格式&lt;/strong&gt;返回，而不再需要后端模板。    &lt;ul&gt;      &lt;li&gt;为了前后端分离，😂 以下形式就Okay：&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com//json-format.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;[slide]&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/rest-in-action",
            "title"      : "REST IN ACTION",
            "category"   : "演讲",
            "tags"       : "REST, AngularJS, Architecture",
            "url"        : "/2015-12-08-rest-in-action/",
            "path"       : "_posts/演讲/2015-12-08-rest-in-action.md",
            "next"       : "/2015-12-10-spring-mvc-in-action/",
            "previous"   : "/2015-11-16-how-to-use-gradle-and-speed-up-build-time/",
            "date"       : "2015-12-08 00:00:00 +0000",
            "shortdate"  : "December 08, 2015",
            "content"    : "&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;rest-in-action&quot;&gt;REST IN ACTION&lt;/h1&gt;&lt;h2 id=&quot;whats-real-restful-architecture--how-to-consume-resource-in-angularjs&quot;&gt;What’s real RESTful Architecture &amp;amp; How to Consume Resource in AngularJS?&lt;/h2&gt;&lt;p&gt;&lt;small&gt;via &lt;strong&gt;Jimmy Lv&lt;/strong&gt;&lt;/small&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;iframe id=&quot;preview&quot; style=&quot;height: 600px;&quot; frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;100%&quot; src=&quot;https://lecture.jimmylv.info/assets/2015-12-08-rest-in-action.pdf&quot;&gt;&lt;/iframe&gt;",
            "excerpt"    : "&lt;p&gt;[slide]&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/how-to-use-gradle-and-speed-up-build-time",
            "title"      : "使用 Gradle 快速构建项目以及 Gradle 速度优化",
            "category"   : "编程",
            "tags"       : "Gradle",
            "url"        : "/2015-11-16-how-to-use-gradle-and-speed-up-build-time/",
            "path"       : "_posts/编程/2015-11-16-how-to-use-gradle-and-speed-up-build-time.md",
            "next"       : "/2015-12-08-rest-in-action/",
            "previous"   : "/2015-11-11-what-is-really-rest/",
            "date"       : "2015-11-16 00:00:00 +0000",
            "shortdate"  : "November 16, 2015",
            "content"    : "&lt;h2 id=&quot;内容简介&quot;&gt;内容简介&lt;/h2&gt;&lt;p&gt;对于一款构建工具来说，首要的使命便是将项目构建起来，然后才是考虑如何加快构建的速度。毕竟在持续集成的开发理念之下，跑&lt;code class=&quot;highlighter-rouge&quot;&gt;ci&lt;/code&gt;就是程序员日常最经常要做的事情，而等待的过程往往是非常漫长的，甚至于有童鞋专门去买了本字帖，以便于在每次等&lt;code class=&quot;highlighter-rouge&quot;&gt;ci&lt;/code&gt;的时候打发时间。&lt;/p&gt;&lt;p&gt;这篇文章首先会从如何使用Gradle插件开始，毕竟要先干活，然后进阶到如何写一个自定义Task，以及Incremental Task的原理。当然，最后总结几个可以直接用于加快Gradle构建速度的优化技巧，简单粗暴，立马生效！&lt;/p&gt;&lt;h2 id=&quot;如何使用gradle插件&quot;&gt;如何使用Gradle插件&lt;/h2&gt;&lt;p&gt;我们在Java项目根目录下会有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;文件，Gradle的所有配置都可以放在这个文件里面。首先从最基本的Java插件说起，大部分的项目构建流程都是：编译Java源文件，运行单元测试，最终生成一个包含所有class文件的JAR包，而Gradle使用插件的形式来使整个过程自动化，只需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;apply plugin: &#39;java&#39;&lt;/code&gt;，然后就可以通过命令行使用与之相关的Task了：&lt;/p&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;Task名称&lt;/th&gt;      &lt;th&gt;依赖于&lt;/th&gt;      &lt;th&gt;Task类型&lt;/th&gt;      &lt;th&gt;描述&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;assemble&lt;/td&gt;      &lt;td&gt;所有用于项目归档打包的包括jar在内的Task，一些插件可以提供额外的Task。&lt;/td&gt;      &lt;td&gt;Task&lt;/td&gt;      &lt;td&gt;装配项目中所有已归档的文件。&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;check&lt;/td&gt;      &lt;td&gt;项目中包括test在内的所有验证任务，也有一些插件可以提供额外的Task。&lt;/td&gt;      &lt;td&gt;Task&lt;/td&gt;      &lt;td&gt;执行所有验证任务。&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;build&lt;/td&gt;      &lt;td&gt;check（验证检查）和assemble（装配打包）&lt;/td&gt;      &lt;td&gt;Task&lt;/td&gt;      &lt;td&gt;执行完整的项目构建任务。&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;上面的生命周期Tasks都会依赖于其他的基本Task：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://docs.gradle.org/2.1/userguide/img/javaPluginTasks.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;然后只需要运行&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle clean build&lt;/code&gt;就会自动执行：（下图为默认的文件目录结构，自定义&lt;a href=&quot;https://docs.gradle.org/2.1/userguide/java_plugin.html&quot;&gt;戳这里&lt;/a&gt;。）&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://gradle.wpengine.netdna-cdn.com/wp-content/uploads/2015/03/project-structure.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;当然这里还有很多其他的官方插件或者第三方插件，比如&lt;a href=&quot;https://docs.gradle.org/2.1/userguide/checkstyle_plugin.html&quot;&gt;checkstyle&lt;/a&gt;和&lt;a href=&quot;https://github.com/DiUS/pact-jvm/tree/master/pact-jvm-provider-gradle&quot;&gt;pact-jvm&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;最后来一个完整的&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;示例：&lt;/p&gt;&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;java&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;org.gradle.example&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1.0.0&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourceCompatibility&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetCompatibility&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;org.slf4j:slf4j-api:1.7.10&#39;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;runtime&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;org.slf4j:slf4j-simple:1.7.10&#39;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;testCompile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;junit:junit:4.12&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;manifest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Main-Class&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${project.group}.App&quot;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sourceJar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;classifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sources&#39;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceSets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;自定义task&quot;&gt;自定义Task&lt;/h2&gt;&lt;p&gt;Gradle的一大亮点就是FULLY PROGRAMMABLE BUILDS，你可以将以往的配置和重复动作都使用Groovy脚本自动化管理起来，无限制定制化:&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Conventions derive powerful build logic from a single line of configuration. The build language makes way for unlimited customization, allowing you to adapt Gradle to concisely fit the needs of your organization.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;hello-world&quot;&gt;Hello World!&lt;/h3&gt;&lt;p&gt;按照国际惯例先来一个HelloWorld:&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;task hello &amp;lt;&amp;lt; {    println &#39;Hello world!&#39;}&amp;gt; gradle -q helloHello world!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;另外一个常用的语法就是定义Task之间的依赖关系，所依赖的Task会按顺序依次运行：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;task intro(dependsOn: [hello, foo, bar]) &amp;lt;&amp;lt; {    println &quot;I&#39;m Gradle&quot;}&amp;gt; gradle -q introHello world!I&#39;m Gradle&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;而与此同时通过命令行还可以排除所依赖的Task，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle -q tasks&lt;/code&gt;可以显示已经定义的所有Task，当然Task还可以直接使用缩写形式：&lt;code class=&quot;highlighter-rouge&quot;&gt;compileTest&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;cT&lt;/code&gt;。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; gradle intro -x foo barHello world!I&#39;m Gradle&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;更多关于Task的内容&lt;a href=&quot;https://docs.gradle.org/current/userguide/more_about_tasks.html&quot;&gt;戳这里&lt;/a&gt;，当构建任务复杂度上升之后，你可以像编程一样分文件来组织不同的任务，以便于管理和设置各自Task的内容属性等，而&lt;code class=&quot;highlighter-rouge&quot;&gt;if-else&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;以及注解都不在话下，它就是&lt;a href=&quot;http://www.groovy-lang.org/&quot;&gt;一种Groovy DSL语言&lt;/a&gt;。&lt;/p&gt;&lt;h3 id=&quot;incremental-task&quot;&gt;Incremental Task&lt;/h3&gt;&lt;p&gt;首先在Task里面有一个&lt;a href=&quot;https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:up_to_date_checks&quot;&gt;up-to-date&lt;/a&gt;的概念，可以自动跳过没有任何更新的Task从而加快构建速度。使用TaskInputs和TaskOutputs属性定义好Task的输入输出文件之后，在第一次运行Task的时候，Gradle会记录input文件内容的Hash值快照，也会记录下Task运行成功之后的output快照。而在这之后，每当Task被执行之前Gradle就会以前所保存的快照进行对比，只有在有差异的情况才会重新执行该Task。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;task generator {    def fileCount = 10    inputs.property &quot;fileCount&quot;, fileCount    def generatedFileDir = file(&quot;$buildDir/generated&quot;)    outputs.dir generatedFileDir    doLast {        println &quot;generating file.&quot;        generatedFileDir.mkdirs()        for (int i=0; i&amp;lt;fileCount; i++) {            new File(generatedFileDir, &quot;${i}.txt&quot;).text = i        }    }}&amp;gt; gradle generator:generatorgenerating file.# Run again!&amp;gt; gradle generator  –infoSkipping task ‘:generator’ as it is up-to-date (took 0.007 secs).:generator UP-TO-DATE&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;我们还可以定义Task的类型，除了输入和输出之后需要一个带有@TaskAction注解的方法，然后该任务就可以针对out of date的输入文件执行相应的操作，并且对于自上次操作已被删除的输入文件执行单独的动作，更多内容&lt;a href=&quot;https://docs.gradle.org/current/dsl/org.gradle.api.tasks.incremental.IncrementalTaskInputs.html&quot;&gt;戳这里&lt;/a&gt;。&lt;/p&gt;&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IncrementalReverseTask&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;nd&quot;&gt;@InputDirectory&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputDir&lt;/span&gt;     &lt;span class=&quot;nd&quot;&gt;@OutputDirectory&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputDir&lt;/span&gt;     &lt;span class=&quot;nd&quot;&gt;@TaskAction&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IncrementalTaskInputs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;incremental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outOfDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$outputDir/${change.file.name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;targetFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$outputDir/${change.file.name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;targetFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;比如说像&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaCompile&lt;/code&gt;这样Gradle内置的一些插件都使用Incremental Task的原理，已经定义好了inputs (Java source files)以及outputs (class files)，从而我们就可以在配置使用&lt;a href=&quot;https://docs.gradle.org/2.1/dsl/org.gradle.api.tasks.compile.JavaCompile.html&quot;&gt;增量编译&lt;/a&gt;这样的功能了：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apply plugin: &#39;java&#39;    compileJava {        //enable incremental compilation        options.incremental = true    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;加快gradle构建速度&quot;&gt;加快Gradle构建速度&lt;/h2&gt;&lt;p&gt;0x00. 升级Gradle版本并且使用Wrapper&lt;/p&gt;&lt;p&gt;Gradle Wrapper是由Windows batch脚本以及OS X和Linux的shell脚本共同组成，这就允许你在没有安装Gradle的任意操作系统上都能马上构建自己的项目。在&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;文件中加入wrapper任务并指定最新的版本，然后运行&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle wrapper&lt;/code&gt;就可以快速升级了：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;task wrapper(type: Wrapper) {    gradleVersion = &#39;2.8&#39;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;0x01-分析构建报告&quot;&gt;0x01. 分析构建报告&lt;/h3&gt;&lt;p&gt;「知己知彼方能百战百胜」。首先在执行任务的时候加上&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle --profile&lt;/code&gt;，就可以记录一些有用的信息并且在&lt;code class=&quot;highlighter-rouge&quot;&gt;build/reports/profile&lt;/code&gt;目录下生成相应的报告，然后分析到底在哪部分花费了过多的时间，可以细分到具体的Task然后才可以进行优化。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://docs.gradle.org/current/userguide/img/profile.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;0x02-开始增量编译&quot;&gt;0x02. 开始增量编译&lt;/h3&gt;&lt;p&gt;上面已经提到了，在Java Compile任务中加入以下配置已进入使用增量编译模式：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apply plugin: &#39;java&#39;compileJava {    //enable compilation in a separate daemon process    options.fork = true    //enable incremental compilation    options.incremental = true}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;0x03-开启并行化和后台进程&quot;&gt;0x03. 开启并行化和后台进程&lt;/h3&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;org.gradle.parallel=trueorg.gradle.daemon=trueorg.gradle.jvmargs=-Xms256m -Xmx1024m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;与此同时还可以通过命令行参数&lt;code class=&quot;highlighter-rouge&quot;&gt;--parallel-threads=4&lt;/code&gt;指定并行线程的个数，而在开启过后可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew --stop&lt;/code&gt;停止所有Gradle进程，这也包括了非daemon的进程，那什么是daemon&lt;a href=&quot;https://docs.gradle.org/current/userguide/gradle_daemon.html&quot;&gt;戳这里&lt;/a&gt;。还可以调整Java虚拟机的参数，这将加快构建本身，解释请看&lt;a href=&quot;http://stackoverflow.com/questions/14763079/what-are-the-xms-and-xmx-parameters-when-starting-jvms/14763095#14763095&quot;&gt;StackOverflow的答案&lt;/a&gt;。&lt;/p&gt;&lt;h3 id=&quot;0x04-使用jcenter而不是maven-central&quot;&gt;0x04. 使用JCenter而不是Maven Central&lt;/h3&gt;&lt;p&gt;请看JCenter的slogn：&lt;a href=&quot;https://bintray.com/bintray/jcenter&quot;&gt;Forget about Maven Central&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&quot;0x05-使用offline模式&quot;&gt;0x05. 使用offline模式&lt;/h3&gt;&lt;p&gt;通过使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--profile&lt;/code&gt;生成的报告就可以发现，在构建过程中最大的耗时都在于JavaCompile这个Task，而观察log就发现罪魁祸首就在于resolving dependencies，也就是解析依赖的这一步。一般情况下，Gradle都会将项目依赖缓存在本地中，所以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--offline&lt;/code&gt;，就可以让它不再去&lt;a href=&quot;https://discuss.gradle.org/t/is-there-a-true-never-needed-a-network-local-mode-for-gradle/7237&quot;&gt;联网检查更新&lt;/a&gt;，没必要。&lt;/p&gt;&lt;h3 id=&quot;0x06-优化task内容以及执行顺序&quot;&gt;0x06. 优化Task内容以及执行顺序&lt;/h3&gt;&lt;p&gt;比如说在我们的项目当中有一个asciidoctor的任务是用于将Swagger Test所生成的内容转化为HTML5和PDF文件，这显然在开发的时候并不需要每次都去生成，所以就可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;-x&lt;/code&gt;参数去跳过&lt;a href=&quot;http://www.practicalgradle.org/blog/2010/10/skipping-tasks/&quot;&gt;这个Task&lt;/a&gt;。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gradlew build -x asciidoctor&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;与此同时，在跑&lt;code class=&quot;highlighter-rouge&quot;&gt;ci&lt;/code&gt;（具体内容为&lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew clean build pactverify&lt;/code&gt;）的时候我们会执行一个pactverify的任务去做Contact Testing，而这个Task需要启动我们真实的应用程序，然后再去验证实实在在的返回值，也就是说依赖于/等待于&lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew bootRun&lt;/code&gt;这个漫长的Task，而&lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew bootRun&lt;/code&gt;又是依赖于&lt;code class=&quot;highlighter-rouge&quot;&gt;graldew build&lt;/code&gt;这个Task的，更可怕的是&lt;code class=&quot;highlighter-rouge&quot;&gt;graldew build&lt;/code&gt;又依赖于&lt;code class=&quot;highlighter-rouge&quot;&gt;:compileJava&lt;/code&gt;，结果在没有使用offline模式的情况下，跑&lt;code class=&quot;highlighter-rouge&quot;&gt;ci&lt;/code&gt;的时间就被整整拖成了将近十分钟，这岂不是等死个人。&lt;/p&gt;&lt;p&gt;所以在&lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew pactverify&lt;/code&gt;这个任务当中所执行的bootRun任务加上offline模式变成&lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew bootRun --offline -x build&lt;/code&gt;，因为在跑&lt;code class=&quot;highlighter-rouge&quot;&gt;ci&lt;/code&gt;的时候早就已经解析过一遍依赖并且&lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;过了，所以最终将整个跑&lt;code class=&quot;highlighter-rouge&quot;&gt;ci&lt;/code&gt;的时间最短控制在一分钟左右。&lt;/p&gt;&lt;p&gt;当然需要注意的一个问题就是不要将&lt;code class=&quot;highlighter-rouge&quot;&gt;ci&lt;/code&gt;脚本中的&lt;code class=&quot;highlighter-rouge&quot;&gt;--offline&lt;/code&gt;参数提交到远程的Jenkins服务器上了，因为那台机子还是需要每次都去解析最新的项目依赖。一个技巧就是将&lt;code class=&quot;highlighter-rouge&quot;&gt;ci&lt;/code&gt;脚本这个文件的修改放在Intellij IDEA的Default文件修改列表中，每次提交代码的时候不选中它就好了。&lt;/p&gt;&lt;h3 id=&quot;0x07-进阶自定义offline模式的incremental-task&quot;&gt;0x07. 进阶：自定义offline模式的Incremental task&lt;/h3&gt;&lt;p&gt;既然offline模式所节约的时候非常多，那就可以根据&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle.properties&lt;/code&gt;中所定义的项目依赖库的版本是否更新，从而增量使用offline模式来连接远程参考解析依赖。&lt;/p&gt;&lt;p&gt;可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle.startParameter.setOffline(true)&lt;/code&gt;设置offline模式的参数，参考&lt;a href=&quot;https://discuss.gradle.org/t/is-it-possible-to-make-offline-switch-to-default-setting-from-build-gradle/3439&quot;&gt;这里&lt;/a&gt;，但是需要学习Groovy语言去定义一个增量任务，暂且就没有深究了。&lt;/p&gt;&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;&lt;p&gt;这是一个我所收集的有关Gralde内容的&lt;a href=&quot;https://www.kifi.com&quot;&gt;Kifi&lt;/a&gt;集合，持续更新哟：&lt;a href=&quot;https://www.kifi.com/jimmylv/gradle&quot;&gt;https://www.kifi.com/jimmylv/gradle&lt;/a&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;内容简介&quot;&gt;内容简介&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/what-is-really-rest",
            "title"      : "什么才是真正的 RESTful 架构？",
            "category"   : "编程",
            "tags"       : "REST, API, HTTP",
            "url"        : "/2015-11-11-what-is-really-rest/",
            "path"       : "_posts/编程/2015-11-11-what-is-really-rest.md",
            "next"       : "/2015-11-16-how-to-use-gradle-and-speed-up-build-time/",
            "previous"   : "/2015-11-11-rethinking-about-front-end/",
            "date"       : "2015-11-11 00:00:00 +0000",
            "shortdate"  : "November 11, 2015",
            "content"    : "&lt;p&gt;更多内容请看我最近在写的一本小书：&lt;a href=&quot;https://jimmylv.gitbooks.io/learning-microservices/content/&quot;&gt;《Microservice 最佳实践之路》&lt;/a&gt;，实为项目上的踩坑手册。&lt;/p&gt;&lt;h2 id=&quot;what&quot;&gt;What?&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Wikipedia: 表征性状态传输（英文：Representational State Transfer，简称REST）是Roy Fielding博士于2000年在他的博士论文中提出来的一种软件架构风格。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Roy Fielding是HTTP协议（1.0版和1.1版）的主要设计者，事实上HTTP 1.1规范正是基于REST架构风格的指导原理来设计的。需要注意的是，REST是一种设计风格而不是标准，如果一个架构符合REST原则，我们就称它为RESTful架构。&lt;/p&gt;&lt;h2 id=&quot;why&quot;&gt;Why？&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1471531874674.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;在「远古时代」前端后端是融合在一起的，比如之前的PHP，JSP，ASP等等（参考我之前做过的一场演讲：&lt;a href=&quot;http://blog.jimmylv.info/2015-11-02-history-about-web-development-evolution/&quot;&gt;Web前端开发模式演变&lt;/a&gt;）。近年来随着移动互联网的飞速发展，各种类型的Client端层出不穷，就需要通过一套统一的接口分别为Web，iOS和Android乃至桌面端提供服务。另外对于广大平台来说，比如Facebook platform，微博开放平台，微信公共平台等，它们不需要有显式的前端，只需要一套提供服务的接口，于是RESTful更是它们最好的选择。&lt;/p&gt;&lt;p&gt;而要理解RESTful架构，最好的方法就是去理解&lt;strong&gt;Representational State Transfer&lt;/strong&gt;这个词组，直译过来就是「表现层状态转化」，其实它省略了主语。「表现层」其实指的是「资源」的「表现层」，所以通俗来讲就是：资源在网络中以某种表现形式进行状态转移。分解开来：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;Resource：资源，即数据。比如newsfeed，friends，order等；&lt;/li&gt;  &lt;li&gt;Representational：某种表现形式，比如用JSON，XML，JPEG等；&lt;/li&gt;  &lt;li&gt;State Transfer：状态变化。通过HTTP动词实现。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;然后再来理解一个具体的RESTful架构——面向资源的架构（Resource-Oriented Architecture，ROA）：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;资源是由URI来指定。所谓「上网」，就是与互联网上一系列的「资源」互动，调用它的URI。&lt;/li&gt;  &lt;li&gt;对资源的操作包括获取、创建、修改和删除资源，这些操作正好对应HTTP协议提供的GET、POST、PUT和DELETE方法。&lt;/li&gt;  &lt;li&gt;通过操作资源的表现形式来操作资源。具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定。&lt;/li&gt;  &lt;li&gt;资源的表现形式则是XML或者HTML，取决于读者是机器还是人，是消费web服务的客户软件还是web浏览器。当然也可以是任何其他的格式。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;how&quot;&gt;How？&lt;/h2&gt;&lt;p&gt;应用于Web服务，符合REST设计风格的Web API称为RESTful API。它从以下三个方面资源进行定义：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;直观简短的资源地址：URI，比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;http://example.com/resources/&lt;/code&gt;；每一个URI代表一种资源；&lt;/li&gt;  &lt;li&gt;传输的资源：Web服务接受与返回的互联网媒体类型，比如：JSON，XML，YAML等。&lt;/li&gt;  &lt;li&gt;对资源的操作：Web服务在该资源上所支持的一系列请求方法（比如：POST，GET，PUT或DELETE）。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;来个图，&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://cdn2.infoqstatic.com/statics_s2_20151020-0055-2u1/resource/articles/rest-introduction/zh/resources/figure2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;HTTP请求方法在RESTful API中的典型应用：&lt;/p&gt;&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;th&gt;资源&lt;/th&gt;      &lt;th&gt;GET&lt;/th&gt;      &lt;th&gt;PUT&lt;/th&gt;      &lt;th&gt;POST&lt;/th&gt;      &lt;th&gt;DELETE&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;一组资源的URI，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;http://example.com/resources/&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;列出URI，以及该资源组中每个资源的详细信息（后者可选）。&lt;/td&gt;      &lt;td&gt;使用给定的一组资源替换当前整组资源。&lt;/td&gt;      &lt;td&gt;在本组资源中创建/追加一个新的资源。该操作往往返回新资源的URL。&lt;/td&gt;      &lt;td&gt;删除整组资源。&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;单个资源的URI，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;http://example.com/resources/142&lt;/code&gt;&lt;/td&gt;      &lt;td&gt;获取指定的资源的详细信息，格式可以自选一个合适的网络媒体类型（比如：XML、JSON等）&lt;/td&gt;      &lt;td&gt;替换/创建指定的资源。并将其追加到相应的资源组中。&lt;/td&gt;      &lt;td&gt;把指定的资源当做一个资源组，并在其下创建/追加一个新的元素，使其隶属于当前资源。&lt;/td&gt;      &lt;td&gt;删除指定的元素。&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;rest的误解&quot;&gt;REST的误解&lt;/h2&gt;&lt;p&gt;现在看来，REST在2000年那个时代，确实是超前于时代的。Web开发者社区对于HTTP的设计意图存在着大量的误解，由此导致了对于HTTP的大量低效率的误用。这个情况持续一直到2005年Web 2.0的崛起。那个时候，DCOM、EJB、SOAP/WSDL这些DO风格的架构由于难以满足互联网环境对分布式应用架构设计的约束，与Web自身的架构风格REST相冲突，很难融入到Web之中。所谓的「WebServices」，其实除了将HTTP作为底层的传输协议外，跟（互联网环境中的）真正的Web没有什么关系。&lt;/p&gt;&lt;p&gt;而随着Ruby on Rails这个著名的Web开发框架开始大力支持REST开发之后，一线的Web开发者才真正接触到了REST。然而Rails所支持的REST开发将对资源的操作局限于CRUD（创建、获取、修改、删除）的语义（即，将对资源的CRUD操作映射到GET/POST/PUT/DELETE四个HTTP方法），这其实是收窄了REST的适用范围。其他编程语言的Web开发框架（例如Java语言的Struts、Spring MVC等等）也紧接着模仿了Rails的方式开始支持REST开发，然而这更加导致了一线的Web开发者误以为：REST开发就是通过GET/POST/PUT/DELETE四个HTTP方法对资源执行CRUD操作。甚至还有很多仅仅使用了HTTP，而没有使用SOAP的Web服务API，都自称是REST风格（RESTful）的API。&lt;/p&gt;&lt;p&gt;对于什么才是真正的REST风格的误解是如此之多，而将REST作为一个便于营销的buzzword的挂羊头卖狗肉者也是如此之多，以至于REST的创造者Fielding终于忍无可忍了。2008年10月Fielding写了一篇博客，做出了一个非常明确的断言：&lt;a href=&quot;http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven&quot;&gt;REST APIs must be hypertext-driven!&lt;/a&gt;（REST API必须是超文本驱动的！）超文本驱动这个理念变成了一个缩写词HATEOAS，这个缩写词来自于当初Fielding博士论文中的一句话：hypermedia as the engine of application state（将超媒体作为应用状态的引擎）。其实超文本驱动（Hypertext Driven）的理念才是REST架构风格最核心的理念，也是REST风格的架构达到松耦合目标的根本原因。&lt;/p&gt;&lt;h2 id=&quot;rest设计进阶&quot;&gt;REST设计进阶&lt;/h2&gt;&lt;p&gt;当谈及REST成熟度时，一些人常常会引用Richardson所提出来的REST成熟度模型（&lt;a href=&quot;http://restcookbook.com/Miscellaneous/richardsonmaturitymodel/&quot;&gt;Maturity Model&lt;/a&gt;），并视之为正确的度量方法。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://martinfowler.com/articles/images/richardsonMaturityModel/overview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;第一级在架构中引入资源resource的概念&quot;&gt;第一级：在架构中引入资源（Resource）的概念。&lt;/h3&gt;&lt;p&gt;大多数WS-*服务和POX都只是使用一个URI作为一个服务端口，也只使用一个HTTP方法传输数据。这种做法相当于把HTTP这个应用层协议降级为传输层协议用，《REST实战》也一再强调HTTP是一种应用协议而不是传输协议。再好一点就是使用多个URI，然而不同的URI只是作为不同的调用入口，与此同时只使用同一个HTTP方法传输数据。最常见的错误就是在URI中包含动词，比如URI &lt;code class=&quot;highlighter-rouge&quot;&gt;http://example.com/getOrder?orderId=1234&lt;/code&gt;，其实「资源」表示一种实体，所以应该是名词，动词应该放在HTTP协议中。而与此同时URI也有可能破坏HTTP GET的安全性和幕等性，比如某个客户端在&lt;code class=&quot;highlighter-rouge&quot;&gt;http://example.com/updateOrder?id=1234&amp;amp;coffee=latte&lt;/code&gt;上执行GET（而不是POST），就能创建一笔新的咖啡订单（一个资源），按理来说GET请求不能改变服务的任何状态。&lt;/p&gt;&lt;h3 id=&quot;第二级每一个uri代表一种资源支持http动词&quot;&gt;第二级：每一个URI代表一种资源，支持HTTP动词。&lt;/h3&gt;&lt;p&gt;此时使用多个URI的话，需要让不同的URI代表不同的资源（注意&lt;a href=&quot;http://www.ibm.com/developerworks/cn/webservices/1101_mace_restservicePart1/1101_mace_restservicePart1.html&quot;&gt;多个URI可能指向同一个Resource，而一个URI不能指向不同Resource&lt;/a&gt;。），同时使用多个HTTP方法操作这些资源，例如使用POST/GET/PUT/DELET分别进行CRUD操作。这时候HTTP头和有效载荷都包含业务逻辑，例如HTTP方法对应CRUD操作，HTTP状态码对应操作结果的状态。我们现在看到的大多数所谓RESTful API做到的也就是这个级别。《REST实战》的译者也谈到：悟性差的人，理解到CRUD式Web服务就满足了。而悟性好的人，可以彻底理解超文本驱动，甚至是与REST关系密切的语义网，最终达到REST开发的最高境界。&lt;/p&gt;&lt;h3 id=&quot;第三级hateoas使用超媒体hypermedia作为应用状态引擎&quot;&gt;第三级：HATEOAS，使用超媒体（hypermedia）作为应用状态引擎。&lt;/h3&gt;&lt;p&gt;根据Roy的严格规定，超媒体（hypermedia）是REST的先决条件。任何其他东西不应该自我标榜为REST。要解释HATEOAS这个概念先要解释什么是超媒体：我们已经知道什么是多媒体（multimedia），以及什么是超文本（hypertext）。其中超文本特有的优势是拥有超链接（hyperlink）。如果我们把超链接引入到多媒体当中去，那就得到了超媒体，因此关键角色还是超链接。使用超媒体作为应用引擎状态，意思是应用引擎的状态变更由客户端访问不同的超媒体资源驱动。&lt;/p&gt;&lt;p&gt;让我们来看个实例，这个响应内容可能略有不同：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-JSON&quot;&gt;GET https://api.example.com/profile{  &quot;name&quot;: &quot;Steve&quot;,  &quot;picture&quot;: {    &quot;large&quot;: &quot;https://somecdn.com/pictures/1200x1200.png&quot;,    &quot;medium&quot;: &quot;https://somecdn.com/pictures/100x100.png&quot;,    &quot;small&quot;: &quot;https://somecdn.com/pictures/10x10.png&quot;  }}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于在响应中包含了链接地址，因此使用该API的客户端就能够自由选择要下载怎样的信息。这些链接告知了客户端有哪些选择，并且它们的地址在哪里。因此在这里我们无需同时返回三个不同版本的用户档案图片，我们所做的只是告诉客户端有三种可用的图片尺寸可以选择，并且告诉客户端能够在哪里找到这些图片。这样一来，客户端就能够根据不同的场景，做出符合自身需要的选择。而且，如果客户端只需要一种格式的图片，那就无需下载全部三种版本的图片了。这样一来可谓一箭三雕：既减少了网络负载，又增进了客户端的灵活性，更增进了API的可探索性。&lt;/p&gt;&lt;p&gt;超媒体的核心概念就是所谓的&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link&amp;gt;&lt;/code&gt;元素，而这些相互链接的资源实际上描述了一个协议，即引导我们达成某个目标的一系列步骤，例如订购一杯咖啡所需要的点单、付款、取咖啡等等。这就是超媒体的本质：经由资源之间的链接，我们改变整个应用的状态，即超媒体转换了分布式应用的状态。需要注意的是，服务器和消费者两者间交换的是资源状态的表述，而不是应用的状态，被转移的表述中包括了反应应用状态的链接。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://image.slidesharecdn.com/hypermedia-apis-140121015019-phpapp01/95/hypermedia-apis-why-what-how-17-638.jpg?cb=1390269110&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;在这里也推荐直接看看设计非常优秀的&lt;a href=&quot;https://developer.github.com/v3/&quot;&gt;GitHub API&lt;/a&gt;，以便于更好地理解真实的RESTful API以及hypermedia的概念。&lt;/p&gt;&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;http://www.restapitutorial.com/lessons/whatisrest.html&quot;&gt;What Is REST? – Learn REST: A RESTful Tutorial&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/08.3.md&quot;&gt;什么是REST与Go语言的RESTful实现&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/09/restful.html&quot;&gt;理解RESTful架构 – 阮一峰&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/27785028&quot;&gt;REST 架构该怎么生动地理解？ – 知乎&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/rest-introduction&quot;&gt;深入浅出REST - InfoQ&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/heartstill/archive/2010/12/23/1915029.html&quot;&gt;面向资源的架构 – 《RESTful Web Services中文版》&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/6854551/&quot;&gt;《REST实战》&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://book.douban.com/review/5450803/&quot;&gt;怎么样才算是 RESTful？读 REST in Practice&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://martinfowler.com/articles/richardsonMaturityModel.html&quot;&gt;Richardson Maturity Model – Martin Fowler&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/implementing-hypermedia&quot;&gt;实现超媒体&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://developer.github.com/v3/&quot;&gt;GitHub API文档&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;p&gt;更多内容请看我最近在写的一本小书：&lt;a href=&quot;https://jimmylv.gitbooks.io/learning-microservices/content/&quot;&gt;《Microservice 最佳实践之路》&lt;/a&gt;，实为项目上的踩坑手册。&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/rethinking-about-front-end",
            "title"      : "关于前端的思考：Angular 2.0以及前后端边界",
            "category"   : "前端",
            "tags"       : "AngularJS, JavaScript",
            "url"        : "/2015-11-11-rethinking-about-front-end/",
            "path"       : "_posts/前端/2015-11-11-rethinking-about-front-end.md",
            "next"       : "/2015-11-11-what-is-really-rest/",
            "previous"   : "/2015-11-10-reading-open-resource-code-from-github/",
            "date"       : "2015-11-11 00:00:00 +0000",
            "shortdate"  : "November 11, 2015",
            "content"    : "&lt;h2 id=&quot;前端的学习曲线&quot;&gt;前端的学习曲线&lt;/h2&gt;&lt;p&gt;每个人在学AngularJS的时候都会觉得&lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular 1.x&lt;/a&gt;自创的概念实在太多，学习曲线也因此变得非常陡峭。但对于一个完整的前端项目来说，所需要的东西本来就不够简单，而AngularJS作为一款大而全框架，自带一揽子解决方案，只要学习上手之后还是会有一劳永逸的感觉。就像Python的web框架代表Django和Flask一样，萝卜白菜各有所爱，轻量级框架所带来的灵活性固然很棒，但对于新手来说依旧会很容易玩脱。就像当前所兴起的React大潮，暂且不讨论深度玩家所表现的态度和看法，就论一个前端新手所面临的问题，在没有主见的时候到底该师从何派？&lt;/p&gt;&lt;p&gt;对于前端刚入门的我来说，依旧会推荐从一个大而全的框架开始学起，一个好的框架不但会强制你不犯错误，由此带来的「配置大于约定」也会让一个还没有能力进行约定的能力去学习如何约定。当你学有所成的时候自然会似脱缰一般出去闯荡一番。就像当初青春期的我们，在蜕变之前我们安定得学习该有的技能，当有了一定资本之后就开始自我思考，决定去走自己的路。&lt;/p&gt;&lt;p&gt;反过来说，其实走自己的路，又何尝不是陡峭的呢？对于React来说，也许它所带来的概念非常简单给力。但与此同时，若是以完成整个前端项目为目标的话，你所需要绝对不仅仅只是一个View层的React所能办到的，你会发现前端还可能面临构建、路由、数据流处理等等一系列问题。所以就像当初遇见AngularJS一样，又开始接触眼花缭乱的第三方库所灌输的各种概念。这个时候，你还会认为组合拳的方式好于一揽子式的解决方案吗？&lt;/p&gt;&lt;p&gt;当我们站到一定高度之后再回过头来看问题，似乎问题就变得简单乃至问题都不复存在了。而如何能站到更高的高度呢？那就是开始同时尝试两种方案吧。只有积攒了一定的经验之后，才会认识到跟随永远不是最终的答案，只有亲身体验之后才会拥有自己的认识。那么，最终送上一句话：就是干！&lt;/p&gt;&lt;h2 id=&quot;angularjs-1x到20&quot;&gt;AngularJS 1.x到2.0&lt;/h2&gt;&lt;p&gt;从Angular 1.x官方文档的变迁中就可以看出，Google已经有意精简了核心Modules的内容，并且让其所引入的概念尽可能少。AngularJS拥有着诸多特性，人们津津乐道就是：依赖注入、模块化、自动化双向数据绑定、语义化标签等等。而如果你是一个习惯于写后端的软件工程师的话，所谓的DI和模块化都是常用的代码分层手段，而双向绑定也只是一种VM的简化形式，最核心也是最新颖的概念反而就是Directive，赋予了HTML更强大的能力，相当于让浏览器学习了新的语法。&lt;/p&gt;&lt;p&gt;但与此同时指令也变得过于复杂，赋予Template过多的功能之后只会让人想起原来的服务端脚本语言，比如JSP或者ASP，它们使用数据库的内容加上逻辑判断来直接填充HTML模板。而目前AngularJS中的赋予了类似JSP的过强能力，允许了，甚至鼓励了程序员把代码写得混乱的行为，模板再次成了&lt;a href=&quot;https://github.com/lifesinger/lifesinger.github.io/issues/184&quot;&gt;灰色地带&lt;/a&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;AngularJS的创始人之一Misko Hevery：AngularJS弥补了HTML在构建应用方面的不足，其通过使用标识符（directives）结构，来扩展Web应用中的HTML词汇，使开发者可以使用HTML来声明动态内容，从而使得Web开发和测试工作变得更加容易。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;当AngularJS刚创建出来的时候，它并不是给开发人员用的。它是一个工具，更倾向于给需要快速创建持久化HTML表单的设计人员用。随着时间推移，它作了改变以适应各种场景，开发人员也用它建造更多、更复杂的应用程序，而只是在原有基础之上直接进行「增量化地」改进是远远不够的。这就是Angular 2.0在较高层次上的动机。更详细的内容可以参考这篇&lt;a href=&quot;https://github.com/xufei/blog/issues/8&quot;&gt;［翻译］有关Angular 2.0的一切&lt;/a&gt;，我还特意去翻了一下原作者&lt;a href=&quot;https://twitter.com/eisenbergeffect&quot;&gt;Rob Eisenberg&lt;/a&gt;的Blog和Twitter，结果就发现他是：&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Creator of Caliburn.Micro &amp;amp; Durandal. Former Angular 2.0 team member. Currently building a new tech startup, Durandal Inc., whose first product is Aurelia.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Aurelia和Angular 2.0有诸多相似之处，详细的内容可以参考&lt;a href=&quot;http://blog.durandal.io/2015/01/26/introducing-aurelia/&quot;&gt;Introducing Aurelia&lt;/a&gt;，以及&lt;a href=&quot;https://github.com/xufei/blog/issues/21&quot;&gt;后Angular时代二三事&lt;/a&gt;这篇文章里面所提到的一些共同特性。&lt;/p&gt;&lt;p&gt;最后从这篇&lt;a href=&quot;https://github.com/xufei/blog/issues/9&quot;&gt;浴火重生的Angular&lt;/a&gt;中查看关于&lt;a href=&quot;https://angular.io/&quot;&gt;Angular 2.0&lt;/a&gt;最新的module、Web Components、observe、promise等特性吧，据说被诟病已久的性能也优化得不行不行的，总之我还是相当期待Angular 2.0的！&lt;/p&gt;&lt;h2 id=&quot;划分前后端边界&quot;&gt;划分前后端边界？&lt;/h2&gt;&lt;p&gt;在这篇来自关于&lt;a href=&quot;https://github.com/xufei/blog/issues/15&quot;&gt;［翻译］Angular的问题&lt;/a&gt;文章中，作者ppk乃至译者xufei自己也提到，Angular更多地是面向企业的IT部门，而不是前端人员，并且使用AngularJS的用户更多是有Java背景的人员。而在现在这个前端粥多僧少的阶段，必然有很大一部分Java开发人员要去写JavaScript，但与此同时由于JavaScript代码太过缺乏约束，也让Java开发人员更加无所适从。这时Angular的约束性以及依赖注入等特性的好处就彰显出来了，特别是对于传统后端开发者来说，当遵守AngularJS的约定时，生产力也会更高。&lt;/p&gt;&lt;p&gt;与此同时，AngularJS独特的编码风格，它那种更倾向服务端而不是浏览器端的对HTML模板系统的封装形式，以及严重而基础的性能问题也吓跑了不少原来写前端的开发者。对于很多前端人员而言，最大的问题就是，AngularJS强迫自己用一种指定的方式去干活。&lt;/p&gt;&lt;p&gt;xufei提到的另外一个关于前端代码写得烂的原因就在于：前端开发者缺乏架构意识，或者项目负责人和架构师（通常是后端）没有足够的前端知识，而这两点不解决，用什么框架都一定做成渣。这点需要反对一下的就是，这跟框架可用性以及易用性的关系还是挺大的，要是开发者都能够有清晰的编程架构意识，那岂不是纯靠原生的Java就可以把后端写得很漂亮，又或者是只靠JavaScript、CSS、HTML就可以把前端的脏活干得很漂亮？&lt;/p&gt;&lt;p&gt;然后，其实这儿也牵扯出一个更有趣的问题，在前后端分别都有相应的「模板」概念，那么HTML的动态内容究竟应该由谁来处理，也就是如何划分和界定前端后端？而评论中也有两位大神对模板应当归属于浏览器端还是服务器端&lt;a href=&quot;https://github.com/xufei/blog/issues/15#issuecomment-73462675&quot;&gt;吵得不可开交&lt;/a&gt;，而我个人还是比较赞同@calidion的观点，不应该去区分绝对的前端后端，更多内容在：&lt;a href=&quot;http://blog.3gcnbeta.com/2015/02/24/Web%E5%BC%80%E5%8F%91%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B8%8E%E5%90%8E%E7%AB%AF%E7%9A%84%E7%95%8C%E7%BA%BF%E5%9C%A8%E9%82%A3%E9%87%8C%EF%BC%9F/&quot;&gt;Web开发的前端与后端的界线在那里？&lt;/a&gt;，最后的结论就在于「运行环境是唯一的前后端分界线」。&lt;/p&gt;&lt;p&gt;那么，在这个前后端分离趋势愈演愈烈的时期过渡之后呢？Web的未来是在哪里？&lt;a href=&quot;http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/&quot;&gt;Isomorphic/Universal JavaScript&lt;/a&gt;嘛？其实对于一个更广泛概念的Application来说，前后端本来就是一家，最多分为界面（Application的界面可能是Web/iOS/Android/Desktop等等）和背后的数据处理而已。若是使用统一的数据格式（JSON）并且在浏览器内存和数据库间实现数据同步（个人很喜欢&lt;a href=&quot;https://www.meteor.com/why-meteor/features&quot;&gt;Meteor&lt;/a&gt;的概念），剩下的就只是编写业务逻辑，然后如何把数据显示到不同的「界面」上的问题而已。&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;前端的学习曲线&quot;&gt;前端的学习曲线&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/reading-open-resource-code-from-github",
            "title"      : "GitHub开源项目源码十阅(1)：getAwesomeness",
            "category"   : "前端",
            "tags"       : "开源项目, JavaScript, Express, GitHub",
            "url"        : "/2015-11-10-reading-open-resource-code-from-github/",
            "path"       : "_posts/前端/2015-11-10-reading-open-resource-code-from-github.md",
            "next"       : "/2015-11-11-rethinking-about-front-end/",
            "previous"   : "/2015-11-02-history-about-web-development-evolution/",
            "date"       : "2015-11-10 00:00:00 +0000",
            "shortdate"  : "November 10, 2015",
            "content"    : "&lt;h1 id=&quot;github开源项目getawesomeness&quot;&gt;GitHub开源项目：getAwesomeness&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/getAwesome.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;repo url: &lt;a href=&quot;https://github.com/panzhangwang/getawesomeness/&quot;&gt;https://github.com/panzhangwang/getawesomeness/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;time: 2 days&lt;/p&gt;&lt;h2 id=&quot;项目乐趣&quot;&gt;项目乐趣&lt;/h2&gt;&lt;p&gt;近来GitHub上面的Awesome系列真的是灰常之多呀，各种关于语言、框架、工具等一切都可以分门别类地收集到&lt;code class=&quot;highlighter-rouge&quot;&gt;Awesome XX&lt;/code&gt;里面，而更有甚者的就是这个项目，做&lt;code class=&quot;highlighter-rouge&quot;&gt;Awesome XX&lt;/code&gt;系列的&lt;code class=&quot;highlighter-rouge&quot;&gt;Awesome&lt;/code&gt;超级大集合。暂且不讨论这种超级集合的优劣，但至少提供了一种快速获取相关资源的方式，而与此同时可能带来的知识重复性和饱和度，以及集合过大从而导致的内容稂莠不齐等问题，也是我们值得思考的一方面，其实就是人性的一种原始欲望，在这个资源如此充裕并且唾手可得的时代依旧满足了现代人的收藏癖。&lt;/p&gt;&lt;p&gt;而自己当然也是有类似的需求的，这样一种更高一层的思考，以及展示的方式也让知识的流通更加方便和美观，这跟自己关于「知识流通起来才具有价值」的价值观也有契合。与此同时，在更高层次或框架上来思考的话，也是满足于自我知识展示平台应用的一种方式。&lt;/p&gt;&lt;p&gt;其他想法：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;挖掘其所有已具备功能和可改进之处&lt;/li&gt;  &lt;li&gt;直接套用其UI和交互功能，思考其他的内容用于展示&lt;/li&gt;  &lt;li&gt;结合GitHub的issue博客，展现大而全的展示&lt;/li&gt;  &lt;li&gt;博客系统的进一步想法扩充&lt;/li&gt;  &lt;li&gt;no-backend数据的一种例子&lt;/li&gt;  &lt;li&gt;开始对博客系统进行计划啦，Trello&lt;/li&gt;  &lt;li&gt;在Trello里面建立项目并且计划UI&lt;/li&gt;  &lt;li&gt;全平台应用的blog展示&lt;/li&gt;  &lt;li&gt;自定义任意数据源&lt;/li&gt;  &lt;li&gt;如何实现简单搜索功能&lt;/li&gt;  &lt;li&gt;导航栏展示已访问链接&lt;/li&gt;  &lt;li&gt;Markdown源文件直接渲染&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;马上开始&quot;&gt;马上开始&lt;/h2&gt;&lt;p&gt;从&lt;code class=&quot;highlighter-rouge&quot;&gt;server.js&lt;/code&gt;文件开始，结合网站功能以及&lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt;中所提示的用法，通过已实现的功能去找到代码中相对应的部分，关键在于找到程序的入口，然后再顺藤摸瓜找到具体实现的方法。&lt;/p&gt;&lt;p&gt;差不多就把整个项目架构以及实现弄清楚了，可以学到的东西也很多：&lt;/p&gt;&lt;h3 id=&quot;0x01-expressjs&quot;&gt;0x01. Express.js&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;express配置app的过程    &lt;ul&gt;      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var app = express();&lt;/code&gt;&lt;/li&gt;      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;routes&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;views&lt;/code&gt;&lt;/li&gt;      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app.listen(3000)&lt;/code&gt;&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;nodejs的模块：&lt;code class=&quot;highlighter-rouge&quot;&gt;module.exports&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;require(&#39;./config/express&#39;)&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app.use([path,] function [, function...])&lt;/code&gt; API    &lt;ul&gt;      &lt;li&gt;Mounts the middleware function(s) at the path. If path is not specified, it defaults to “/”.&lt;/li&gt;      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app.use(express.static(config.root + &#39;/public&#39;));&lt;/code&gt;&lt;/li&gt;      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app.use(locale(supported));&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;var supported = [&quot;en&quot;, &quot;zh-CN&quot;];&lt;/code&gt;&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app.engine(&#39;html&#39;, swig.renderFile);&lt;/code&gt;&lt;/li&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app.set(&#39;views&#39;, config.root + &#39;/app/views&#39;);&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;0x02-routes路由&quot;&gt;0x02. Routes路由&lt;/h3&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;404&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originalUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Not found&#39;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/swig_404.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;当然可以再次分层，把具体的&lt;code class=&quot;highlighter-rouge&quot;&gt;res.render()&lt;/code&gt;函数放到不同的地方。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sites&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;../app/sites&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sites&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/get/:awe&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sites&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;0x03-sites视图&quot;&gt;0x03. Sites视图&lt;/h3&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exports.index = function (req, res){  res.render(&#39;index&#39;, {    title: &#39;Home&#39;,    groups: db(&#39;groups&#39;).where({})  });};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;所对应的view文件，&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;row&quot;&amp;gt;    &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;0x04-cookies&quot;&gt;0x04. Cookies&lt;/h3&gt;&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;req.cookies&lt;/code&gt;&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exports.index = function (req, res){    var aweCookie = req.cookies.aweCookie;    var recents = aweCookie? JSON.parse(aweCookie) : [];  res.render(&#39;index&#39;, {    title: &#39;Home&#39;,    recents: recents,    groups: db(&#39;groups&#39;).where({})  });};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;而如何processCookie呢？&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (!aweCookie) {    var arr = [];    arr.push(req.params.awe);    res.cookie(&#39;aweCookie&#39;, JSON.stringify(arr), { maxAge: maxAge, httpOnly: true });}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;0x05-lowdb库&quot;&gt;0x05. lowdb库&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/typicode/lowdb&quot;&gt;https://github.com/typicode/lowdb&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Need a quick way to get a local database?&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var low = require(&#39;lowdb&#39;);var db = low(&#39;db.json&#39;);var found = db(&#39;defs&#39;).find({ key: awe });groups: db(&#39;groups&#39;).where({})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;当然它还有其他非常易用好用的方法，only 8 methods and properties.&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db(&#39;posts&#39;).push({ title: &#39;lowdb is awesome&#39;})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Database is automatically saved to db.json&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{  &quot;posts&quot;: [    { &quot;title&quot;: &quot;lowdb is awesome&quot; }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;0x06-request库&quot;&gt;0x06. request库&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/request/request&quot;&gt;https://github.com/request/request&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var mkFile = found.file ? found.file : &quot;README.md&quot;;var url = &#39;https://raw.githubusercontent.com&#39; + found.repo + &#39;/master/&#39; + mkFile;request(url, function (error, response, body) {    if (!error &amp;amp;&amp;amp; response.statusCode == 200) {        cache.put(awe, body );    }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;0x07-swig模板引擎&quot;&gt;0x07. Swig模板引擎&lt;/h3&gt;&lt;p&gt;使用&lt;a href=&quot;http://paularmstrong.github.io/swig/docs/&quot;&gt;swig模板引擎&lt;/a&gt;，和Express.js搭配良好，可以传入函数这点很酷。&lt;/p&gt;&lt;p&gt;比如：&lt;/p&gt;&lt;p&gt;Use getAwesomeness() to retrieve all amazing awesomeness (README.md is markdown file) from Github.&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;article class=&quot;markdown-body&quot;&amp;gt;    &amp;lt;/article&amp;gt;res.locals.md = function (text) {  marked.setOptions({    renderer: new marked.Renderer(),    gfm: true,    tables: true,    breaks: false,    pedantic: false,    sanitize: false,    smartLists: true,    smartypants: false  });  return marked(text);}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;0x08-search功能&quot;&gt;0x08. Search功能&lt;/h3&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$.get(&#39;/json/list&#39;, function(data){    $(&quot;#typeahead&quot;).typeahead({ source:data });},&#39;json&#39;);var $input = $(&#39;#typeahead&#39;);$input.change(function() {    var current = $input.typeahead(&quot;getActive&quot;);    if (current) {        if (current.name == $input.val()) {            window.location.href = &#39;/get/&#39; + current.key;        }    }});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;0x09-totop功能&quot;&gt;0x09. toTop功能&lt;/h3&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;#top&quot; id=&quot;toTop&quot; class=&quot;btn btn-lg btn-primary&quot; title=&quot;Back to top&quot;&amp;gt;&amp;amp;uarr;&amp;lt;/a&amp;gt;$(&quot;#toTop&quot;).scrollToTop();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;0x0a-toc-功能&quot;&gt;0x0a. TOC 功能&lt;/h3&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;col-md-3&quot;&amp;gt;    &amp;lt;div id=&quot;sidebar&quot;&amp;gt;        &amp;lt;div class=&quot;toc&quot;&amp;gt;&amp;lt;/div&amp;gt;    &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;$(&#39;.toc&#39;).toc({    &#39;selectors&#39;: &#39;h1,h2,h3,h4&#39;,    &#39;container&#39;: &#39;article&#39;});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;",
            "excerpt"    : "&lt;h1 id=&quot;github开源项目getawesomeness&quot;&gt;GitHub开源项目：getAwesomeness&lt;/h1&gt;"
		} ,
	
		{
            "id"         : "/history-about-web-development-evolution",
            "title"      : "Web 前端开发模式演变",
            "category"   : "演讲",
            "tags"       : "Rethink, JavaScript, Web",
            "url"        : "/2015-11-02-history-about-web-development-evolution/",
            "path"       : "_posts/演讲/2015-11-02-history-about-web-development-evolution.md",
            "next"       : "/2015-11-10-reading-open-resource-code-from-github/",
            "previous"   : "/2015-10-31-mission-control-on-mac-os-x/",
            "date"       : "2015-11-02 00:00:00 +0000",
            "shortdate"  : "November 02, 2015",
            "content"    : "&lt;p&gt;30 min = 15 min * 2&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;done-is-better-than-perfect&quot;&gt;「Done is better than perfect.」&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;web-前端开发模式演变&quot;&gt;Web 前端开发模式演变&lt;/h1&gt;&lt;p&gt;&lt;small&gt;by Jimmy Lv&lt;/small&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2&gt;？&lt;/h2&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;被误解的前端&quot;&gt;被误解的前端&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com//css.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;热门的前端&quot;&gt;热门的前端&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com//money.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;两次巨大革命&quot;&gt;两次巨大革命&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;PC和因特网革命    &lt;ul&gt;      &lt;li&gt;35年, -&amp;gt; 21亿台设备 {:&amp;amp;.moveIn}&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;移动互联网革命    &lt;ul&gt;      &lt;li&gt;5年, -&amp;gt; 60亿台设备 {:&amp;amp;.moveIn}&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;语言排行榜&quot;&gt;语言排行榜&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com//hot_language.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;javascript与netscape&quot;&gt;JavaScript与Netscape&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;Sun, Java&lt;/li&gt;  &lt;li&gt;Brendan Eich, Scheme&lt;/li&gt;  &lt;li&gt;Mircosoft, JScript&lt;/li&gt;  &lt;li&gt;ECMAScript&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/201106/bg2011062401.jpg&quot; alt=&quot;Netscape&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;web-10时代&quot;&gt;Web 1.0时代&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;服务端生成，浏览器负责展现 {:&amp;amp;.moveIn}    &lt;ul&gt;      &lt;li&gt;        &lt;table&gt;          &lt;tbody&gt;            &lt;tr&gt;              &lt;td&gt;Java + JSP&lt;/td&gt;              &lt;td&gt;ASP&lt;/td&gt;            &lt;/tr&gt;          &lt;/tbody&gt;        &lt;/table&gt;      &lt;/li&gt;      &lt;li&gt;Tomcat、Apache&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;缺点：    &lt;ul&gt;      &lt;li&gt;JSP代码 越来越多，灰色地带 可维护性差&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/90850e93b917cd3c958dff1c7d0197f819167343/687474703a2f2f696d672e68622e616963646e2e636f6d2f63333639616163633864613338616638653432326664323935313438633537643162353831376666666335362d4f636250646c5f6677363538&quot; alt=&quot;Web 1.0&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;后端mvc时代&quot;&gt;后端MVC时代&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;Structs、Spring MVC {:&amp;amp;.moveIn}&lt;/li&gt;  &lt;li&gt;View层变得简单：模板引擎（ Velocity、Freemaker）&lt;/li&gt;  &lt;li&gt;缺点：    &lt;ul&gt;      &lt;li&gt;纠缠不清的Controller&lt;/li&gt;      &lt;li&gt;前端开发重度绑定后端环境&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/b9e16b0b3ff3361a481badaca7d408e8fa6b404f/687474703a2f2f696d672e68622e616963646e2e636f6d2f3961366266353237646162626462396237393563353862306237616636633761313864653963653331316136312d3975697578545f6677363538&quot; alt=&quot;后端MVC&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;web-20时代ajax&quot;&gt;Web 2.0时代：AJAX&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;Gmail横空出世，Web Application&lt;/li&gt;  &lt;li&gt;Ajax，XMLHttpRequest接口&lt;/li&gt;  &lt;li&gt;jQuery，JS操作网页DOM结构变得非常容易&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/d0098546c9fa01b443c16ff1953c90aa9056955b/687474703a2f2f696d672e68622e616963646e2e636f6d2f3932393766646337336438336632373764343439633932313933613361663432386464633064343431316366392d6e31445936465f6677363538&quot; alt=&quot;AJAX&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;单页面应用&quot;&gt;单页面应用&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; 无需刷新页面 {:&amp;amp;.moveIn}    &lt;ul&gt;      &lt;li&gt;前端路由，展现&lt;/li&gt;      &lt;li&gt;后端路由，数据&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;挑战：    &lt;ul&gt;      &lt;li&gt;前后端接口的约定，前端的数据绑定&lt;/li&gt;      &lt;li&gt;JavaScript 代码越来越多&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/f064bc7a5b06ea9a39cf039a5dec0ca6675141ff/687474703a2f2f696d672e68622e616963646e2e636f6d2f3135383839323134336263363430333364323264643865643765373533366537316530373063346131336335372d6850673150635f6677363538&quot; alt=&quot;SPA&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;mv-时代&quot;&gt;MV** 时代&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;Knockout、Backbone、Angular 1.x {:&amp;amp;.moveIn}&lt;/li&gt;  &lt;li&gt;前后端分离，职责清晰&lt;/li&gt;  &lt;li&gt;缺点：    &lt;ul&gt;      &lt;li&gt;代码不能复用（数据校验）&lt;/li&gt;      &lt;li&gt;不利于SEO，搜索引擎爬虫不会执行JS&lt;/li&gt;      &lt;li&gt;性能并非最佳，移动端网络是个渣&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/2ab0e0e247dfae7b74760b7d57056a680204874d/687474703a2f2f696d672e68622e616963646e2e636f6d2f3536663463656530653663376166363165323464626633316534626531376631343264353930326331313039612d42637852696d5f6677363538&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;全栈时代nodejs&quot;&gt;全栈时代：Node.js&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;异步IO：JS单线程 + Chrome的V8编译器 {:&amp;amp;.moveIn}&lt;/li&gt;  &lt;li&gt;    &lt;table&gt;      &lt;tbody&gt;        &lt;tr&gt;          &lt;td&gt;Front-end：只处理浏览器层的展现逻辑&lt;/td&gt;          &lt;td&gt;路由、模板、数据获取&lt;/td&gt;        &lt;/tr&gt;      &lt;/tbody&gt;    &lt;/table&gt;  &lt;/li&gt;  &lt;li&gt;Node Web Server：业务逻辑，SEO时使用服务端渲染&lt;/li&gt;  &lt;li&gt;Universal JavaScript：前后复用部分逻辑代码&lt;/li&gt;  &lt;li&gt;回归后端，JS-&amp;gt;Node / Java-&amp;gt;JSP&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://assets.toptal.io/uploads/blog/image/25/toptal-blog-image-1374849974023.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;未来前端组件化&quot;&gt;未来：前端组件化&lt;/h2&gt;&lt;p&gt;如何将来自于服务器端或者用户输入的动态数据高效的反映到复杂的用户界面上。&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;下一代的HTML标准：Web Component&lt;/li&gt;  &lt;li&gt;React、Angular 2.0、Polymer&lt;/li&gt;  &lt;li&gt;转译语言：TypeScript、CoffeeScript、ES6&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/fouber/blog/raw/master/201508/assets/modular-component.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;跨平台时代界面编程&quot;&gt;跨平台时代：界面编程&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;Webkit：Electron {:&amp;amp;.moveIn}&lt;/li&gt;  &lt;li&gt;Hybrid App：WebView&lt;/li&gt;  &lt;li&gt;React Native&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h2 id=&quot;atwoods-law&quot;&gt;Atwood’s Law&lt;/h2&gt;&lt;p&gt;Any application that can be written in JavaScript,&lt;/p&gt;&lt;p&gt;will eventually be written in JavaScript.&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;30 min = 15 min * 2&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/mission-control-on-mac-os-x",
            "title"      : "从需求出发：再谈 macOS 下的 Mission Control",
            "category"   : "思考",
            "tags"       : "效率, macOS",
            "url"        : "/2015-10-31-mission-control-on-mac-os-x/",
            "path"       : "_posts/思考/2015-10-31-mission-control-on-mac-os-x.md",
            "next"       : "/2015-11-02-history-about-web-development-evolution/",
            "previous"   : "/2015-10-30-productivity-and-pressure/",
            "date"       : "2015-10-31 00:00:00 +0000",
            "shortdate"  : "October 31, 2015",
            "content"    : "&lt;h2 id=&quot;从需求出发&quot;&gt;从需求出发&lt;/h2&gt;&lt;p&gt;所谓需求，也是&lt;strong&gt;在正确的时间里面做最有价值的事情&lt;/strong&gt;，哪怕是用户体验做得再好，不满足于需求也是白搭。而且，这种需求必须是强需求，或者是解决了不得已的工作，或者是减少了重复工作。&lt;/p&gt;&lt;p&gt;可能不算是原则的原则：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;适应比变化更有用：macOS 本来就很好用，自带的原生 App 都已经足够好用，优先使用这些 App 才可以更好地融于 Mac 系统。&lt;/li&gt;  &lt;li&gt;抓住重点：只替换常用软件即使用频率最高的软件，比如看电影或者听歌的播放器只需要用自带的即可。&lt;/li&gt;  &lt;li&gt;减少迫不得已：比如说使用盗版软件，折腾成本过高的东西就不要折腾了。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;使用电脑无非就是日常使用和工作娱乐需要，简单分个类，有网或者是没网这种情况的分类是不够明确的，因为绝大部分的情况下都是有网的。具体的软件列表就不列出来了，网上可以找到很多最佳软件合集。其实还是得在日常使用中，敏锐得发现自己的不爽之处，然后根据所谓痛点再去找相关工具，若是没有那就自己创造一个，很多伟大的产品就是这样产生的。&lt;/p&gt;&lt;h2 id=&quot;mission-control-与多任务&quot;&gt;Mission Control 与多任务&lt;/h2&gt;&lt;h3 id=&quot;区分工作台&quot;&gt;区分工作台&lt;/h3&gt;&lt;p&gt;之前一直没有利用系统的多桌面，刚刚尝试了一把，真是酷炫叼渣天。发掘最深的需求应该是&lt;strong&gt;不需要频繁切换窗口&lt;/strong&gt;，而是分为不同的工作区，不同的桌面存放不同的软件。使用 Mission Control 和多 Desktop 工作区，简直就是完美任务切换啊。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2b2hljllj31kw0zk7iy.jpg&quot; alt=&quot;MissionControl&quot; /&gt;&lt;/p&gt;&lt;p&gt;你怎么翻译 Desktop，桌面？屁！妈的被 Windows 的翻译洗脑了。就是那个每次都要回到桌面再找程序？ 然后还要一直右键刷新的「桌面」？！卧槽，或者，一定要保持桌面整洁？&lt;/p&gt;&lt;p&gt;答案揭晓。其实，&lt;strong&gt;Desktop，应该叫做「工作台」&lt;/strong&gt;。然后就很明了了：只有区分了多个&lt;em&gt;工作区&lt;/em&gt;才可以真正得执行多任务。只有把任务隔离开来，才可以保持专注，&lt;strong&gt;「每次只做一件事，做好一件事」&lt;/strong&gt;。而每个程序可以同时打开多个&lt;em&gt;程序窗口&lt;/em&gt;就是MissionControl的秘密武器，而每个任务需要的相关的程序放在同一个工作区里面，避免工作区之间的不停切换！&lt;/p&gt;&lt;p&gt;所以应该摒弃 Win 7 下的几个坏毛病：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;不要频繁使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd+Tab&lt;/code&gt;，当图标很多的时候根本难以在最短时间内找到相应的应用。&lt;/li&gt;  &lt;li&gt;不需要使用拖动边缘吸附，当打开的软件过多的时候布局全部窗口会使窗口特少。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;哈哈哈，我以前一直想，如果家里有钱，我就写作业一个房间，玩游戏一个房间，看书一个房间，看电影一个房间。每个房间里面都会有椅子，台灯，以及电脑，或者吃的。&lt;/p&gt;&lt;h3 id=&quot;保持专注&quot;&gt;保持专注&lt;/h3&gt;&lt;p&gt;核心理念就是要专注，在一个工作区下做一件事情，至于这件事情需要多少软件，那就提前把这些软件放进来就好了。比如说编程，通常一边看教程，一边写代码，一边操作终端。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2b30azykj31kw0zkh5a.jpg&quot; alt=&quot;write code&quot; /&gt;&lt;/p&gt;&lt;p&gt;这里用到一个 ShiftIt 的 App，可以非常方便得布局程序窗口。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2b31ggbfj30mo0tot9j.jpg&quot; alt=&quot;shiftit&quot; /&gt;&lt;/p&gt;&lt;p&gt;而且一个软件可以同时有多个窗口，但是这个软件也不一定是在做同一件事吖。比如说 Chrome，你可以用来查文档，也可以用来刷知乎，但是这两个 Chrome 窗口完全就该放在不同的工作台中。&lt;/p&gt;&lt;p&gt;但是与此同时，在同一工作台也可以使用两个 Chrome 窗口，这两个窗口的工作性质一致，但是固定性不统一。比如说，你可以新建一个 Chrome 搜索文档中不明确的地方，然后使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd+~&lt;/code&gt; 切换回来，继续看文档写代码。前者是不固定的且搜索数目为止，后者是固定不定的，文档只有一份。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2b33c94qj31kw0zkkht.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;事先分好工作区，在不同的桌面中，预先打开会使用到的常用软件，一般几个就够了，多了就该放在其他桌面中。&lt;/li&gt;  &lt;li&gt;在只有几个软件的时候才使用窗口布局，也就是多工作台和单工作台多窗口布局的结合使用。&lt;/li&gt;  &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Option+Tab&lt;/code&gt; 在同一工作台切换不同的程序，程序少就很好切换啦。&lt;/li&gt;  &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd+~&lt;/code&gt; 快捷键直接切换同一 Application 的不同窗口，注意只能切换当前工作台中的同一 App。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;快捷键和手势：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2b35jp6xj317c0zy7b6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;在这里还可以有更详细的设置，关闭 Dashboard 就又少了一个不必要的工作区，神清气爽。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2b378ocjj317c12iagk.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;理解了 Mission Control 的工作理念和操作概念，现在看来原生支持的这些快捷键简直就是贴心到爆。手势和快捷键的支持都足够好用，但还是会觉得手势更酷更顺手吧。&lt;/p&gt;&lt;p&gt;&lt;del&gt;问题是现在的切换动画还是微卡，期待换电脑和新 Mac OS X 系统。&lt;/del&gt; 已换，并且升级到 macOS 10.12，流畅顺滑得爽到翻。&lt;/p&gt;&lt;p&gt;多任务的精粹和最终目的是，减少切换：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;性能足够，完全不用担心后台开多了，总是关闭程序，然后却又打开。&lt;/li&gt;  &lt;li&gt;工作台确定之后，就不必担心来回切换程序会打乱工作台了，迅速回到当初的状态。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;mac-应用的优化与软件推荐&quot;&gt;Mac 应用的优化与软件推荐&lt;/h2&gt;&lt;p&gt;直接看图，使用频率高是一回事儿，提高幸福感是另外一回事儿，待续。。。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2b39pxeoj31kw0zkk11.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;从需求出发&quot;&gt;从需求出发&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/productivity-and-pressure",
            "title"      : "谈谈效率：工作与生活、压力与负担",
            "category"   : "思考",
            "tags"       : "写作, 效率, 工作",
            "url"        : "/2015-10-30-productivity-and-pressure/",
            "path"       : "_posts/思考/2015-10-30-productivity-and-pressure.md",
            "next"       : "/2015-10-31-mission-control-on-mac-os-x/",
            "previous"   : "/2015-10-09-three-types-of-knowledge/",
            "date"       : "2015-10-30 00:00:00 +0000",
            "shortdate"  : "October 30, 2015",
            "content"    : "&lt;h2 id=&quot;卧槽这歌好hi&quot;&gt;卧槽，这歌好Hi~&lt;/h2&gt;&lt;p&gt;脑袋是很受情绪影响的，但是情绪又是可以由身体变化影响的。比如，听嗨歌可以带动身体，而身体跳动起来也是可以带动情绪的。不开心的时候，强行把嘴角上扬，也是可以让心情好那么一些的。&lt;/p&gt;&lt;h2 id=&quot;工作就是工作&quot;&gt;工作就是工作&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;所谓效率，不过是追求更短的时间完成相同工作量的事情。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;而完成之后所剩下的时间，你就可以做其他的事情：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;写文章吖&lt;/li&gt;  &lt;li&gt;做更多的工作吖&lt;/li&gt;  &lt;li&gt;休息吖&lt;/li&gt;  &lt;li&gt;锻炼身体吖&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;总之，工作就是工作，快速完成工作需要效率，但目的也是为了享受工作完成之后的生活。如果能够快速完成工作，但是在那之后却依旧在工作，没有做更有价值的事情，那又有何用？&lt;/p&gt;&lt;p&gt;现在的中国节奏确实很快，好像一旦慢下去就要背负罪恶感一样，&lt;strong&gt;因为总有比你优秀的人还比你努力。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;可能在国外或者中年人会不太一样，完成工作之余，便是放下工作享受生活。不追求加班，也不刻意追求完成工作的效率，在固定的时间里完成该完成的工作就好。&lt;/p&gt;&lt;p&gt;但至少，这不该是我们年轻人的状态，在这样一个时代，这样一个年纪，现在不努力，现在不奋力奔跑，那又要在什么时候才开始努力呢？&lt;/p&gt;&lt;h2 id=&quot;压力和负担&quot;&gt;压力和负担&lt;/h2&gt;&lt;p&gt;甚至于，这里会引发出另外一个问题，为什么年轻人要努力，正是因为年轻的时候负担少，这里可能包括身体上，财务上，人际关系上的各方面的负担少。潜在的前提就是，现在的身体还健康，没有太多的疾病、现在的羁绊还很少，没有结婚生孩子，爸妈身体还健康、现在的时间还很充足，没有太多的迫不得已要去解决。&lt;/p&gt;&lt;p&gt;那由此可见，年轻人所背负的为什么叫做压力而不是负担，压力是莫须有的，那些虚无缥缈的期望压在身上，更多的算是心理压力吧。你要有房子车子票子，但是你也可以没有，如果你对自己的期望不在于此，那这种外界压力也就不存在，所谓之「无欲则刚」。&lt;/p&gt;&lt;p&gt;可是步入中年，正是因为有了拥有，才背负起了责任。如果爸妈足够健康，不会老去，并且有足够的资本养老，那爸妈的存在怎么会成为负担，不应该是一起共享天伦之乐吗？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;没拥有的会带给你压力，拥有的可能会是负担。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;所以，结论来了：为了进一步长大之后的负担少，那就从现在开始做起，锻炼身体，减少疾病的产生几率。与此同时，现在的自己，不用太去担心之前所说的那些莫须有的压力，大部分都是心理造成的。&lt;del&gt;该有的都会有的，成为一个所谓的凡人是迟早的。&lt;/del&gt;&lt;/p&gt;&lt;p&gt;想到就很忧伤。&lt;/p&gt;&lt;p&gt;只希望，在多年之后，我成为的是一个健康，快乐的凡人，该有的都已经有了。并且，在那之前做过一些不是凡人所做的事情，一般人做不到的事情，自己想做的事情。因为我不想做一个后悔的凡人，不后悔也就意味着自己能够实现现在所说的这一切。&lt;/p&gt;&lt;p&gt;如果一切都如自己所愿，现在开始努力锻炼身体，找到工作的方法，提高做事的效率，不将就得过好生活。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;生活，绝对不应该就等于负担。&lt;/strong&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;卧槽这歌好hi&quot;&gt;卧槽，这歌好Hi~&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/three-types-of-knowledge",
            "title"      : "个人知识管理：知识的三种形态",
            "category"   : "思考",
            "tags"       : "互联网, PKM",
            "url"        : "/2015-10-09-three-types-of-knowledge/",
            "path"       : "_posts/思考/2015-10-09-three-types-of-knowledge.md",
            "next"       : "/2015-10-30-productivity-and-pressure/",
            "previous"   : "/2015-09-27-reactjs_tutorial_part_4/",
            "date"       : "2015-10-09 00:00:00 +0000",
            "shortdate"  : "October 09, 2015",
            "content"    : "&lt;blockquote&gt;  &lt;p&gt;知乎上对于 PKM 的话题描述：一种新的知识管理的理念和方法，能将个人拥有的各种资料、随手可得的信息变成更具价值的知识，最终利于自己的工作、生活。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;其实每个人都或多或少地在进行着个人知识管理（PKM），从学生时代上课记笔记到现如今四处 Google 搜寻资料，准备 Presentation，都是在一步一步将接收的信息转化为内化的知识。在互联网时代，知识可以说从未像如此一般廉价，但是&lt;strong&gt;再好的知识若是对个人没有产生价值的话，那也只不过是一种信息噪音而已&lt;/strong&gt;。而对于 Knowledge 的认识，个人倾向于将其分为三种：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;已内化的「知识」：由内而外地可以随时随地向他人展现的东西，已经深入学习过的并且能够不依赖外部任何工具就能实现，比如写作、专业技能、情绪管理、思维方式等等。&lt;/li&gt;  &lt;li&gt;可整理的「资料」：通过整理后所产出的可文本存储的东西，其中最关键的便是整理这一步。例如我收藏下来的文章和自己所写作的内容，以文本的方式保存在电脑中，通过 Git + Cloud + Markdown + Editor 完美得达到记录、备份以及分享的目的。&lt;/li&gt;  &lt;li&gt;不可控的原始「材料」：此时，还有另外一种知识需要管理，就是完全依赖外部才能够知道，首先遇到的一个问题就是变化，外部的变化是不可控的，保存了也没有用，随时会有新的更新，所以就只好保存这个链接。第二个情况是外部的表现形式才不仅限于纯文本，有用的资料还包括了视频影音书本等等。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;而在本地所要保存的东西应当反复筛选内化，不断内收成自己的东西。收藏癖其实是人的一种原始本性，在当今信息搜索能力如此发达的时代早已不需要把所有东西都占为已有。首先是因为人在远古时代的时候资源极度缺乏，吃了上顿没下顿，那就肯定需要囤积粮食，而在现代社会，资源匮乏早已经不是问题，况且我们讨论的是在互联网上随时都可以找到的资料。然后是因为保存资料早已没有意义，互联网上的内容随时都可能变化乃至更好、更全面，并不是像以前所捕捉的猎物和收获的粮食，得到了就是得到了，不会再变化。&lt;/p&gt;&lt;p&gt;所以说，使用 Wiki 就是保存第三种知识的最好方式，重点在于整理，只需要脑海中有相关的知识结构，然后通过链接的方式连接到下一个节点，即互联网。网络上的知识太多太多，如果全部保存到本地是不可能的，而全部通过大脑来记忆当然更是天方夜谭。&lt;strong&gt;Wiki 就相当于大脑与外部世界的中间件，通过彼此节点的链接联系在一起，大脑只需要保存不同知识点之间的结构信息而无需掌握其具体内容，当真正需要产出的时候再把具体内容找出来。&lt;/strong&gt;此时，快速学习新知识也是非常重要的，如果一个新问题摆在眼前，该如何用最快的速度解决问题？首先依赖的就是快速检索相关资料的能力，之后便是在找到具体材料之后快速解决实际问题的能力。&lt;/p&gt;&lt;p&gt;我一直相信普遍规律的存在，不同事物之间一定是存在某种联系的，找出其中的线索以及对其抽象建模也是自非常感兴趣的一个点。在使用 Wiki 整理知识的同时，也让我有机会去发现不同知识之间的整体性规律和对比类比之类的抽象模型。&lt;/p&gt;&lt;p&gt;总之，做了再说。知识管理是一个很大的问题，对于自己说，最好的形式暂且不能够有所定论，况且还需要根据不同的知识载体建立不同的整理形式。&lt;/p&gt;",
            "excerpt"    : "&lt;blockquote&gt;  &lt;p&gt;知乎上对于 PKM 的话题描述：一种新的知识管理的理念和方法，能将个人拥有的各种资料、随手可得的信息变成更具价值的知识，最终利于自己的工作、生活。&lt;/p&gt;&lt;/blockquote&gt;"
		} ,
	
		{
            "id"         : "/reactjs_tutorial_part_4",
            "title"      : "【译】React.js教程 第四部分：Express路由",
            "category"   : "前端",
            "tags"       : "React, Express",
            "url"        : "/2015-09-27-reactjs_tutorial_part_4/",
            "path"       : "_posts/前端/2015-09-27-reactjs_tutorial_part_4.md",
            "next"       : "/2015-10-09-three-types-of-knowledge/",
            "previous"   : "/2015-09-23-crawler-using-python/",
            "date"       : "2015-09-27 00:00:00 +0000",
            "shortdate"  : "September 27, 2015",
            "content"    : "&lt;p&gt;技术系列笔记均已迁移至GitBook，更多&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;的内容请到：&lt;a href=&quot;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_4.html&quot;&gt;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_4.html&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;reactjs-tutorial-part-4&quot;&gt;&lt;em&gt;React&lt;/em&gt;.js Tutorial Part 4&lt;/h1&gt;&lt;p&gt;原文地址：&lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-4/&quot;&gt;http://www.joshfinnie.com/blog/reactjs-tutorial-part-4/&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Welcome to part 4 of my &lt;em&gt;React&lt;/em&gt;.js/Express.js app tutorial. In this blog post, we are going to create the necessary Express routes to serve &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; code to our &lt;em&gt;React&lt;/em&gt;.js frontend application. We are also going to very rudimentarily hook up these calls to our server it our &lt;em&gt;React&lt;/em&gt;.js component so that the &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; can be rendered.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;欢迎来到React.js/Express.js教程的第四部分。在这篇博客文章里，我们将会创建必要的Express路由来将&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;代码提供给我们的&lt;em&gt;React&lt;/em&gt;.js前端应用程序使用。我们也准备让&lt;em&gt;React&lt;/em&gt;.js组件得以初步调用我们的服务器，以便于&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;数据可以被渲染。&lt;/p&gt;&lt;h2 id=&quot;express-routes--express-路由&quot;&gt;Express Routes | Express 路由&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;The first thing we want to do is to create an Express.js route that will serve a &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; response when a certain URL is hit. This is actually very easy to accomplish within the Express.js framework. The setup of the Express.js website, which was auto-generated for us in &lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-1/&quot;&gt;Part 1 of this tutorial&lt;/a&gt; does a good job of getting us started, but to continue, we want to add some more files to help keep things organized for us.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们想要做的第一件事情就是创建一个Express.js路由，以便于一个具体的URL被点击的时候返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;。通过Express.js框架很轻松就可以达成目标。关于安装Express.js网站，在&lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-1/&quot;&gt;教程的第一部分&lt;/a&gt;已经为我们自动生成了，可以很好地用于入门。但是接下来，我们想要添加一些文件来保持组织性。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;So before anything else we want to create another file to keep our API routes. This file will be called &lt;code class=&quot;highlighter-rouge&quot;&gt;routes/api.js&lt;/code&gt; simply enough. Then we have to edit &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; a bit to make sure we can use this new file. In &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; we want to modify &lt;code class=&quot;highlighter-rouge&quot;&gt;var routes = require(&#39;./routes/index&#39;);&lt;/code&gt; to be something a little more useful to us: &lt;code class=&quot;highlighter-rouge&quot;&gt;var index = require(&#39;./routes/index&#39;);&lt;/code&gt;. Then directly below that we want to add our new API routes: &lt;code class=&quot;highlighter-rouge&quot;&gt;var api = require(&#39;./routes/api&#39;);&lt;/code&gt;. Lastly, we want to add these to our &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; by adding: &lt;code class=&quot;highlighter-rouge&quot;&gt;app.use(&#39;/api/&#39;, api);&lt;/code&gt;. Our &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; file should, partially, look like this:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;所以在其他事情开始之前，我们想要创建另外的文件来存放API路由。这个文件叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;routes/api.js&lt;/code&gt;就可以了，然后我们就需要稍微改变一下&lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;来保证我们可以使用新文件。在&lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;中，我们把&lt;code class=&quot;highlighter-rouge&quot;&gt;var routes = require(&#39;./routes/index&#39;);&lt;/code&gt;修改成其他更有用的形式：&lt;code class=&quot;highlighter-rouge&quot;&gt;var index = require(&#39;./routes/index&#39;);&lt;/code&gt;。然后直接在底下添加想要的新的API路由：&lt;code class=&quot;highlighter-rouge&quot;&gt;var api = require(&#39;./routes/api&#39;);&lt;/code&gt;。最后，把这些东西添加至&lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;app.use(&#39;/api/&#39;, api);&lt;/code&gt;。我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;就应该有点模样了：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...var index = require(&#39;./routes/index&#39;);var api = require(&#39;./routes/api&#39;);...app.use(&#39;/&#39;, index);app.use(&#39;/api/&#39;, api);...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Now we can add a &lt;code class=&quot;highlighter-rouge&quot;&gt;jobs&lt;/code&gt; route to our &lt;code class=&quot;highlighter-rouge&quot;&gt;routes/api.js&lt;/code&gt; and start serving &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; through our Express.js app.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在我们可以添加&lt;code class=&quot;highlighter-rouge&quot;&gt;jobs&lt;/code&gt;路由到我们&lt;code class=&quot;highlighter-rouge&quot;&gt;routes/api.js&lt;/code&gt;，然后通过Express.js应用提供&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;。&lt;/p&gt;&lt;h3 id=&quot;api-routes--api-路由&quot;&gt;API Routes | API 路由&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;There are a lot of resources out there about “Restful” API structure, but &lt;a href=&quot;http://code.tutsplus.com/tutorials/a-beginners-guide-to-http-and-rest--net-16340&quot;&gt;Tuts+&lt;/a&gt; does a pretty good job and I don’t want to dedicate too much time to it; this part of the tutorial does not really need a lot of REST endpoints.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这儿有很多关于”Restful” API架构的资源，而&lt;a href=&quot;http://code.tutsplus.com/tutorials/a-beginners-guide-to-http-and-rest--net-16340&quot;&gt;Tuts+&lt;/a&gt;就是一个非常棒的教程，我不想再花费太多时间去解释它了。本教程的这部分其实也不需要非常多的REST端口。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;But let’s write our first &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; endpoint which will list out all the jobs we have available. First, we want to steal the &lt;code class=&quot;highlighter-rouge&quot;&gt;jobs&lt;/code&gt; object from our &lt;em&gt;React&lt;/em&gt;.js code and move it into &lt;code class=&quot;highlighter-rouge&quot;&gt;routes/api.js&lt;/code&gt; then we want an endpoint that will return that object is &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; form. This is done by the following code:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;但是让我们来写第一个&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;端口，用于列举已有的所有工作信息。首先，我们想要从&lt;em&gt;React&lt;/em&gt;.js代码中把&lt;code class=&quot;highlighter-rouge&quot;&gt;jobs&lt;/code&gt;对象拿出来，然后放到&lt;code class=&quot;highlighter-rouge&quot;&gt;routes/api.js&lt;/code&gt;里，从而我们就需要一个端口可以返回&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;形式的对象。通过以下代码可以实现：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var express = require(&#39;express&#39;);var router = express.Router();var jobs = {    jobs: [        {            job_id: 1,            company: &#39;TrackMaven&#39;,            position: &#39;Software Maven&#39;,            local: &#39;Washington, DC, USA&#39;,            lookingFor: &#39;*Angular*.js, Django, ElasticSearch&#39;,            postedDate: &#39;4 April 2015&#39;,            description: &#39;&#39;,            category: &#39;Engineering&#39;        },        {            job_id: 2,            company: &#39;TrackMaven&#39;,            position: &#39;Junior Software Maven&#39;,            local: &#39;Washington, DC, USA&#39;,            lookingFor: &#39;Javascript, Python&#39;,            postedDate: &#39;4 April 2015&#39;,            description: &#39;&#39;,            category: &#39;Engineering&#39;        }    ]}router.get(&#39;/jobs&#39;, function(req, res) {    res.json({data: jobs});});module.exports = router;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;The object is almost a direct copy that we had hardcoded within our &lt;em&gt;React&lt;/em&gt;.js app, with a few modifications. Most importantly, we added the &lt;code class=&quot;highlighter-rouge&quot;&gt;job_id&lt;/code&gt; variable. This will allow us to use our REST endpoints to return only one job posting, if we want to… which of course we do.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这个对象几乎就是一个直接拷贝，在&lt;em&gt;React&lt;/em&gt;.js应用进行硬编码的基础之上带有一点儿修改。最重要的是，我们添加了&lt;code class=&quot;highlighter-rouge&quot;&gt;job_id&lt;/code&gt;变量。这可以让我们使用REST端口，只返回唯一的工作岗位，如果我们想要……当然我们也做了。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;To do that, it’s actually pretty simple. Using Express.js’s ability to know what URL parameters hit each endpoint, we can add an endpoint that looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/jobs/1&lt;/code&gt; and our router will know that we want the job with &lt;code class=&quot;highlighter-rouge&quot;&gt;job_id == 1&lt;/code&gt;. To do this, add the following to &lt;code class=&quot;highlighter-rouge&quot;&gt;routes/api.js&lt;/code&gt;:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;做到这样实际上非常简单。使用Express.js可以知道每个端口中含有哪些URL参数，我们可以添加一个像&lt;code class=&quot;highlighter-rouge&quot;&gt;/api/jobs/1&lt;/code&gt;这样的端口，然后我们的路由就会知道我们想要&lt;code class=&quot;highlighter-rouge&quot;&gt;job_id == 1&lt;/code&gt;的这个工作信息。为此，可以给&lt;code class=&quot;highlighter-rouge&quot;&gt;routes/api.js&lt;/code&gt;添加以下代码：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;router.get(&#39;/jobs/:job_id&#39;, function(req, res) {    var job_id = req.params.job_id;    for (i = 0, len = data.jobs.length; i &amp;lt; len; i++) {        if (data.jobs[i].job_id === parseInt(job_id)) {            res.json({data: job});        }    }    res.json({data: &quot;No job found...&quot;});});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;Please Note&lt;/strong&gt;: This is not ideal, nor really even practical. In the real world, we would be searching for the &lt;code class=&quot;highlighter-rouge&quot;&gt;job_id&lt;/code&gt; in a database, not this silly &lt;code class=&quot;highlighter-rouge&quot;&gt;for -&amp;gt; if&lt;/code&gt; statement we are doing here. But that’s for a later tutorial!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;请注意&lt;/strong&gt;：这并不合适，也不具有可实践性。事实上，我们将会从数据库中查找&lt;code class=&quot;highlighter-rouge&quot;&gt;job_id&lt;/code&gt;，而不是像我们这样很傻地使用&lt;code class=&quot;highlighter-rouge&quot;&gt;for -&amp;gt; if&lt;/code&gt;语句。但那是之后的教程了！&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;With these two routes, we should be able to &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; these two endpoints and get the following results:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;通过这两个路由，我们就应该可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;来访问这两个端口，得到以下结果：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl localhost:3000/api/jobs{&quot;data&quot;:{&quot;jobs&quot;:[{&quot;job_id&quot;:1,&quot;company&quot;:&quot;TrackMaven&quot;,&quot;position&quot;:&quot;Software Maven&quot;,&quot;local&quot;:&quot;Washington, DC, USA&quot;,&quot;lookingFor&quot;:&quot;*Angular*.js, Django, ElasticSearch&quot;,&quot;postedDate&quot;:&quot;4 April 2015&quot;,&quot;description&quot;:&quot;&quot;,&quot;category&quot;:&quot;Engineering&quot;},{&quot;job_id&quot;:2,&quot;company&quot;:&quot;TrackMaven&quot;,&quot;position&quot;:&quot;Junior Software Maven&quot;,&quot;local&quot;:&quot;Washington, DC, USA&quot;,&quot;lookingFor&quot;:&quot;Javascript, Python&quot;,&quot;postedDate&quot;:&quot;4 April 2015&quot;,&quot;description&quot;:&quot;&quot;,&quot;category&quot;:&quot;Engineering&quot;}]}}$ curl localhost:3000/api/jobs/1{&quot;data&quot;:{&quot;job_id&quot;:1,&quot;company&quot;:&quot;TrackMaven&quot;,&quot;position&quot;:&quot;Software Maven&quot;,&quot;local&quot;:&quot;Washington, DC, USA&quot;,&quot;lookingFor&quot;:&quot;*Angular*.js, Django, ElasticSearch&quot;,&quot;postedDate&quot;:&quot;4 April 2015&quot;,&quot;description&quot;:&quot;&quot;,&quot;category&quot;:&quot;Engineering&quot;}}$ curl localhost:3000/api/jobs/2{&quot;data&quot;:{&quot;job_id&quot;:2,&quot;company&quot;:&quot;TrackMaven&quot;,&quot;position&quot;:&quot;Junior Software Maven&quot;,&quot;local&quot;:&quot;Washington, DC, USA&quot;,&quot;lookingFor&quot;:&quot;Javascript, Python&quot;,&quot;postedDate&quot;:&quot;4 April 2015&quot;,&quot;description&quot;:&quot;&quot;,&quot;category&quot;:&quot;Engineering&quot;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;That’s it! We have a very basic API that we can now have our &lt;em&gt;React&lt;/em&gt;.js code talk to.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;就是这样！我们有了一个非常基础的API，现在我们可以让&lt;em&gt;React&lt;/em&gt;.js代码与之交互了。&lt;/p&gt;&lt;h2 id=&quot;reactjs-and-apis--reactjs-和-apis&quot;&gt;&lt;em&gt;React&lt;/em&gt;.js and APIs | &lt;em&gt;React.js&lt;/em&gt; 和 APIs&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;When first interacting with APIs using &lt;em&gt;React&lt;/em&gt;.js, I recommend just using the &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; packages. We will need to add this to our application, but that’s as easy as running &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install request --save&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;第一次使用&lt;em&gt;React&lt;/em&gt;.js与APIs交互的时候，我推荐使用&lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;包就好了。我们需要把它添加至应用程序，但是只要简单运行一下&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install request --save&lt;/code&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Once we have the &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; library installed, we need to do some modification to our &lt;code class=&quot;highlighter-rouge&quot;&gt;public/javascripts/scr/Jobs.jsx&lt;/code&gt; file to get the data from our API. To do this, we need to slightly modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;getInitialState&lt;/code&gt; function and add the &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; function. We no longer have an full initial state (just a skeleton of what we want our API to look like) since we want to get the data from the API once the component mounts to our application. Our entire &lt;code class=&quot;highlighter-rouge&quot;&gt;public/javascripts/scr/Jobs.jsx&lt;/code&gt; now looks like this:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;只要我们安装好了&lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;库，我们还需要为&lt;code class=&quot;highlighter-rouge&quot;&gt;public/javascripts/scr/Jobs.jsx&lt;/code&gt;文件做一些修改，得以从API中获取数据。为此，我们需要小小地修改一下&lt;code class=&quot;highlighter-rouge&quot;&gt;getInitialState&lt;/code&gt;函数，并且添加&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt;函数。我们不再需要完整的初始化状态（就像我们需要的API标本那样），因为我们期望组件在装配到应用程序的时候就从API中获取数据。我们整个&lt;code class=&quot;highlighter-rouge&quot;&gt;public/javascripts/scr/Jobs.jsx&lt;/code&gt;文件现在长这样：&lt;/p&gt;&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;request&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Job&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./Job.jsx&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;        &lt;span class=&quot;na&quot;&gt;getInitialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;        &lt;span class=&quot;na&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;http://localhost:3000/api/jobs/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isMounted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;        &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;list-group&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;                            &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Job&lt;/span&gt;                                &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;                                &lt;span class=&quot;na&quot;&gt;company=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;                                &lt;span class=&quot;na&quot;&gt;position=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;                                &lt;span class=&quot;na&quot;&gt;local=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;                                &lt;span class=&quot;na&quot;&gt;lookingFor=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lookingFor&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;                                &lt;span class=&quot;na&quot;&gt;postedDate=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postedDate&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;                                &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;                                &lt;span class=&quot;na&quot;&gt;category=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;                            &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;                        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;In the file above, you can see how we are using the &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; library to reach out to our newly created API and populate the &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; with the response. You can also see the modifications we made to &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; to allow for us to use the API. And that’s it, we should still have a working website that renders these two jobs, but now we are getting data from an API versus hardcoding it within our &lt;em&gt;React&lt;/em&gt;.js component (even though we are still just hardcoding it within our API).&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在上面的文件里，你可以看到我们如何使用&lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;库从新建的API中获取到数据，并将返回值放入&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;中。你也可以看到我们在&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;中做了修改，使我们可以使用这个API。就是这样，我们还是拥有一个可工作的网站，并且渲染了这两个工作信息，但是现在我们的&lt;em&gt;React&lt;/em&gt;.js组件是从API中获取数据，而不再是硬编码的（尽管我们的API里面还是硬编码的）。&lt;/p&gt;&lt;h2 id=&quot;conclusion--结论&quot;&gt;Conclusion | 结论&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;With this part of our tutorial, we have our app now using the API to populate its data. We have a long road ahead before this actually becomes useful, but it’s a great start. Next time we will be introducing a way of routing in &lt;em&gt;React&lt;/em&gt;.js so that we can not only see all the job posts, but we can drill down to each specific job post. We also need to hook up a database and start collecting data from &lt;em&gt;React&lt;/em&gt; too. Please stay tuned!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;通过这部分的教程，我们让应用程序通过API来获取它的数据。长路漫漫，其修远兮，但这是一个非常棒的开始。下一次我们会介绍在&lt;em&gt;React&lt;/em&gt;.js里的路由方式，以便于我们不仅可以看到所有的工作岗位，还可以进一步查看每个特定的工作信息。我们还需要连接到数据库，并且从&lt;em&gt;React&lt;/em&gt;中收集数据。请保持步调一致哟！&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;技术系列笔记均已迁移至GitBook，更多&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;的内容请到：&lt;a href=&quot;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_4.html&quot;&gt;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_4.html&lt;/a&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/crawler-using-python",
            "title"      : "一个知识清单：如何学习Python爬虫",
            "category"   : "编程",
            "tags"       : "Python, 爬虫",
            "url"        : "/2015-09-23-crawler-using-python/",
            "path"       : "_posts/编程/2015-09-23-crawler-using-python.md",
            "next"       : "/2015-09-27-reactjs_tutorial_part_4/",
            "previous"   : "/2015-09-21-better-java-zh/",
            "date"       : "2015-09-23 00:00:00 +0000",
            "shortdate"  : "September 23, 2015",
            "content"    : "&lt;blockquote&gt;  &lt;p&gt;import this.&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;前言    &lt;ul&gt;      &lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/27621722&quot;&gt;能利用爬虫技术做到哪些很酷很有趣很有用的事情？ - 知乎&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;学习Python，基本语法，常用数据处理库    &lt;ul&gt;      &lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/20702054&quot;&gt;你是如何自学 Python 的？ - 知乎&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000&quot;&gt;Python 2.7教程 - 廖雪峰&lt;/a&gt;，学基础看这个完全就够了。&lt;/li&gt;      &lt;li&gt;或者看他讲的视频，&lt;a href=&quot;http://www.imooc.com/learn/177&quot;&gt;Python入门 - 廖雪峰&lt;/a&gt;。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;了解网页的基本结构、组成 HTML+CSS+JS三剑客    &lt;ul&gt;      &lt;li&gt;类比于一个人，HTML就是骨架、CSS是衣服、JS是这个人的一系列动作，比如打自己一巴掌。&lt;/li&gt;      &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/html/index.asp&quot;&gt;HTML 教程&lt;/a&gt;，&lt;a href=&quot;http://www.w3school.com.cn/css/index.asp&quot;&gt;CSS 教程&lt;/a&gt;，&lt;a href=&quot;http://www.w3school.com.cn/js/index.asp&quot;&gt;JavaScript 教程&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;了解爬虫工作原理，涉及文件下载，数据解析，以及数据存储    &lt;ul&gt;      &lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/20899988&quot;&gt;如何入门 Python 爬虫？ - 知乎&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;网页下载，&lt;a href=&quot;http://www.cnblogs.com/TankXiao/archive/2012/02/13/2342672.html&quot;&gt;HTTP协议详解&lt;/a&gt;，一个非常好用的Python库，&lt;a href=&quot;http://cn.python-requests.org/zh_CN/latest/&quot;&gt;Requests for Humans &lt;/a&gt;&lt;/li&gt;      &lt;li&gt;数据解析，&lt;a href=&quot;http://dragon.cnblogs.com/archive/2006/05/08/394078.html&quot;&gt;深入浅出之正则表达式（一）&lt;/a&gt;，&lt;a href=&quot;http://regexper.com/&quot;&gt;regex可视化工具&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;超越正则表达式，&lt;a href=&quot;http://www.jikexueyuan.com/course/902.html&quot;&gt;XPath&lt;/a&gt;是什么鬼。&lt;/li&gt;      &lt;li&gt;数据存储，Python自带轻量级数据库&lt;a href=&quot;http://www.cnblogs.com/vamei/p/3794388.html&quot;&gt;SQLite&lt;/a&gt;。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;了解各种坑，模拟登陆，JS加载、点击动作，请求次数限制    &lt;ul&gt;      &lt;li&gt;&lt;a href=&quot;http://www.searchtb.com/2011/01/an-introduction-to-crawler.html&quot;&gt;网络爬虫定向抓取漫谈&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;&lt;a href=&quot;http://www.crifan.com/files/doc/docbook/web_scrape_emulate_login/release/html/web_scrape_emulate_login.html&quot;&gt;详解抓取网站，模拟登陆，抓取动态网页的原理和实现（Python，C#等）&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/column/details/why-bug.html&quot;&gt;专栏：Python爬虫入门教程&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;&lt;a href=&quot;http://search.jikexueyuan.com/course/?q=%E7%88%AC%E8%99%AB&quot;&gt;爬虫视频课程 - 极客学院&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;超级武器，上手Scrapy框架    &lt;ul&gt;      &lt;li&gt;非常好用的大而全功能完备的&lt;a href=&quot;http://doc.scrapy.org/en/latest/index.html&quot;&gt;Scrapy框架&lt;/a&gt;&lt;/li&gt;      &lt;li&gt;这里有之前版本的中文翻译，&lt;a href=&quot;http://scrapy-chs.readthedocs.org/zh_CN/latest/&quot;&gt;Scrapy 0.25 文档&lt;/a&gt;。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;一栈式解决方案，直接上浏览器webkit解决JS动态加载问题    &lt;ul&gt;      &lt;li&gt;网页动态刷新，什么是&lt;a href=&quot;http://www.w3school.com.cn/ajax/index.asp&quot;&gt;AJAX&lt;/a&gt;？&lt;/li&gt;      &lt;li&gt;两个无图形化的浏览器内核爬虫，&lt;a href=&quot;https://github.com/makinacorpus/spynner&quot;&gt;spynner&lt;/a&gt;，&lt;a href=&quot;https://github.com/jeanphix/Ghost.py&quot;&gt;Ghost.py&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;究极武器，直接使用第三方服务：PQL，Kimono    &lt;ul&gt;      &lt;li&gt;能够直接把网页变成API的&lt;a href=&quot;https://www.kimonolabs.com/apidocs&quot;&gt;Kimono&lt;/a&gt;。&lt;/li&gt;      &lt;li&gt;像SQL查询语句一样调用网站服务的&lt;a href=&quot;https://developer.yahoo.com/yql/&quot;&gt;YQL&lt;/a&gt;，雅虎出品。&lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;blockquote&gt;  &lt;p&gt;import this.&lt;/p&gt;&lt;/blockquote&gt;"
		} ,
	
		{
            "id"         : "/better-java-zh",
            "title"      : "【译】Better Java 中英对照译本",
            "category"   : "编程",
            "tags"       : "Java, 翻译, GitBook, 最佳实践",
            "url"        : "/2015-09-21-better-java-zh/",
            "path"       : "_posts/编程/2015-09-21-better-java-zh.md",
            "next"       : "/2015-09-23-crawler-using-python/",
            "previous"   : "/2015-09-20-recent-plan-focus/",
            "date"       : "2015-09-21 00:00:00 +0000",
            "shortdate"  : "September 21, 2015",
            "content"    : "",
            "excerpt"    : ""
		} ,
	
		{
            "id"         : "/recent-plan-focus",
            "title"      : "随想：没有比这更好的状态",
            "category"   : "思考",
            "tags"       : "生活, 工作",
            "url"        : "/2015-09-20-recent-plan-focus/",
            "path"       : "_posts/思考/2015-09-20-recent-plan-focus.md",
            "next"       : "/2015-09-21-better-java-zh/",
            "previous"   : "/2015-09-15-rails-girls-internal-version/",
            "date"       : "2015-09-20 00:00:00 +0000",
            "shortdate"  : "September 20, 2015",
            "content"    : "&lt;p&gt;马上就要进入到第三个月，下一周就要进行第二个月的Interview++了，心情早已没有了当初的那种忐忑与不安，相比于第一个月自己当然要做得好些，但依旧还是不够。其实我也不知道在这个时间点该是一种什么样的心情，该给自己定下一个什么样的目标。&lt;/p&gt;&lt;p&gt;Checklist里面能做的内容已经至少完成一遍了吧，但是「做到」一件事情是0到1的过程，跨过了就跨过了，而要把一件事情「做好」就又是另外一番景象了，已经不再是一次性就能够成功的事情。所以在「这个时间点」上，最好的状态大概就是，&lt;strong&gt;实事求是，排除情绪的干扰，客观公正得看待自己身上的一切。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;英语不好就是不好，没什么好自卑或者抱怨的，该提高的就是要去提高，而且这也不是一次性就能达到某一个水准的。技术上学习得快，这确实跟之前的积累有关，也跟自己的兴趣、思考和日常涉猎有关，但与此同时忘得当然也快呀不是吗？&lt;/p&gt;&lt;p&gt;在项目上的贡献暂且达到了一个新人所能做到的程度，但是自己也期望在完成基本任务之外，提出自己的想法和一些项目需要改进的地方。__需要总结，需要积累经验，需要进一步优化基本工作的效率。__最终目的就是要节约出更多的时间去思考，去把日常积累转化成自己的东西。&lt;/p&gt;&lt;p&gt;对于优化工作效率这一点，首先就不得不说「一定要学会求助」，你所面对的问题别人肯定有可能已经遇到过，或者别人能够一阵见血找到正确的方向。寻求最快的解决方案，一定是自己在面对问题时首要需要考虑的，而在解决之后也是一定要学会总结，思考为什么这么去做的原因，将他人的经验快速转化为自己的储备。&lt;/p&gt;&lt;p&gt;然后就是一个实践经验——「列出Todo List」，其实只有在经历过工作的节奏之后才知道List的作用，之前总是在尝试着各种GTD、TODO类产品，最后才发现根本没有必要在那么闲的时候去学习这些东西。但是好处也来了，在我面对压力的时候能够第一反应过来，原来这些东西在这个时候才是极其有用的呀，那现在开始执行就好了。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/news/2011/05/Pomodoro_Technique_Illustrated&quot;&gt;番茄工作法&lt;/a&gt;暂时是不能用的，毕竟这是一个需要沟通交流以及随时被打扰的开放环境，利弊相当。就像自己在第一条经验里面总结的那样，求助于他人其实也就相当于打扰了别人。当然GTD的理念还是值得学习的，快速清空大脑思绪，把注意力拉回当下，这时候就非常需要一个缓存区去存放待办事务，而这个缓存区最好的形式其实就是一个List。&lt;/p&gt;&lt;p&gt;最好的记录方式依旧是纸和笔，也是和他人交流沟通的最好载体，想象一下当你拿出手机、打开App、点开某个项目，然后问你看这个问题我……，其实真的很傻啊。记录下来，就相当于你有了一个当前状态的记录，而这个「状态队列」也是越小越好，如果不属于或远远偏离当前任务的范畴也就不应该记录下来。&lt;/p&gt;&lt;p&gt;脑补一下今后做一张卡，第一件事大概就是列出Todo List，然后去熟悉业务，跟BA做kick-off，然后在做卡的同时发现问题，记录问题，然后在完成最基础功能之后，再回过头来一条条check和review之前的List，如果在规定时间内没有解决就需要求助他人了。&lt;/p&gt;&lt;p&gt;工作中的事情可能会越来越琐碎，但是依旧要保持纯粹，工作上要做的事情就是「工作」。哪怕学习技术也好，最好还是不要跟自己业余研究的「产品编程」相比较吧。工作的时候首要目的就是完成任务，而在业余时间则是兴趣第一。当然如果现在的兴趣能在未来某个工作的时候派上用场，那自然是最好的。但依旧需要划分开来，只是为了简单、纯粹。&lt;/p&gt;&lt;p&gt;以前的我，总是太追求性价比，心想着如果生活能就是工作，工作刚好是自己的兴趣，而生活和工作的时候都要时刻学习，哪怕娱乐的时候也最好能学到点什么。其实多傻呀，那样子弄得自己真的太累。就像现在的自己，已经不能够简单纯粹得做上一顿饭，怕浪费时间。但其实呢，我又浪费了多少时间，「节约」出来的时间又拿来干嘛了呢？&lt;/p&gt;&lt;p&gt;其实吧，当你在投入在当下所要做的事情的时候，你会是快乐的，没有什么比「&lt;a href=&quot;http://www.zhihu.com/question/24428474&quot;&gt;心流&lt;/a&gt;」更让人感到幸福的了。其实说到这里很想去跑步呀，跑累了跑不动了就只会想着每一个步伐、每一次呼吸的节奏，那种感觉真的很棒。而在其他的时候，&lt;strong&gt;就专心得去当前该做的事情吧&lt;/strong&gt;，工作的时候就工作，下班了就学习，生活的时候好好生活，扯淡的时候就纯扯淡，谈恋爱就好好给她幸福，该孝敬爸妈的时候就孝敬爸妈，该了解朋友状态就找个统一时间刷一遍，睡觉之前看看照片也不错。&lt;/p&gt;&lt;p&gt;现在的状态，不过就是听着合胃口的歌，敲着自己想说的话，还有女朋友在心里陪着，想起爸妈外婆奶奶都安在，没有比这更好的状态了。&lt;/p&gt;&lt;p&gt;没有太多的欲望，也没有太高的要求和期望，就不会有太大的压力。&lt;/p&gt;&lt;p&gt;愿一切安好。&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;马上就要进入到第三个月，下一周就要进行第二个月的Interview++了，心情早已没有了当初的那种忐忑与不安，相比于第一个月自己当然要做得好些，但依旧还是不够。其实我也不知道在这个时间点该是一种什么样的心情，该给自己定下一个什么样的目标。&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/rails-girls-internal-version",
            "title"      : "看介里！Rails Girls成都站活动总结火热来袭~",
            "category"   : "生活",
            "tags"       : "活动, 编程, 摄影",
            "url"        : "/2015-09-15-rails-girls-internal-version/",
            "path"       : "_posts/生活/2015-09-15-rails-girls-internal-version.md",
            "next"       : "/2015-09-20-recent-plan-focus/",
            "previous"   : "/2015-09-05-periodically-anxiety/",
            "date"       : "2015-09-15 00:00:00 +0000",
            "shortdate"  : "September 15, 2015",
            "content"    : "&lt;p&gt;在连续阴雨天好一阵之后，成都终于在这个周末迎来了首个好天气，天公如此作美是为何？因为我们这周六举行了一场「颜值爆表」的社区活动————Rails Girls，上天怎么会狠心下雨淋到如此美丽可爱的妹纸们呢？&lt;/p&gt;&lt;p&gt;那么接下来就跟随我的镜头，带你「亲临现场」体验这场重量级活动，哟哟，超级合照来一套：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2aqdp57gj30hs0bvjvi.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;首先进入「扫盲时间」，Rails Girls究竟是个什么鬼东东，为什么能吸引这么多充满好奇心的姑娘们呢？咳咳~ Rails Girls是一个免费的公益活动，提供为时一天的Web开发入门课程，帮助女生们更好地认识编程艺术，掌握Ruby on Rails技术，并在最快的时间内实现想法。&lt;/p&gt;&lt;p&gt;其实说白了，就是由一帮程序猿教练带领编程零基础的女孩们在一天内做出一个非常酷炫的网站。&lt;/p&gt;&lt;p&gt;早上八点半开始，就已经有学员到达公司开始签到，竟然有些Girls比工作人员来得还早，（拖后腿的工作人员就是我，(￣ε(#￣)☆╰╮）&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2aqfxxyvj30hs0bttbs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;工作人员紧锣密鼓的开始准备，看看这堪比70周年阅兵般整齐的椅子们。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2aqhj0gtj30hs0bt784.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;教练和学员也陆陆续续来到公司了。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2aqio3f6j30hs0bt0vu.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;教练们一到这里就开始互相交流，打开电脑搭建环境，思考一整天的Coach之旅将如何更好地引导和激发姑娘们的编程兴趣。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2aqjrso8j30hs0btadz.jpg&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2aqmk8oaj30hs0bt41k.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;从广州专门远道而来的摄像师也在开始调试设备，准备就绪。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2aqq9fuqj30hs0btgok.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;小刚和「主持人」正在进行最后时刻的商讨，势必把一切安排妥当。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2aqrrfcrj30hs0btad6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;铛铛铛~ 台下的教练和学员们都已经就座完毕，我们的活动马上开始。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2aqwhekjj30hs0btaf1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;首先是主持人讲话，欢迎欢迎~ 介绍一下啊今天的活动议程，主持人还带来了逆天的「手指操」作为热身活动，使气氛瞬间活跃起来。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2aqxm29jj30hs0btmzx.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;据说能灵活交换两边手指的人都是非常有天赋的「编程天才」哦~&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2aqyzy9gj30hs0bt790.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;接下来就进入上午的Session环节，毕竟在实践之前需要知识来「填饱」一下脑袋呀，首先是来自OneAPM的李云集老师带来的《OneAPM产品分享》，底下姑娘们都听得可认真了。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2ar322tqj30hs0btn0v.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;刚刚姑娘们对于高大上的概念都听得一愣一愣的，接下来张耀丹老师带来了《Web》，从非常浅显的角度介绍了Web究竟是怎么一回事儿，讲述「浏先生」和「服小姐」的异地恋故事，只能通过「写信」的方式来缓解相思之苦。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2ar8enysj30hs0bt41h.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;中间抽奖环节，小刚还专门准备了一个酷炫的程序专门用来抽奖，「不幸」的是三个中奖者竟然有两位都是我们的教练，让底下的妹子们都惊呼「教练一定是黑了后门！」。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2ar9gdlcj30hs0bt41g.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;看来这里的姑娘们都太单纯太可爱呀，然后就是Ruby China社区创始人李华顺老师带来的纯洗脑级别的激情万分的《Rails入门第一课》。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2arc9wzdj30hs0dcdjz.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;上午最后一项就是教练自我介绍和学员分组，我们的Coach分别来自于两家公司：那就是，「这家公司」和「其他公司」。分组过后教练和学员们进行第一次亲密接触，当然就是拍合照啦。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2arefk0pj30hs0btju5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;中午吃过饭，下午Coach们就是分组亲自指导啦~&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2arh9994j30hs0btwh8.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;每个人都是非常得认真的说。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2armoq7mj30hs0btadm.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2arp44a4j30hs0btjvj.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;时间在不知不觉中过去，下午四点的时候进入ShowCase环节，姑娘们发挥了无比丰富的想象力，在教练的指导下完成很多脑洞大开的Idea，像各种小游戏、微博、朋友圈、博客、家庭相册甚至于随机塔罗牌，还有HR想出来的专门用于新人介绍等等各种各样的网页。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2ars9kr7j30hs0btjvb.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;每个人在展示自己的作品的时候都想打了鸡血一般，充满着激动的笑容和满满的自豪感。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2artktr9j30hs0bt77b.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;最后一个环节就是学员亲自给自己的教练颁发「BEST COACH」奖杯，每一个Coach都是最棒的，每一个姑娘也是最棒的！收获了满满幸福感的一天。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2aruw89bj30bt0hswhe.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;拿到手里沉甸甸的，心理也一定很感动很欣慰吧，还有教练享受到了妹纸们报答的特级待遇。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2arwy0jzj30hs0btq61.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2aryasstj30hs0btgof.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;持续了一整天的Rails Girls活动在最后抽奖环节的欢声笑语中就结束了，相信每个姑娘都对编程有了一个全新的体验和看法，期望更多的妹纸们参与到IT行业当中，你们也可以一样优秀！&lt;/p&gt;&lt;p&gt;此次Rails Girls CD圆满结束，期待下次有更多的TWer参与其中。再次感谢此次所有参与者和支持者为此做出的不断努力和付出。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2arzgsw5j30hs0dcadz.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;最后再来一张无敌大合照，Go Pro+自拍杆乃自拍神器超级组合：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2as1hafbj30hs0dc793.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;更多高清照片戳这里 -&amp;gt; 链接: &lt;a href=&quot;http://pan.baidu.com/s/1gdHEIgb&quot;&gt;http://pan.baidu.com/s/1gdHEIgb&lt;/a&gt; 密码: 3xcy&lt;/p&gt;&lt;p&gt;更多全国Rails Girls内容可见 -&amp;gt; &lt;a href=&quot;http://railsgirlschina.org/topics/66#3&quot;&gt;http://railsgirlschina.org/topics/66#3&lt;/a&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;在连续阴雨天好一阵之后，成都终于在这个周末迎来了首个好天气，天公如此作美是为何？因为我们这周六举行了一场「颜值爆表」的社区活动————Rails Girls，上天怎么会狠心下雨淋到如此美丽可爱的妹纸们呢？&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/periodically-anxiety",
            "title"      : "周期性大姨夫：一篇关于梦想和生活的咆哮",
            "category"   : "思考",
            "tags"       : "生活",
            "url"        : "/2015-09-05-periodically-anxiety/",
            "path"       : "_posts/思考/2015-09-05-periodically-anxiety.md",
            "next"       : "/2015-09-15-rails-girls-internal-version/",
            "previous"   : "/2015-08-29-personal-knowledge-management/",
            "date"       : "2015-09-05 00:00:00 +0000",
            "shortdate"  : "September 05, 2015",
            "content"    : "&lt;h1 id=&quot;周期性大姨夫&quot;&gt;周期性大姨夫&lt;/h1&gt;&lt;p&gt;突然又开始莫名地焦虑了，来想想原因和Action吧，传说中的大姨夫又来咯。有点儿为了写东西而写东西了，但是我却想不到什么其他的方式来消除焦虑。&lt;/p&gt;&lt;p&gt;回顾一下今天的一天，早上八点就起床了，以为自己能利用好时间，可是可是呢？艹！大概就是因为什么也没做吧，一方面觉得自己浪费了时间，一方面觉得大部分时间又花在了维护生活成本上，艹！生活上已经没有了认真，到底该怎么调整到一个好的状态？节约时间还是继续保持热爱去享受生活？我不知道，我把节约了的时间去做了什么？啥成果也没有哇，那我到底有什么动力去争取更多的时间？&lt;/p&gt;&lt;p&gt;我不服我现在的状态，不服现在的自己，把自己归于何处？置于何地？&lt;/p&gt;&lt;p&gt;WTF!热情真的会减，不管做什么事情，而我这个人，最缺乏的就是坚持的精神，现在来说我到底有坚持什么事情呢？&lt;/p&gt;&lt;h2 id=&quot;生活维护成本&quot;&gt;生活维护成本&lt;/h2&gt;&lt;p&gt;在知乎上有一个问题：&lt;a href=&quot;http://www.zhihu.com/question/33220674/answer/57897678&quot;&gt;我们是如何一步一步走向平庸的？&lt;/a&gt;，有个答案的理论是&lt;strong&gt;我们大部分时间花在维护成本上&lt;/strong&gt;，对于大多数人来说，维持现今的人生就已十分吃力。每天做个饭，保持基本的身体健康就已经花去了大部分的时间，不知不觉时间就没有了。&lt;/p&gt;&lt;p&gt;可是让人忧伤的是，如果一定要这样功利得去计算生活的维系成本，那就像人性是禁不起考验的，一旦开始了计较，生活也就没有了任何趣味。以往可能还会自己做做饭，享受一下做饭的过程，虽然时间难免长了点，可是吃到嘴里的好味道便也就让这个过程幸福了一些。可是万一，就像今天中午一样，做得如此难吃呢？是不是就该放弃，转向快而方便的其他下馆子的方式。很多人并不是最开始就是为了享受生活而做饭，而是因为迫于生计不得已用时间来换省钱，如何够便宜够方便的话我一定去吃又营养又丰富的饭啊，必然是可以减少维系成本的。&lt;/p&gt;&lt;p&gt;进而想到的是，一旦你认为打篮球是为了保持身体健康，就像跑步一样，那就可能不会去打球了吧，打球就已经变成了一项需要去「完成」的任务而已。那健身也是啊，觉得这就是一件为了身体健康而完成任务的事情，那就肯定不会那么容易开始了。把这样的事情变成爱好和享受，就肯定不会那么痛苦了吧。&lt;/p&gt;&lt;h2 id=&quot;何为平庸&quot;&gt;何为平庸？&lt;/h2&gt;&lt;p&gt;然后更加让人忧伤的是，为什么这样子就是走向平庸呢？我做饭，我跟家庭孩子快乐相处，怎么就变成了世人眼中的平庸？我享受平凡的生活又怎么了我是感到幸福的啊。换个角度来说，到底怎么样的人生才是不平庸的？是不是一定要成为国家领导人，著名画家，发送神舟飞船的那个人才一定伟大呢？如果作为一名厨师，世人对其的眼光就一定是没有价值，或者说价值比不上操控飞船，金融交易的人了吗？&lt;/p&gt;&lt;p&gt;职业有高低，人也一定要往高处走，成为人上人，那为什么就不能够每个人都去做自己真正想做的事情，放弃这么些所谓的财富、权势？从小时候开始，我们就想着成为政治家、科学家，成为一个国家栋梁影响世界的人。而国外的小朋友也许会说我将来想成为一名兽医、消防员、甚至农民，可是又有谁觉得这样的职业就不够高大上呢？&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;a href=&quot;http://www.zhihu.com/question/34567780/answer/59930815&quot;&gt;你必须按照别人的看法，按照社会的规则去过你自己的生活。&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我一直期望的就是，教育最终目的不是让人成为人上人，而是让每个孩子都能成为自己想成为的样子。&lt;/p&gt;&lt;p&gt;可悲的就是人性，人总是被利益驱使着而不断向上吧。哪怕中国的义务教育已经推行到了初中，可从小学开始，依旧有太多的家长把孩子送到私立学校，哪怕学费再贵冲破脑袋也要进去。家长总是期望孩子能站在一个更高的起点，比自己过得好，成为人上人。而每个孩子被push着，直到步入职场，依旧想着成为人上人，有着一个改变世界的梦想。一直在被定义着，按照世上已经安排好的路一直走着。&lt;/p&gt;&lt;h2 id=&quot;何为梦想&quot;&gt;何为梦想？&lt;/h2&gt;&lt;p&gt;也不知道自己这样做到底如何？始终还是要做一个有梦想的人吧，刚刚开始工作就被工作的事情充斥了所有的生活，可能到最后也会冲掉自己的梦想。然而我也对梦想不够清晰了，改变世界，呵呵，我该从哪里开始？我现在做的事情又会对这样的梦想产生何种影响。&lt;/p&gt;&lt;p&gt;也许吧，如果梦想是当一名画家，那我现在就去画画就好了；如果我想成为一名歌手，那我每天练歌也就算是走在了奔向梦想的路上。那如果我想改变世界，而我却在敲打键盘，我到底在做什么才能使这个世界更加美好。我并没有什么点子能直接改变心目中的那群年轻人，依旧每个人都在过着自己的一如既往，我的工作的意义根本看不到。&lt;/p&gt;&lt;p&gt;让我更加难以释怀的是，我终究只是成为了一个比别人过得好点的「普通人」，而已。&lt;/p&gt;&lt;h2 id=&quot;关于教育&quot;&gt;关于教育&lt;/h2&gt;&lt;p&gt;教育的方式到底是怎么样的，如果不成为一名商人，我能够成为的或许就是个码农，就是个PM。但是依旧想贡献出一点点力量，为那个能够影响世界的产品有所付出。但是谁来衡量这个付出的价值，我没有办法。价值意义的检验标准是什么，我并不知道。&lt;/p&gt;&lt;p&gt;如果一直这样找不到意义，我该做些什么，难道就只是维系生活吗？&lt;/p&gt;&lt;p&gt;从校园到职场，算是完成了人生中第一次重大的角色转换，而在这个质变的转折点上，适应期就真的只能是一段时间，绝不可能让你一直都在适应着，否则何来试用期？而正确的态度是需要将它看做一个新的起点，如何从此开始到达下一个质变的转折点，需要自己去寻找。也许下次质变是自己出来创业，当然也可能是另外一种形态。总之，期望在那一次拼搏过之后，自己也就不会再后悔，哪怕最后走向了平庸，那又如何？&lt;/p&gt;&lt;h2 id=&quot;新的起点&quot;&gt;新的起点&lt;/h2&gt;&lt;p&gt;终于算是说服了自己，现在就是一个新的起点，虽然暂且还在适应期。但是该做的事情现在都在慢慢起步之中，自己也将承担越来越多的责任，培养更多的能力。只为下一次「腾飞」的机会吧，就是为了做好准备而努力，没有太多的其他理由。&lt;/p&gt;&lt;p&gt;现在的自己，不用也不应该去想那么多生活上的事情，就开始尽量压缩生活的维系成本吧。从现在开始简化生活，然后把重心放到身体健康、专业知识、职业技能上来。把「不断进步」排在所有这些maintenance前面来吧，现在就开始：&lt;/p&gt;&lt;h2 id=&quot;开源节流&quot;&gt;开源节流&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;开源&lt;/strong&gt;就是开拓能用于学习进步的时间，用更少的maitenance成本，来达到相同甚至同样的维护标准。利用各种生活生产(productivity)工具是其一，比如家电和办公软件，都可以有效节约时间。学会时间管理是其二，比如一周烹饪法（Meal Prep，详见&lt;a href=&quot;http://www.zhihu.com/question/20059367/answer/39299329&quot;&gt;如何快速做饭？ - 知乎用户的回答&lt;/a&gt;），可以大大减少用在做菜上的精力；也可以设定一天中只有某个时间段登陆邮箱和社交网络，避免沉迷。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;节流&lt;/strong&gt;指的是把空隙中的时间都利用起来学习，比如坐地铁时看书，做家务时听podcast。我个人有少许的拖延症和注意力不集中综合症，而我采取的方法就是用一个任务去拖延另一个任务，于是不知不觉中，虽然我没有完成任务A，但我已完成了任务B，而完成任务的成就感会支撑我着手进行下一个任务。这也是斯坦福教授John Perry提倡的“结构化拖延法”，得了搞笑诺贝尔奖哟。&lt;/p&gt;&lt;p&gt;via &lt;a href=&quot;http://www.zhihu.com/question/33220674/answer/57897678&quot;&gt;http://www.zhihu.com/question/33220674/answer/57897678&lt;/a&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;h1 id=&quot;周期性大姨夫&quot;&gt;周期性大姨夫&lt;/h1&gt;"
		} ,
	
		{
            "id"         : "/personal-knowledge-management",
            "title"      : "PKM：个人知识管理",
            "category"   : "演讲",
            "tags"       : "PKM, 学习",
            "url"        : "/2015-08-29-personal-knowledge-management/",
            "path"       : "_posts/演讲/2015-08-29-personal-knowledge-management.md",
            "next"       : "/2015-09-05-periodically-anxiety/",
            "previous"   : "/2015-08-25-using_microservices_to_build_cloud_native_applications__part_1/",
            "date"       : "2015-08-29 00:00:00 +0000",
            "shortdate"  : "August 29, 2015",
            "content"    : "&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;done-is-better-than-perfect&quot;&gt;「Done is better than perfect.」&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;pkm&quot;&gt;PKM&lt;/h1&gt;&lt;h3 id=&quot;个人知识管理&quot;&gt;个人知识管理&lt;/h3&gt;&lt;p&gt;&lt;small&gt;by Jimmy Lv&lt;/small&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;what&quot;&gt;What？&lt;/h1&gt;&lt;p&gt;将个人拥有的各种资料、随手可得的信息变成更具价值的知识，&lt;/p&gt;&lt;p&gt;最终利于自己的工作、生活。&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;why&quot;&gt;Why？&lt;/h1&gt;&lt;p&gt;学习、&lt;strong&gt;总结&lt;/strong&gt;、分享&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;how&quot;&gt;How？&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;你用什么记笔记&quot;&gt;你用什么记笔记？&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;知识分类&quot;&gt;知识分类&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;已内化的「知识」&lt;/li&gt;  &lt;li&gt;可整理的「资料」&lt;/li&gt;  &lt;li&gt;不可控的原始「信息」&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;第二大脑&quot;&gt;第二大脑&lt;/h1&gt;&lt;p&gt;一股脑，统统放进印象笔记、书签&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;然后呢&quot;&gt;然后呢？&lt;/h1&gt;&lt;p&gt;收藏癖&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;知识转化流程&quot;&gt;知识转化流程&lt;/h1&gt;&lt;p&gt;源头 -&amp;gt; 收集 -&amp;gt; 筛选 -&amp;gt; 浅阅读 -&amp;gt; 深阅读 -&amp;gt; 整理&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;收集&quot;&gt;收集&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;RSS：&lt;a href=&quot;http://feedly.com&quot;&gt;http://feedly.com&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com//feedly.png&quot; alt=&quot;feedly&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;阅读&quot;&gt;阅读&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;稍后阅读：&lt;a href=&quot;http://getpocket.com&quot;&gt;http://getpocket.com&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com//pocket.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;收藏&quot;&gt;收藏&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;印象笔记：&lt;a href=&quot;http://yinxiang.com&quot;&gt;http://yinxiang.com&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;可是然后呢&quot;&gt;可是，然后呢？&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;action&quot;&gt;Action&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;分享&lt;/li&gt;  &lt;li&gt;实践&lt;/li&gt;  &lt;li&gt;交流&lt;/li&gt;  &lt;li&gt;……&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;知识的流通性&quot;&gt;知识的流通性&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;没有流通性就没有价值&lt;/li&gt;  &lt;li&gt;知识闭环&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;进阶整理知识库&quot;&gt;进阶：整理知识库&lt;/h1&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;知识分类-1&quot;&gt;知识分类&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;已内化的「知识」&lt;/li&gt;  &lt;li&gt;可整理的「资料」&lt;/li&gt;  &lt;li&gt;不可控的原始「信息」&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;需求&quot;&gt;需求&lt;/h1&gt;&lt;h3 id=&quot;痛点&quot;&gt;痛点?&lt;/h3&gt;&lt;h3 id=&quot;痒点&quot;&gt;痒点?&lt;/h3&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;印象笔记没法语法高亮啊！&lt;/li&gt;  &lt;li&gt;什么鬼，高级账号？&lt;/li&gt;  &lt;li&gt;格式的编辑太难受了！&lt;/li&gt;  &lt;li&gt;同步你还给我出错！&lt;/li&gt;  &lt;li&gt;啊啊啊，我原来那个版本哪去了！&lt;/li&gt;  &lt;li&gt;怎么只有两级目录？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;kiss&quot;&gt;KISS&lt;/h1&gt;&lt;p&gt;Keep It Simple, Stupid&lt;/p&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;原则&quot;&gt;原则&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;一次只做一件事&lt;/li&gt;  &lt;li&gt;做好一件事&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;关键--纯文本化&quot;&gt;关键 —— 「纯文本化」&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;编辑：Sublime&lt;/li&gt;  &lt;li&gt;格式：Markdown&lt;/li&gt;  &lt;li&gt;预览：Marboo&lt;/li&gt;  &lt;li&gt;版本管理：Git&lt;/li&gt;  &lt;li&gt;标签：mac osx自带&lt;/li&gt;  &lt;li&gt;同步：GitHub/Dropbox&lt;/li&gt;  &lt;li&gt;格式：HTML、PDF、PPT&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;发布&quot;&gt;发布&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;技术笔记&lt;a href=&quot;http://www.GitBook.com&quot;&gt;http://www.GitBook.com&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;博客&lt;a href=&quot;http://blog.jimmylv.info&quot;&gt;http://blog.jimmylv.info&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;anywhere…&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;当然这只是一种形式&quot;&gt;当然，这只是一种形式&lt;/h1&gt;&lt;ul&gt;  &lt;li&gt;可替换性&lt;/li&gt;  &lt;li&gt;可扩展性&lt;/li&gt;  &lt;li&gt;可组合性&lt;/li&gt;  &lt;li&gt;持续优化&lt;/li&gt;  &lt;li&gt;……&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;thank-you--&quot;&gt;Thank you!  :）&lt;/h1&gt;",
            "excerpt"    : "&lt;p&gt;[slide]&lt;/p&gt;&lt;h1 id=&quot;done-is-better-than-perfect&quot;&gt;「Done is better than perfect.」&lt;/h1&gt;"
		} ,
	
		{
            "id"         : "/using_microservices_to_build_cloud_native_applications__part_1",
            "title"      : "【译】使用微服务构建原生云端应用 - 第一部分",
            "category"   : "编程",
            "tags"       : "Microservices, Cloud",
            "url"        : "/2015-08-25-using_microservices_to_build_cloud_native_applications__part_1/",
            "path"       : "_posts/编程/2015-08-25-using_microservices_to_build_cloud_native_applications__part_1.md",
            "next"       : "/2015-08-29-personal-knowledge-management/",
            "previous"   : "/2015-08-23-developing_a_restful_web_service_using_spring_boot/",
            "date"       : "2015-08-25 00:00:00 +0000",
            "shortdate"  : "August 25, 2015",
            "content"    : "&lt;h1 id=&quot;使用微服务构建原生云端应用---第一部分&quot;&gt;使用微服务构建原生云端应用 - 第一部分&lt;/h1&gt;&lt;p&gt;原文地址：&lt;a href=&quot;http://ryanjbaxter.com/2015/07/15/using-microservices-to-build-cloud-native-applications-part-1/&quot;&gt;Using Microservices To Build Cloud Native Applications – Part 1&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In my &lt;a href=&quot;http://ryanjbaxter.com/2015/07/13/building-cloud-native-applications/&quot;&gt;previous post&lt;/a&gt; I described at a high level what it means to build a cloud native application and hopefully gave you an idea of why building applications in the cloud can be different than you may be used to. One thing many cloud native applications have in common is that they are often built using a microservices architecture. But before we talk about microservices lets talk about the types of applications most people are familiar with building today.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在&lt;a href=&quot;http://ryanjbaxter.com/2015/07/13/building-cloud-native-applications/&quot;&gt;上一篇文章&lt;/a&gt;中，我从更高层面上描述了云端原生应用的构建，期望让你明白在云上构建应用的方式和以往为何不同。云端原生应用的一个共同点就是，它们都使用微服务架构进行构建。但是在我们谈论微服务之前，让我们回顾一下目前人们所熟知的几种应用程序类型。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Most applications people build today are 3-tier, monolithic applications. What do I mean by monolithic? Basically the entire application is deployed as a single entity. In Java terms this might mean when you deploy your application, you deploy the entire thing in a single WAR or JAR file. The fact that the application is monolithic is not a bad thing, but at some point most applications reach a certain size and gain a certain amount of complexity where the monolith is too hard to understand and is starting to hinder the productivity of the team. At this point the monolith is no longer suited for the cloud (or on premise) and something needs to change.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;目前来看，大部分构建的应用都是三层式的、单一的庞大应用。monolithic是什么意思呢？基本上整个应用程序都被部署为一个整体。从Java的角度而言，这可能意味着当你部署应用的时候，每次都需要部署整个单独的WAR或者JAR文件。事实上，单一应用不是一件坏事情，但是当大部分应用达到一定的体量，具有一定的复杂性的时候，这将非常难以被理解，就会开始拖延整个团队的效率。在这点上来说，单一应用已经不再适用于这种云端部署（也许是在将来）和需求变化的情况了。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Enter microservices. At a high level an application that is implemented using a microservices architecture is one that is composed of several (this could be 10s or 100s) completely independent “services” or apps that work together to produce the overall end user experience. Obviously since the term “micro” is used in microservices these services are meant to be small, lightweight, and focus on a single task. How small is small? That is the million dollar question.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;接下来讨论微服务。从更高层面而言，如果一个应用采取微服务架构实现的话，是由几个完全独立的「服务」或应用组成，共同工作，从而提供整体性的用户体验。显然，「微」指的是使用微服务，这些服务意味着很小，轻量级，专注单一任务。但是「小」到底是多小？这是一个百万美元的问题。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;There is no one measurement that I can give you that determines the correct size of a microservice. Instead it is all about productivity and speed. If a service gets to the point where you feel it is doing too many things and is hard to understand and work with, than it is likely too big and should be split into more than one service.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我没有确切的手段来确定微服务的具体大小，然而这通常与效率和速度紧密相关。如果一个服务有很多地方让你感觉做了太多事情，并且难以理解和使用。那么这个服务就过于庞大，应该被分割成几个不同的微服务。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://ryanjbaxter.com/wp-content/uploads/2015/07/micro-service-architecture.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In addition to the small size of the code base, the team that works on each microservice is also small and compact. Each team for each microservice is composed of the developers, testers, product managers, etc. They act completely independent of each other team and each other microservice. This is a very important part of the microservices architecture. Microservices are not only about the technical architecture of your application, but also the architecture of you organization. There is no separate organizations for test, development, and product management. Each microservice is comprised of a team that has people who test, develop, do DevOps, and handles product management. That team focuses on that one service and that one service alone and are the only people responsible for that service.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;除了代码库变小之外，开发微服务的团队也会变得小而精。每个微服务的团队都由开发、测试、产品经理等组成，他们都与其他团队和微服务彼此独立，这是微服务架构中非常重要的一部分。微服务不仅指的是应用程序的技术架构，也包括组织架构。这指的不是彼此分开的测试、开发、产品管理的独立组织，而是指每个微服务都包括了测试、开发、运维和产品管理人员。整个团队专注于单一服务，并且每个服务都由唯一的人来单独负责。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;I always think that looking at concrete examples is a good idea when talking about something new. I have been working on a cloud native application that uses microservices. The idea behind the application is pretty simple. As a developer advocate, I am always giving talks at conferences and people, usually, have questions about the topic I am speaking about. I wanted to make it easier for people to ask questions so I wrote an application that allows you as a speaker to create an entry for a session you are giving and then anyone that attends that session can go to the application select your session and ask a question about the topic you are presenting on. Attendees can ask questions via the application itself or they can text questions from their mobile device. As a speaker you can then reply to whatever questions are asked via the application and the user who asked the question will get a response via email if they submitted the question via the application or via text if they texted the question. The idea is simple and you can imagine it would be easy to implement that application as a traditional 3-tier monolithic app. In fact, that is how it started out, and here is what it looked like.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;「事实胜于雄辩」，我认为谈论一件新事物的时候最好能有具体的实例。我已经在使用微服务构建云端原生应用了，应用背后的理念非常简单。作为一个技术拥护者，我总是在会议上发表演讲，人们通常都会对所讲内容有所疑问。为了使人们问问题能够变得更容易，我就创建了一个应用程序，可以让召开会议的演讲者为此创建一个条目，而与此同时，任何参会的人都可以选择该会议并且对所演讲的话题进行提问。参会者还可以通过应用程序直接问问题，或者直接在移动设备上输入问题。作为演讲者就可以回复被问到的问题，然后提问者也能够得到邮件答复，或者通过文本的形式直接展示在应用程序上。这个想法很简单，你也可以想到它很容易通过传统的三层式单一应用结构来实现。事实上，这是最开始的时候的样子。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://ryanjbaxter.com/wp-content/uploads/2015/07/intro-to-microservices.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;As you can see the monolith (the big blue square in the middle) had a number of components in it. It contained the client side code served to the browser, REST APIs the client side code used, a REST API for Twilio (for texting), and some code which took care of sending the emails/texts for answers. All the details about the sessions and the questions asked during those sessions was stored in a single DB. Like I said, a very traditional application architecture, and when deployed to the cloud it worked fine, no issues.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如你所见，单一应用（中间的蓝色方块）包含了很多组件。它包含了服务于浏览器的客户端代码、客户端代码所使用的REST APIs、Twilio（文字输入）的REST API以及用于发送邮件或文本答案的代码。所有关于演讲和在提问的细节都存储在一个数据库中。就像我所说的，一个非常传统的应用结构，已经部署在云服务上，没有任何问题。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In fact at this point I would like to bring up an important point. In my own personal opinion (and not everyone agrees with me), I think that for certain types of applications a monolithic architecture will work fine in the cloud. For all the benefits of adopting microservices, one of the drawbacks is complexity (in how all the services works together, not in the individual services themselves). So if your application is simple enough and you are not experiencing some of the problems I have mentioned than it is OK to build a monolithic application and run it in the cloud. However, most production applications are not simple and quickly approach that threshold where the complexity (in the code) and size of the application starts effecting the stability of the application the performance of the team. Since I wanted to explore how I could transition this application to use microservices I decided to break this application apart, but that is not to say that this app the way it was originally architected was bound for failure.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;事实上，我更想抛出另外一个很重要的点。在我个人观点中（不是所有人都认同），我认为某些确定类型的应用程序采用单一结构可以在云上运行得很好。为了能够受益于微服务的优点，其中一个缺点就是复杂度（在于服务之间如何共同工作，而不是独立工作）。所以说，如果应用程序足够简单，你并不会遇到我所提到的那些问题，构建部署于云上的单一应用也就是没什么问题的。但是，大部分产品层面的应用程序都不是那么简单，而且很快就能达到复杂度的下限（代码层次上），应用大小也开始影响应用的稳定性和团队的表现。因此我想要探索如何将其转化为使用微服务的应用，拆分成不同的应用部分。但这并不是说，这种最开始的架构方式是失败的。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Lets look at a couple of problems that this monolithic architecture could cause in the cloud. First up failure. What happens if there is a problem in the Sessions API component of my application. Maybe it is chewing up a huge portion of the CPU, or maybe it just crashes. What happens to my application?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;让我们看看单一结构在云上可能导致的一些问题。首先是失败，如果我的应用程序中的一个Sessions API组件出现问题，将会发生什么。也许是占用了CPU的大部分内存，也许直接导致崩溃。我的应用程序将会怎么样？&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://ryanjbaxter.com/wp-content/uploads/2015/07/intro-to-microservices2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Thats right, pretty the entire application will be effected by this. If it crashes all the other components of my application come crashing down with it. Maybe it is not even a problem with my code, maybe it is the networking or hardware underneath my application provided by the cloud (stuff that is out of my control). Whatever the reason for the problem is, my entire application is unavailable even if there is a problem with just a single component. This makes my application very fragile and is not what we want, fragility is the enemy.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;对头，整个应用将会被这个部分所影响，这一个部分崩溃直接导致了其他组件也无法使用。这甚至不是我的代码问题，也许是由于网络或者应用程序之下的云服务的硬件问题（一些在我掌控之外的事情）。不论问题的原因是什么，如果有一个单独的组件出现问题，整个应用就将无法使用。这将会使得应用变得非常脆弱，这不是我们想要的，&lt;strong&gt;fragility is the enemy&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The next problem with the monolithic architecture is scalability. Lets look at what scaling the monolith looks like.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;接下来的问题就是单一结构的可扩展性，让我们来看看扩展过后的样子。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://ryanjbaxter.com/wp-content/uploads/2015/07/intro-to-microservices3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Petty much what you would expect right? Instead of 1 instance of the monolith running, I have 2 instances running with a load balancer sitting infront of both instances routing requests between the two. There is nothing wrong with this configuration, it will work fine. Conceptually though, it is probably not what I really need. In all reality, if I am at the point where I need to scale my application it is more likely that it is just one component of my application that needs to scale. For example, say the Sessions API component is under a lot of load and can’t handle the number of requests being issued to it. Scaling that component horizontally will solve the issue, but since my application is a monolith I can’t just scale that one component I have to scale the entire app. Probably not a big idea when it is just one component of our monolith that needs to scale, but what if I have 2 or 3 components that need to be scaled? Maybe the Sessions API component would be fine with 2 instances but the Questions API component needs 5. My only option is to scale my monolith up to 5 instances even though most of the other component don’t need that many instances. This is a big waste of resources, and in the cloud that means wasted money!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;比你想象的多得多，对吧？不只是一个应用在运行了，而是需要一个负荷均衡器来处理两个实例的路由请求。这样的配置没什么问题，也可以运行良好。理论上尽管如此，但这可能并不是我真正需要的东西。现实情况是，如果我需要进行扩展的时候，只需要为应用扩展其中一个组件。举个例子，Session API这个组件处于巨大的负荷之下，无法处理那么多被发送的请求。水平扩展组件可以解决这个问题，但是由于我的应用是单一结构，所以我并不能只扩展一个组件，而是不得不去扩展整个应用。可能在只有一个组件需要扩展的时候问题不大，但是如果有两个或者三个组件需要扩展呢？也许Session API组件只可以与两个实例正常工作，但是Question API组件却需要五个。唯一的选择就是将我的单一应用扩展到五个实例，甚至大部分其他的组件都不需要这么多实例。这是一种极大的资源浪费，在云端这就意味着浪费很多钱。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In addition to the problems with monolithic applications described above we also have the problem of working with huge monolithic code bases. Consider when someone new joins the team to work on a monolithic application, how long would it take them to understand how the application works? The answer is a very long time, if ever. I know from experience. I worked on a giant, 25 year old, monolithic application in my previous role at IBM, and I only understood a very small piece of how that application worked and I worked on it for 5 years! Other issues include the time needed to build, test, and deploy monolithic applications. It is incredibly slow and fragile process (remember fragility is the enemy). If you have worked on a monolithic application, you know how painful this process can be. You get to the point where you are ready to release and someone finds a bug in a single small component. This stops everything, everything needs to go through the release process all over again, that is easily a multi-day process. This is just not acceptable when you are looking to be agile and move with speed.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;除了上文描述的单一应用所产生的问题之外，我们使用庞大的单一代码库也会出现问题。考虑到新人加入开发单一应用的团队，他们需要多久才能够理解应用是如何工作的？答案就是时间非常长，如果可以的话。从经验得知，我之前在IBM开发一个庞大的、具有25年历史的单一应用。尽管我工作了五年，我也只是理解了整个应用工作的一小部分。其他的一些问题包括构建、测试、部署，这其中的过程是非常缓慢和脆弱的（记住脆弱就是敌人）。如果你也曾在一个单一应用项目上干过，你也会知道这个过程有多么痛苦。当你准备好发布的时候，发现有人在一个小模块中找到一个小bug，这将会停止所有事情，所有事情都需要重新来过。这很可能就是很多天的一个过程，如果你想要敏捷和前进速度的时候，这将是无法接受的。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;So how does changing the application to a microservices architecture help solve some of these problems? Let take a look at how the application looks once we move to using microservices.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;所以将应用改成微服务架构是怎么帮助解决这些问题的呢？让我们看一下使用微服务的应用程序长什么样子。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://ryanjbaxter.com/wp-content/uploads/2015/07/intro-to-microservices4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;For the most part, what I have done here is take each light blue box from the monlithic architecture and made it its own app, or microservice. The SendGrid and Twillio services were also broken out into separate apps, I will address why I did this later on when we talk about scalabilty. From a fragility point of view, this architecture if much more resilient. Lets take the same example from above where the Sessions Service crashes, hangs, or goes down due to the infrastructure underneath it. In this architecture, if that happens, the client side code will still be served to clients, and the Questions, Reply, SendGrid, and Twilio services all will continue to function as before. Will the app behave perfectly with the Sessions Service unavailable? No. Is it better than if the entire application was down, YES!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在大多数情况下，我能够做的就是从单一架构应用中抽出每个轻量的蓝色盒子，使之成为独立的应用或微服务。SendGrid和Twillio服务也可以分解成独立的应用，我将会在讨论可扩展性的时候讨论为什么要这样做。从脆弱性这个角度来说，这种架构将更富有弹性。让我们举一个跟前面一样的例子，如果Sessions服务崩溃了、失效了或者由于底层的硬件设施事故而发生了故障。在这种架构中如果发生类似情况，客户端代仍然可以服务于客户。Questions、Reply、SendGrid和Twilio服务都可以像之前一样正常工作。没有了Sessions Service应用还会表现得那么完美吗？不会。但是这比整个应用瘫痪要好得多，对吧？&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;What about scalability with this architecture? It is much better than before because I can scale each service independently of the other.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;那这种架构的可扩展性如何呢？这也比之前好得多，因为我可以为每个独立于其他的服务进行扩展。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://ryanjbaxter.com/wp-content/uploads/2015/07/intro-to-microservices5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In the above picture you can see I am able to scale the Sessions Service without scaling any other part of the application. The microservices architecture allows me to scale only the components of my application that need it. This is the reason for the changes I made to the SendGrid and Twilio services. These two services are responsible for sending out replies to questions via email or text. As you can imagine it might be easy for them to become overloaded with many speakers replying to questions at once. At the same time it is not important that those replies go out the second the speaker sends them, so in my opinion, this was the perfect place to use a message queue. The reply service receives replies that need to be sent out and just places them in a queue, which is a very quick operation. The SendGrid and Twilio services are more like workers which just take replies out of the queue and sends them along. This allows the reply service to handle much more load and at the same time I can scale the SendGrid and Twilio services up or down essentially creating more or less worked to handle whatever is in the queue.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如图所示，我可以只扩展Session服务而不用去扩展应用的其他任何部分。微服务架构可以让我只扩展应用程序中所需要的那个组件。这也是为什么我对SendGrid和Twillio服务做出了改变，这两部分可以通过邮件或文本信息发送问题的回复。可以想象的是，当很多演讲者同时回复问题的时候，reply服务很容易就过载了。与此同时，演讲者将回复发送出去的那一秒并不重要，所以我的观点是，这时使用消息队列是最好不过的了。reply服务接受回复，只需要将它们放到队列中，再将其发送出去，这个操作就很高效。SendGrid和Twillio服务更像一个工人，能够将回复从队列中取出来，再单独发送出去。这将使得reply服务能够处理尽可能多的负载。与此同时，我也可以增加或者减少SendGrid和Twillio的服务，本质上就是创建处理消息队列的多和少而已。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;There is one part of the microservices architecture in the pictures above that I have not addressed yet, and that has to do with the databases. In the monolithic architecture there was a single database, but in the microservices architecture there are 2, one database for the Questions Service and one for the Sessions Service, why? One of the golden rules of microservices is that each service should be independent of each other. If 2 services are sharing the same database than they are not truly independent because changes or problems with the database can effect one or both services. For this reason if a microservice needs to persist data, than it should do so in its own database. This in itself introduces a new set of problems and is one of the reasons why microservices architectures can be more complicated than monolithic architectures. The most challenging problem this introduces is a data consistency problem because you could be having to persist the same data in 2 different databases. The approach that most microservice applications take to solve this problem is to apply the &lt;a href=&quot;http://www.ben-morris.com/eventual-consistency-and-the-trade-offs-required-by-distributed-development/&quot;&gt;principal of eventual consistency to their data&lt;/a&gt;, meaning the data in the different databases may not be consistent for some period of time but eventually it will be. This topic deserves its own blog post so I won’t go into it here, but try searching the “Internets” and I am sure you will find much more information on various approaches to this problem.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这一部分是我在微服务架构中没有提到的数据库部分，可以从上面的图片中看到。在单一架构中数据只有一个，但是在微服务架构中有两个，一个是Questions Service数据库，一个是Sessions Service数据库。为什么呢？一个微服务的黄金准则就是保持每个服务器彼此独立。如果两个服务共享同一个数据库，那就不是真正的独立。因为数据的变化和问题都会影响到另一个或共同的服务。因此，每个微服务都需要一个自己的数据库来进行数据持久化。这本身引入了一系列的新问题，其中之一就是为什么微服务架构要比单一架构更加复杂。最具有挑战性的问题是介绍数据的一致性问题，因为你可能需要在两个不同的数据库中分别存储同样的数据。大多数微服务应用采用的解决方案是采用&lt;a href=&quot;http://www.ben-morris.com/eventual-consistency-and-the-trade-offs-required-by-distributed-development/&quot;&gt;最终数据一致的原则&lt;/a&gt;，这意味着在不同数据库的数据在不同时间段可能是不一样的，但最终会是一样的。这个话题已经在其他博客中有所探讨，所以我在这里就不再深究。但是可以尝试搜索一下“Internets”，你肯定会找到各种关于这个问题解决方案的信息。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;What about the code base of the application? Once I split the monolithic application up into microservices I actually created several code bases. Each microservice has its own git repo, its own build pipeline, its own defect tracking system. Remember above where we talked about how each microservice needs to be independent of each other? Well this not only applies to data storage but also source control. If I put all the code for each microservice in a single git repo (which is what I did at first) than changes to that git repo effect all microservices. For example, if for some reason I need to create a branch just to work on a defect in one microservice I end up creating a branch for all microservices. This is not really what I want to do and can have effects on the other services (ie merging).&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;那这种应用的代码库如何呢？一旦我将单一应用分解成微服务，实际上就创建了多个代码库。每个微服务都有属于自己的git仓库，自己的构建流程，自己的问题追踪系统。记住在这之前我们所讨论的，每个微服务为何需要独立于其他服务？这不仅仅是可以采用不同的数据存储，也包括资源掌控。如果我将每个微服务的所有代码都放到一个git仓库中（我最开始所做的那样），那么git仓库的改变将会影响所有的微服务。例如，如果我只是想为一个微服务的defect创建一个分支，结果却为所有的微服务都创建了分支。这并不是我真正想做的事情，会对其他服务产生影响（即merge）。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Since each microservice has a very small footprint from a code point of view, on boarding new developers to work on a microservice is much easier. The smaller code base makes it much easier to learn. In addition I can do releases of each microservice independent of the others. I no longer have the problem of a bug being found at the last minute in a single component that blocks the entire release. If one microservice has a bug we can go back and address that bug while the other microservices continue to move forward unaffected.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;由于每个微服务都有非常小的代码记录点，对于新的微服务开发者来说就变得简单了，这种更小的代码库也更容易学习。除此之外，我也可以对每个微服务进行独立发布，不会在最后一分钟只是因为一个组件的小bug就停止了所有的发布。如果一个微服务有bug我们可以回去讨论这个bug，而其他的微服务则可以继续向前而不用受影响。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Wow that was a lot to take in right? And guess what, we are only part way there! My application’s architecture is certainly better now that it is using microservices but not perfect, there are still one or two problems we need to address. I think I will let everyone digest this blog post first before we dive into part two and address some of these issues.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;到这里已经很多了，对吧？猜猜怎么着，这只是其中的一部分。我的应用就使用了微服务架构，虽然并不完美而且依然存在问题，但是现在看起来确实好多了。我想我会让大家先消化完这篇博客，然后再进入到第二部分来讨论其中的问题。&lt;/p&gt;&lt;hr /&gt;&lt;blockquote&gt;  &lt;p&gt;For more detailed information on microservices I suggest you read &lt;a href=&quot;http://martinfowler.com/articles/microservices.html&quot;&gt;Marin Fowlers and James Lewis post on the topic&lt;/a&gt;. There are many other resources on the internet that discuss the topic in great detail. If you are one of those people that fancies reading books, I suggest you check out this &lt;a href=&quot;http://shop.oreilly.com/product/0636920033158.do&quot;&gt;one on microservices&lt;/a&gt;. I haven’t read the whole thing yet, but so far so good in my opinion. There is also a recently released &lt;a href=&quot;http://www.redbooks.ibm.com/redpieces/abstracts/sg248275.html?Open&quot;&gt;RedBook from IBM on microservices&lt;/a&gt;, I have not read this one yet so can’t offer any thoughts on it. In addition to the RedBook there is a nice interview with&lt;a href=&quot;http://www.constantcontact.com/home-page?s_tnt=68097:20:0&quot;&gt;Constant Contact&lt;/a&gt; done by my colleague &lt;a href=&quot;https://bluemixstirred.wordpress.com/&quot;&gt;Carlos M Ferreira&lt;/a&gt; where they discuss how Constant Contact is using microservices.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;有关于微服务的更多信息，我推荐你去阅读&lt;a href=&quot;http://martinfowler.com/articles/microservices.html&quot;&gt;Marin Fowlers和James Lewis有关于这个话题的文章&lt;/a&gt;。在网络上有很多其他有关于此话题细节的资源。如果你是热衷于读书的人，我向你推荐这本书&lt;a href=&quot;http://shop.oreilly.com/product/0636920033158.do&quot;&gt;one on microservices&lt;/a&gt;。我还没有完全读完，但是目前为止我感觉非常不错。这还有一本刚发布的&lt;a href=&quot;http://www.redbooks.ibm.com/redpieces/abstracts/sg248275.html?Open&quot;&gt;RedBook from IBM on microservices&lt;/a&gt;，我还没读过，所以无法提供任何意见。除了这本RedBook以外还有一个非常不错的访谈&lt;a href=&quot;http://www.constantcontact.com/home-page?s_tnt=68097:20:0&quot;&gt;Constant Contact&lt;/a&gt;，这是在我的大学&lt;a href=&quot;https://bluemixstirred.wordpress.com/&quot;&gt;Carlos M Ferreira&lt;/a&gt;中他们所讨论的Constant Contact是如何使用微服务的。&lt;/p&gt;",
            "excerpt"    : "&lt;h1 id=&quot;使用微服务构建原生云端应用---第一部分&quot;&gt;使用微服务构建原生云端应用 - 第一部分&lt;/h1&gt;"
		} ,
	
		{
            "id"         : "/developing_a_restful_web_service_using_spring_boot",
            "title"      : "【译】使用Spring Boot开发RESTful Web服务",
            "category"   : "编程",
            "tags"       : "RESTful, Spring",
            "url"        : "/2015-08-23-developing_a_restful_web_service_using_spring_boot/",
            "path"       : "_posts/编程/2015-08-23-developing_a_restful_web_service_using_spring_boot.md",
            "next"       : "/2015-08-25-using_microservices_to_build_cloud_native_applications__part_1/",
            "previous"   : "/2015-08-22-reactjs_tutorial_part_interlude_2/",
            "date"       : "2015-08-23 00:00:00 +0000",
            "shortdate"  : "August 23, 2015",
            "content"    : "&lt;h1 id=&quot;使用spring-boot开发restful-web服务&quot;&gt;使用Spring Boot开发RESTful Web服务&lt;/h1&gt;&lt;p&gt;原文地址：&lt;a href=&quot;http://kielczewski.eu/2014/04/developing-restful-web-service-with-spring-boot/&quot;&gt;Developing a RESTful Web Service Using Spring Boot&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Tag: &lt;a href=&quot;http://kielczewski.eu/tag/Spring/&quot;&gt;Spring&lt;/a&gt;, &lt;a href=&quot;http://kielczewski.eu/tag/Spring%20Boot/&quot;&gt;Spring Boot&lt;/a&gt;, &lt;a href=&quot;http://kielczewski.eu/tag/Spring%20MVC/&quot;&gt;Spring MVC&lt;/a&gt;, &lt;a href=&quot;http://kielczewski.eu/tag/JPA/&quot;&gt;JPA&lt;/a&gt;, &lt;a href=&quot;http://kielczewski.eu/tag/Spring%20Data%20JPA/&quot;&gt;Spring Data JPA&lt;/a&gt;, &lt;a href=&quot;http://kielczewski.eu/tag/TDD/&quot;&gt;TDD&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;I’m really impressed with &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot;&gt;Spring Boot&lt;/a&gt;. Its main goal is to take away most of this boilerplate configuration that was needed before and to replace it with some sensible defaults. One might say it’s taking the control away from the developer and giving it to the army of fairies. That’s probably right, but in this case the fairies are here to help, and moreover they can easily be cast away from doing particular thing. It’s just a matter of doing it yourself as before, and thanks to &lt;code class=&quot;highlighter-rouge&quot;&gt;@ConditionalOn...&lt;/code&gt; behaviour Spring Boot’s auto configuration will not fire up.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我对&lt;a href=&quot;http://projects.spring.io/spring-boot/&quot;&gt;Spring Boot&lt;/a&gt;的印象非常深刻。它的主要目的就是为了减少以往所需要的大部分初始化配置，从而采用一些默认的设置来代替。可能有人会说，这将会使开发者失去控制，而将控制权让给了一些黑暗魔法。这可能是正确的，但在这种情况下，仙子却是来帮忙的，而且他们也可以很容易得从这些特定的事情脱离开来。它只是像以往一样，做你亲历而为的那些事情，与此同时，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@ConditionalOn...&lt;/code&gt;可以设置Spring Boot的自动配置的启动。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In the following article I will explore the way of employing Spring Boot to create a very basic, restful web service. As usual the source code can be found &lt;a href=&quot;https://github.com/bkielczewski/example-spring-boot-rest&quot;&gt;here on GitHub&lt;/a&gt; to play around.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在接下来的文章里，我将会尝试使用Spring Boot，来创建一个基本的RESTful Web服务。像往常一样，源代码放在&lt;a href=&quot;https://github.com/bkielczewski/example-spring-boot-rest&quot;&gt;GitHub&lt;/a&gt;上。&lt;/p&gt;&lt;h2 id=&quot;service-overview--服务概述&quot;&gt;Service overview | 服务概述&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;The goal will be to create a simple web service with the following requirements:&lt;/p&gt;  &lt;ul&gt;    &lt;li&gt;Given no user with same id exists, it should store a new user in the database and immediately return the stored object.&lt;/li&gt;    &lt;li&gt;Given there exists a user with same id, it should not store, but return error status with the message.&lt;/li&gt;    &lt;li&gt;Given there are previously stored users, it should be able to retrieve the list of them.&lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;目标就是构建一个简单的web服务，需求如下：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;给一个具有ID的不存在的用户，这将在数据库中存储一个新的用户，并立即返回存储的对象。&lt;/li&gt;  &lt;li&gt;给一个具有ID的已存在的用户，将不会存储，而是返回错误码信息。&lt;/li&gt;  &lt;li&gt;给定已存储的用户，将拿到用户的列表。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;maven&quot;&gt;Maven&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Let’s start with creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;让我们从创建&lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;开始。&lt;/p&gt;&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;          &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;eu.kielczewski.example.spring&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;example-spring-boot-rest&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;nt&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0.1.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Example Spring Boot REST Service&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;&amp;lt;java.version&amp;gt;&lt;/span&gt;1.7&lt;span class=&quot;nt&quot;&gt;&amp;lt;/java.version&amp;gt;&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;&amp;lt;guava.version&amp;gt;&lt;/span&gt;16.0.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/guava.version&amp;gt;&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;&amp;lt;project.reporting.outputEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project.reporting.outputEncoding&amp;gt;&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;The relevant thing here is &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;parent&amp;gt;&lt;/code&gt; tag - we will be inheriting from Spring Boot’s parent POM. It’s not absolutely necessary, however it provides a very useful thing which is the dependency management. It has already defined many artifacts we might find useful to use, together with their recent versions supported by Spring, so it really saves up the hassle of tracking them down yourself. We just need to override &lt;code class=&quot;highlighter-rouge&quot;&gt;java.version&lt;/code&gt; property, which defaults to 1.6, and add version property for &lt;a href=&quot;https://code.google.com/p/guava-libraries/&quot;&gt;Guava&lt;/a&gt;, which is a nice thing to have in handy - but both of these are a matter of personal preference.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;需要关注的就是&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;parent&amp;gt;&lt;/code&gt;标签——我们将会继承Spring Boot父类的POM。当然这不是必须的，但是这有一个非常有用的好处就是依赖管理。它已经帮我们定义了可能会用到的很多有用的东西，而且都是可以被Spring支持的最新版本，所以真的是解决了很多需要自己搜寻的麻烦事。我们需要重写&lt;code class=&quot;highlighter-rouge&quot;&gt;java.version&lt;/code&gt;属性，默认是1.6，然后添加&lt;a href=&quot;https://code.google.com/p/guava-libraries/&quot;&gt;Guava&lt;/a&gt;版本信息，这都是一些非常好用的东西。——但这纯属个人喜好。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Next thing to do will be to specify the dependencies, which will decide upon the technology stack we will be using:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;下一件事就是指定我们将会用到的技术栈依赖：&lt;/p&gt;&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Spring Boot --&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Hibernate validator --&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.hibernate&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;hibernate-validator&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- HSQLDB --&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.hsqldb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;hsqldb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Guava --&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.google.guava&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;guava&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${guava.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Java EE --&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax.inject&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;javax.inject&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;When it comes to Spring Boot its functions are spread between the starter modules. The &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter&lt;/code&gt; is the main one, followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-test&lt;/code&gt; which pulls some nice tools for unit testing including JUnit4 and Mockito. Next comes &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-web&lt;/code&gt; that pulls Spring MVC dependencies, but also Jackson which will be used for JSON, and most importantly Tomcat, which act as embedded Servlet container. Finally &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-data-jpa&lt;/code&gt; which is responsible for setting up Spring Data JPA, and comes bundled with Hibernate.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;当涉及到Spring Boot的时候，它的功能就是连接各个starter模块。最主要的就是&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter&lt;/code&gt;，然后是&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-test&lt;/code&gt;，包含了一些非常好用的单元测试工具，比如JUnit4和Mockito。接下来就是&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-web&lt;/code&gt;，包含了Spring MVC的相关依赖，Jackson将在JSON数据结构中用到。最重要单独的就是Tomcat，它将作为一个内嵌的Servlet容器。最后就是&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-data-jpa&lt;/code&gt;，用来设置Spring Data JPA，和Hibernate绑定在一起。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Additional dependencies include Hibernate Validator, as we will be doing some validation. HSQLDB will be the database engine, chosen here because it can be easily embedded and has in memory database feature which is handy for tutorial purposes. Notice I haven’t specified versions for these - they are managed by &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-parent&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;额外的依赖还包括Hibernate Validator，因为我们将会有一些数据验证。我们选用HSQLDB作为数据库引擎，因为它很容易被嵌入本项目，而且内存数据库的特性也对本教程的目标非常有用。需要注意的是，我并没有特意指定它们的版本，这些都会被&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-parent&lt;/code&gt;所管理。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The rest is something of my personal preference - Guava, because it’s cool ;) and JSR-330 API to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; annotation with &lt;code class=&quot;highlighter-rouge&quot;&gt;@Inject&lt;/code&gt;, which I like better.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;剩下的纯属我的个人爱好——Guava，因为它非常之酷！JSR-330的API可以将&lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt;注解替换成我更喜欢的&lt;code class=&quot;highlighter-rouge&quot;&gt;@Inject&lt;/code&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Last thing that’s left is to add Spring Boot Maven Plugin:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;最后一件事情就是Spring Boot的Maven插件。&lt;/p&gt;&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Spring Boot Maven --&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;This plugin does two things:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这个插件做了两件事：&lt;/p&gt;&lt;blockquote&gt;  &lt;ul&gt;    &lt;li&gt;It provides spring-boot:run goal for Maven, so the application can be easily run without packaging.      &lt;ul&gt;        &lt;li&gt;为Maven提供了spring-boot:run命令，所以应用不用打包就可以轻松运行。&lt;/li&gt;      &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;It hooks into &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt; goal to produce executable JAR file with all the dependencies included, similar to maven-shade-plugin, but in less messy way.      &lt;ul&gt;        &lt;li&gt;同时也提供了&lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt;命令，可以将所有依赖打包到一个可执行的JAR文件中，和maven-shade-plugin很像，但是采取的方式更加简洁。&lt;/li&gt;      &lt;/ul&gt;    &lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;writing-the-main-method--编写-main-方法&quot;&gt;Writing the main() method | 编写 main() 方法&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;The execution will start by firing up the main() method, so let’s write a class to hold it:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;程序执行需要一个main()方法，所以让我们写一个类包含它：&lt;/p&gt;&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@EnableAutoConfiguration&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringBootServletInitializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringApplicationBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringApplicationBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;This class has the following features:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这个类有如下特性：&lt;/p&gt;&lt;blockquote&gt;  &lt;ul&gt;    &lt;li&gt;It acts as a &lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt; class for Spring.      &lt;ul&gt;        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;表示这是一个Spring的类&lt;/li&gt;      &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;As such it has &lt;code class=&quot;highlighter-rouge&quot;&gt;@ComponentScan&lt;/code&gt; annotation that enables scanning for another Spring components in current package and its subpackages.      &lt;ul&gt;        &lt;li&gt;同样地，&lt;code class=&quot;highlighter-rouge&quot;&gt;@ComponentScan&lt;/code&gt;注解可以从当前package和子package中自动加载其他的Spring组件。&lt;/li&gt;      &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;Another annotation is &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableAutoConfiguration&lt;/code&gt; which tells Spring Boot to run autoconfiguration.      &lt;ul&gt;        &lt;li&gt;另外一个注解就是&lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableAutoConfiguration&lt;/code&gt;，告诉Spring Boot采用自动配置。&lt;/li&gt;      &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;It also extends &lt;code class=&quot;highlighter-rouge&quot;&gt;SpringBootServletInitializer&lt;/code&gt; which will configure Spring servlet for us, and overrides the &lt;code class=&quot;highlighter-rouge&quot;&gt;configure()&lt;/code&gt; method to point to itself, so Spring can find the main configuration.      &lt;ul&gt;        &lt;li&gt;这个类还继承了&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringBootServletInitializer&lt;/code&gt;，这就帮我们配置了Spring Servlet，重写&lt;code class=&quot;highlighter-rouge&quot;&gt;configure()&lt;/code&gt;方法指向自己，Spring就可以自动配置了。&lt;/li&gt;      &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;Finally, the &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; method consists of single static call to &lt;code class=&quot;highlighter-rouge&quot;&gt;SpringApplication.run()&lt;/code&gt;.      &lt;ul&gt;        &lt;li&gt;最后，&lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt;方法直接调用了&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringApplication.run()&lt;/code&gt;静态方法。&lt;/li&gt;      &lt;/ul&gt;    &lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;At this point this is all that is required to configure the application, so we can start implementing.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这就是我们这个应用程序的所有配置了，下面我们开始实现。&lt;/p&gt;&lt;h2 id=&quot;adding-usercontroller--添加-usercontroller&quot;&gt;Adding UserController | 添加 UserController&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Let’s start with writing a test case for creating a new user through the UserController.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;让我们从一个测试案例开始，通过UserController来创建一个新用户。&lt;/p&gt;&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MockitoJUnitRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserControllerTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Mock&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;userController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shouldCreateUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stubServiceToReturnStoredUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnedUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// verify user was passed to UserService&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Returned user should come from the service&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnedUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stubServiceToReturnStoredUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;From this test case we see that in order to create a new user, we need to have &lt;code class=&quot;highlighter-rouge&quot;&gt;UserController&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;createUser()&lt;/code&gt; method, that takes the &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; object and passes it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt;, that will be responsible for doing the actual work.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;从这个测试中我们可以看到，为了创建新用户，我们需要有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;UserController&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;createUser()&lt;/code&gt;方法，它将&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;对象传入&lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt;，然后进行实际的操作。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Both &lt;code class=&quot;highlighter-rouge&quot;&gt;MockitoJUnitRunner.class&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@Mock&lt;/code&gt; annotation come from Mockito and their purpose is to inject mocked object instead of real implementation of UserService interface. Thanks to this, without the need for a real implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt;, I can simulate returning a stored &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; object that comes from the service and verify that it will be exactly the object the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserController&lt;/code&gt; is going to return. I also check that the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt; is going to be called exactly once.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MockitoJUnitRunner.class&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;@Mock&lt;/code&gt;注解都来自于Mockito，用于注入已经Mock的对象，就不用实现真正的&lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt;了。我可以模拟从Service返回一个已经存储的&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;对象，然后验证它是否是&lt;code class=&quot;highlighter-rouge&quot;&gt;UserController&lt;/code&gt;将要返回的那个对象，同时验证&lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt;是否被调用过一次。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;From the REST point of view it will hook up to the POST http method of the &lt;code class=&quot;highlighter-rouge&quot;&gt;/user&lt;/code&gt; resource.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;从REST的角度来说，它将会和&lt;code class=&quot;highlighter-rouge&quot;&gt;/user&lt;/code&gt; resource的POST方法联系起来。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;So let’s implement it:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;所以让我们来实现它：&lt;/p&gt;&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Valid&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Points to notice:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;注意以下几点：&lt;/p&gt;&lt;blockquote&gt;  &lt;ul&gt;    &lt;li&gt;It’s annotated with &lt;code class=&quot;highlighter-rouge&quot;&gt;@RestController&lt;/code&gt;. The difference between this and &lt;code class=&quot;highlighter-rouge&quot;&gt;@Controller&lt;/code&gt; annotation is the former also implies &lt;code class=&quot;highlighter-rouge&quot;&gt;@ResponseBody&lt;/code&gt; on every method, which means there is less to write since from a RESTful web service we are returning JSON objects anyway.      &lt;ul&gt;        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@RestController&lt;/code&gt;注解和&lt;code class=&quot;highlighter-rouge&quot;&gt;@Controller&lt;/code&gt;的不同就在，前者会将&lt;code class=&quot;highlighter-rouge&quot;&gt;@ResponseBody&lt;/code&gt;传到每个方法，这就意味着可以少写一些代码，因为我们总是会从RESTful的Web Service返回JSON对象。&lt;/li&gt;      &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@RequestMapping&lt;/code&gt; maps the &lt;code class=&quot;highlighter-rouge&quot;&gt;createUser()&lt;/code&gt; to the POST request on the &lt;code class=&quot;highlighter-rouge&quot;&gt;/user&lt;/code&gt; url.      &lt;ul&gt;        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@RequestMapping&lt;/code&gt;里的值表示&lt;code class=&quot;highlighter-rouge&quot;&gt;createUser()&lt;/code&gt;方法的url是&lt;code class=&quot;highlighter-rouge&quot;&gt;/user&lt;/code&gt;，请求方法为POST。&lt;/li&gt;      &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;Method takes the &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; object as a parameter. It is created from the body of the request thanks to &lt;code class=&quot;highlighter-rouge&quot;&gt;@RequestBody&lt;/code&gt; annotation. It is then validated, which is enforced by &lt;code class=&quot;highlighter-rouge&quot;&gt;@Valid&lt;/code&gt;.      &lt;ul&gt;        &lt;li&gt;这个方法将&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;对象作为参数，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@RequestBody&lt;/code&gt;注解可以从request body中拿出来并且创建对象，&lt;code class=&quot;highlighter-rouge&quot;&gt;@Valid&lt;/code&gt;表示它会被验证。&lt;/li&gt;      &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt; will be injected to the constructor, and &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; object is passed to its &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; method for storage.      &lt;ul&gt;        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt;将会被注入到构造函数中，&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;对象将被传到&lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt;方法中保存。&lt;/li&gt;      &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;After storing, the stored &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; object will be returned. Spring will convert it back to JSON automatically, even without &lt;code class=&quot;highlighter-rouge&quot;&gt;@ResponseBody&lt;/code&gt; annotation which is default for &lt;code class=&quot;highlighter-rouge&quot;&gt;@RestController&lt;/code&gt;.      &lt;ul&gt;        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;对象在保存之后就会被返回，Spring将会将其自动转成JSON，哪怕没有&lt;code class=&quot;highlighter-rouge&quot;&gt;@ResponseBody&lt;/code&gt;，这是&lt;code class=&quot;highlighter-rouge&quot;&gt;@RestController&lt;/code&gt;的功能。&lt;/li&gt;      &lt;/ul&gt;    &lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;How about UserService and User then? For the test to pass we need only an interface for UserService, because it is not even created, but merely mocked. It should take &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; objects into the &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; methods which will be used to save them, then it should return saved &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; object back to the caller.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;对测试来说，只需要传一个UserService的接口即可，因为它可以被Mock而并不用真正创建出来。接下来，UserService应该把&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;对象传入&lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt;方法中保存起来，然后将&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;对象返回给调用者。&lt;/p&gt;&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;As for &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; object it can be anything at this stage, for example:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;至于&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;对象，在这个阶段它可以是任何东西，比如：&lt;/p&gt;&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// getters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;@NotNull&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@Size&lt;/code&gt; are validation constraints the object will be checked against while being deserialized from the request body.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@NotNull&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;@Size&lt;/code&gt;就是验证对象的一些限制，它将会检查从request请求中反序列化出来的对象内容。&lt;/p&gt;&lt;h2 id=&quot;adding-userservice--添加-userservice&quot;&gt;Adding UserService | 添加 UserService&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Having an interface for &lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt; it would be useful to have an implementation of this &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; method to do the work for us. Let’s start with the test case to see how it might work:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;实现&lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt;接口的&lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt;方法将会很有用，让我们从测试开始，看它是如何工作的：&lt;/p&gt;&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MockitoJUnitRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserServiceImplTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Mock&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shouldSaveNewUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stubRepositoryToReturnUserOnSave&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnedUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// verify repository was called with user&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Returned user should come from the repository&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnedUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stubRepositoryToReturnUserOnSave&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;The assumption is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt; will delegate actual storage to the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserRepository&lt;/code&gt;, which is mocked, and later stubbed to return a stored &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; object. Then I’m checking whether the object returned from &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; is the stored one, and that &lt;code class=&quot;highlighter-rouge&quot;&gt;UserRepository&lt;/code&gt; is called exactly once.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;假设&lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt;将会使用&lt;code class=&quot;highlighter-rouge&quot;&gt;UserRepository&lt;/code&gt;来进行实际的数据存储，首先将它Mock，然后Stub返回一个已存储的&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;对象。然后我就可以验证从&lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt;返回回来的对象是否就是被存储的那个&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;，还有就是&lt;code class=&quot;highlighter-rouge&quot;&gt;UserRepository&lt;/code&gt;有没有被实际调用一次。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;As previously, at this point all we need is the interface for &lt;code class=&quot;highlighter-rouge&quot;&gt;UserRepository&lt;/code&gt;, but thanks to Spring Data JPA it’s also everything that we’ll ever need for this project. The interface looks like this:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;像以前一样，我们需要做的就是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;UserRepository&lt;/code&gt;接口。而多亏了Spring Data JPA，已经为我们准备了项目所需要的所有东西。接口就像这样：&lt;/p&gt;&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JpaRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;It just extends &lt;code class=&quot;highlighter-rouge&quot;&gt;JpaRepository&lt;/code&gt; generic interface with &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; as type parameters. The former indicates that there will be &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; objects in this repository, latter that it’s primary key will be of the &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; type. The &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; method we need is already there inherited, among other basic CRUD methods.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;只需要继承&lt;code class=&quot;highlighter-rouge&quot;&gt;JpaRepository&lt;/code&gt;接口，将&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;作为类型参数就可以了。前者意味着将被存储到repository的是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;对象，后者表示primary key是&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;类型。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;We won’t need to implement this interface, because that’s how Spring Data JPA works - it generates the implementation for us.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们不需要实现这个接口，因为这就是Spring Data JPA的作用——直接就为我们实现好了。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;We need however to make the test to pass by implementing &lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt;:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;然后我们实现&lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt;就可以让测试通过了：&lt;/p&gt;&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;It’s a real simple implementation. Thing to notice is &lt;code class=&quot;highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt; annotation, that starts the transaction when the method is called as we are going to change the database by inserting a new &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这就是一个非常简单的实现，需要注意的是&lt;code class=&quot;highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt;注解，当这个方法被调用的时候就会开始进行数据处理，因为我们会改变数据库，插入一个新的&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Now the test should pass, but we are inserting &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; object into the database so it needs to be made a proper &lt;code class=&quot;highlighter-rouge&quot;&gt;@Entity&lt;/code&gt;:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在所有的测试都应该过了，但是由于我们正在往数据库插入&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;对象，所以需要加上一个&lt;code class=&quot;highlighter-rouge&quot;&gt;@Entity&lt;/code&gt;注解。&lt;/p&gt;&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// getters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Entity&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Column&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;@Id&lt;/code&gt; annotations that appeared. The first one tells the object is a JPA entity. The second tells JPA how fields should be mapped to a column and what can be done with them - what the column name will be, whether it’s allowed for a column to be updated or have null value. Whereas the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Id&lt;/code&gt; indicates a primary key for database record - it needs to be non null and unique, so our &lt;code class=&quot;highlighter-rouge&quot;&gt;User.id&lt;/code&gt; fits here perfectly.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;注意&lt;code class=&quot;highlighter-rouge&quot;&gt;@Entity&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;@Column&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;@Id&lt;/code&gt;注解，第一个表示这个对象是一个JPA Entity，第二个就是告诉JPA要如何将这些字段map到数据库里的每一列以及需要map的内容，比如每一列的名字和是否允许修改，还有就是是否可以为空。&lt;code class=&quot;highlighter-rouge&quot;&gt;@Id&lt;/code&gt;注解就表示数据库所记录的primary key，这个字段不能为空，而且必须是唯一的，这样我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;User.id&lt;/code&gt;就完全无可挑剔了。&lt;/p&gt;&lt;h2 id=&quot;getting-this-to-work--让它跑起来&quot;&gt;Getting this to work | 让它跑起来&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;It’s now possible to run and test the whole thing. Type:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在就可以运行和测试整个程序了，输入：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn spring-boot:run&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;And you should have the web service running on the default port from the current compiled sources.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;然后你就应该可以编译和运行这个Web Service了，运行在一个默认的端口。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Alternatively you can build and run the package:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;当然你也可以build和运行这个包：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn packagejava &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; target/example-spring-boot-rest-1.0-SNAPSHOT.jar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Having done that now you can:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;然后就可以：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;{ &quot;id&quot;: &quot;test_id&quot;, &quot;password&quot;: &quot;test_password&quot; }&#39;&lt;/span&gt; http://localhost:8080/user&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;And see whether the response from &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt; will be like:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;然后看看从&lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt;返回的内容：&lt;/p&gt;&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test_password&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Which should be our inserted object.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这就是我们之前所插入的那个对象。&lt;/p&gt;&lt;h2 id=&quot;checking-for-duplicate-users--检查重复的-users&quot;&gt;Checking for duplicate Users | 检查重复的 Users&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Another requirement for our service is to prevent inserting users if another user already exists with the same id.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;另外一个需求就是，我们的Service能禁止插入已存在相同ID的用户。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Lets add a test case to the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserServiceTest&lt;/code&gt;:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;给&lt;code class=&quot;highlighter-rouge&quot;&gt;UserServiceTest&lt;/code&gt;添加新的测试案例：&lt;/p&gt;&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shouldSaveNewUser_GivenThereExistsOneWithTheSameId_ThenTheExceptionShouldBeThrown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;stubRepositoryToReturnExistingUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expected exception&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserAlreadyExistsException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignored&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stubRepositoryToReturnExistingUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;That assumes we will ask &lt;code class=&quot;highlighter-rouge&quot;&gt;UserRepository&lt;/code&gt; about existing user with the same id by calling its &lt;code class=&quot;highlighter-rouge&quot;&gt;findOne()&lt;/code&gt; method. If such user will be found, the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserAlreadyExistsException&lt;/code&gt; should be thrown, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; method on the repository should never be called.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;假设我们通过相同id调用&lt;code class=&quot;highlighter-rouge&quot;&gt;UserRepository&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;findOne()&lt;/code&gt;方法来查找已存在的用户。如果有用户被找到，那么将会抛出&lt;code class=&quot;highlighter-rouge&quot;&gt;UserAlreadyExistsException&lt;/code&gt;异常，&lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt;也就不会被调用了。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Now we need to change &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; method in &lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt; implementation, that becomes:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在我们就需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt;中修改&lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt;方法，变成：&lt;/p&gt;&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;existing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;existing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserAlreadyExistsException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;There already exists a user with id=%s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;It clearly has the logic the test requires. The &lt;code class=&quot;highlighter-rouge&quot;&gt;findOne(id)&lt;/code&gt; method already exists in &lt;code class=&quot;highlighter-rouge&quot;&gt;UserRepository&lt;/code&gt; and returns null if no object could be found.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;测试所需要的逻辑非常清晰，如果没有找到相应的对象，存在于&lt;code class=&quot;highlighter-rouge&quot;&gt;UserRepository&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;findOne(id)&lt;/code&gt;方法就会返回null。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The web service will be working fine after that, but once &lt;code class=&quot;highlighter-rouge&quot;&gt;UserAlreadyExistsException&lt;/code&gt; will be thrown, it will cause INTERNAL SERVER ERROR response for the client using it. We should make sure the response will be different, so the client can more clearly see the situation occurred.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;完成这些，这个Web Service就可以正常工作了。但是一旦抛出&lt;code class=&quot;highlighter-rouge&quot;&gt;UserAlreadyExistsException&lt;/code&gt;，它将会向客户端返回&lt;code class=&quot;highlighter-rouge&quot;&gt;INTERNAL SERVER ERROR&lt;/code&gt;。我们应该确保这种response是不一样的，所以客户端才可以比较清晰得知道发生了什么。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Let’s say it should be a response with CONFLICT status with a meaningful error message in the body. To do that we need to add &lt;code class=&quot;highlighter-rouge&quot;&gt;@ExceptionHandler&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserController&lt;/code&gt;:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;让我们返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;CONFLICT&lt;/code&gt;状态码和一个有意义的Error信息，给&lt;code class=&quot;highlighter-rouge&quot;&gt;UserController&lt;/code&gt;加上&lt;code class=&quot;highlighter-rouge&quot;&gt;@ExceptionHandler&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@ExceptionHandler&lt;/span&gt;    &lt;span class=&quot;nd&quot;&gt;@ResponseStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONFLICT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleUserAlreadyExistsException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserAlreadyExistsException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;It’s just a method that intercepts &lt;code class=&quot;highlighter-rouge&quot;&gt;UserAlreadyExistsException&lt;/code&gt;, returns its message and sets the response status to CONFLICT.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这就是一个捕获&lt;code class=&quot;highlighter-rouge&quot;&gt;UserAlreadyExistsException&lt;/code&gt;异常的方法，会返回错误信息和&lt;code class=&quot;highlighter-rouge&quot;&gt;CONFLICT&lt;/code&gt;状态码。&lt;/p&gt;&lt;h2 id=&quot;closing-remarks--结束语&quot;&gt;Closing remarks | 结束语&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;I hope that was helpful to get a grasp on what it takes to do a simple web service the Spring Boot way. The implementation of the third requirement about returning all stored users could be a way to spend an evening instead of doing all the things normal people usually do on evenings. If not, take a peek at the &lt;a href=&quot;https://github.com/bkielczewski/example-spring-boot-rest&quot;&gt;source code&lt;/a&gt; I have prepared sacrificing mine for you.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我希望这篇文章可以对你有所作用，帮助你理解如何使用Spring Boot创建一个简单的Web Service。第三个关于如何实现返回所有已保存用户的需求，你可以花上一个晚上去完成它，而不是像其他人一样过一个平淡的夜晚。如果没有的话，我已经为你准备好了&lt;a href=&quot;https://github.com/bkielczewski/example-spring-boot-rest&quot;&gt;源代码&lt;/a&gt;，尽情品尝。&lt;/p&gt;",
            "excerpt"    : "&lt;h1 id=&quot;使用spring-boot开发restful-web服务&quot;&gt;使用Spring Boot开发RESTful Web服务&lt;/h1&gt;"
		} ,
	
		{
            "id"         : "/reactjs_tutorial_part_interlude_2",
            "title"      : "【译】React.js教程 番外篇（二）：如何升级NPM依赖的版本",
            "category"   : "前端",
            "tags"       : "NodeJS, React",
            "url"        : "/2015-08-22-reactjs_tutorial_part_interlude_2/",
            "path"       : "_posts/前端/2015-08-22-reactjs_tutorial_part_interlude_2.md",
            "next"       : "/2015-08-23-developing_a_restful_web_service_using_spring_boot/",
            "previous"   : "/2015-08-16-introduction-about-tagine/",
            "date"       : "2015-08-22 00:00:00 +0000",
            "shortdate"  : "August 22, 2015",
            "content"    : "&lt;p&gt;技术系列笔记均已迁移至GitBook，更多&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;的内容请到：&lt;a href=&quot;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&quot;&gt;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;reactjs-tutorial-part-interlude-2&quot;&gt;React.js Tutorial Part (Interlude 2)&lt;/h1&gt;&lt;p&gt;原文地址：&lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-interlude-2/&quot;&gt;http://www.joshfinnie.com/blog/reactjs-tutorial-part-interlude-2/&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Welcome to part (Interlude 2) of my React.js/Express.js app tutorial. This is going to be an article about upgrading a &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React.js&lt;/a&gt; application after coming back to a project after a while. Hopefully this will spur me to continue these tutorials as it has been too long since I have posted one.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;欢迎来到我的React.js/Express.js应用教程番外篇的第二部分。这是一篇在项目开始之后如何升级&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React.js&lt;/a&gt;版本的文章。希望这可以鞭策我继续把教程写下去，自从开始之后已经很长时间没有更新了。&lt;/p&gt;&lt;h2 id=&quot;reviewing-your-application--回顾一下你的应用&quot;&gt;Reviewing Your Application | 回顾一下你的应用&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Since this is a Javascript application, we have the extreme benefit of having our package versions laid out within &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;. If we take a look at what is there currently, we’d see:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;由于这是一个JavaScript应用程序，有个非常好的优势就是拥有&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;文件来管理package的版本信息。如果我们现在来看一下：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{  &quot;name&quot;: &quot;jobs.nodedc.com&quot;,  &quot;version&quot;: &quot;0.1.0&quot;,  &quot;description&quot;: &quot;A job board for the NodeDC meetup group.&quot;,  &quot;private&quot;: true,  &quot;scripts&quot;: {        &quot;start&quot;: &quot;node ./bin/www&quot;,        &quot;postinstall&quot;: &quot;node node_modules/bower/bin/bower install&quot;  },  &quot;dependencies&quot;: {        &quot;body-parser&quot;: &quot;~1.10.1&quot;,        &quot;cookie-parser&quot;: &quot;~1.3.3&quot;,        &quot;debug&quot;: &quot;~2.1.1&quot;,        &quot;express&quot;: &quot;~4.10.6&quot;,        &quot;jade&quot;: &quot;~1.8.2&quot;,        &quot;morgan&quot;: &quot;~1.5.1&quot;,        &quot;serve-favicon&quot;: &quot;~2.2.0&quot;  },  &quot;devDependencies&quot;: {        &quot;bower&quot;: &quot;^1.3.12&quot;,        &quot;browserify&quot;: &quot;^8.1.3&quot;,        &quot;gulp&quot;: &quot;^3.8.10&quot;,        &quot;gulp-nodemon&quot;: &quot;^2.0.3&quot;,        &quot;gulp-sass&quot;: &quot;^1.3.3&quot;,        &quot;gulp-sourcemaps&quot;: &quot;^1.5.2&quot;,        &quot;react&quot;: &quot;^0.12.2&quot;,        &quot;reactify&quot;: &quot;^1.0.0&quot;,        &quot;vinyl-source-stream&quot;: &quot;^1.0.0&quot;  }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Here, we have the list of &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dev-dependencies&lt;/code&gt; for our application. To see what needs to be upgraded, we can use a super-handly Node.js module called &lt;a href=&quot;https://www.npmjs.com/package/npm-check-updates&quot;&gt;npm-check-updates&lt;/a&gt;. Using this application is easy; first, install it globally (I recommend installing it globally, since you should be using this for all your projects which rely on NPM!) by running &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g npm-check-updates&lt;/code&gt;, and second, run &lt;code class=&quot;highlighter-rouge&quot;&gt;ncu&lt;/code&gt; within the &lt;code class=&quot;highlighter-rouge&quot;&gt;jobs.nodedc.com&lt;/code&gt; directory.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们的应用程序有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;dev-dependencies&lt;/code&gt;的版本列表。为了查看哪些版本需要升级，我们会用到一个「super-handly」的Node.js模块：&lt;code class=&quot;highlighter-rouge&quot;&gt;[npm-check-updates](https://www.npmjs.com/package/npm-check-updates)&lt;/code&gt;。使用它非常容易，第一步全局安装（只所以推荐全局安装是因为你可能会在其他所有依赖NPM的项目上用到它），然后运行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g npm-check-updates&lt;/code&gt;，第二步，在我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;jobs.nodedc.com&lt;/code&gt;项目目录下运行&lt;code class=&quot;highlighter-rouge&quot;&gt;ncu&lt;/code&gt;命令即可。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;What this application will do is go to NPM and check to see if there’s an update to your required packages (regardless of whether or not you have pinned your versions in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;) and return with a nice list of what needs to be upgraded. When we run this application for &lt;code class=&quot;highlighter-rouge&quot;&gt;jobs.nodedc.com&lt;/code&gt; we get the following list:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;应用程序将会到NPM去检查项目所依赖的包是否有更新（不管你是否在&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;有没有添加版本信息），然后会返回一个需要升级的列表。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ ncu body-parser    ~1.10.1  →  ~1.13.3 debug           ~2.1.1  →   ~2.2.0 express        ~4.10.6  →  ~4.13.3 jade            ~1.8.2  →  ~1.11.0 morgan          ~1.5.1  →   ~1.6.1 serve-favicon   ~2.2.0  →   ~2.3.0 browserify      ^8.1.3  →  ^11.0.1 gulp-sass       ^1.3.3  →   ^2.0.4 react          ^0.12.2  →  ^0.13.3Run with -u to upgrade your package.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;npm-check-updates&lt;/code&gt; application gives you a nice flag, &lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt;, to automatically update your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; which is a nice feature and the main reason I prefer this app over just using &lt;code class=&quot;highlighter-rouge&quot;&gt;npm outdated&lt;/code&gt;, but, FYI, it can be dangerous if you have major version jumps like we do here. Looking at the list above, we see two important upgrades which we will be handling in this blog post. First, &lt;code class=&quot;highlighter-rouge&quot;&gt;browserify&lt;/code&gt; has gone from &lt;code class=&quot;highlighter-rouge&quot;&gt;8.1.3&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;11.0.1&lt;/code&gt; and second, &lt;code class=&quot;highlighter-rouge&quot;&gt;react&lt;/code&gt; has gone from &lt;code class=&quot;highlighter-rouge&quot;&gt;0.12.2&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;0.13.3&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm-check-updates&lt;/code&gt;应用还可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt;来自动升级所有&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;中的包，这将带来新的一些特性，这也是我更喜欢这个命令而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;npm outdated&lt;/code&gt;的主要原因。但是这也可能是非常危险的，如果你要进行一个非常大的版本跳跃。看看上面的列表，我们可以看到有两个非常重要的升级，我们将在这篇文章中来进行处理。首先，&lt;code class=&quot;highlighter-rouge&quot;&gt;browserify&lt;/code&gt;将从&lt;code class=&quot;highlighter-rouge&quot;&gt;8.1.3&lt;/code&gt;跨越到&lt;code class=&quot;highlighter-rouge&quot;&gt;11.0.1&lt;/code&gt;，而&lt;code class=&quot;highlighter-rouge&quot;&gt;react&lt;/code&gt;也从&lt;code class=&quot;highlighter-rouge&quot;&gt;0.12.2&lt;/code&gt;升级到&lt;code class=&quot;highlighter-rouge&quot;&gt;0.13.3&lt;/code&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;For the record, this is what &lt;code class=&quot;highlighter-rouge&quot;&gt;npm outdated&lt;/code&gt; looks like:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;作为记录，这是&lt;code class=&quot;highlighter-rouge&quot;&gt;npm outdated&lt;/code&gt;的效果：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm outdatedPackage        Current  Wanted  Latest  Locationdebug            2.1.3   2.1.3   2.2.0  debugreact           0.12.2  0.12.2  0.13.3  reactjade             1.8.2   1.8.2  1.11.0  jadebody-parser     1.10.2  1.10.2  1.13.3  body-parsermorgan           1.5.3   1.5.3   1.6.1  morganserve-favicon    2.2.1   2.2.1   2.3.0  serve-favicongulp-sass        1.3.3   1.3.3   2.0.4  gulp-sassexpress         4.10.8  4.10.8  4.13.3  expressbrowserify       8.1.3   8.1.3  11.0.1  browserify&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;You can use this if you’d like and save the global download!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;你也可以像这样全局安装然后使用它。&lt;/p&gt;&lt;h2 id=&quot;upgrading-a-package--升级包&quot;&gt;Upgrading a Package | 升级包&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;There are a few steps you want to take when upgrading a package that you rely on for your application. The first thing I do in read the release notes for each of the releases between where I am currently and where &lt;code class=&quot;highlighter-rouge&quot;&gt;npm-check-updates&lt;/code&gt; wants me to be. Let’s take a look at &lt;a href=&quot;https://github.com/facebook/react/blob/master/CHANGELOG.md&quot;&gt;React.js’s release notes&lt;/a&gt;. I am chosing to review React’s changelog here since it is a shorter upgrade path than &lt;code class=&quot;highlighter-rouge&quot;&gt;browserify&lt;/code&gt;’s…&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;当你升级应用程序所依赖的包的时候，需要这么几个步骤。首先就是查看在&lt;code class=&quot;highlighter-rouge&quot;&gt;npm-check-updates&lt;/code&gt;想要升级的已经release的版本和当前版本之间相关信息。让我们看看&lt;a href=&quot;https://github.com/facebook/react/blob/master/CHANGELOG.md&quot;&gt;React.js的发布信息&lt;/a&gt;，我选择查看React的changelog是因为它的更新没有&lt;code class=&quot;highlighter-rouge&quot;&gt;browserify&lt;/code&gt;那么多。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;When we take a look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;changelog&lt;/code&gt; we see it broken down into a few categories; “Breaking Changes”, “New Features”, and “Deprecations”. I have to say that the React.js &lt;code class=&quot;highlighter-rouge&quot;&gt;changelog&lt;/code&gt; is one of the nicer ones out there and with other projects you might not be so lucky. Anyways, we want to read through all the changes taking special care with the “Breaking Changes” and “Deprecations” sections as this is what is likely going to break our app when we upgrade. Do make sure to read the “New Features” section too so we know what cool things we can add to our app as well!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们可以看到&lt;code class=&quot;highlighter-rouge&quot;&gt;changelog&lt;/code&gt;中分为了几个类别，”Breaking Changes”、”New Features”以及”Deprecations”。不得不说React.js的&lt;code class=&quot;highlighter-rouge&quot;&gt;changelog&lt;/code&gt;做得非常好，如果是其它项目可能就没有这么幸运了。Anyways，我们通读一遍所有的改变，特别注意一下”Breaking Changes”和”Deprecations”这两部分，因为这最可能在升级的时候搞崩我们的App。再次确认”New Features”部分，以便于我们可以给App添加一些酷的新功能。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;em&gt;I’ll wait…&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;等等……&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Now that we have read React’s &lt;code class=&quot;highlighter-rouge&quot;&gt;changelog&lt;/code&gt; we can comfortably move forward with upgrading. At this point in time, if there was any breaking changes that would affect our app, we’d want to take note to make sure we revisit that section of code after the upgrade.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;既然我们已经读了React的&lt;code class=&quot;highlighter-rouge&quot;&gt;changelog&lt;/code&gt;，我们就可以舒舒服服得升级了。在这个时候，如果有任何影响我们的App的改变，我们一定要特别小心并且在升级之后，重新看一下&lt;code class=&quot;highlighter-rouge&quot;&gt;changelog&lt;/code&gt;的代码部分。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is where having good tests would really come in handy. You should have a level of test coverage that makes you comfortable with doing upgrades like this. Any breaking change to your app should be caught by a test and not by your walk-through of the site in a browser. Unfortunately, we do not have any tests yet for this application.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;这时候写好测试的好处就出来了，你应该保持测试覆盖率以便于今后舒舒服服得进行版本升级。任何可能搞崩App的改变都可以被测试捕获到，而不需要在浏览器里面人肉搜索了。不幸的是，我们并没有为这个应用程序写过测试。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Upgrading a NPM package is really simple. First you want to update your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file to represent the version of the package you want to upgrade:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;升级NPM包非常简单，首先更新一下&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;文件，改成你想要升级的那个版本：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...&quot;react&quot;: &quot;^0.13.3&quot;,...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Then you need to run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm upgrade&lt;/code&gt; which will upgrade all the packages to the latest version found in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;. The output looks like this:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;然后运行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm upgrade&lt;/code&gt;就可以把所有的库都升级到&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;中的最新版本了。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm upgradereact@0.13.3 node_modules/react└── envify@3.4.0 (through@2.3.8, jstransform@10.1.0)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;That’s it. We have successfully upgraded a NPM module. Now let’s see if our application is still working!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;That’s it. 我们已经成功升级了NPM模块，现在看看我们的程序是否依然可以工作！&lt;/p&gt;&lt;h2 id=&quot;conclusion--结论&quot;&gt;Conclusion | 结论&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Lucky for us our app worked just fine after the upgrade. I was not too surprised since we are still at a very basic level with our application. If the upgrade was not as successful, we’d have to go through and make some changes to make sure our app is back in working order. This is where reading the &lt;code class=&quot;highlighter-rouge&quot;&gt;changelog&lt;/code&gt; really comes in handy.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;非常幸运的是在升级以后，我们的App还是工作得非常好。我并不感到惊讶的原因是因为我们的应用程序还处于一个非常基础的阶段。如果升级不像这么成功，我们就不得不去遍历代码，并且做出一些改变来让我们的App重新工作。这就是阅读&lt;code class=&quot;highlighter-rouge&quot;&gt;changelog&lt;/code&gt;的有用之处。&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;技术系列笔记均已迁移至GitBook，更多&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;的内容请到：&lt;a href=&quot;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&quot;&gt;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&lt;/a&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/introduction-about-tagine",
            "title"      : "塔吉锅简介以及菜谱推荐",
            "category"   : "生活",
            "tags"       : "菜谱, 家居",
            "url"        : "/2015-08-16-introduction-about-tagine/",
            "path"       : "_posts/生活/2015-08-16-introduction-about-tagine.md",
            "next"       : "/2015-08-22-reactjs_tutorial_part_interlude_2/",
            "previous"   : "/2015-08-01-reading-book-list-2015/",
            "date"       : "2015-08-16 00:00:00 +0000",
            "shortdate"  : "August 16, 2015",
            "content"    : "&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;&lt;p&gt;塔吉锅——最早起源于北非摩洛哥。它的特别之处在于，使用尖帽型的盖子，不用水却可以做出料理。这是在水资源极度珍贵的摩洛哥才有的创意。经过改良后的塔吉锅却可以直接烘烤。而且食材不只限于摩洛哥料理，中华料理或者亚洲料理等各种食物都可以用来烹饪出美味佳肴！&lt;/p&gt;&lt;h2 id=&quot;懒人的福音&quot;&gt;懒人的福音&lt;/h2&gt;&lt;h3 id=&quot;使用方法&quot;&gt;使用方法&lt;/h3&gt;&lt;ol&gt;  &lt;li&gt;把材料放入塔吉锅,开火.不用加油(为更适合亚洲人口味，或加少许油)，食材堆成金字塔型,最好是蔬菜放在锅底,肉类放在上面&lt;/li&gt;  &lt;li&gt;用大火(煤气炉6-7分钟)加热后,等它沸腾后,塔吉锅的盖子缝隙中有水溢出来，之后再加热1分钟就可以关火了。&lt;/li&gt;  &lt;li&gt;把火关后,就这样不把盖子揭开，用余温蒸2-3分钟。&lt;/li&gt;  &lt;li&gt;大约10分钟后可食用，因为保温效果很好，在吃完之前仍能使食物保持在热腾腾的状态&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;用塔吉锅烧菜的秘诀是：不管主食材是什么肉类，配菜的蔬菜请选择水分较多的，这样汤汁会比较浓厚可口~&lt;/p&gt;&lt;h3 id=&quot;菜谱收集&quot;&gt;菜谱收集&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;http://www.xiachufang.com/recipe_list/1470/&quot;&gt;懒人的福音——塔吉锅菜谱合辑&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.xiachufang.com/recipe_list/102059858/&quot;&gt;我的塔吉锅&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.xiachufang.com/recipe_list/101579833/&quot;&gt;塔吉锅食谱&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/reading-book-list-2015",
            "title"      : "2015年阅读书单",
            "category"   : "思考",
            "tags"       : "阅读, 书籍",
            "url"        : "/2015-08-01-reading-book-list-2015/",
            "path"       : "_posts/思考/2015-08-01-reading-book-list-2015.md",
            "next"       : "/2015-08-16-introduction-about-tagine/",
            "previous"   : "/2015-07-30-reactjs_tutorial_part_3/",
            "date"       : "2015-08-01 00:00:00 +0000",
            "shortdate"  : "August 01, 2015",
            "content"    : "",
            "excerpt"    : ""
		} ,
	
		{
            "id"         : "/reactjs_tutorial_part_3",
            "title"      : "【译】React.js教程 第三部分：一个真实的React组件",
            "category"   : "前端",
            "tags"       : "React",
            "url"        : "/2015-07-30-reactjs_tutorial_part_3/",
            "path"       : "_posts/前端/2015-07-30-reactjs_tutorial_part_3.md",
            "next"       : "/2015-08-01-reading-book-list-2015/",
            "previous"   : "/2015-07-26-learning-microservices/",
            "date"       : "2015-07-30 00:00:00 +0000",
            "shortdate"  : "July 30, 2015",
            "content"    : "&lt;p&gt;技术系列笔记均已迁移至GitBook，更多&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;的内容请到：&lt;a href=&quot;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&quot;&gt;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;reactjs-tutorial-part-3&quot;&gt;React.js Tutorial Part 3&lt;/h1&gt;&lt;p&gt;原文地址：&lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-3/&quot;&gt;http://www.joshfinnie.com/blog/reactjs-tutorial-part-3/&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Welcome to part 3 of my React.js/Express.js app tutorial. In this part we are going to actually take a deep dive into react and start hashing out the application’s components. If you haven’t already, please start the tutorial at &lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-1/&quot;&gt;Part 1&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;欢迎来到React.js/Express.js教程的第三部分。在这一部分我们将深入React并构建应用组件。如果还没有开始，请从&lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-1/&quot;&gt;第一部分&lt;/a&gt;开始。&lt;/p&gt;&lt;h2 id=&quot;a-react-component--一个-react-组件&quot;&gt;A React Component | 一个 React 组件&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;From the &lt;a href=&quot;https://facebook.github.io/react/docs/why-react.html&quot;&gt;React Documentation&lt;/a&gt;, “React is all about building reusable components. In fact, with React the only thing you do is build components. Since they’re so encapsulated, components make code reuse, testing, and separation of concerns easy.” This is what drew me to React in the first place, coming from &lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular.js&lt;/a&gt; the idea of components spoke to me. It seemed like React’s components were the next logical step in the progression of Javascript’s MVCs. Here we are going to try our hardest to stay true to the definition of a React Component and try to truly encapsulate a single idea of our web application per React component. First, let’s see what this means in regards to our job board web application.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;根据&lt;a href=&quot;https://facebook.github.io/react/docs/why-react.html&quot;&gt;React文档&lt;/a&gt;所述：“React一切都是为了组件重用，事实上，使用React你唯一需要做的就是构建组件。由于封装性，组件使得代码具有可复用性，可测试性，并且易于分离。”这是React在最开始吸引我的地方，这在&lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular.js&lt;/a&gt;中是从来没有的，看起来React组件是属于Javascript的MVCs模型的逻辑部分。我们将尽力保持React组件的定义，并尽量使web应用的每一个React组件都保持单一想法的封装性。首先，让我们看看这对于我们的「工作布告栏」程序意味着什么。&lt;/p&gt;&lt;h2 id=&quot;the-job-component--job-组件&quot;&gt;The Job Component | Job 组件&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;This first encapsulated part of our web application is going to be the job posting itself. Here we want to create a component that simply lists the information that we should have in an individual job post. To start, lets create a file for this react component and let’s call it &lt;code class=&quot;highlighter-rouge&quot;&gt;Job.jsx&lt;/code&gt; and put it in our &lt;code class=&quot;highlighter-rouge&quot;&gt;public/javascripts/scr/&lt;/code&gt; folder:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;第一个封装的模块就是工作的发布功能，首先新建一个组件，简单列出所有的发布信息。让我们为React组件新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Job.jsx&lt;/code&gt;文件，放到&lt;code class=&quot;highlighter-rouge&quot;&gt;public/javascripts/scr/&lt;/code&gt;文件夹：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Job&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;This file might look surprisingly similar to our &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.jsx&lt;/code&gt; file and that is because it is! Of course we want to add some functionality to our &lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt; component, but first let’s get it hooked up into our application. To do this, we will need to modify our &lt;code class=&quot;highlighter-rouge&quot;&gt;app.jsx&lt;/code&gt; file slightly to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt; component instead of the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld&lt;/code&gt; component. To do this, modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;app.jsx&lt;/code&gt; file to read as the following:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这个文件看起来就跟之前的&lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.jsx&lt;/code&gt;文件易于。当然我们需要为&lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt;组件加上一些功能，当然首先需要连接到我们的应用。稍微修改一下&lt;code class=&quot;highlighter-rouge&quot;&gt;app.jsx&lt;/code&gt;，将&lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld&lt;/code&gt;组件替换为&lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt;组件。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;../../libraries/jquery/dist/jquery&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bootstrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;../../libraries/bootstrap-sass-official/assets/javascripts/bootstrap&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./Job.jsx&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;job-post&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt; we also changed the HTML element we are attaching our React app to from &lt;code class=&quot;highlighter-rouge&quot;&gt;example&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;job-post&lt;/code&gt; so make sure to adjust your &lt;code class=&quot;highlighter-rouge&quot;&gt;index.jade&lt;/code&gt; file to match. Running &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; and then serving your application, you should see a header title of “Job Title” instead of our “Hello World” text from the last couple of tutorials. Now let’s add some information to this component and really make it look like a job posting!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;请注意&lt;/strong&gt;，我们应该将HTML元素从&lt;code class=&quot;highlighter-rouge&quot;&gt;example&lt;/code&gt;改成&lt;code class=&quot;highlighter-rouge&quot;&gt;job-post&lt;/code&gt;，所以确保&lt;code class=&quot;highlighter-rouge&quot;&gt;index.jade&lt;/code&gt;能够对应上。运行&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt;然后启动应用，你可以看到标题从前两个教程中的”Hello World”变成了”Job Title”。选择让我们为这个添加一些信息，使之更像一个工作公告。&lt;/p&gt;&lt;h3 id=&quot;adding-information-to-our-component--为我们的组件添加信息&quot;&gt;Adding Information to our Component | 为我们的组件添加信息&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;To add some useful information to our &lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt; component, we want to create an “initial state” for the component. This over simplifies the task of getting data into your component, but it will work for us right now. In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Job.jsx&lt;/code&gt; file, we want to create a function called &lt;code class=&quot;highlighter-rouge&quot;&gt;getInitialState&lt;/code&gt; and return a dictionary with the information we want our component to start with. Once we do that, we want to change our rendering element to use the initialized state. Below you will see what changes we made to &lt;code class=&quot;highlighter-rouge&quot;&gt;Job.jsx&lt;/code&gt; to accomplish this:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;为了给我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt;组件添加一些有用信息，我们需要为组件新建一个“初始状态”。这是在简化组件获取数据的任务，但是现在它为我们所用。在&lt;code class=&quot;highlighter-rouge&quot;&gt;Job.jsx&lt;/code&gt;这个文件，我们新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;getInitialState&lt;/code&gt;函数，然后返回一个字典，其中包括我们想要组件在最开始时所需要的一些信息。一旦我们完成这些，我们就可以使用初始state数据来改变渲染的原色。从以下的内容可以看到我们对&lt;code class=&quot;highlighter-rouge&quot;&gt;Job.jsx&lt;/code&gt;所做的修改：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;getInitialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;TrackMaven&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Software Maven&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Washington, DC, USA&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;lookingFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Angular.js, Django, ElasticSearch&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;postedDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;4 April 2015&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Engineer&#39;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;listing-company&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;listing-company-name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;company&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/span&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;listing-location&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/span&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;listing-job-type&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Looking&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lookingFor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/span&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;listing-posted&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Posted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postedDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/span&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;listing-company-category&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/span&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Note that with the &lt;code class=&quot;highlighter-rouge&quot;&gt;getInitialState&lt;/code&gt; function, the &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; function now has access to a useful state. We can cycle through the state to render the data in our app. Our web application should now look like this:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;可以注意到，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;getInitialState&lt;/code&gt;这个方法，&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;方法就操作一些有用的state数据。我们可以在app中循环使用state来渲染数据。现在的web应用：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://www.joshfinnie.com/assets/images/blog/filled-out-job-component.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;adding-more-components-components-within-components--添加更多组件组件含组件&quot;&gt;Adding More Components (Components within Components) | 添加更多组件（组件含组件）&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Having a job posting is great and all, but we are not doing all this work to just post a single job. We need a way to iterate through a list of jobs and render many &lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt; components. This isn’t as hard as it sounds, we first need to create another component, though. Let’s call this component &lt;code class=&quot;highlighter-rouge&quot;&gt;Jobs&lt;/code&gt; since it’s going to create many &lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt; components. To keep our codebase as clean as possible, we are going to create another file to hold our &lt;code class=&quot;highlighter-rouge&quot;&gt;Jobs&lt;/code&gt; component; we are going to call it &lt;code class=&quot;highlighter-rouge&quot;&gt;Jobs.jsx&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;有一个工作发布模块看起非常好，但是我们现在只能够显示发布的一条工作信息，还没有完成所有代码。我们需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt;组件中迭代显示所有的工作信息。这不像听起来那么难，我们只需要另外新建一个组件。我们称之为&lt;code class=&quot;highlighter-rouge&quot;&gt;Jobs&lt;/code&gt;组件，因为它将创建很多个&lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt;组件。为了尽可能保持代码整洁，我们会新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Jobs.jsx&lt;/code&gt;文件来存放&lt;code class=&quot;highlighter-rouge&quot;&gt;Jobs&lt;/code&gt;组件。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Jobs&lt;/code&gt; component, we are going to map all the jobs to individual &lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt; components, but for this part of the tutorial, we are still going to hard-code the data. First, we want to create an “initial state” that is going to mirror our future API call. This is done through the &lt;code class=&quot;highlighter-rouge&quot;&gt;getInitialState&lt;/code&gt; function in our &lt;code class=&quot;highlighter-rouge&quot;&gt;Jobs&lt;/code&gt; component. Looping over this data to render many components is easy in React.js, but not all that intuitive. We want to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt; function in Javascript to map each “job” to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Job component&lt;/code&gt;. Below is what the final &lt;code class=&quot;highlighter-rouge&quot;&gt;Jobs.jsx&lt;/code&gt; file looks like:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Jobs&lt;/code&gt;组件中，我们map出所有单独的&lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt;组件。但是在教程的这个部分，我们依然会很难为数据编程。首先，我们要新建“初始化state数据”，看起来就像我们将来的API形式。为&lt;code class=&quot;highlighter-rouge&quot;&gt;Jobs&lt;/code&gt;组件添加&lt;code class=&quot;highlighter-rouge&quot;&gt;getInitialState&lt;/code&gt;方法，在React.js中循环渲染很多组件很容易，但也不完全靠直觉。我们想要在JavaScript中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt;函数map将每一个”job”渲染到&lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt;组件。以下是最终的&lt;code class=&quot;highlighter-rouge&quot;&gt;Jobs.jsx&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Job&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./Job.jsx&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;getInitialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// This will be an API call eventually...&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                    &lt;span class=&quot;na&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;TrackMaven&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                    &lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Software Maven&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                    &lt;span class=&quot;na&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Washington, DC, USA&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                    &lt;span class=&quot;na&quot;&gt;lookingFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Angular.js, Django, ElasticSearch&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                    &lt;span class=&quot;na&quot;&gt;postedDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;4 April 2015&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                    &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Engineering&#39;&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                    &lt;span class=&quot;na&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;TrackMaven&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                    &lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Junior Software Maven&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                    &lt;span class=&quot;na&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Washington, DC, USA&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                    &lt;span class=&quot;na&quot;&gt;lookingFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Javascript, Python&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                    &lt;span class=&quot;na&quot;&gt;postedDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;4 April 2015&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                    &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Engineering&#39;&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;list-group&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;                        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Job&lt;/span&gt;                            &lt;span class=&quot;nx&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                            &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                            &lt;span class=&quot;nx&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                            &lt;span class=&quot;nx&quot;&gt;lookingFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lookingFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                            &lt;span class=&quot;nx&quot;&gt;postedDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postedDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                            &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                            &lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                        &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;})}&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;This allows us to clean up the &lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt; component a little bit, most importantly switching from using &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; since we are now passing in the data to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt; component and not using our &lt;code class=&quot;highlighter-rouge&quot;&gt;getInitialState&lt;/code&gt; function. Most of this is the same, but we made some small changes to the return function. First note the change from &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;className&lt;/code&gt; due to some issue with React.js and how it handles the &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; namespace. Second, note we got rid of the &lt;code class=&quot;highlighter-rouge&quot;&gt;getInitialState&lt;/code&gt; function since we now pass in the data through our &lt;code class=&quot;highlighter-rouge&quot;&gt;Jobs&lt;/code&gt; component.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这样使我们保证&lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt;组件的整洁性，最重要的变化是将&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;换成了&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;，因为我们需要将数据传递到&lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt;组件，而不是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;getInitialState&lt;/code&gt;方法。大部分都是一样的，但是我们在&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;方法中需要做出一点改变。首先，注意到&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;换成了&lt;code class=&quot;highlighter-rouge&quot;&gt;className&lt;/code&gt;，这是由于React.js的一些issue，因为这涉及到&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;的命名空间。第二，注意到我们不需要&lt;code class=&quot;highlighter-rouge&quot;&gt;getInitialState&lt;/code&gt;方法了，因为我们现在是从&lt;code class=&quot;highlighter-rouge&quot;&gt;Jobs&lt;/code&gt;组件中拿到的数据。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;list-group-item&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h4&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;list-group-item-heading listing-company&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;listing-position-name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/span&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;listing-company-name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;company&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/small&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;listing-location&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/small&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h4&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;list-group-item-text&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;listing-job-type&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Looking&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lookingFor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/span&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;list-group-item-text&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;listing-posted&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Posted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postedDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/span&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;listing-company-category&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/span&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Next let’s add some simple SCSS in our &lt;code class=&quot;highlighter-rouge&quot;&gt;public/stylesheets/scss/style.scss&lt;/code&gt; file to make our application look a little better. Below is all the SCSS I have added:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;接下来让我们在&lt;code class=&quot;highlighter-rouge&quot;&gt;public/stylesheets/scss/style.scss&lt;/code&gt;文件中添加一些简单的SCSS，这会使我们的应用看起来更漂亮一些。如下所示：&lt;/p&gt;&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;../../libraries/bootstrap-sass-official/assets/stylesheets/bootstrap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;14px&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;Lucida Grande&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#00B7FF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#jobs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nl&quot;&gt;padding-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.listing-location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.listing-company-name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.listing-company-category&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;And now looking at it all put together, we now have something that looks like this!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在所有东西都放在一起，看起来就是这样：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://www.joshfinnie.com/assets/images/blog/cssed-jobs-component.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;conclusion--结论&quot;&gt;Conclusion | 结论&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;In this tutorial we went through how to create a real component and how to loop over that component with data. Our application is looking more and more like a real web app! Next time we will work through how we are going to build out our Express.js app to return some JSON jobs data and how we can make our React.js app talk to that API. See you then!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在本次教程中，我们学习了如何创建一个真实的React组件和如何循环渲染组件并且传递数据。我们的应用看起来越来越像一个web应用！下一次我们会继续学习如何构建Express.js应用来返回JSON格式的工作信息数据，以及React.js应用如何与API进行交互。See you then！&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;技术系列笔记均已迁移至GitBook，更多&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;的内容请到：&lt;a href=&quot;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&quot;&gt;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&lt;/a&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/learning-microservices",
            "title"      : "Microservices 最佳实践之路",
            "category"   : "编程",
            "tags"       : "Microservices, GitBook, 最佳实践",
            "url"        : "/2015-07-26-learning-microservices/",
            "path"       : "_posts/编程/2015-07-26-learning-microservices.md",
            "next"       : "/2015-07-30-reactjs_tutorial_part_3/",
            "previous"   : "/2015-07-25-about-people-in-tw/",
            "date"       : "2015-07-26 00:00:00 +0000",
            "shortdate"  : "July 26, 2015",
            "content"    : "",
            "excerpt"    : ""
		} ,
	
		{
            "id"         : "/about-people-in-tw",
            "title"      : "记一次对话：自我与环境以及环境中的人",
            "category"   : "思考",
            "tags"       : "学习, 工作, 人性",
            "url"        : "/2015-07-25-about-people-in-tw/",
            "path"       : "_posts/思考/2015-07-25-about-people-in-tw.md",
            "next"       : "/2015-07-26-learning-microservices/",
            "previous"   : "/2015-07-23-wallpaper-by-liqing-01/",
            "date"       : "2015-07-25 00:00:00 +0000",
            "shortdate"  : "July 25, 2015",
            "content"    : "&lt;h2 id=&quot;以人为导向写日记&quot;&gt;以「人」为导向写日记&lt;/h2&gt;&lt;p&gt;在工作中所能涉及到的事情，均是以人为中心的，不同的人讲述了不一样的精彩。&lt;/p&gt;&lt;p&gt;ThoughtWorks最大的财产就是「人」，而每个人都有自己非常优秀的一面。每天接触的各个人物所展现出来的优秀，都是值得自己去发现和学习的，以后的日记形式大概就是以人为导向，辅以时间线作为叙述顺序的依据。一天中随着时间线遇到了不同的人，然后记录他们所展现出的东西，值得我学习的东西，不论和我直接接触与否。&lt;/p&gt;&lt;p&gt;而记录这些，也是对他人的进一步了解。别人所表现出来的事实，做得好或不好，从而在一定程度上导致/引发了自己的不同想法吧。但是有些东西是无法归结于想法的，记录现实发生的事实和脑海中的想法都没有这种形式具有人情味。&lt;/p&gt;&lt;p&gt;最后就是向自己学习，也是最好的一个途径。自省，不断改进。学习-总结-分享。&lt;/p&gt;&lt;h2 id=&quot;学习者关注别人&quot;&gt;学习者：关注别人&lt;/h2&gt;&lt;p&gt;我还是觉得关注自己一定是在先的，一直以来我都会习惯于将一些事情优先归结于自己，觉得是自己的问题（好 or 坏）&lt;/p&gt;&lt;p&gt;但是呢，往往很多事情，都不是自己一个人所能承担或能够影响到的吧，之前的很多时候我都是一个人在战斗，比如说啊一个人编程，毕竟我们专业也没有第二个像我这样了或者说有也没玩到一块，再比如一个人拍照啊玩游戏什么的。但是呢，从什么时候开始发生了变化，或许就是加入ThoughtWorks的时候，遇到了你，你们。就是能够在很大程度上感受到了契合的地方，很多的point都不再是自己一个人的了，由此也慢慢发现自己并不是那么特殊，很多自己有的别人也有的，或者别人有的自己反而没有。&lt;/p&gt;&lt;p&gt;自知清高。其实是视野太小，哈哈哈哈。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;不知什么时候，慢慢接受了现实，慢慢接受了看似不合理的事，突然发现特别的不是自己，别人都很优秀，然而他们也并不特别。我们都融合在一起，没有什么特别不特别之说。然后最近，感觉集体和自己其实也是平行的两个方面，都很重要，说不上谁更重要。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;到了正式入职（或者TWU就有）的时候，情况就又变成了这样：自己好像是最low的那个，就觉得自己才是那个最需要学习的人，其他人都是值得我学习的吧。  似乎太极端了，哈哈哈，其实哥还是有「优点」的。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;我感觉自己很low的时候会想不要这么想。平等地看待自己。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;但确实，自己还没到达用自己的「优秀」或者「所学」去影响他人的时候，就是会有这样的感觉。&lt;/p&gt;&lt;p&gt;总觉得还没准备好自己囊中的东西的时候，是不足以具有自信去做「影响」之事的，在这之前，不得不好好学习为先。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;我不想觉得自己优秀。只希望能够打开自己，去感受更多的美好。又到了实操水平远低于理论水平的季节了…实际上很多时候，第一冲击的思想还是，卧槽我怎么这么low。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;还不优秀，但不证明人不行～我正在尽力理清这个逻辑～&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;所以呢，回到正题就是。好好学习，向别「人」学习。但是学无止境呀~哈哈哈哈，什么时候开始有自信对别人产生影响。现在的角色就是一个学习者吧，由心向外，将他人之物再慢慢转化为自己的~噢耶~&lt;/p&gt;&lt;h2 id=&quot;大染缸光明与黑暗&quot;&gt;大染缸：光明与黑暗&lt;/h2&gt;&lt;p&gt;还有一种感觉就是，我们现在就还是一个局外者，得先听局内者的，然后慢慢融入，在「融入」之前就是别人在影响自己啊。就好像我们是一瓢水被扔进大染缸，不可能整缸水变成清水，而是自己和整个Team变成了一整缸水。&lt;/p&gt;&lt;p&gt;突然发现这个例子还算生动，要是自己的能力足够大，也就是水足够多，还是能够在一定程度让水变清的。&lt;/p&gt;&lt;p&gt;不算恰当的是，自己和缸内的东西或者本来就都是清水，哈哈哈哈那就最好棒了。。&lt;/p&gt;&lt;p&gt;对我来说，国企才是TMD大染缸，污浊至极。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;就没想过自己是黑水的情况么～（妈哒 还是老鼠屎呢）&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;哈哈哈哈，我也觉得。我一直想问twer的一个问题是，这种这么清澈的氛围，不会享用起来有心有余悸的感觉么。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;如果国企才是正常的生活状况，如果以为只存光明就能好好生活，碰到黑暗的时候如何应对。光明如果是不够完整的幻觉，失去的时候怎么收拾。我希望去除【污浊】以及与之相对的【清澈】这个概念。我更愿意尝试去理解身处其中的人的不容易和难处，同时在一定的限度内跟他们斗争，让自己顺着这缸水去流动。不去评判污浊，也不去标榜自己的清澈。让自己顺着它流动，它怎么样，我就怎么样。point在于，自己不要迷失。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这个问题，其实我也不知道该怎么具体情况具体分析，因为我们并没有真正经历过国企中的工作生活。无比庆幸的是，进ThoughtWorks真的就让自己直接到达了一个理想的环境。倘若我有机会进入到国企之中，现在的自我觉得，哪怕进去了有朝一日我也会出来。但现实可能又是另外一番情景，我被同化了出不来了。幸运的就是我不用经历那样的历练，不用冒那样的「风险」。&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; 哈哈哈哈，我们活腻了就中国移动见  卧槽，中移动工资太低，不去，【中国移动：我招你们惹你们了么】&amp;gt; 卧槽还挑  【中国移动：妈的还被嫌弃了】&amp;gt; 哈哈哈，没钱还敢玩阴暗～  没钱只玩阴暗～ 像我们有点钱的倒可以安心做点技术，学习学习。不至于被现实生活所迫。&amp;gt; 谁说我有钱 今儿的钱包什么厚薄你也看见的了…  哈哈哈哈，咱公司可是85%的cost都在薪水上了。&amp;gt; 好的我不抬扛心里不舒服，你说的我想我懂，有理有理哈哈哈哈  人家移动可是被高层剥削了。。  &amp;gt; 确实很幸运。培养一个孩子不容易。【中国移动：卧槽你们聊你们聊，我先走了】  &amp;gt; 反正我是要求你救济的&amp;gt; 不管你钱包厚薄都要接济我。我被剥削了...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;现在是幸运的，尽快调整心态好好学习，不要辜负这么幸运吧。如果我没有让自己足够优秀足够独立，独立到可以去帮助别人，我会内疚的。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们终究会变得更加优秀的，成为真正的ThoughtWOrker。&lt;/p&gt;&lt;h2 id=&quot;注重细节&quot;&gt;注重细节&lt;/h2&gt;&lt;p&gt;ThoughtWorks.&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;以人为导向写日记&quot;&gt;以「人」为导向写日记&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/wallpaper-by-liqing-01",
            "title"      : "吕立青拍的壁纸系列（一）",
            "category"   : "生活",
            "tags"       : "爱情, 摄影",
            "url"        : "/2015-07-23-wallpaper-by-liqing-01/",
            "path"       : "_posts/生活/2015-07-23-wallpaper-by-liqing-01.md",
            "next"       : "/2015-07-25-about-people-in-tw/",
            "previous"   : "/2015-07-22-difference-between-blog-and-note/",
            "date"       : "2015-07-23 00:00:00 +0000",
            "shortdate"  : "July 23, 2015",
            "content"    : "&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2apqive9j30w01hck52.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50615-150245.jpg&quot; /&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2apwqcbxj30w01hc1d2.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-152521.jpg&quot; /&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2aq4ix39j30w01hck94.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-160623.jpg&quot; /&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2aq61s76j30w01hcaww.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-160636.jpg&quot; /&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2aq99r44j30w01hc1cy.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-160846.jpg&quot; /&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2aqarc6uj30w01hctr2.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-160912.jpg&quot; /&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2apqive9j30w01hck52.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50615-150245.jpg&quot; /&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2apwqcbxj30w01hc1d2.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-152521.jpg&quot; /&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2aq4ix39j30w01hck94.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-160623.jpg&quot; /&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2aq61s76j30w01hcaww.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-160636.jpg&quot; /&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2aq99r44j30w01hc1cy.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-160846.jpg&quot; /&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2aqarc6uj30w01hctr2.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-160912.jpg&quot; /&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/difference-between-blog-and-note",
            "title"      : "安利 GitBook：兼谈笔记与博客的区别",
            "category"   : "思考",
            "tags"       : "React, 写作",
            "url"        : "/2015-07-22-difference-between-blog-and-note/",
            "path"       : "_posts/思考/2015-07-22-difference-between-blog-and-note.md",
            "next"       : "/2015-07-23-wallpaper-by-liqing-01/",
            "previous"   : "/2015-06-22-reactjs_tutorial_part_interlude/",
            "date"       : "2015-07-22 00:00:00 +0000",
            "shortdate"  : "July 22, 2015",
            "content"    : "&lt;h2 id=&quot;笔记与博客的区别&quot;&gt;笔记与博客的区别&lt;/h2&gt;&lt;p&gt;以后我的技术学习笔记就都以书的形式写在&lt;a href=&quot;http://www.gitbook.com/&quot;&gt;GitBook: Write &amp;amp; Publish Books&lt;/a&gt;里面，新技术的全面了解最好能够有一个清晰良好的结构组织，而书的形式就再好不过了，就可以用章节的方式来全面管理知识架构。&lt;/p&gt;&lt;p&gt;另外不得不说GitBook是个非常好的书籍编写工具，可以用 Markdown 语法写作，git管理，网页与客户端都做得不错，甚至可以甩其他的一些原生 Markdown 编辑器几条街。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2b91wj1wj31kw0vutp6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;与GitHub绑定之后只要发布到GitHub上GitBook就会自动更新书本内容，还有很多相关插件可以添加评论、书的封面等等。&lt;/p&gt;&lt;h2 id=&quot;jimmy-lvs-react学习笔记&quot;&gt;Jimmy Lv’s React学习笔记&lt;/h2&gt;&lt;p&gt;Welcome, React is Awesome!&lt;/p&gt;&lt;p&gt;最后可能就会自己做网页啦，或者iOS App，这是最开始学编程的时候就想做的事情，一直都没有实现，我是在干嘛？！而且现在在技术的道路上越走越远，真有点儿背离我要做产品的初衷啊！&lt;/p&gt;&lt;p&gt;其实还真应该反思一下我的学习方式，这次React的学习是在我看了很多很多资料，自认为掌握得差不多了之后才去看的项目代码，然后发现看！过！头！了，很多看过的东西在项目里边并没有用到。&lt;/p&gt;&lt;p&gt;所以在面对一个自己完全没有头绪的项目的时候，看书看资料是要有一个限度的，而且一定还是要以项目为导向。只要到了自己刚好能看懂的时候就要开始实战了，从代码中发现问题然后搜索问题解决问题，最后总结学习项目的过程，分享学习到的东西和经验。大概就是这么个过程。&lt;/p&gt;&lt;p&gt;更多内容请看GitBook：&lt;a href=&quot;http://jimmylv.gitbooks.io/learning-react-js/content/index.html&quot;&gt;http://jimmylv.gitbooks.io/learning-react-js/content/index.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2b938wx3j31kw0zkqm4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;笔记与博客的区别&quot;&gt;笔记与博客的区别&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/reactjs_tutorial_part_interlude",
            "title"      : "【译】React.js教程 番外篇（一）：使用Bower包管理工具",
            "category"   : "前端",
            "tags"       : "React, Bower",
            "url"        : "/2015-06-22-reactjs_tutorial_part_interlude/",
            "path"       : "_posts/前端/2015-06-22-reactjs_tutorial_part_interlude.md",
            "next"       : "/2015-07-22-difference-between-blog-and-note/",
            "previous"   : "/2015-06-06-reactjs_tutorial_part_2/",
            "date"       : "2015-06-22 00:00:00 +0000",
            "shortdate"  : "June 22, 2015",
            "content"    : "&lt;p&gt;技术系列笔记均已迁移至GitBook，更多&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;的内容请到：&lt;a href=&quot;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&quot;&gt;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;reactjs-tutorial-part-interlude&quot;&gt;React.js Tutorial Part (Interlude)&lt;/h1&gt;&lt;p&gt;原文地址：&lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-interlude/&quot;&gt;http://www.joshfinnie.com/blog/reactjs-tutorial-part-interlude/&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Welcome to part (Interlude) of my React.js/Express.js app tutorial. This is going to be an extension of &lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-2/&quot;&gt;part 2&lt;/a&gt;, where we go into a bit more detail of how to use Gulp along with Bower.io to make our application a better, well-rounded system. We will not be going into too much React.js this tutorial, so I didn’t want to call this “part 3”. If you haven’t already, please start the tutorial at &lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-1/&quot;&gt;Part 1&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;欢迎来到React.js/Express.js应用教程的番外篇，这将是&lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-2/&quot;&gt;第二部分&lt;/a&gt;的扩展，我们将进一步了解如何配配合使用Gulp和Bower.io来使我们的应用更好更完善。这部分内容不会太多涉及React.js，所以我就不想称之为“第三部分”了。如果你还没准备好，从&lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-1/&quot;&gt;第一部分&lt;/a&gt;开始吧。&lt;/p&gt;&lt;h2 id=&quot;bower&quot;&gt;Bower&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;For much of the UI, we are going to use a package manager called &lt;a href=&quot;http://bower.io/&quot;&gt;Bower&lt;/a&gt;. Bower calls itself a package manager for the web, and it actually does a great job at doing just that. We are going to use Bower to install and keep track of many of the third-party libraries we are going to use for our job board.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;使用包管理工具&lt;a href=&quot;http://bower.io/&quot;&gt;Bower&lt;/a&gt;可以让我们拿到更多的UI库。Bower自称为互联网的包管理工具，实际上它做得非常好。我们将使用Bower来安装和追踪我们将要使用到项目中的第三方库。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;To install Bower, we simply have to install it from NPM using the following command:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;使用NPM来安装Bower：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; bower&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;This automatically adds it to our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file which we all should be familiar with now. If you are comfortable with Bower, it is recommended to install the package globally, which I have done. Your mileage may vary.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这将自动添加依赖到&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;。如果你对Bower感觉良好，可以像我一样直接安装到全局。当然你的情况可能会有所不同。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The one thing I do not enjoy about the default Bower installation is where the libraries are stored by default: &lt;code class=&quot;highlighter-rouge&quot;&gt;.bower-components/&lt;/code&gt;. Luckily, it is not that hard to change, so let’s change where we install our third-party libraries. To do this, create a &lt;code class=&quot;highlighter-rouge&quot;&gt;.bowerrc&lt;/code&gt; file which looks like the following:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;还有一件我不喜欢的事情是，Bower会将第三方库默认安装到&lt;code class=&quot;highlighter-rouge&quot;&gt;.bower-components/&lt;/code&gt;目录。幸运的是，我们可以很容易修改这个位置，创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;.bowerrc&lt;/code&gt;文件：&lt;/p&gt;&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;directory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;public/libraries/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;This will change the default bower install folder to be &lt;code class=&quot;highlighter-rouge&quot;&gt;public/libraries/&lt;/code&gt; which will allow us to easily access it later on. Once we do this, let’s create the &lt;code class=&quot;highlighter-rouge&quot;&gt;bower.json&lt;/code&gt; file, which will allow us an easy way to save our Bower packages very much like &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;. Simply run the following commands to prompt you to create your &lt;code class=&quot;highlighter-rouge&quot;&gt;bower.json&lt;/code&gt; file:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这就能将Bower的默认安装路径设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;public/libraries/&lt;/code&gt;，以便于之后的调用。一旦我们完成些之后，新建&lt;code class=&quot;highlighter-rouge&quot;&gt;bower.json&lt;/code&gt;文件，就像&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;一样能够轻易保存我们的Bower包依赖。运行以下命令可以直接创建：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bower init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;After completing the prompts your &lt;code class=&quot;highlighter-rouge&quot;&gt;bower.json&lt;/code&gt; file should look something like this:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;bower.json&lt;/code&gt;设置如下：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{  &quot;name&quot;: &quot;jobs.nodedc.com&quot;,  &quot;version&quot;: &quot;0.1.0&quot;,  &quot;homepage&quot;: &quot;https://github.com/joshfinnie/jobs.nodedc.com&quot;,  &quot;authors&quot;: [    &quot;Josh Finnie &quot;  ],  &quot;description&quot;: &quot;A job board for the NodeDC meetup group.&quot;,  &quot;main&quot;: &quot;./bin/www&quot;,  &quot;license&quot;: &quot;MIT&quot;,  &quot;private&quot;: true,  &quot;ignore&quot;: [    &quot;**/.*&quot;,    &quot;node_modules&quot;,    &quot;bower_components&quot;,    &quot;public/lib/&quot;,    &quot;test&quot;,    &quot;tests&quot;  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;twitter-bootstrap-and-sass-setup--安装-twitter-bootstrap-和-sass&quot;&gt;Twitter Bootstrap and SASS Setup | 安装 Twitter Bootstrap 和 SASS&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;The next bit of setup we are going to do for our web app is to install &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Twitter Bootstrap&lt;/a&gt; using its official &lt;a href=&quot;http://sass-lang.com/&quot;&gt;SASS&lt;/a&gt; bower package. You can see what packages are available through bower using its search function: &lt;code class=&quot;highlighter-rouge&quot;&gt;bower search&lt;/code&gt; Searching for &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap&lt;/code&gt; brings up many, many packages, but also shows us the package we want. Here is an excerpt from the search:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;下一步就是为我们的web应用安装&lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Twitter Bootstrap&lt;/a&gt;，并且选用官方的&lt;a href=&quot;http://sass-lang.com/&quot;&gt;SASS&lt;/a&gt;版本的Bower包。可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;bower search&lt;/code&gt;来搜索哪些包是可用的，搜索&lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap&lt;/code&gt;可以得到很多包，当然包括我们想要的。这是一些搜索的片段：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bower search bootstrapSearch results:    bootstrap git://github.com/twbs/bootstrap.git    angular-bootstrap git://github.com/angular-ui/bootstrap-bower.git    bootstrap-sass-official git://github.com/twbs/bootstrap-sass.git    sass-bootstrap git://github.com/jlong/sass-bootstrap.git    bootstrap-datepicker git://github.com/eternicode/bootstrap-datepicker.git    bootstrap-select git://github.com/silviomoreto/bootstrap-select.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;From here we want to install the &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap-sass-official&lt;/code&gt; package by running the following command:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;找到之后可以使用命令安装&lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap-sass-official&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bower &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bootstrap-sass-official &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Now with the &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap-sass-official&lt;/code&gt; library installed, we can update our &lt;code class=&quot;highlighter-rouge&quot;&gt;style.scss&lt;/code&gt; file to import the Bootstrap packages we want to use. For now, let’s just import the entire bootstrap library. To do this, let’s update our &lt;code class=&quot;highlighter-rouge&quot;&gt;style.scss&lt;/code&gt; file to read as the following:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在&lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap-sass-official&lt;/code&gt;库已经安装好，我们可以将我们想要使用的Bootstrap更新到&lt;code class=&quot;highlighter-rouge&quot;&gt;style.scss&lt;/code&gt;。到现在为止，我们直接导入整个bootstrap库，让我们更新&lt;code class=&quot;highlighter-rouge&quot;&gt;style.scss&lt;/code&gt;如下所示：&lt;/p&gt;&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;../../libraries/bootstrap-sass-official/assets/stylesheets/bootstrap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;14px&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;Lucida Grande&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#00B7FF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Next, let’s set up our Gulp file to automatically build our SASS and add it to our application. To do this, we need to install a few more applications:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;接下来，设置Gulp文件来自动编辑我们的SASS文件并添加到我们的应用。我们需要安装更多应用：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gulp-sass &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;This will install the &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-sass&lt;/code&gt; so we can have Gulp build our SASS file. We now need to to update our Gulp file with the following function to build our SASS:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这将安装&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-sass&lt;/code&gt;以便于编译SASS文件，我们现在需要更新Gulp文件来创建相应的函数：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;gulp-sass&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Our existing jsx task is here&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;sass&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;public/stylesheets/scss/*.scss&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;public/stylesheets/css&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;watch&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;public/stylesheets/scss/*.scss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sass&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sass&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;watch&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;With the gulp task above, we now have our SASS automatically compiled whenever we change it. Lastly we need to add the compiled CSS to our Jade template. We can do this by simply adding the following line to the head of &lt;code class=&quot;highlighter-rouge&quot;&gt;layout.jade&lt;/code&gt;:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;有了以上的Gulp任务，无论什么时候我们修改SASS文件，Gulp都会自动编译。最后让我们把已经编译好的CSS添加Jade模板中。直接添加到头文件：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-jade&quot;&gt;link(rel=&#39;stylesheet&#39;, href=&#39;/stylesheets/css/style.css&#39;)&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;concatenating-the-javascripts--连接-javascript-脚本&quot;&gt;Concatenating the Javascripts | 连接 JavaScript 脚本&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;With the introduction of Twitter Bootstrap, we have also introduced two new javascript libraries to our code base: the Twitter Bootstrap javascript, and jQuery. Since we are already transforming our JSX code into javascript, let’s take this time to concatenate all our javascripts together into a singular &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;. To do this, we just need to have a way to tell our JSX code that there are more libraries to import. Luckily since we are already using browserify, this is as simple as adding the following lines to our &lt;code class=&quot;highlighter-rouge&quot;&gt;app.jsx&lt;/code&gt; file:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在介绍Twitter Bootstrap之后，我们还需要加入新的JavaScript库：jQuery。由于我们已经可以将JSX代码编译成JavaScript，让我们花点时间把JavaScript连接到单个&lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;中。只需要告诉JSX导入相应的库即可，由于我们已经使用了browserify，所以很简单就可以加入到&lt;code class=&quot;highlighter-rouge&quot;&gt;app.jsx&lt;/code&gt;文件：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;../../libraries/jquery/dist/jquery&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bootstrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;../../libraries/bootstrap-sass-official/assets/javascripts/bootstrap&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Doing this points both &lt;code class=&quot;highlighter-rouge&quot;&gt;jQuery ($)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap&lt;/code&gt; to the appropriate file which were installed via Bower. When we re-run our browserify gulp task, these two libraries get pulled in! Simple as that.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;至此，&lt;code class=&quot;highlighter-rouge&quot;&gt;jQuery ($)&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap&lt;/code&gt;都已经通过Bower正确安装了，当我们重新运行browserify的Gulp任务，这两个库就已经被加入了。&lt;/p&gt;&lt;h2 id=&quot;bootstrapping-our-app--初始化-app&quot;&gt;Bootstrapping our App | 初始化 App&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Now that we have all the plumbing working, let’s add some niceties to our application. We can add the &lt;a href=&quot;http://getbootstrap.com/examples/starter-template/&quot;&gt;starter Bootstrap template&lt;/a&gt; to give it a bit of style. All we need to do is update our &lt;code class=&quot;highlighter-rouge&quot;&gt;layout.jade&lt;/code&gt; file to look like this:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在我们做好准备工作，让我们为应用程序添加一些内容。我们可以添加&lt;a href=&quot;http://getbootstrap.com/examples/starter-template/&quot;&gt;starter Bootstrap template&lt;/a&gt;模板来加上一些样式。只需要修改&lt;code class=&quot;highlighter-rouge&quot;&gt;layout.jade&lt;/code&gt;文件：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-jade&quot;&gt;doctype html(lang=&#39;en&#39;)head  meta(charset=&#39;utf-8&#39;)  meta(http-equiv=&#39;X-UA-Compatible&#39;, content=&#39;IE=edge&#39;)  meta(name=&#39;viewport&#39;, content=&#39;width=device-width, initial-scale=1&#39;)  meta(name=&#39;description&#39;, content=&#39;&#39;)  meta(name=&#39;author&#39;, content=&#39;&#39;)  link(rel=&#39;icon&#39;, href=&#39;../../favicon.ico&#39;)  title= title  link(rel=&#39;stylesheet&#39;, href=&#39;/stylesheets/css/style.css&#39;)  //if lt IE 9    script(src=&#39;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js&#39;)    script(src=&#39;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&#39;)body  nav.navbar.navbar-inverse.navbar-fixed-top    .container      .navbar-header        button.navbar-toggle.collapsed(type=&#39;button&#39;, data-toggle=&#39;collapse&#39;, data-target=&#39;#navbar&#39;, aria-expanded=&#39;false&#39;, aria-controls=&#39;navbar&#39;)          span.sr-only Toggle navigation          span.icon-bar          span.icon-bar          span.icon-bar        a.navbar-brand(href=&#39;#&#39;) jobs.nodedc.com      #navbar.collapse.navbar-collapse        ul.nav.navbar-nav          li.active            a(href=&#39;#&#39;) Home          li            a(href=&#39;#about&#39;) About          li            a(href=&#39;#contact&#39;) Contact  .container    .starter-template      p        block content  script(src=&#39;/javascripts/build/app.js&#39;)&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;  &lt;p&gt;This then makes our web application this:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;完成之后的效果：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://www.joshfinnie.com/assets/images/blog/bootstrapped-hello-react.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;技术系列笔记均已迁移至GitBook，更多&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;的内容请到：&lt;a href=&quot;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&quot;&gt;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&lt;/a&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/reactjs_tutorial_part_2",
            "title"      : "【译】React.js教程 第二部分：使用Gulp自动化构建工具",
            "category"   : "前端",
            "tags"       : "React, Gulp",
            "url"        : "/2015-06-06-reactjs_tutorial_part_2/",
            "path"       : "_posts/前端/2015-06-06-reactjs_tutorial_part_2.md",
            "next"       : "/2015-06-22-reactjs_tutorial_part_interlude/",
            "previous"   : "/2015-05-31-reactjs_tutorial_part_1/",
            "date"       : "2015-06-06 00:00:00 +0000",
            "shortdate"  : "June 06, 2015",
            "content"    : "&lt;p&gt;技术系列笔记均已迁移至GitBook，更多&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;的内容请到：&lt;a href=&quot;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&quot;&gt;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;reactjs-tutorial-part-2&quot;&gt;React.js Tutorial Part 2&lt;/h1&gt;&lt;p&gt;原文地址：&lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-2/&quot;&gt;http://www.joshfinnie.com/blog/reactjs-tutorial-part-2/&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Welcome to part 2 of my tutorial on how to get a website up and running using &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React.js&lt;/a&gt; and &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;. You can read Part 1 &lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-1/&quot;&gt;here&lt;/a&gt; if you haven’t already.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;欢迎来到如何使用&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React.js&lt;/a&gt;搭建网站教程的第二部分不，如果你还没有阅读第一部分，&lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-1/&quot;&gt;戳这里&lt;/a&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;In this part of the tutorial, we are going to make our React.js/Express.js app more like a full-fledged web application with the addition of a build system called &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp.js&lt;/a&gt;. Gulp.js is a build system (or task runner) that I have been using for a while. There are &lt;a href=&quot;http://gruntjs.com/&quot;&gt;many&lt;/a&gt;, &lt;a href=&quot;https://github.com/broccolijs/broccoli&quot;&gt;many&lt;/a&gt;, &lt;a href=&quot;http://webpack.github.io/&quot;&gt;many&lt;/a&gt; out there, but I find Gulp.js to be very sufficient for my needs.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这一部分，我们将使用额外的&lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp.js&lt;/a&gt;构建工具，搭建一个更加完善的React.js/Express.js应用。Gulp.js是一个我一直在使用的构建工具（任务管理器），这里有很多类似的&lt;a href=&quot;http://gruntjs.com/&quot;&gt;gruntjs&lt;/a&gt;, &lt;a href=&quot;https://github.com/broccolijs/broccoli&quot;&gt;broccoli&lt;/a&gt;, &lt;a href=&quot;http://webpack.github.io/&quot;&gt;webpack&lt;/a&gt;等工具，但是最终发现Gulp.js最符合需求。&lt;/p&gt;&lt;h2 id=&quot;installing-gulp--安装-gulp&quot;&gt;Installing Gulp | 安装 Gulp&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Installing Gulp is very similar as to how we installed Express in the last tutorial, we need to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;--save-dev&lt;/code&gt; flag to save gulp to our &lt;code class=&quot;highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt; portion of the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file. Run:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;安装Gulp非常简单，就像上个教程中安装Express一样。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--save-dev&lt;/code&gt;标记将gulp保存到&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;文件的&lt;code class=&quot;highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt;部分，运行：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; gulp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Now with Gulp installed, we can create our basic &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt; file:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Gulp安装好之后，我们建立一个&lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;文件：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;gulp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// place code for your default task here&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Now we need to install the Gulp packages that we will need to build our application. To start, let’s install &lt;a href=&quot;https://www.npmjs.com/package/browserify&quot;&gt;browserify&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/reactify&quot;&gt;reactify&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/vinyl-source-stream&quot;&gt;vinyl-source-stream&lt;/a&gt;. To install these packages, run the following command:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在需要为我们的应用安装Gulp包，开始之前，让我们添加&lt;a href=&quot;https://www.npmjs.com/package/browserify&quot;&gt;browserify&lt;/a&gt;，&lt;a href=&quot;https://www.npmjs.com/package/reactify&quot;&gt;reactify&lt;/a&gt;和&lt;a href=&quot;https://www.npmjs.com/package/vinyl-source-stream&quot;&gt;vinyl-source-stream&lt;/a&gt;。运行：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; react browserify reactify vinyl-source-stream&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;At this point, we can remove &lt;code class=&quot;highlighter-rouge&quot;&gt;react-tools&lt;/code&gt; from our &lt;code class=&quot;highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt; since we no longer need to build our &lt;code class=&quot;highlighter-rouge&quot;&gt;.jsx&lt;/code&gt; files via the command line. Your &lt;code class=&quot;highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt; should look like this:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在这时，我们可以从&lt;code class=&quot;highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt;中删除&lt;code class=&quot;highlighter-rouge&quot;&gt;react-tools&lt;/code&gt;，因为我们不再需要通过命令行手动编译&lt;code class=&quot;highlighter-rouge&quot;&gt;.jsx&lt;/code&gt;文件了。&lt;/p&gt;&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;browserify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^8.1.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gulp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^3.8.10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^0.12.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;reactify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vinyl-source-stream&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;setting-up-gulp--设置-gulp&quot;&gt;Setting up Gulp | 设置 Gulp&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;The next step is to set up Gulp to automatically build our &lt;code class=&quot;highlighter-rouge&quot;&gt;.jsx&lt;/code&gt; files into usable javascript. To do this, we are going to create a Gulp task. A Gulp task is a function that will stream a bunch of steps transforming our &lt;code class=&quot;highlighter-rouge&quot;&gt;.jsx&lt;/code&gt; to javascript. We will need to modify our &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt; to look like this:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;下一步就是编写Gulp任务来将&lt;code class=&quot;highlighter-rouge&quot;&gt;.jsx&lt;/code&gt;文件自动编译成可用的JavaScript文件。一个Gulp任务就是一个函数，包含编译文件的一系列步骤。我们需要修改&lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;gulp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browserify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;browserify&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reactify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;reactify&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;vinyl-source-stream&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;browserify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./public/javascripts/src/app.jsx&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reactify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;public/javascripts/build/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Now running &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; from the command line will trigger the build of our React app; however, there are some things we need to do to our react app first!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在从命令行中运行&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt;就会自动编译我们的React应用。但是，还有一些事情需要做！&lt;/p&gt;&lt;h3 id=&quot;browserifying-react--将-react-浏览器化&quot;&gt;Browserifying React | 将 React 浏览器化&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;There are some things we need to do to our application before browserify will work. Last tutorial we wrote a &lt;code class=&quot;highlighter-rouge&quot;&gt;helloworld.jsx&lt;/code&gt;, now we need to modify this slightly to work with browserify. If you don’t know browserify is a tool for compiling node-flavored commonjs modules for the browser. So let’s modify our React code to work with browserify.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在browserify可以工作之前需要做一些事情，在上一节中编写了&lt;code class=&quot;highlighter-rouge&quot;&gt;helloworld.jsx&lt;/code&gt;，现在我们需要稍微修改一下。browserify是一个工具，可以将node模块编译成浏览器可执行的commonjs模块。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;First, we need to create an “entry point” for browersify, we can do this by simply creating an &lt;code class=&quot;highlighter-rouge&quot;&gt;app.jsx&lt;/code&gt; file:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;首先，我们需要为browersify创建一个入口，建立一个&lt;code class=&quot;highlighter-rouge&quot;&gt;app.jsx&lt;/code&gt;文件就可以了：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./HelloWorld.jsx&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;example&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;This file is taking our &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld&lt;/code&gt; component and rendering it in the div with id “example”. This code is taken from our original &lt;code class=&quot;highlighter-rouge&quot;&gt;helloworld.jsx&lt;/code&gt; file from last tutorial. Instead of doing everything in that file, we are now requiring a module &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld&lt;/code&gt; and rendering it in &lt;code class=&quot;highlighter-rouge&quot;&gt;app.jsx&lt;/code&gt;. The reason for this is that as our application gets more complex, we have more control of how our files are broken out.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这个文件就是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld&lt;/code&gt;组件，可以被渲染到&lt;code class=&quot;highlighter-rouge&quot;&gt;id=&quot;example&quot;&lt;/code&gt;的div标签中，这份代码是直接从上一个教程的&lt;code class=&quot;highlighter-rouge&quot;&gt;helloworld.jsx&lt;/code&gt;文章拿到的。但现在不是在一个文件中做所有事情，而是将&lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld&lt;/code&gt;模块渲染到&lt;code class=&quot;highlighter-rouge&quot;&gt;app.jsx&lt;/code&gt;中。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The next thing is that we have is modify our existing &lt;code class=&quot;highlighter-rouge&quot;&gt;helloworld.jsx&lt;/code&gt; file to be a React component named &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.jsx&lt;/code&gt;. This is easily done and our &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.jsx&lt;/code&gt; file now looks like this:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;下一件事是已有的&lt;code class=&quot;highlighter-rouge&quot;&gt;helloworld.jsx&lt;/code&gt;文件修改成React组件，&lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.jsx&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.jsx&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;app.jsx&lt;/code&gt; files are combined to be very similar to how the ‘helloworld.jsx’ looked. Again, the reason for breaking our app into these two files are for future modules to be added.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;注意到&lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.jsx&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;app.jsx&lt;/code&gt;文件组合在一起，看起来很像单独的’helloworld.jsx’文件。原因是为了将我们的应用拆分成不同的模块，以便于未来的可扩展性。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Now, running &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; will create a javascript file in &lt;code class=&quot;highlighter-rouge&quot;&gt;public/javascripts/build/&lt;/code&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; and it will have everything we need to run our React app. Let’s add this to our &lt;code class=&quot;highlighter-rouge&quot;&gt;layout.jade&lt;/code&gt; file instead of the &lt;code class=&quot;highlighter-rouge&quot;&gt;react.min.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;helloworld.js&lt;/code&gt; files:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在运行&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt;会在&lt;code class=&quot;highlighter-rouge&quot;&gt;public/javascripts/build/&lt;/code&gt;目录中新建名为&lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;的标准JavaScript文件，我们需要它来运行React应用。让我们添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;layout.jade&lt;/code&gt;，替换之前的&lt;code class=&quot;highlighter-rouge&quot;&gt;react.min.js&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;helloworld.js&lt;/code&gt;文件：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;doctype htmlhtmlhead    title= title    link(rel=&#39;stylesheet&#39;, href=&#39;/stylesheets/style.css&#39;)body    block content    script(src=&#39;/javascripts/build/app.js&#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;There you have it, a React application being built with Gulp using browersify!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在就有了一个使用Gulp自动构建browersify的React应用啦！&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://www.joshfinnie.com/assets/images/blog/hello-react-component.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;gulp-watch--gulp-监控&quot;&gt;Gulp Watch | Gulp 监控&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;To make Gulp even better, let’s implement the built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt; functionality to have gulp watch for changes in our &lt;code class=&quot;highlighter-rouge&quot;&gt;.jsx&lt;/code&gt; files and automatically build our javascript. To do this, we want to add the following task to our &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;为了更好得使用Gulp，我们可以实现一个内建的&lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt;功能，能够自动监测和编译&lt;code class=&quot;highlighter-rouge&quot;&gt;.jsx&lt;/code&gt;文件。添加任务：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;watch&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;public/javascripts/src/**/*.jsx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Also add that task to your default Gulp task:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;同时将&lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt;任务添加到默认任务中：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;watch&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Now when we run &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; it will watch for changes in our &lt;code class=&quot;highlighter-rouge&quot;&gt;.jsx&lt;/code&gt; and rebuild our javascript with that change! Awesome!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在我们可以运行&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt;来自动监控&lt;code class=&quot;highlighter-rouge&quot;&gt;.jsx&lt;/code&gt;的变化，并且自动重新编译成标准的JavaScript，Awesome！&lt;/p&gt;&lt;h3 id=&quot;next-time--下一次&quot;&gt;Next Time | 下一次&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Next time we will continue to use Gulp to build out some more niceties when building a web application, introduce &lt;a href=&quot;http://bower.io/&quot;&gt;Bower&lt;/a&gt;, and finally get to building some of the React Components we will use in our job board.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;下一次我们将继续使用Gulp来构建开发web应用时的其他细节，介绍&lt;a href=&quot;http://bower.io/&quot;&gt;Bower&lt;/a&gt;，最终为我们的工作布告栏应用的编写React组件。&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;技术系列笔记均已迁移至GitBook，更多&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;的内容请到：&lt;a href=&quot;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&quot;&gt;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&lt;/a&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/reactjs_tutorial_part_1",
            "title"      : "【译】React.js教程 第一部分：Hello World!",
            "category"   : "前端",
            "tags"       : "React, Express",
            "url"        : "/2015-05-31-reactjs_tutorial_part_1/",
            "path"       : "_posts/前端/2015-05-31-reactjs_tutorial_part_1.md",
            "next"       : "/2015-06-06-reactjs_tutorial_part_2/",
            "previous"   : "/2015-05-27-new-state-in-library/",
            "date"       : "2015-05-31 00:00:00 +0000",
            "shortdate"  : "May 31, 2015",
            "content"    : "&lt;p&gt;技术系列笔记均已迁移至GitBook，更多&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;的内容请到：&lt;a href=&quot;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&quot;&gt;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;reactjs-tutorial-part-1&quot;&gt;React.js Tutorial Part 1&lt;/h1&gt;&lt;p&gt;原文地址：&lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-1/&quot;&gt;http://www.joshfinnie.com/blog/reactjs-tutorial-part-1/&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Welcome to my tutorial on how to get a website up and running using &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React.js&lt;/a&gt; and &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;. I am expecting this to be a multipart tutorial as we go through building a job board for my local &lt;a href=&quot;http://www.joshfinnie.com/blog/reactjs-tutorial-part-1/&quot;&gt;Node.js Meetup Group&lt;/a&gt;, though I am not sure how long these tutorials will last. I hope you enjoy them and if so feel free to share them! You can follow along with my progression on my jobs.nodedc.com &lt;a href=&quot;https://github.com/joshfinnie/jobs.nodedc.com&quot;&gt;github repo&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;欢迎来到我的教程，本教程将讲述如何利用&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React.js&lt;/a&gt;和&lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;搭建一个网站。通过这几部分的教程，期望我们能够一起为我的本地&lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;见面群（Node.js Meetup Group）搭建一个工作布告栏，尽管我都不确定这些教程会持续多久。期望你能够享受并且尽情地分享这些教程！你可以在jobs.nodedc.com &lt;a href=&quot;https://github.com/joshfinnie/jobs.nodedc.com&quot;&gt;github repo&lt;/a&gt;上随时查看我的进展。&lt;/p&gt;&lt;h2 id=&quot;getting-started-with-express--从-express-开始&quot;&gt;Getting Started with Express | 从 Express 开始&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;In this tutorial I am going to assume you have Node.js installed since it is becomming standard in so many of today’s build processes. If you do not have it installed, check out &lt;a href=&quot;http://howtonode.org/how-to-install-nodejs&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在本次教程中，我假设你已经安装好Node.js，因为它已经在很多现代构建流程中成为标准了。如果你还没有安装好，参考&lt;a href=&quot;http://howtonode.org/how-to-install-nodejs&quot;&gt;这篇文章&lt;/a&gt;吧！&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The first thing we are going to do is set up a standard &lt;a href=&quot;http://expressjs.com/&quot;&gt;express&lt;/a&gt; app. This is easy do to through &lt;code class=&quot;highlighter-rouge&quot;&gt;express-generator&lt;/code&gt;. Install &lt;code class=&quot;highlighter-rouge&quot;&gt;express-generator&lt;/code&gt; using the following command:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我们要做的第一件事就是搭建一个标准的&lt;a href=&quot;http://expressjs.com/&quot;&gt;express&lt;/a&gt;应用，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;express-generator&lt;/code&gt;能够轻松快速生成相应的文件目录（译者注：脚手架scaffold）。使用以下命令安装：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;express-generator &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Once installed, we are going to create a basic express app. To generate this express app, we run the following command:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;安装好之后就可以构建一个基础的express应用了，使用以下命令：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;express jobs.nodedc.comcreate : jobs.nodedc.comcreate : jobs.nodedc.com/package.jsoncreate : jobs.nodedc.com/app.jscreate : jobs.nodedc.com/publiccreate : jobs.nodedc.com/public/javascriptscreate : jobs.nodedc.com/public/stylesheetscreate : jobs.nodedc.com/public/stylesheets/style.csscreate : jobs.nodedc.com/routescreate : jobs.nodedc.com/routes/index.jscreate : jobs.nodedc.com/routes/users.jscreate : jobs.nodedc.com/public/imagescreate : jobs.nodedc.com/viewscreate : jobs.nodedc.com/views/index.jadecreate : jobs.nodedc.com/views/layout.jadecreate : jobs.nodedc.com/views/error.jadecreate : jobs.nodedc.com/bincreate : jobs.nodedc.com/bin/www&lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;dependencies:    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;jobs.nodedc.com &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;run the app:    &lt;span class=&quot;nv&quot;&gt;$ DEBUG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jobs.nodedc.com ./bin/www&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;With the output of &lt;code class=&quot;highlighter-rouge&quot;&gt;express-generator&lt;/code&gt; we can see that we are well on our way to what we need from Express. This is a bit overkill, but with a few small changes, we should have a working express app which will then run (eventually) our API and serve our React site.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;从&lt;code class=&quot;highlighter-rouge&quot;&gt;express-generator&lt;/code&gt;的输出中我们可以看到我们正在构建所需要的Express部件。这有一点矫枉过正，但有一些小的变化，我们应该要有一个可以工作的express程序来（最终）运行我们的API，从而服务于我们的React网站。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Let’s start up this generated site and see what we get. Below is the image that you should see in your browser (at &lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000&lt;/a&gt;) if you are following along.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;让我们启动已经生成的网站看看吧，从下面的图片你可以从浏览器中(&lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000&lt;/a&gt;) 看到以下内容。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://www.joshfinnie.com/assets/images/blog/hello-express.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;I then recommend going through the generated code and cleaning it up a little bit. We will not need the &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; routes so I just deleted them. I also expanded on the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; some to add a description and keywords as well as changed the version to something more reasonable.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我建议查看已生成的代码，然后清除一些不必要的东西。我们不需要&lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;路由就删掉，然后需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;中添加一些描述、关键字和版本，使之更加合理。&lt;/p&gt;&lt;h2 id=&quot;adding-reactjs--添加-reactjs&quot;&gt;Adding React.js | 添加 React.js&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Now that we have a pretty basic express application as our backend, we are now going to jump into adding react. Adding react is not that difficult, but there are a few ways of doing things. Since we are already within a node.js app, I am going to go down the route of building our jsx scripts into javascript. To get ready for this, we need to install the &lt;code class=&quot;highlighter-rouge&quot;&gt;react-tools&lt;/code&gt; node package. You can do that by the following command:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;既然我们已经有了一个漂亮的基础Express应用作为后端，现在就开始添加React。添加React并不困难，这里有几种能够实现。由于我们已经有了node.js应用，我们就继续添加相应的工具来将jsx脚本编译成标准JavaScript。为此，我们需要安装&lt;code class=&quot;highlighter-rouge&quot;&gt;react-tools&lt;/code&gt;这个node包，使用如下命令：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install react-tools --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;We add the &lt;code class=&quot;highlighter-rouge&quot;&gt;--save-dev&lt;/code&gt; flag to make sure the &lt;code class=&quot;highlighter-rouge&quot;&gt;react-tools&lt;/code&gt; package is saved as a development requirement in our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;. Now, to convert the jsx scripts to javascript, we just have to run the following command:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--save-dev&lt;/code&gt;标志可以保证&lt;code class=&quot;highlighter-rouge&quot;&gt;react-tools&lt;/code&gt;这个包能够作为开发环境依赖添加到我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;里面。现在我们可以使用这样的命令将jsx脚本编译成标准JavaScript：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./node_modules/react-tools/bin/jsx public/javascripts/src/ public/javascripts/build/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You could also install &lt;code class=&quot;highlighter-rouge&quot;&gt;react-tools&lt;/code&gt; globlally if you’d like.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 你也可以全局安装&lt;code class=&quot;highlighter-rouge&quot;&gt;react-tools&lt;/code&gt;。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Next we want to &lt;a href=&quot;http://facebook.github.io/react/downloads/react-0.12.2.zip&quot;&gt;download React 0.12.2&lt;/a&gt;, extract, and move &lt;code class=&quot;highlighter-rouge&quot;&gt;react-0.12.2/build/react.min.js&lt;/code&gt; to our &lt;code class=&quot;highlighter-rouge&quot;&gt;/public/javascripts/build/&lt;/code&gt; directory. Let’s add React.js to our template! The default templating language for &lt;code class=&quot;highlighter-rouge&quot;&gt;express-generator&lt;/code&gt; is &lt;a href=&quot;http://jade-lang.com/&quot;&gt;Jade&lt;/a&gt;. It is a bit difficult to comprehend at first (and &lt;code class=&quot;highlighter-rouge&quot;&gt;express-generator&lt;/code&gt; allows you to substitute either &lt;a href=&quot;http://www.embeddedjs.com/&quot;&gt;EJS&lt;/a&gt; or &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars&lt;/a&gt; if you are more comfortable with those), but I find it super simplistic!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;接下来，我们下载&lt;a href=&quot;http://facebook.github.io/react/downloads/react-0.12.2.zip&quot;&gt;React 0.12.2&lt;/a&gt;，解压，移动&lt;code class=&quot;highlighter-rouge&quot;&gt;react-0.12.2/build/react.min.js&lt;/code&gt;到&lt;code class=&quot;highlighter-rouge&quot;&gt;/public/javascripts/build/&lt;/code&gt;目录。然后添加React.js到我们的模板中！&lt;code class=&quot;highlighter-rouge&quot;&gt;express-generator&lt;/code&gt;的默认模板语言是&lt;a href=&quot;http://jade-lang.com/&quot;&gt;Jade&lt;/a&gt;。（&lt;code class=&quot;highlighter-rouge&quot;&gt;express-generator&lt;/code&gt;还允许你使用&lt;a href=&quot;http://www.embeddedjs.com/&quot;&gt;EJS&lt;/a&gt;或者&lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars&lt;/a&gt;，如果你更喜欢他们的话。）这在一开始可能会有点理解困难，但是我发现这特别简单。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;To add &lt;code class=&quot;highlighter-rouge&quot;&gt;react.min.js&lt;/code&gt; to our templates, we just append it to the bottom of our &lt;code class=&quot;highlighter-rouge&quot;&gt;views/layout.jade&lt;/code&gt; file as below:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;react.min.js&lt;/code&gt;添加到模板中，然后我们可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;views/layout.jade&lt;/code&gt;文件的底部添加：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-jade&quot;&gt;doctype htmlhtmlhead    title= title    link(rel=&#39;stylesheet&#39;, href=&#39;/stylesheets/style.css&#39;)body    block content    script(src=&#39;/javascripts/build/react.min.js&#39;)&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;  &lt;p&gt;Rerunning &lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG=jobs.nodedc.com ./bin/www&lt;/code&gt; we should see our starting screen again, but now it’s React.js ready. Now our templates should be ready for our React Components!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;重新运行&lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG=jobs.nodedc.com ./bin/www&lt;/code&gt;，应该可以看到跟开始时一模一样的内容，但是React.js已经准备好了。现在模板就为React模块做好准备啦！&lt;/p&gt;&lt;h2 id=&quot;adding-a-reactjs-component--添加一个-reactjs-组件&quot;&gt;Adding a React.js Component | 添加一个 React.js 组件&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Now that we have our express app running react.js, we can now start the process of writing our react application. In this part of the tutorial, we are only going to do a basic “Hello World” component, but next time we will start developing the components we need for our job board. So first, let’s create our component.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;既然我们已经准备好了可以运行react.js的express应用，我们现在可以开始编写React应用了。在这部分的教程中，我们只是写一个最基础的“Hello World”组件，但是下一次我们会正式开始开发所需要的工作布告栏。让我们开始吧。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;The first thing we want to do is create the &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; needed for react. In the &lt;code class=&quot;highlighter-rouge&quot;&gt;views/index.jade&lt;/code&gt; file, add a div with an &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; of “example”. With jade, your &lt;code class=&quot;highlighter-rouge&quot;&gt;index.jade&lt;/code&gt; file should look like this:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;第一件要做的是就是为react创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;标签。在&lt;code class=&quot;highlighter-rouge&quot;&gt;views/index.jade&lt;/code&gt;文件中添加一个div，&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;为”example”。&lt;code class=&quot;highlighter-rouge&quot;&gt;index.jade&lt;/code&gt;文件如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-jade&quot;&gt;extends layoutblock content    #example&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;  &lt;p&gt;Next we want to create a simple react.js component in our &lt;code class=&quot;highlighter-rouge&quot;&gt;public/javascripts/src/&lt;/code&gt; folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;helloworld.jsx&lt;/code&gt;. This component should look like:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;接下来我们在&lt;code class=&quot;highlighter-rouge&quot;&gt;public/javascripts/src/&lt;/code&gt;目录中创建一个简单的react.js组件，&lt;code class=&quot;highlighter-rouge&quot;&gt;helloworld.jsx&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;example&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Because we are using the &lt;code class=&quot;highlighter-rouge&quot;&gt;react-tools&lt;/code&gt; node package, we want to add the compiled javascript code to our templates. Change you &lt;code class=&quot;highlighter-rouge&quot;&gt;views/layout.jade&lt;/code&gt; file to the following:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;由于我们使用的&lt;code class=&quot;highlighter-rouge&quot;&gt;react-tools&lt;/code&gt;包，所以我们将添加已经编译好的JavaScript代码。改变&lt;code class=&quot;highlighter-rouge&quot;&gt;views/layout.jade&lt;/code&gt;文件：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-jade&quot;&gt;doctype htmlhtmlhead    title= title    link(rel=&#39;stylesheet&#39;, href=&#39;/stylesheets/style.css&#39;)body    block content    script(src=&#39;/javascripts/build/react.min.js&#39;)    script(src=&#39;/javascripts/build/helloworld.js&#39;)&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;  &lt;p&gt;And run the &lt;code class=&quot;highlighter-rouge&quot;&gt;react-tools&lt;/code&gt; package to compile our component with the following command:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;react-tools&lt;/code&gt;编译：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./node_modules/react-tools/bin/jsx &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; jsx public/javascripts/src/ public/javascripts/build/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Remember to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;-x&lt;/code&gt; flag as we used the extension &lt;code class=&quot;highlighter-rouge&quot;&gt;.jsx&lt;/code&gt; for our jsx code. Now running the express server again we should see:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;记得使用&lt;code class=&quot;highlighter-rouge&quot;&gt;-x&lt;/code&gt;标志，因为我们使用&lt;code class=&quot;highlighter-rouge&quot;&gt;.jsx&lt;/code&gt;作为代码文件扩展名，现在运行重新运行服务器：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://www.joshfinnie.com/assets/images/blog/hello-react.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;There we have it. A pretty simple Hello World app with React.js and Express.js. Next we will clean up this process with some automation help from &lt;a href=&quot;http://gulpjs.com/&quot;&gt;gulp&lt;/a&gt; and start building react.js components to help us with our NodeDC job board!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;至此，我们使用React.js和Express.js搭建了一个简单的Hello World应用。下一次我们会使用&lt;a href=&quot;http://gulpjs.com/&quot;&gt;gulp&lt;/a&gt;来自动化进行整个搭建过程，然后正式开始使用react.js组件来帮助我们搭建NodeDC工作布告栏。&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;技术系列笔记均已迁移至GitBook，更多&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;的内容请到：&lt;a href=&quot;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&quot;&gt;http://jimmylv.gitbooks.io/learning-react-js/content/reactjs_tutorial/reactjs_tutorial_part_1.html&lt;/a&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/new-state-in-library",
            "title"      : "出走寝室：在图书馆的所思所想",
            "category"   : "思考",
            "tags"       : "写作, 人性",
            "url"        : "/2015-05-27-new-state-in-library/",
            "path"       : "_posts/思考/2015-05-27-new-state-in-library.md",
            "next"       : "/2015-05-31-reactjs_tutorial_part_1/",
            "previous"   : "/2015-05-23-wallpaper-by-liqing-02/",
            "date"       : "2015-05-27 00:00:00 +0000",
            "shortdate"  : "May 27, 2015",
            "content"    : "&lt;h2 id=&quot;新感觉&quot;&gt;新感觉&lt;/h2&gt;&lt;p&gt;其实不出来，不到图书馆走一趟，我还真不知道自己的电脑已经脏成这个样子了，真的是让自己吃惊了一把，而且忍受不了自己迫不及待地清理了一下。&lt;/p&gt;&lt;p&gt;坐在这里感觉好多了，莫名的轻松感，并且开始有信心去做要做的事情，目前最大的事情就是毕业论文，相信在不同的地方有不同的状态去完成它！&lt;/p&gt;&lt;h2 id=&quot;mac-os-x&quot;&gt;Mac OS X&lt;/h2&gt;&lt;p&gt;刚刚保存文件的时候tag系统把我吓尿了，简直就是梦想中的功能，如图所示：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2b8ybg78j319s174gsd.jpg&quot; alt=&quot;OS X Tag&quot; /&gt;&lt;/p&gt;&lt;p&gt;OS X原生支持为每个文件建立tag的功能，所以纯文本+标签的笔记系统完美建立起来啦，哈哈哈，根本不需要依赖任何一个大型软件，各个功能都解耦成功，都可以切换和选用在该领域做得最好的产品。&lt;/p&gt;&lt;p&gt;但是需要考虑的一个问题是这些tag能不能同步到其他设备？&lt;/p&gt;&lt;h2 id=&quot;产品解耦&quot;&gt;产品解耦&lt;/h2&gt;&lt;p&gt;人类与机器最大的差别就是，羁绊。人作为群体性动物，不同的人之间往往耦合度极高，存在各种各样的关系将人们结合在一起。那这样的东西是不是束缚呢？以后再说，喜忧参半。&lt;/p&gt;&lt;p&gt;产品作为一种工具，这里讨论的特定于某一种形而上的软件，处于产品之下的代码。借鉴于软件开发的思想，不同模块的代码之间应该进行解耦，不能够互相依赖，那么在生活中使用工具的时候，是不是也应该尽量选取耦合度比较低的产品呢？&lt;/p&gt;&lt;p&gt;锤子就是锤子，它到底应不应该做成一个手机呢？是注重于小而美的钉钉子功能，还是加入操作系统、打电话、发短信这样全而重的功能呢？这就是一个问题，当你决定依赖于某一特定产品的时候，随着时间的推移，你总是会冒出各种不同的新需求，从而期望这个产品能够刚好开发出这样的功能满足自己。&lt;/p&gt;&lt;h2 id=&quot;功能依赖&quot;&gt;功能依赖&lt;/h2&gt;&lt;p&gt;往往理想很丰满，现实很骨感，当你越发依赖它的时候，你就越发觉得它缺胳膊少腿的没有满足你想要的需求，怎么这个同步功能也不可以，这个编辑功能太难用了，诸如此类。&lt;/p&gt;&lt;p&gt;所以说，最佳的方案就是绝不依赖某一单一产品，因为世上本就没有绝对完美到能够满足你所有需求的东西。最佳的策略就是寻找最本质的东西：我思考的是内容，我写的是文字，存储的就是纯文本。抽取这些文件之后，需要做的可能就是同步呀，加标签呀，树形管理呀，不同样式预览呀，诸如此类。而每一种，都有额外的不同产品来履行其本职工作。&lt;/p&gt;&lt;p&gt;准确来说，Git只是一个版本管理工具，一切版本信息都保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;.git/&lt;/code&gt;文件夹里面。如果只需要同步，可以直接使用Dropbox就好了，只要同步了&lt;code class=&quot;highlighter-rouge&quot;&gt;.git/&lt;/code&gt;文件夹，你就有了想要的版本信息呀。当然也可以使用GitHub，优势就是能够直接在GitHub网站上看到自己的版本记录啦，从而就构成了可同步的版本管理工具，美其名曰远程仓库，这简直就是两种功能的完美结合，同时依赖于两种需求，工具上却互不耦合。&lt;/p&gt;&lt;h2 id=&quot;需求和爱情&quot;&gt;需求和爱情&lt;/h2&gt;&lt;p&gt;就像爱上一个人，最开始的时候可能就只是因为她的某一个特点，比如爱笑，刚好满足了你喜欢好看的笑容这样一个需求。可是随着你们在一起之后，你越发疯狂，不可理喻无理取闹得提出了各种其他方面的要求（这里指的&lt;strong&gt;绝!对!不!是!&lt;/strong&gt;佳佳），比如来大姨妈了为什么不关心我，比如这么晚了为什么不催我睡觉，比如今天早上为什么忘记跟我说晚安，诸如此类，还要美其名曰我其实只有那一个“潜在”的需求：你是不是还爱我？&lt;/p&gt;&lt;h2 id=&quot;图床&quot;&gt;图床&lt;/h2&gt;&lt;p&gt;突然想插入图片，最佳流程应该是，截图自动保存到Dropbox，然后在Dropbox里面分享公开链接，从而建立自己图床外链。&lt;/p&gt;&lt;p&gt;由于Dropbox被墙，想到两个解决方案：&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;曾经看到过相关资料可以设置链接DNS，国内可访问。&lt;/li&gt;  &lt;li&gt;直接使用Flicker分享图片，值得一试。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;然后进而觉得GIF动图的效果可能更好，所以就想去尝试和挑选一款GIF录制软件了。&lt;/p&gt;&lt;h2 id=&quot;断网&quot;&gt;断网&lt;/h2&gt;&lt;p&gt;像以前有网的时候我是绝对会忍不住诱惑就陷入寻找GIF软件的深渊了，然后一下午就又过去了。&lt;/p&gt;&lt;p&gt;一款软件是有学习成本的，而寻找最好的软件也是需要花费时间精力的，每每这种时候我都会花费大量时间在寻找和对比各种工具上，由此而忘记了自己要写东西的初衷。&lt;/p&gt;&lt;p&gt;这种行为就像一个原始人一样，总是希望囤积最多的粮食，总是害怕最好的东西不属于自己。&lt;/p&gt;&lt;h2 id=&quot;享受&quot;&gt;享受&lt;/h2&gt;&lt;p&gt;当某件事情过度之后，抽出一定时间去做与之相反的事情是一种享受，就像现在坐在图书馆享受着断网的日子，特别是在尝试过联网却不得结果的时候，辗转之间，尤为轻松。&lt;/p&gt;&lt;p&gt;又或者是，尝试过那么多之后终于找到最为合适的方式是一种享受，就像现在以最为美好的方式写作，画面简直太沉浸太完美。只关注于写些什么，行文之间就是自己的思考，这就是快乐呀。&lt;/p&gt;&lt;h2 id=&quot;移动端&quot;&gt;移动端&lt;/h2&gt;&lt;p&gt;然后又想到写作的种种方面，在移动端如何写？本来在手机/iPad上写东西就不是一件轻松的事情，因为虚拟键盘的原因根本就无法很好地进行文字输入。&lt;/p&gt;&lt;p&gt;更好的方式或许是语音输入然后转化为文字，这里需要考虑到环境的影响，比如图书馆你没法说话或者是在嘈杂的地方语音识别不准，当然另外一个因素就是语音识别技术本身的先进性，如果说识别出一大堆错误照样需要人为输入文字修改，那岂不是违背初衷了。&lt;/p&gt;&lt;p&gt;总之，在移动端是不可能出现能够超越PC端的码字体验，如果并没有这样的环境，那为什么要做多余的事情，试试在手机上做一下word排版？所以说，手机上最好就是快速记录自己的思考内容，如何良好的组织和发散用户思维才是这个产品最重要的核心价值，这里想到的就是思维导图和树形workflowy等等工具，又或者依旧是纯文本+特定标签。&lt;/p&gt;&lt;h2 id=&quot;思维组织&quot;&gt;思维组织&lt;/h2&gt;&lt;p&gt;组织思维的产品应该是怎么样的呢？&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;提问式的？九宫格式提出几个方面引发思考？那为什么要限定数量？&lt;/li&gt;  &lt;li&gt;GTD流程式？一定要注重引导用户操作，用户只关心思维思考，最后去做（还是什么）？&lt;/li&gt;  &lt;li&gt;思维导图式？移动端的操作输入依旧很成问题，格式感太重。&lt;/li&gt;  &lt;li&gt;纯文本语法式？书写的时候只需要加入@、#、!、&amp;amp;等等的语法标签，然后组织和生成新的格式？有种编程语言编译器/解释器的感觉了。&lt;/li&gt;  &lt;li&gt;关键词联接式？&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;同步&quot;&gt;同步&lt;/h2&gt;&lt;p&gt;在移动端的思维记录永远都是很简单的内容和结构，最后需要转化为更详细的文字篇幅的时候就在PC端处理吧，所以说记录在移动端，重新加工在PC端。目前只需要在EverMemo里面输入纯文字+语法标签，就可以同步到EverNote里面，然后再PC端就可以人为解释自己所设定的具有特定含义的语法标签。&lt;/p&gt;&lt;p&gt;同步到EverNote里面之后就能够在sublime里面打开从而写作啦，又回到这样一个完美的写作环境，真是开心，来个颜文字：~(≧▽≦)/~啦啦啦&lt;/p&gt;&lt;h2 id=&quot;平衡&quot;&gt;平衡&lt;/h2&gt;&lt;p&gt;凡事有好有坏，正反两面不过利弊，尚且每个人都独一无二有自己的看法。我们这个时代无法离开网络，也无法离开社交圈，甚至无法离开游戏，只是在做这些事情的时候如何掌握其中的度：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;如何去平衡网络连接与断开的时间，在不同的时候做不同的事情。&lt;/li&gt;  &lt;li&gt;如何去平衡玩游戏娱乐或发泄或结交朋友和远离游戏删除游戏的时间。&lt;/li&gt;  &lt;li&gt;如何去平衡在什么样状态做什么样的事，一种是偏执，一种是执着。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;捷径&quot;&gt;捷径&lt;/h2&gt;&lt;p&gt;这真的是本次思维之旅的最后一个话题了，好累好累呀，脑袋要炸了！&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;在不同的精神状态下做不同的事情（为啥要在疲惫的时候学习，精力充沛的时候洗衣服？）&lt;/li&gt;  &lt;li&gt;在不同的兴趣爱好下做不同的事情（为啥要忙碌于写文字报告而不是创造理想的完美软件？）&lt;/li&gt;  &lt;li&gt;在不同的目标导向下做不同的事情（为啥要花费大量精力在毕设产品上而不是毕业论文上？）&lt;/li&gt;  &lt;li&gt;在不同的团队群体中做不同的事情（为啥要去做全英文Lead而不专心于写代码技术擅长？）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;=&amp;gt; 防止资源的不必要浪费&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;新感觉&quot;&gt;新感觉&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/wallpaper-by-liqing-02",
            "title"      : "吕立青拍的壁纸系列（二）",
            "category"   : "生活",
            "tags"       : "爱情, 摄影",
            "url"        : "/2015-05-23-wallpaper-by-liqing-02/",
            "path"       : "_posts/生活/2015-05-23-wallpaper-by-liqing-02.md",
            "next"       : "/2015-05-27-new-state-in-library/",
            "previous"   : "/2015-05-17-how-to-install-nodejs-correctly/",
            "date"       : "2015-05-23 00:00:00 +0000",
            "shortdate"  : "May 23, 2015",
            "content"    : "&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2ap6w2zij30w01hck75.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-162617.jpg&quot; /&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2ap9grwxj30w01hcwvz.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-162654.jpg&quot; /&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2apenuw0j30w01hce0u.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-162720.jpg&quot; /&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2apkqb4ij30w01hch3q.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-162738.jpg&quot; /&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2aplp5hij30w01hcndf.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-162805.jpg&quot; /&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2apodqn5j30w01hc188.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-163002.jpg&quot; /&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2ap6w2zij30w01hck75.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-162617.jpg&quot; /&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2ap9grwxj30w01hcwvz.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-162654.jpg&quot; /&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2apenuw0j30w01hce0u.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-162720.jpg&quot; /&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2apkqb4ij30w01hch3q.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-162738.jpg&quot; /&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2aplp5hij30w01hcndf.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-162805.jpg&quot; /&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2apodqn5j30w01hc188.jpg&quot; alt=&quot;//o7mw3gkkh.qnssl.com//S50616-163002.jpg&quot; /&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/how-to-install-nodejs-correctly",
            "title"      : "Node.js的正确安装与相关工具（Mac OS X）",
            "category"   : "前端",
            "tags"       : "JavaScript, NodeJS",
            "url"        : "/2015-05-17-how-to-install-nodejs-correctly/",
            "path"       : "_posts/前端/2015-05-17-how-to-install-nodejs-correctly.md",
            "next"       : "/2015-05-23-wallpaper-by-liqing-02/",
            "previous"   : "/2015-05-14-learning-reactjs/",
            "date"       : "2015-05-17 00:00:00 +0000",
            "shortdate"  : "May 17, 2015",
            "content"    : "&lt;h2 id=&quot;版本分裂&quot;&gt;版本分裂&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/&quot;&gt;node.js&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://io.js.org/en/index.html&quot;&gt;io.js&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;nvm&quot;&gt;nvm&lt;/h2&gt;&lt;p&gt;node version manager: 版本管理工具，可以同时安装不同的node版本包括io.js，并且随意切换相应的版本，甚至于特意使用某一版本的node来运行某个js文件。&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nvm &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;/ls-remote &lt;span class=&quot;c&quot;&gt;#列出已经安装的/远程仓库中的所有版本&lt;/span&gt;nvm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;/uninstall &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;version] &lt;span class=&quot;c&quot;&gt;#安装/卸载某个版本&lt;/span&gt;nvm current &lt;span class=&quot;c&quot;&gt;#显示现在使用的版本，与node -v功能一样&lt;/span&gt;nvm use &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;version] &lt;span class=&quot;c&quot;&gt;#切换版本&lt;/span&gt;nvm which &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;version] &lt;span class=&quot;c&quot;&gt;#显示该版本所安装的位置&lt;/span&gt;nvm &lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;default &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;version] &lt;span class=&quot;c&quot;&gt;#在所有的shell都使用这个默认版本&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;npm&quot;&gt;npm&lt;/h2&gt;&lt;p&gt;node package manager: 包管理工具，安装和管理其他依赖库。&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;package] &lt;span class=&quot;c&quot;&gt;#全局安装（如mocha）&lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;package] &lt;span class=&quot;c&quot;&gt;#安装到当前文件夹（如chai）&lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#按照package.json安装相关依赖&lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;package] &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#自动把模块和版本号添加到dependencies部分&lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;package] &lt;span class=&quot;nt&quot;&gt;--save--dev&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#自动把模块和版本号添加到devdependencies部分&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;用于区别开发依赖模块和产品依赖模块，devDepandencies主要是配置测试框架， 例如jshint、mocha。&lt;/p&gt;&lt;h2 id=&quot;坑安装包&quot;&gt;坑：安装包&lt;/h2&gt;&lt;p&gt;如果从官方网站直接下载安装包安装的话会有一个问题：我安装io.js之后，它会在io.js和node的目录之间直接建立软链接（symlinks），从而导致了nvm怎么也不能把io.js切换到原来node.js版本&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ll /usr/local/bin/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;node,io.js&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;16864 &lt;span class=&quot;nt&quot;&gt;-rwxrwxr-x&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; 1 root root 17268324 Jan 14 08:29 /usr/local/bin/iojs    0 lrwxrwxrwx. 1 root root        4 Jan 14 08:29 /usr/local/bin/node -&amp;gt; iojs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;mac-os-x下如何正确安装node&quot;&gt;Mac OS X下如何正确安装node&lt;/h2&gt;&lt;h3 id=&quot;通过brew安装nvm&quot;&gt;通过brew安装nvm&lt;/h3&gt;&lt;p&gt;先使用brew安装好nvm（此时你还没有node呢，怎么&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install nvm -g&lt;/code&gt;）:&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew update &lt;span class=&quot;c&quot;&gt;#更新软件源（就像sudo apt-get update）&lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nvm &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;在安装完毕之后需要根据terminal里的提示做一下操作：&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; ~/.nvm &lt;span class=&quot;c&quot;&gt;#建立一个nvm版本库，之后安装的node版本都会在这里&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;brew &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt; nvm&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/nvm-exec ~/.nvm/ &lt;span class=&quot;c&quot;&gt;#拷贝brew目录中的nvm-exec执行文件到新建的目录&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;然后把以下的内容添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt;中，这样就可以在终端中使用bash和zsh命令行工具啦，不然会显示&lt;code class=&quot;highlighter-rouge&quot;&gt;command not found&lt;/code&gt;。&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NVM_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/.nvm&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;brew &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt; nvm&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/nvm.sh &lt;span class=&quot;c&quot;&gt;#实际上的目录是/usr/local/opt/nvm/nvm.sh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;通过nvm安装node&quot;&gt;通过nvm安装node&lt;/h3&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nvm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;0.12.3 &lt;span class=&quot;c&quot;&gt;#首先安装好想要的版本&lt;/span&gt;nvm &lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;default 0.12.3 &lt;span class=&quot;c&quot;&gt;#然后设置默认的node版本以便于在所有shell中使用&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config get prefix&lt;/code&gt;命令可以看到安装的路径是&lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/Thoughtworks/.nvm/versions/node/v0.12.3&lt;/code&gt;，所以nvm是直接把不同的node版本安装在先前所建立的.nvm文件夹中，易于管理。&lt;/p&gt;&lt;h3 id=&quot;通过npm安装依赖库&quot;&gt;通过npm安装依赖库&lt;/h3&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; npm@latest &lt;span class=&quot;c&quot;&gt;#首先更新一下npm到最新版&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;最好不要使用sudo安装全局库，所以需要更改一下npm工具的权限，就不用每次都需要输入密码啦&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt; ~/.npm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;切换软件源&quot;&gt;切换软件源&lt;/h3&gt;&lt;p&gt;由于墙的问题，有时候npm install会在node-gyp rebuild那里卡很久，原因在于node-gyp编译时候需要Node.js源码来提供头文件，所以它会先尝试下载Node.js，但是由于下载速度奇慢所以就卡住不动了。&lt;/p&gt;&lt;p&gt;为了获得更快的库安装速度，我们可以切换到淘宝的软件源，淘宝说与官方的同步频率为10分钟，所以还是相当可靠的。&lt;/p&gt;&lt;p&gt;可以使用我们定制的cnpm命令行工具代替默认的npm:&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; cnpm &lt;span class=&quot;nt&quot;&gt;--registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://registry.npm.taobao.orgcnpm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;package] &lt;span class=&quot;c&quot;&gt;#使用cnpm来安装对应的库&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;http://www.freair.com/bbs/read.php?tid=1039&quot;&gt;Mac 下如何删除 卸载 nodejs&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://howtonode.org/introduction-to-npm&quot;&gt;Introduction to npm - How To Node - NodeJS&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/getting-started/fixing-npm-permissions&quot;&gt;03 - Fixing npm permissions _ npm Documentation&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.johnpapa.net/how-to-use-npm-global-without-sudo-on-osx/&quot;&gt;How to use npm global without sudo on OSX&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24585261/nvm-keeps-forgetting-node-in-new-terminal-session&quot;&gt;node.js - nvm keeps &lt;em&gt;forgetting&lt;/em&gt; node in new terminal session - Stack Overflow&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/28017374/what-is-the-suggested-way-to-install-brew-node-js-io-js-nvm-npm-on-os-x&quot;&gt;osx - What is the suggested way to install brew, node.js, io.js, nvm, npm on OS X_ - Stack Overflow&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;https://www.binarysludge.com/2015/01/14/how-to-uninstall-io-js-or-io-js-and-node-js-together/&quot;&gt;How to uninstall io.js (or io.js and Node.js together)&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://blog.modulus.io/install-nodejs-and-iojs-together-safely&quot;&gt;Install Node.js and io.js Together (safely)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;h2 id=&quot;版本分裂&quot;&gt;版本分裂&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/learning-reactjs",
            "title"      : "React.js 复习笔记：组件组合与复用",
            "category"   : "前端",
            "tags"       : "React, Rethink",
            "url"        : "/2015-05-14-learning-reactjs/",
            "path"       : "_posts/前端/2015-05-14-learning-reactjs.md",
            "next"       : "/2015-05-17-how-to-install-nodejs-correctly/",
            "previous"   : "/2015-05-12-intellectual-and-single-entrance/",
            "date"       : "2015-05-14 00:00:00 +0000",
            "shortdate"  : "May 14, 2015",
            "content"    : "&lt;h2 id=&quot;why-react&quot;&gt;Why React?&lt;/h2&gt;&lt;p&gt;React的创建是为了数据的频繁交互：通过组件化轻松展现数据；数据改变时，自动更新UI，并且只更新有改变的部分。&lt;/p&gt;&lt;h2 id=&quot;组件入门&quot;&gt;组件入门&lt;/h2&gt;&lt;h3 id=&quot;创建组件&quot;&gt;创建组件&lt;/h3&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var component = React.createClass()&lt;/code&gt;用来创建一个组件类，组件类似于函数，可以把它看作有着props和state状态并且可以返回（&lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt;）HTML结构的函数。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;React.render()&lt;/code&gt;将React的模板转化为HTML，并插入到相应的DOM结构中，&lt;code class=&quot;highlighter-rouge&quot;&gt;React.render&lt;/code&gt;方法可以渲染HTML结构，也可以渲染React组件。&lt;/p&gt;&lt;h3 id=&quot;渲染html标签&quot;&gt;渲染HTML标签&lt;/h3&gt;&lt;p&gt;声明变量采用首字母小写&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myDivElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myDivElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;渲染react组件&quot;&gt;渲染React组件&lt;/h3&gt;&lt;p&gt;声明变量采用首字母大写&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*...*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;关于jsx&quot;&gt;关于JSX&lt;/h2&gt;&lt;h3 id=&quot;目的&quot;&gt;目的&lt;/h3&gt;&lt;p&gt;组件应该关注分离，而不是模板和展现逻辑分离。结构化标记和生成结构化标记的代码是紧密关联的，此外，展现逻辑一般都很复杂，使用模板语言会使展现变得笨重。&lt;/p&gt;&lt;h3 id=&quot;语法说明&quot;&gt;语法说明&lt;/h3&gt;&lt;p&gt;标签的属性class和for，需要写成className和htmlFor，因为两个属性是JavaScript的保留字和关键字，无论你是否使用JSX。&lt;/p&gt;&lt;p&gt;JSX是HTML和JavaScript混写的语法，当遇到&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;，JSX就当HTML解析，遇到&lt;code class=&quot;highlighter-rouge&quot;&gt;{&lt;/code&gt;就当JavaScript解析。&lt;/p&gt;&lt;h3 id=&quot;虚拟dom&quot;&gt;虚拟DOM&lt;/h3&gt;&lt;p&gt;React使用了内部的虚拟DOM，当数据发生改变，先在虚拟DOM中计算变化，最后将变动的部分反应到真实的DOM中。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Your name here&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toTimeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;            &lt;span class=&quot;nx&quot;&gt;It&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toTimeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;example&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;input相对于这个组件来说，是它的属性，并且没有嵌入动态的数据。而在React的设定中，属性是不可变的。&lt;/p&gt;&lt;h2 id=&quot;组件属性&quot;&gt;组件属性&lt;/h2&gt;&lt;h3 id=&quot;属性延伸&quot;&gt;属性延伸&lt;/h3&gt;&lt;p&gt;例如component组件有两个动态的属性foo和bar：&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var component = &amp;lt;Component foo={x} bar={y} /&amp;gt;;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;而实际上，有些属性可能是后续添加的，当需要拓展我们的属性的时候，定义个一个属性对象，并通过&lt;code class=&quot;highlighter-rouge&quot;&gt;{...props}&lt;/code&gt;的方式引入，React会帮我们拷贝到组件的props属性中。&lt;/p&gt;&lt;p&gt;可以使用属性延伸覆盖原来的属性值：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zzz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xxx&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yyy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;style属性&quot;&gt;style属性&lt;/h3&gt;&lt;p&gt;在React中写行内样式时，要这样写，不能采用引号的书写方式&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;xxxxx&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;ui交互&quot;&gt;UI交互&lt;/h2&gt;&lt;h3 id=&quot;thisprops&quot;&gt;this.props&lt;/h3&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;this is title&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;this is content&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;this.props&lt;/code&gt;我们可以拿到组件被使用时的属性，this.props就是组件的属性集合。React将组件的子节点封装到了children属性中，当子节点只有一个的时候直接通过&lt;code class=&quot;highlighter-rouge&quot;&gt;this.props.children&lt;/code&gt;获取子节点的内容。当子节点的个数大于1时，&lt;code class=&quot;highlighter-rouge&quot;&gt;this.props.children&lt;/code&gt;返回的是一个数组。&lt;/p&gt;&lt;h3 id=&quot;thisstate&quot;&gt;this.state&lt;/h3&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this.state&lt;/code&gt;是同UI交互最重要的属性，this指向组件的实例。React将UI简单的看作状态机，拥有各种各样的状态，并在各种状态间切换，这样很容易保持UI的一致性。在React中，你只要改变组件的状态，就会重新渲染UI，React会在最有效的方式下更新DOM。通过调用&lt;code class=&quot;highlighter-rouge&quot;&gt;setState(data, callback)&lt;/code&gt;方法，改变状态，就会触发React更新UI。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ColorButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;getInitialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;green&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 点击按钮，切换按钮的颜色：&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;green&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;red&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;green&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ColorButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getInitialState&lt;/code&gt;是用来初始化state，&lt;code class=&quot;highlighter-rouge&quot;&gt;handleClick&lt;/code&gt;是用来处理我们点击事件的，如果想要拿到当前操作的DOM，通过参数event获取。&lt;/p&gt;&lt;h3 id=&quot;两种属性的运用&quot;&gt;两种属性的运用&lt;/h3&gt;&lt;p&gt;大部分的组件应该从props属性中获取数据并渲染。但有的时候组件得相应用户输入，同服务器交互，这些情况下会用到state。React的官方说法是：尽可能的保持你的组件无状态化。为了实现这个目标，得保持你的状态同业务逻辑分离，并减少冗余信息，尽可能保持组件的单一职责。&lt;/p&gt;&lt;p&gt;React官方推荐的一种模式就是：构建几个无状态的组件用来渲染数据，在这些之上构建一个有状态的组件同用户和服务交互，数据通过props传递给无状态的组件。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RenderComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;data-list&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;                    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StateComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;getInitialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;xxx&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;yyy&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]};&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RenderComponent&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]});&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StateComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;React还允许我们下面的方式自定义属性的默认值：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ComponentWithDefaultProps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;getDefaultProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;default value&#39;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getDefaultProps()&lt;/code&gt;的值将会被缓存，当&lt;code class=&quot;highlighter-rouge&quot;&gt;this.props.value&lt;/code&gt;的值没有被父组件指定时，将会使用这个默认值。&lt;/p&gt;&lt;h2 id=&quot;组件组合&quot;&gt;组件组合&lt;/h2&gt;&lt;p&gt;官方示例：&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Avatar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProfilePic&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProfileLink&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProfilePic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;http://graph.facebook.com/&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/picture&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProfileLink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;http://www.facebook.com/&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Avatar&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pwh&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;example&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;上面的例子中，组件Avatar包含了组件ProfilePic和ProfileLink。在React当中，&lt;strong&gt;所有者就是可以设置其他组件props的组件&lt;/strong&gt;。说的通俗点：如果组件X出现在了组件Y的render()方法中，那么组件Y就是所有者。正如我们之前所讨论的，组件不能改变props—props应同所有者初始化它们时保持一致。&lt;/p&gt;&lt;h3 id=&quot;父子节点的关系&quot;&gt;父子节点的关系&lt;/h3&gt;&lt;p&gt;一定要弄清所有者和被所有关系，父子关系的区别。所有者和被所有者关系是针对React组件的，父子关系是针对DOM结构的。来上面的例子来说，Avatar是所有者，拥有div、ProfilePic、ProfileLink，而div和ProfilePic、ProfileLink则是父子关系。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Parent&amp;gt;&amp;lt;Child /&amp;gt;&amp;lt;/Parent&amp;gt;&lt;/code&gt;创建实例，Parent可以通过this.props.children获取到它的子内容。&lt;/p&gt;&lt;h3 id=&quot;动态子节点&quot;&gt;动态子节点&lt;/h3&gt;&lt;p&gt;在React更新DOM的过程中，子节点是根据它们渲染的顺序调节的。实际上，React改变第一个子节点的内容，然后删除最后一个节点。所以当数据来自于搜索结果或者新的组件被添加到数据流里，在这种情况下，每个子节点都需要保持唯一的标识，此时可以给每个子节点添加key属性。&lt;/p&gt;&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;})}&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ol&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;单向数据流&quot;&gt;单向数据流&lt;/h3&gt;&lt;p&gt;在React当中，数据通过props从所有者向子节点传递，这就是所谓的单向数据绑定了。所有者将它拥有的组件props绑定到它的props或者state，这个过程将会递归进行。数据改变就会通过组件到子组件再到子节点即所有的DOM节点，最终反映到UI层。&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;why-react&quot;&gt;Why React?&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/intellectual-and-single-entrance",
            "title"      : "由写作环境引发的反思：单一入口的智能化",
            "category"   : "思考",
            "tags"       : "写作, Sublime, Google, Evernote",
            "url"        : "/2015-05-12-intellectual-and-single-entrance/",
            "path"       : "_posts/思考/2015-05-12-intellectual-and-single-entrance.md",
            "next"       : "/2015-05-14-learning-reactjs/",
            "previous"   : "/2015-04-29-fight-with-gfw/",
            "date"       : "2015-05-12 00:00:00 +0000",
            "shortdate"  : "May 12, 2015",
            "content"    : "&lt;h2 id=&quot;绪论&quot;&gt;绪论&lt;/h2&gt;&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;减少操作思考成本&quot;&gt;减少操作/思考成本&lt;/h2&gt;&lt;h3 id=&quot;直达目标文本先行不用担心其他额外的事情&quot;&gt;直达目标：文本先行，不用担心其他额外的事情&lt;/h3&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;比如现在我要记笔记、写博客就只需要打开写就是了，然后存到哪里，在哪里看，在哪里改格式，都不用管，或者说不是在写之前要考虑的事情。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;目标导向，释放大脑，只需要肌肉记忆Cmd+Space打开Spotlight里面输入subl，打开了写就是，先做了再说，最重要就是“写”，剩下的事情之后再解决，内容先行。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;不用考虑文字格式，一切都是文本，只是Markdown语法，就像写代码一样顺畅和优雅，然后根据Markdown语法还可以马上转换成其他任何格式，HTML、Word、PPT、各种随意。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;至于存成&lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt;文件之后，我可以加上tag，选择不同的note直接转发到Evernote。也可以存入Dropbox，之后的查看和修改都是以文本形式的，也就是说我可以用任何与Dropbox连接的写作工具进行修改。当然也可以用文件和文件夹的方式管理，这里有一个叫Marboo的工具可以进行可视化管理，文件就是文件，显示效果就是HTML效果，只做管理功能，不参与编辑，这个理念真是太棒太纯粹。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;文本格式还有一个好处就是随处可编辑，就像代码一样，你也可以用Git来管理和记录整个写作过程，绝不会丢失任何一处你所涌现的想法，还可以任意回退到你想要的版本。还有就是结合Jekyll框架来写博客，把&lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt;文件部署到GitHub Page上就可以自动生成静态HTML了。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;技术学习笔记都会用Markdown语法以书的形式写在GitBook里面，新技术的全面了解最好能够有一个清晰良好的结构组织，而书的形式就再好不过了，就可以用章节的方式来全面管理知识架构。博客的作用主要就用来记录一些技术总结、感悟和思考等等，反正就是偶尔扯扯淡。&lt;/p&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&quot;sublime编辑器各种强大的快捷键和扩展功能&quot;&gt;Sublime编辑器：各种强大的快捷键和扩展功能&lt;/h3&gt;&lt;ol&gt;  &lt;li&gt;    &lt;p&gt;Cmd+R可以直接搜索&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;##&lt;/code&gt;标题，太喜欢这样的层级关系显示。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;最棒的就是编辑功能是用代码编辑器，就像写代码一样，当然还有很多快捷键像多处光标，词间跳转这样的功能。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;作为一个颜控和工具控，太多的主题和插件可以折腾了呀，可以预想的是到时候就自己写扩展、写工具了。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;沉浸模式，完全就是为写作而生，不管是写文本和写代码。&lt;/p&gt;  &lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;工具统一化与入口单一化&quot;&gt;工具统一化与入口单一化&lt;/h2&gt;&lt;h3 id=&quot;第二大脑印象笔记evernote&quot;&gt;第二大脑：印象笔记/Evernote&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;最初是觉得把Evernote作为信息到知识的终点，储存知识的第二大脑，然后一切资料都在这里被整理，在这里被找到。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;但是最终发现Evernote越来越卡了，打开和搜索的速度都太慢，搜索的效果其实并不好，不能够懂我到底想要什么，总之就是随着加入的东西越来越多，管理和检索知识的成本变高了。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;此处是不是要思考一下人的大脑的检索过程，人脑在搜索的时候应该是结合多方面因素比如今天的天气、情绪、处境，绝不仅仅只是一个关键词就可以了。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;并且问题出现了，大脑在你搜索之前就已经给你整理过大量的内容，而且进行了一定程度的空间/时间压缩，所以在需要的时候就能够直接给出最优/最简化的结果。&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;谷歌做搜索和做产品的思路&quot;&gt;谷歌做搜索和做产品的思路&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;Google在互联网初期的web时代以搜索起家，也是以搜索为其网络服务的第一入口，至今也保持了无比简洁的首页。Google并不像其他巨头加入了各种元素建立起所谓的门户网站，门户网站这种东西服务于为其他网站的流量导流，利益至上，再看看百度的搜索主页吧，只能呵呵。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;而Google大概是在搜索之后才会大做文章，比如根据你搜索的内容之后才会推送相应的广告，而不是一开始就在首页给你摆出广告，这实在是资源的合理分配、智能化搜索和用户体验的多重收益。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;在Chrome浏览器里面也是同样的，地址栏不仅仅只是输入URL的，别称Omnibar，可以搜索和实现大量的操作，当你输入相应的内容，根据内容的不同智能提示相应的URL或者书签或者搜索建议。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;而单一化入口在Google的一些尝试中也不是那么简单和有效，比如Android OS最初的手机按键是四个，除了现在能够看到的之外还有第四个即搜索按钮，Google就是想把PC时代的单一入口化思路带到移动端。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;其实我是非常喜欢这种为手机的搜索功能设立一个独立按键的思路，但可能是由于在移动设备上人们更喜欢点击图标而不是输入文字，当然这也是由于屏幕太小，虚拟键盘太难用的结果吧，更甚者，语音输入都比打字来得轻松。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;最近Google在做的事情就是将无处不在的搜索入口与移动端相连接，只需要在搜索栏输入&lt;code class=&quot;highlighter-rouge&quot;&gt;send to note&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;set a alarm&lt;/code&gt;就可以给自己的手机发送内容或者设闹钟，简直就是又一个通过单一入口、文本先行、目标导向的典范。&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;搜索与人脑的关系&quot;&gt;搜索与人脑的关系&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;搜索的概念其实是非常符合大脑逻辑的，但是纯以关键词的方式进入就远没有人类大脑那么智能化，大脑所考虑的可不仅仅是关键词。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;回到大脑的自动处理功能，大脑并不仅仅是记录下一切，而是会选择性遗忘一些我们并不需要的东西，并且会从中提取相应的结构，从而建立起最优化策略防患于未然，在我们遇到问题的时候以最快速给出答案。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;而搜索与大脑类似的功能就是，虽只是给出几个搜索建议/搜索结果，但是背后的自动优化处理是我们看不到的，我们的大脑在睡觉的时候可是为我们做了非常大量的工作。&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;关于未来的畅想机器人互联网部落&quot;&gt;关于未来的畅想：机器人、互联网、部落&lt;/h2&gt;&lt;h3 id=&quot;搜索引擎与机器人的距离有多远&quot;&gt;搜索引擎与机器人的距离有多远？&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;在未来的世界里，可能就会有更加完善的输入输出方式，比如我们输入声音、图像、视频（不限于文本），搜索引擎就会根据这个显性输入和额外隐形输入（比如现在的时间，你身处的地点等等），然后智能化得给出我们最想要的那个结果。那个时候“搜索”大概就不再需要我们再去检“索”了吧，一“搜”，直接给出的就是答案。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;所以，当一台电脑或者任何一个智能设备具备了多样性的输入模式之后，它跟我们人类的差距还有多远呢？而且，输入的东西其实都是数据，这些数据并不一定要像人类一样具备耳朵、鼻子、眼睛等感官之后才可以获得。如果智能设备可以联网，可以从一些专业部门Hack到比人类器官更加准确的数据之后，加上自身强大的存储和运输能力，那是不是要比人类更加强大？&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;更可怕的人工智能的输出模式也不局限于人体所拥有的肢体力量，在全球网络连接之后，人工智能可以随意篡改任何地方的军事情报，也就是国家间的信息战时代，可能会加入第三方势力：人工智能。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;由此，我不得不再推荐一下《疑犯追踪》这部美剧，The Machine输入输出的，还有，感情。&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;组织与结构&quot;&gt;组织与结构&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;大脑的结构很像互联网，各个神经节点之间协同交流、工作又各有功能分区，层级状的组织架构又使不同神经节点具备不同的基础处理功能。互联网也可以看做是一个巨大的分布式机器群，当它整体发挥作用的时候是否也有与人脑一样的快速优化策略？它又会输出什么的力量来改变世界？&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;另一个有趣的话题是，当每个机器都拥有超高智能的时候，它们会是一个怎么的部落群体？或者说，根本不会像人类一样，从而形成部落。&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;h2 id=&quot;绪论&quot;&gt;绪论&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/fight-with-gfw",
            "title"      : "关于不同翻墙软件：GoAgent和ShadowSocks",
            "category"   : "编程",
            "tags"       : "GFW",
            "url"        : "/2015-04-29-fight-with-gfw/",
            "path"       : "_posts/编程/2015-04-29-fight-with-gfw.md",
            "next"       : "/2015-05-12-intellectual-and-single-entrance/",
            "previous"   : "/2015-03-21-learning-react-js/",
            "date"       : "2015-04-29 00:00:00 +0000",
            "shortdate"  : "April 29, 2015",
            "content"    : "&lt;h2 id=&quot;伟大的https&quot;&gt;伟大的HTTPS&lt;/h2&gt;&lt;p&gt;他们的实现原理各不相同，区别大致在于走的路径不同，比如GoAgent借助免费的GAE，那是谷歌自己在亚洲拉的光缆，所以说还是有一些可用的Google hosts，可以选择适合自己的、速度最快的Google可用IP段。&lt;a href=&quot;http://www.williamlong.info/archives/3878.html&quot;&gt;快速找到Google可用Hosts的方法 - 月光博客&lt;/a&gt;、&lt;a href=&quot;https://github.com/XX-net/XX-Net&quot;&gt;XX-Net自动搜索可用IP的代码 - GitHub&lt;/a&gt;、甚至于&lt;a href=&quot;http://www.williamlong.info/archives/3879.html&quot;&gt;访问Google的神器：Chrome的QUIC协议 - 月光博客&lt;/a&gt;。而ShadowSocks要自己先搭一个VPS，然后再通过走Socks5的方式走出去，相同的技术点就是使用HTTPS，这是加密的HTTP协议，GFW是没有那个能力知道其中传输的是什么东西。&lt;/p&gt;&lt;h2 id=&quot;先决条件&quot;&gt;先决条件&lt;/h2&gt;&lt;p&gt;使用的先决条件就是是需要不同的账号，GoAgent需要自己去GAE上注册一个appid，这里有教程：&lt;a href=&quot;https://github.com/goagent/goagent/blob/wiki/InstallGuide.md&quot;&gt;申请 Google App Engine 并创建 appid&lt;/a&gt;。而SS需要自己去Linux系统的VPS上安装配置libev版本的服务端，在这里感谢一下Kimmy给我的ShadowSocks账号。但是用起来的时候都是一样的，可以直接利用源码来修改自己的账号并且部署使用，再者也可以利用GUI客户端简化使用，直接输入相关账号信息就好了。&lt;/p&gt;&lt;p&gt;在使用的时候涉及到一点墙外/墙内服务器与自家Mac/PC的通信知识，两台电脑都是通过IP地址和端口来交流信息的，当然其中会涉及到不同的通信协议/方式（比如HTTP、HTTPS、SOCKS等），所以我们用的时候就需要设置和墙外服务器交互的本机端口。&lt;/p&gt;&lt;h2 id=&quot;代理方式&quot;&gt;代理方式&lt;/h2&gt;&lt;p&gt;在代理的时候有全局/PAC/浏览器插件这么几种方式：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;全局就是全部使用代理去访问所有网站，可想而知访问一些国内网站会变慢或者根本打不开。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;而一般的GUI客户端也都集成了PAC代理，自动解析当前访问网站是否需要代理，一般用这个也就够了。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;当然在浏览器插件里面也可以设置PAC，访问该PAC的本地端口即可，然后浏览器插件就是可以设置自动切换，根据Rule List用不同的代理从而使不同的本机端口走不同的路径到达不同的墙内/墙外服务器。我用的SwitchyOmega插件还可以自己添加一些Rule访问一些不能访问而官方List没有加入的网站。&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com//public/img/tech/fight-with-gfw/Auto-Switch.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;https错误&quot;&gt;HTTPS错误&lt;/h2&gt;&lt;p&gt;然后这里有一个从根本上杜绝HTTPS请求错误的方法。原先，一边解决该问题的方法是用GoAgent里面的CA证书替换原有站点的证书，如果你没有导入根证书，你用打开twitter这类强制https的站点就会被浏览器阻止并收到警告。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com//public/img/tech/fight-with-gfw/HTTPS-Error.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;&lt;p&gt;在实际使用中就算导入了证书有时候也还是会出现错误，而且我记得知乎上面有讨论过有人伪造了GoAgent证书，所以说还是有一定风险的。&lt;/p&gt;&lt;h2 id=&quot;混合代理&quot;&gt;混合代理&lt;/h2&gt;&lt;p&gt;所以我们设置一个名为GA&amp;amp;SS Mixed的混合代理，如下图：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com//public/img/tech/fight-with-gfw/GA&amp;amp;SS-Mixed.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;&lt;p&gt;已知GoAgent使用本地端口8103，而Shadowsocks本地端口为1080。从而HTTP、FTP为未加密连接可填入GoAgent的代理端口配置，而在SOCKS代理中填入ShadowSocks的端口号，如此一来，HTTPS就会自动走ShadowSocks，未加密流量就会走GoAgent，从而不用导入GoAgent CA证书。不过使用此方法带来的问题就是HTTPS的降速，除非你有速度良好的国外VPS用来设置ShadowSocks，因为大部分国外服务器代理速度都拼不过GAE的，毕竟Google足够强大啊。&lt;/p&gt;&lt;h2 id=&quot;公司vpn&quot;&gt;公司VPN&lt;/h2&gt;&lt;p&gt;其实到头来，目前对我来说最好的翻墙方式就是使用公司的VPN，简直太爽！但是偶尔也连不上北京的服务器，还有不能上Facebook的时候开一个GA&amp;amp;SS代理就行了。&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;伟大的https&quot;&gt;伟大的HTTPS&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/learning-react-js",
            "title"      : "React 学习笔记总结",
            "category"   : "前端",
            "tags"       : "React, GitBook, 笔记",
            "url"        : "/2015-03-21-learning-react-js/",
            "path"       : "_posts/前端/2015-03-21-learning-react-js.md",
            "next"       : "/2015-04-29-fight-with-gfw/",
            "previous"   : "/2015-03-01-python-guide-zh/",
            "date"       : "2015-03-21 00:00:00 +0000",
            "shortdate"  : "March 21, 2015",
            "content"    : "",
            "excerpt"    : ""
		} ,
	
		{
            "id"         : "/python-guide-zh",
            "title"      : "【译】The Hitchhiker’s Guide to Python! 中英对照译本",
            "category"   : "编程",
            "tags"       : "Java, 翻译, GitBook, 最佳实践",
            "url"        : "/2015-03-01-python-guide-zh/",
            "path"       : "_posts/编程/2015-03-01-python-guide-zh.md",
            "next"       : "/2015-03-21-learning-react-js/",
            "previous"   : "/2015-02-12-internet-learning-better-than-reading-book/",
            "date"       : "2015-03-01 00:00:00 +0000",
            "shortdate"  : "March 01, 2015",
            "content"    : "",
            "excerpt"    : ""
		} ,
	
		{
            "id"         : "/internet-learning-better-than-reading-book",
            "title"      : "读万卷书不如行万里路，行万里路不如互联网学习",
            "category"   : "思考",
            "tags"       : "互联网, Rethink, 总结, 学习, PKM",
            "url"        : "/2015-02-12-internet-learning-better-than-reading-book/",
            "path"       : "_posts/思考/2015-02-12-internet-learning-better-than-reading-book.md",
            "next"       : "/2015-03-01-python-guide-zh/",
            "previous"   : "/2015-01-17-python-guide-e2c-plan/",
            "date"       : "2015-02-12 00:00:00 +0000",
            "shortdate"  : "February 12, 2015",
            "content"    : "&lt;p&gt;读书这种吸收知识信息的形式真的足够好吗？我知道自己可能是没有足够的耐心学习一样的东西才会认为书本学习不够好，但随着信息时代的发展，知识的载体和学习的方式都应该要发生一些改变了。&lt;/p&gt;&lt;p&gt;书本不再是知识唯一的载体，其他多媒体方式也在蓬勃发展，甚至于交互网站/App的形式会越来越多。读书，也不再是唯一的学习方式，更多类型的学习手段和更容易被大脑接受的学习方式需要我们去尝试了。这里暂时只说尝试，因为我觉得更新更多的学习方式不一定就是更好的，但是在没有实践之前我们也是不知道效果的呀，说不定会更好呢？而且我觉得学习是一种对知识的追求，所用来学习的方式并不应该喧宾夺主，它最终只是一种手段，学习的也是知识载体所承载的知识。明白了这一点之后我们就可以由目标为导向，发掘学习的深刻本质和基本方法，一定是可以找到相通的原则和理念。根据这些学习理念再去尝试和接受一种新的学习方法，就必然可以将工具为我所用，更快更好得学习新知识。&lt;/p&gt;&lt;h2 id=&quot;多种多样的学习载体&quot;&gt;多种多样的学习载体&lt;/h2&gt;&lt;h3 id=&quot;文字篇&quot;&gt;&lt;strong&gt;文字篇：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;/书本：最传统的方式，古人学富五车是因为没有其他更好的保存知识的形式。实体书，足够纯粹，传统，唯一。可以在书本上画线，容易翻出前后内容进行对比，看书会比较随意。&lt;/p&gt;&lt;p&gt;豆瓣读书：&lt;a href=&quot;http://book.douban.com/&quot;&gt;http://book.douban.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;而且旁边会有当当/亚马逊/京东的商品价格，点击进入网站后再利用比价软件（惠惠购物助手）可以方便快捷购买更便宜的书籍。&lt;/p&gt;&lt;p&gt;/电子书：这里准确定义一下概念，可搜索书体文本，内容与实体书一致，最大的优点是可以搜索，然后便携，随处可看，体积小，甚至免费。&lt;/p&gt;&lt;p&gt;豆瓣读书+豆藤（&lt;a href=&quot;https://www.google.com.hk/search?q=%E8%B1%86%E8%97%A4&quot;&gt;https://www.google.com.hk/search?q=%E8%B1%86%E8%97%A4&lt;/a&gt;）&lt;/p&gt;&lt;p&gt;可以方便快捷搜索到在线电子书和网盘搜索结果，我一般是直接保存到百度网盘然后随时可读。&lt;/p&gt;&lt;p&gt;当然这里还包括kindle/豆瓣阅读/多看阅读的付费电子书，不用花费折腾成本且格式排版良好。&lt;/p&gt;&lt;p&gt;/Wiki百科：比较权威的概念性解释，可以作为某一词条的入门了解，可能会有简单的实例；也因此不足以成书，但是可以在词条之间自由跳转，迅速了解其他相关/相近领域的知识。&lt;/p&gt;&lt;p&gt;维基百科：&lt;a href=&quot;http://zh.wikipedia.org/&quot;&gt;http://zh.wikipedia.org/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;百度百科：&lt;a href=&quot;http://baike.baidu.com/&quot;&gt;http://baike.baidu.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;/个人博客：一个人在某一领域（当然也可以跨领域）的总结性记录，与人的属性紧密相关，可以以之为鉴，改变和解决自身的问题，有对比才能明白自身的差距。&lt;/p&gt;&lt;p&gt;还包括知乎专栏：&lt;a href=&quot;http://www.zhihu.com/question/21388193&quot;&gt;http://www.zhihu.com/question/21388193&lt;/a&gt;&lt;/p&gt;&lt;p&gt;简书：&lt;a href=&quot;http://www.jianshu.com/&quot;&gt;http://www.jianshu.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;/问答社区：特点是以问题的形式解析答案，解决实际问题和引人思考；也是会有人的因素所在，但是一个问题往往有多种角度多种回答，可以让人用足够广的视野去看待同一个问题。&lt;/p&gt;&lt;p&gt;知乎：&lt;a href=&quot;http://www.zhihu.com/&quot;&gt;http://www.zhihu.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Quora：&lt;a href=&quot;https://www.quora.com/&quot;&gt;https://www.quora.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;StackOverFlow：&lt;a href=&quot;http://stackoverflow.com/&quot;&gt;http://stackoverflow.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;/搜索引擎：最灵活获取知识的途径，一般是发现问题/关键词进行搜索解决，自由度比较高，而且可以很方便获取到相关资源，可以说其他东西都需要搜索来获取。&lt;/p&gt;&lt;p&gt;谷歌：&lt;a href=&quot;https://www.google.com/&quot;&gt;https://www.google.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;/网站周刊：比如知乎周刊/极客公园，这些网站都会精选一些内容集结成电子书，从而以一种新的形式组织沉淀下来，好处就是信息的聚合，不用每天去光顾相应的网站，降低了网站信息噪声和操作成本。&lt;/p&gt;&lt;p&gt;多看阅读：&lt;a href=&quot;http://www.duokan.com/&quot;&gt;http://www.duokan.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;/微博微信：非常迅速的信息传递方式，但是媒体属性过强就必然带来信息噪声过高和时效性差，信息无法沉淀成相应的知识。而且现在很多人都不再更新自己的博客，而是通过自媒体方式在微博/微信公众帐号分享自己的输出内容。&lt;/p&gt;&lt;p&gt;槽边往事：bitsea&lt;/p&gt;&lt;p&gt;罗辑思维：luojisw&lt;/p&gt;&lt;p&gt;/垂直社区：非常典型的一些专业内容聚合，当然不仅仅是文字信息的聚合，你还可以找到很多其他形式的知识载体，这里还强调社区这个概念，你可以在内容的分享之下与他人进行交流。&lt;/p&gt;&lt;p&gt;果壳：&lt;a href=&quot;http://www.guokr.com/&quot;&gt;http://www.guokr.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;壹心理：&lt;a href=&quot;http://www.xinli001.com/&quot;&gt;http://www.xinli001.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;/RSS：聚合定期更新资源的一种方式，非常利于信息的聚合到分类的阅读，实时接收更新比较快，像这种只是省去了光顾网站的步骤，便于对阅读内容的筛选。&lt;/p&gt;&lt;p&gt;Feedly：&lt;a href=&quot;https://feedly.com/&quot;&gt;https://feedly.com/&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;影音篇&quot;&gt;&lt;strong&gt;影音篇：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;拿罗缉思维来说，每天的语音和整体的视频应该都是不可少的。前者会在每一个时候为你唤醒你的相关记忆，但仅此而已，要依赖60s的语音就能够给你多大的启示那是不可能的，幸亏每天还有对应的一篇相关的文章；后者是在整段时间内给你讲诉一个故事并且分析问题讲道理，这种整体性必然会带来更大的收获。&lt;/p&gt;&lt;p&gt;（其实语音是一种筛选，读一篇文章的成本往往大于60s语音，根据语音可以决定是否输入关键词继续阅读，而获取文章也可以看作一种搜索。）&lt;/p&gt;&lt;p&gt;/TED/一席：这类视频长度不长，都是提出某一观点然后论证它，可以给人以启迪，但不会具体深入。&lt;/p&gt;&lt;p&gt;TED：&lt;a href=&quot;http://www.ted.com/&quot;&gt;http://www.ted.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;一席：&lt;a href=&quot;http://yixi.tv/&quot;&gt;http://yixi.tv/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;/大学公开课：一系列的专业性大学课程，会细致深入得介绍这门课程并且会有很多集，当然不仅仅是技术类的，哈佛幸福公开课是一个例子。&lt;/p&gt;&lt;p&gt;网易公开课：&lt;a href=&quot;http://open.163.com/&quot;&gt;http://open.163.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;/人物演讲/访谈：这种一般从自身经历和成就出发，可以看到这个人的语言/情绪表达，与自身对比发现问题解决问题，甚至，培养相类似的价值观，榜样的力量无比强大。&lt;/p&gt;&lt;p&gt;毕业演讲：&lt;a href=&quot;http://v.163.com/special/openclass/speech.html&quot;&gt;http://v.163.com/special/openclass/speech.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;/在线课堂：这里专指无人物教学，录制电脑画面教授编程/设计类知识，重点在于实战，最好一边看一边操作最后总结出自己的东西。特别指出编程视频中往往可以学习到其他的东西，比如高手如何操作Linux命令行，输入技巧，语言特性，IDE功能使用等等。&lt;/p&gt;&lt;p&gt;网易云课堂：&lt;a href=&quot;http://study.163.com/&quot;&gt;http://study.163.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;/播客/有声书：听过明朝那些事儿，还有英语听力演讲语录什么的，大概也可以学到一些东西，而且英语的听力练习是必不可少的，在听的同时你可以走路/等车/坐车总之最大的好处是可以空出双手，但是这种方式也最容易走神了。&lt;/p&gt;&lt;p&gt;程序员播客：&lt;a href=&quot;http://teahour.fm/&quot;&gt;http://teahour.fm/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;有道学堂：&lt;a href=&quot;http://xue.youdao.com/&quot;&gt;http://xue.youdao.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;/视频自媒体：名人名嘴（个人魅力）+专业剪辑（团队协作），这类视频一般以历史文化类话题居多，会在一段视频中详细得解析一段历史或者社会现象。罗胖子就是一个读书+说书人，读完书之后再以生动形象的方式讲诉给观众听，比较好的就是给出了推荐阅读的资料。&lt;/p&gt;&lt;p&gt;罗辑思维：&lt;a href=&quot;http://www.youku.com/show_page/id_z5bdbf57c947311e3b8b7.html&quot;&gt;http://www.youku.com/show_page/id_z5bdbf57c947311e3b8b7.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;晓说：&lt;a href=&quot;http://www.youku.com/show_page/id_z64feb2249b8211e296da.html&quot;&gt;http://www.youku.com/show_page/id_z64feb2249b8211e296da.html&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;可交互篇&quot;&gt;&lt;strong&gt;可交互篇：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;/MOOC：大学在线课程，可紧跟课程完成作业及其评讲，最终拿到证书，这是之前公开课形式的进化，增加人群社区和反馈机制，不再是单纯单项视频信息输入，有效保证信息能够转化成被授课者的知识。&lt;/p&gt;&lt;p&gt;MOOC学院：&lt;a href=&quot;http://mooc.guokr.com/&quot;&gt;http://mooc.guokr.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Coursera：&lt;a href=&quot;https://www.coursera.org/&quot;&gt;https://www.coursera.org/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;/交互网站：与机器交互，典型的就是编程网站，根据题目解决关卡中的问题，但是我自己往往是一遍过而没有做笔记，以后要好好利用网站自带的笔记功能了（其实是因为不够好用才没有用的吧）。&lt;/p&gt;&lt;p&gt;Codecademy：www.codecademy.com/zh/&lt;/p&gt;&lt;p&gt;慕课网：&lt;a href=&quot;http://www.imooc.com/&quot;&gt;http://www.imooc.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;/交互式App：记单词/英语流利说/有道口语大师，这种属于实际操作+反馈机制，用机器算法引导进步，奖励机制驱动人性。&lt;/p&gt;&lt;h3 id=&quot;知识整理篇&quot;&gt;&lt;strong&gt;知识整理篇：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;信息/知识不一定都是有用的——也就是说这些东西不一定会有用，但是也说不定会在什么时候给你带来用处所以也就不刚轻易放弃。&lt;/p&gt;&lt;p&gt;信息/知识不一定都是需要记忆的——既然东西都不一定是有用的，那何必要去记忆所有的东西呢？（只要保证这个东西在自己需要的时候能够在极小成本的情况下重新获取得到就可以了。）印象笔记：&lt;a href=&quot;https://www.yinxiang.com/&quot;&gt;https://www.yinxiang.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;思维导图：&lt;a href=&quot;http://www.xmind.net/&quot;&gt;http://www.xmind.net/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;所以，&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;是，记忆相关知识（古人，成本极高）再使用（而且不一定会用到）脑袋里面的东西。&lt;/li&gt;  &lt;li&gt;还是，先储存相关知识（成本较低）在需要的时候检索得到（也只需要很低的获取成本）。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这样问题就来了，为了降低检索就需要更有效的存储方式，存储到大脑当然有效，但是成本太高，所以要善用工具，选择足够强大的笔记软件（而不是手抄笔记）整理相关知识，分成较小的模块就只需记忆相关类别/关键词就可以了，获取的时候利用搜索和“整理记忆”（残余记忆/线索记忆）。&lt;/p&gt;&lt;p&gt;当然，这也是下一篇要写的重点，如何有效筛选信息，整理知识，分享知识。&lt;/p&gt;&lt;h2 id=&quot;summaryaction&quot;&gt;Summary/Action&lt;/h2&gt;&lt;ol&gt;  &lt;li&gt;笔记软件也不应该只是存储文本，多种形式相结合&lt;/li&gt;  &lt;li&gt;再次思考书签的意义（只储存会动态更新的网站，作为工具的储物箱，而不是信息/知识的文件夹）&lt;/li&gt;  &lt;li&gt;多种学习方式同时进行，建立反馈/对比机制&lt;/li&gt;  &lt;li&gt;思考如何在多媒体学习中记笔记？&lt;/li&gt;  &lt;li&gt;把自己的知识吸收整理过后分享出去&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;principle&quot;&gt;Principle&lt;/h2&gt;&lt;ol&gt;  &lt;li&gt;明确学习目的：勿忘初心，这是最关键的，以解决问题为导向学习相应的知识。最不应该做的就是到处收集想学的知识/工具，为了储备而储备岂不是原始人的做法？等到要学习的时候再去寻找，本来获取成本不会太高。&lt;/li&gt;  &lt;li&gt;整体化学习：一整套课程/一整本书/一个系列的笔记整理，而不是零碎信息的简单堆积不成系统，学会思考整体，不要因为自己已经学会了局部就不再关注局部知识。（这个时候如果不能坚持，要尽量减少试错成本，尽可能先学习自己感兴趣且容易接受的课程，就比如说学习数据挖掘/机器学习之前，要先学会算法所用语言和基础统计学知识，保证学习系统完整性）&lt;/li&gt;  &lt;li&gt;交互式反馈学习：在保证完整学习的前提下，要尽可能建立反馈机制，拉一个人一起学习或者是在自己的目标导向之下每天计算目标完成度。&lt;/li&gt;  &lt;li&gt;转化为文字形式笔记：文字/视频/图像/声音，这几种形式都可以记录信息/知识，但是文字能够更容易被大脑记忆和技术检索，而且代码也应该是一种笔记形式，网站设计，照片处理。那这样说工具也是一种知识储备，要物尽其用。&lt;/li&gt;  &lt;li&gt;遵守基本理念：预习-学习-复习这样的循环机制就是一种学习理念，理论和实践、对比和类比亦然，从纯文本课堂教学的时候就开始说起了，这些方法是最有效也是最基本的，新媒体学习方法还有待发掘。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;总之，互联网会让知识获取的成本降低，也增加了许多新的知识载体和学习方式。读万卷书可能不再能够满足我们对知识的渴望了，而且行万里路也不是一般人能够承受得起的，所以更好的学习方式还是值得我们去尝试的。&lt;/p&gt;&lt;p&gt;可能会有一个问题就是免费的知识会让人不懂得珍惜，就不会那么用心得去学习，这必然是新形式下出现的新问题，但是也必然会有新的解决办法。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;勿忘学习的初心。&lt;/strong&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;读书这种吸收知识信息的形式真的足够好吗？我知道自己可能是没有足够的耐心学习一样的东西才会认为书本学习不够好，但随着信息时代的发展，知识的载体和学习的方式都应该要发生一些改变了。&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/python-guide-e2c-plan",
            "title"      : "【译】The Hitchhiker’s Guide to Python! 中英对照译本",
            "category"   : "编程",
            "tags"       : "Python",
            "url"        : "/2015-01-17-python-guide-e2c-plan/",
            "path"       : "_posts/编程/2015-01-17-python-guide-e2c-plan.md",
            "next"       : "/2015-02-12-internet-learning-better-than-reading-book/",
            "previous"   : "/2014-11-17-python-to-java-01/",
            "date"       : "2015-01-17 00:00:00 +0000",
            "shortdate"  : "January 17, 2015",
            "content"    : "&lt;p&gt;更多翻译内容请查看GitBook地址：&lt;a href=&quot;http://jimmylv.gitbooks.io/python-guide-zh/&quot;&gt;http://jimmylv.gitbooks.io/python-guide-zh/&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;译本信息&quot;&gt;译本信息：&lt;/h2&gt;&lt;p&gt;这是我的第一份e2c翻译，借此熟悉整个Python最佳实践，也可以提高英语水平。&lt;/p&gt;&lt;h3 id=&quot;information&quot;&gt;Information:&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;Author: Kenneth Reitz&lt;/li&gt;  &lt;li&gt;Translator: 吕立青&lt;/li&gt;  &lt;li&gt;Begin: 2015/01/17&lt;/li&gt;  &lt;li&gt;End:&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;collection&quot;&gt;Collection：&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;翻译途中的感想、技巧&lt;/li&gt;  &lt;li&gt;对Python、编程的理解&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;contact-me&quot;&gt;Contact me:&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;E-mail: jimmy.jinglv@gmail.com&lt;/li&gt;  &lt;li&gt;ZhiHu: @吕立青&lt;/li&gt;  &lt;li&gt;WeiBo: @立青开根号&lt;/li&gt;  &lt;li&gt;WeChat: liqing215&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;duang翻译正式开始&quot;&gt;Duang！翻译正式开始：&lt;/h2&gt;&lt;p&gt;Welcome to The Hitchhiker’s Guide to Python.&lt;/p&gt;&lt;p&gt;欢迎来到Hitchhiker的Python指南。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;This guide is currently under heavy active development.&lt;/strong&gt; If you’d like to help, &lt;a href=&quot;https://github.com/kennethreitz/python-guide&quot;&gt;fork us on GitHub&lt;/a&gt;!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;本指南目前正在积极开发之中。如果你想来帮助，欢迎上&lt;a href=&quot;https://github.com/kennethreitz/python-guide&quot;&gt;Github&lt;/a&gt;fork我们。&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;This &lt;em&gt;opinionated&lt;/em&gt; guide exists to provide both novice and expert Python developers a best-practice handbook to the installation, configuration, and usage of Python on a daily basis.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这份自以为是的指南的目的是为了给Python初学者或者专业开发者提供一份关于Python安装、配置和日常使用基础的最佳实践手册。&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;更多翻译内容请查看GitBook地址：&lt;a href=&quot;http://jimmylv.gitbooks.io/python-guide-zh/&quot;&gt;http://jimmylv.gitbooks.io/python-guide-zh/&lt;/a&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/python-to-java-01",
            "title"      : "Python基础如何学习Java：如何开始学习一门新语言",
            "category"   : "编程",
            "tags"       : "Python, Java, 编程语言",
            "url"        : "/2014-11-17-python-to-java-01/",
            "path"       : "_posts/编程/2014-11-17-python-to-java-01.md",
            "next"       : "/2015-01-17-python-guide-e2c-plan/",
            "previous"   : "/2014-11-17-swjtu-photos-02/",
            "date"       : "2014-11-17 00:00:00 +0000",
            "shortdate"  : "November 17, 2014",
            "content"    : "&lt;h2 id=&quot;浅谈java消除对java的歧视&quot;&gt;浅谈Java：消除对Java的歧视&lt;/h2&gt;&lt;p&gt;其实语言本来就没有好坏之分，虽然现在大家对Java的意见都不太好，不管是语言的本身还是其发展前景。但是要去思考Java在二十几年前的时候出现的时候为什么会快速流行起来，它的优势又在哪里？&lt;/p&gt;&lt;p&gt;那么我们就可以看到Java最大的一个优点就是一次编译，到处运行。这里就有一个面试题是这样的，「Java到底是编译性语言还是解释性语言」，正确的回答应该是「&lt;strong&gt;一半编译，一半解释&lt;/strong&gt;」，因为Java在编译的时候其实是生成了class文件，而在这之后还是需要在JVM上解释执行class文件的。&lt;/p&gt;&lt;p&gt;那说到这里，随着其他语言的发展，这个优势变得越来越不明显，因为其他语言也可以做到或者说更容易做到快速部署快速开发软件。这里可以举一个PHP的例子，大家都不喜欢PHP但是它为什么会火起来呢，就是因为web开发在近几年来说越来越火，随着HTML5的完善开发人员也会越来越偏向这个概念的。可以看到的是LAMP (Linux, Apache, MySQL, PHP)这一整套系统的快速部署是非常利于开发的，而与此同时Ruby on Rails也是另外一个很好的选择。&lt;/p&gt;&lt;p&gt;但是我们也要看到Java现在还有一个用途是在写Android，虽然在服务器端软件上面有了其他的选择，就比如在近期，微软宣布为C#系的.NET开发环境进行了开源和跨平台，可以想象的是将来可以在Linux服务器上写C#了，这对Java的冲击实在太大。但是Android上native app的优势还会持续很久，虽然HTML5又会带来web app这样的神器进行另一波冲击。&lt;/p&gt;&lt;p&gt;了解了这么多，那对于个人来说，这门即将被取代的语言该不该学习呢？首先可以先回想一下自己为什么会「讨厌」Java这门语言。&lt;/p&gt;&lt;p&gt;其实最开始我是很想学习Java的，因为我想开发一个手机app，而在学习Android之前是肯定需要学习Java的，但是随着后来我遇到Python之后就对Python这门语言欲罢不能了，学习门槛很低而且能够快速开发出东西，这不得不让刚入门的编程新手兴奋起来。&lt;/p&gt;&lt;p&gt;而在学习Python的同时，微信公众帐号成了那时最热门的话题，我发现一个更容易在手机上实现功能和进行交互的方式，那就是开发一个微信公众号。其实Java就不得不羡慕一下Python快速开发的优势，如果当初的我选用Java去开发微信的话，恐怕遇到的问题会很多然后根本就做不出来，说不定从此与编程这条路无缘了呢。哈哈，别忘记&lt;strong&gt;我的初心是做一名会技术的产品经理，快速开发创造出新的产品才是我的第一目的。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;那说完了曾经的经历，就会发现&lt;strong&gt;我至始至终都没有非常深入得去学习和理解Java这门语言&lt;/strong&gt;，虽然它有缺点但是它也一定有很大的优点才会让那么多的程序员写出了那么多伟大的产品。那我就需要在真正深入了解Java之后再从自身出发对其进行一个全面的评价，而不是人云亦云说什么「Java正在走向死亡」。&lt;/p&gt;&lt;p&gt;Java系列的其他语言可以说都是在修正Java的一些问题，比如Scala是采用「函数式」思想设计的一门「纯面向对象」语言，保留Java最大的优势（可以运行在Java虚拟机上）的同时加入了很多高级语法特性。这也是我期望学习Scala的一个理由，作为Java的后继者当然不得忽视，并且它在大数据领域还有更大的用途。所以重点是&lt;strong&gt;我想在哪个领域有所作为，而在该领域中什么东西是最有用的，为了想实现的目标而去选择适当的工具&lt;/strong&gt;，而不是局限于一门语言，以语言用途为导向。&lt;/p&gt;&lt;h2 id=&quot;步入正轨如何开始学习java&quot;&gt;步入正轨：如何开始学习Java&lt;/h2&gt;&lt;p&gt;我总是比较喜欢讨论一些关于学习的方法论，在学习一门新语言的时候也总有一个比较好的入门方式。最开始学习编程的时候是在大学课堂上，最先接触到和使用的都是C语言，而且由于专业原因C语言在应用上也是偏向于跟硬件打交道的，而在纯软件环境下的程序编写根本就没有，最多也就是在「数据结构」这门巨难巨坑的课程中简单得用C++实现了一些基本算法而已，在那个时候，我应该还是没有对编程这个东西有多大兴趣吧。&lt;/p&gt;&lt;p&gt;最好的编程入门语言绝对是Python，Python相对于C系列语言来说更高级，更符合人的直觉也更接近人类的表达习惯。当&lt;strong&gt;一个初学者能够很快得按照自己的想法去实现一些东西&lt;/strong&gt;的时候，不会遇到一些莫名其妙的语言层面的时候，这对最开始学习编程的人来说是再好不过的了。而离机器更近的C语言的优势其实是在运行速度上，而今计算机的运算速度越来越快，运行速度并不再是开发的性能瓶颈的时候，更快速的学习，开发，部署才是王道。&lt;/p&gt;&lt;p&gt;虽然我也不敢说我对Python有多熟悉，毕竟还有那么多的高级特性值得我去进一步探索，实际情况中对一门语言「科学」有进一步的了解，倒不如去学习和实现这门语言的相关「技术」，Python有着太多的框架和库值得我去学习和使用，能够快速得投入生产和创造才是王道。这也是我很喜欢Python的原因，&lt;strong&gt;总有现成的「轮子」让我能够更快得实现我想达到的目标。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;但是我现在至少是对编程有了一个入门吧，在ThoughtWorks的培训上有谈到一门&lt;strong&gt;编程语言的「三要素」：抽象值/组合方式/基本表达式&lt;/strong&gt;，这也符合我之前的一些感触。我会根据这个思路来对比Python和Java，通过这样的方式来学习一门新的语言一定会很有意思。还可能会用不同的语言实现同一个功能，相信Python一定会用更少的代码来实现更多的功能的，哈哈，当然我会总结他们的优劣，Python不一定总是好的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;任何程序编写在「思考模型」层面上可以分为：Data &amp;amp; Process，&lt;/strong&gt;我们从面向过程（P）的语言中进化到了面向对象/类（D），最后发现函数式（P）又回到了过程式的程序思考模型。这一点非常有趣，由此我也会将这个思想时刻嵌入到我对这两门的对比学习当中，分析各自的三种基本「过程结构」：顺序/分支-判断/选择-循环，比较他们的优劣。&lt;/p&gt;&lt;h2 id=&quot;随便了解ruby&quot;&gt;随便了解Ruby&lt;/h2&gt;&lt;p&gt;在谈到Python的时候总是会联系到Ruby这个好基友，它们简洁的语法总是让人神往。想在学习Java的同时学习Ruby是出于以下几个原因：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;RoR可以快速开发web应用，这是我想做的一个方向。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;Ruby本身就很讨人喜欢，简洁的语法和有趣的特性（比如block）。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;ThoughtWorks内部很崇尚Ruby，并且有相关的RoR项目。&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;其他一些需要做的事情&quot;&gt;其他一些需要做的事情&lt;/h2&gt;&lt;h3 id=&quot;练习手速&quot;&gt;练习手速：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://typing.io&quot;&gt;https://typing.io&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/type-fu/pofoighmmpljaikjiidkkfhldjndfdbk&quot;&gt;Type Fu&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;熟悉ideintellij-idea&quot;&gt;熟悉IDE（&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;Intellij IDEA&lt;/a&gt;）&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1.快捷键&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201207/20/1342778131_9335.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.集成功能的使用&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://confluence.jetbrains.com/display/IntelliJIDEA/Quick+Start&quot;&gt;Quick Start&lt;/a&gt;&lt;/p&gt;&lt;p&gt;GitHub/Debug&lt;/p&gt;&lt;h3 id=&quot;java最佳实践&quot;&gt;Java最佳实践&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;TDD&lt;/li&gt;  &lt;li&gt;Refactor&lt;/li&gt;  &lt;li&gt;CleanCode&lt;/li&gt;  &lt;li&gt;Desgin Pattern&lt;/li&gt;  &lt;li&gt;Reflection&lt;/li&gt;&lt;/ul&gt;",
            "excerpt"    : "&lt;h2 id=&quot;浅谈java消除对java的歧视&quot;&gt;浅谈Java：消除对Java的歧视&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/swjtu-photos-02",
            "title"      : "西南交大摄影集【二】",
            "category"   : "生活",
            "tags"       : "大学, 摄影",
            "url"        : "/2014-11-17-swjtu-photos-02/",
            "path"       : "_posts/生活/2014-11-17-swjtu-photos-02.md",
            "next"       : "/2014-11-17-python-to-java-01/",
            "previous"   : "/2014-11-16-linux-text-editor/",
            "date"       : "2014-11-17 00:00:00 +0000",
            "shortdate"  : "November 17, 2014",
            "content"    : "&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2as793kmj30sg0iz4qp.jpg&quot; alt=&quot;8&quot; /&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2asat6j9j30sg0iy7wh.jpg&quot; alt=&quot;9&quot; /&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2asbjtqlj30kg0dl7bx.jpg&quot; alt=&quot;10&quot; /&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2aseol07j30sg0ianf3.jpg&quot; alt=&quot;11&quot; /&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2asgtjzdj30sg0iwtd6.jpg&quot; alt=&quot;12&quot; /&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2asj0p9ej30dw0kxgrp.jpg&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2as793kmj30sg0iz4qp.jpg&quot; alt=&quot;8&quot; /&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2asat6j9j30sg0iy7wh.jpg&quot; alt=&quot;9&quot; /&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2asbjtqlj30kg0dl7bx.jpg&quot; alt=&quot;10&quot; /&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2aseol07j30sg0ianf3.jpg&quot; alt=&quot;11&quot; /&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2asgtjzdj30sg0iwtd6.jpg&quot; alt=&quot;12&quot; /&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2asj0p9ej30dw0kxgrp.jpg&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/linux-text-editor",
            "title"      : "Ubuntu下的几种命令行编辑器介绍",
            "category"   : "编程",
            "tags"       : "Ubuntu",
            "url"        : "/2014-11-16-linux-text-editor/",
            "path"       : "_posts/编程/2014-11-16-linux-text-editor.md",
            "next"       : "/2014-11-17-swjtu-photos-02/",
            "previous"   : "/2014-11-16-think-college-1/",
            "date"       : "2014-11-16 00:00:00 +0000",
            "shortdate"  : "November 16, 2014",
            "content"    : "&lt;h2 id=&quot;命令行编辑器&quot;&gt;命令行编辑器&lt;/h2&gt;&lt;h3 id=&quot;1-vi&quot;&gt;1. vi&lt;/h3&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:w&lt;/code&gt;：Vi保存当前编辑文件，但并不退出&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:w newfile&lt;/code&gt;：此时Vi将把当前文件的内容保存到指定的newfile中，而原有文件保持不变&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File exists (use ! to override)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:w! newfile&lt;/code&gt;此时，若用户真的希望用文件的当前内容替换newfile中原有内容，可强行写入&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:q&lt;/code&gt;：系统退出Vi返回到shell&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;No write since last change (use ! to overrides)&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:q!&lt;/code&gt;：不想保存被修改后的文件而要强行退出Vi时，可放弃所作修改&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:wq&lt;/code&gt;：Vi将先保存文件，然后退出Vi返回到shell。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:x&lt;/code&gt;：该命令的功能同命令模式下的&lt;code class=&quot;highlighter-rouge&quot;&gt;ZZ&lt;/code&gt;命令功能相同，若当前编辑的文件曾被修改过，则Vi保存该文件后退出，返回到shell；若当前编辑的文件没被修改过，则Vi直接退出, 返回到shell。&lt;/p&gt;&lt;h3 id=&quot;2-gedit&quot;&gt;2. gedit&lt;/h3&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#以gedit打开名为av&amp;amp;gv的文件&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gedit /home/文档/av&amp;amp;gv &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;3-nano&quot;&gt;3. nano&lt;/h3&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo nano /etc/hosts&lt;/code&gt;&lt;/p&gt;&lt;p&gt;完成后按ctrl+x退出，按y保存，回车，OK&lt;/p&gt;&lt;h3 id=&quot;4-sed&quot;&gt;4. sed&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;sed是一种非交互式的流编辑器，可动态编辑文件。所谓非交互式是说，sed和传统的文本编辑器不同，并非和使用者直接互动，sed处理的对象是文件的数据流（称为stream/流）。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;特别注意：sed并不会更改文件内容。sed的工作方式是读取文件内容，经流编辑之后，把结果显示到标准输出。因此，如果想要存储sed的处理结果，得自行运用转向输出将结果存成其他文件。&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#修改 RVM 的 Ruby 安装源到国内的 淘宝镜像服务器，能提高安装速度&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;s/ftp\.ruby-lang\.org\/pub\/ruby/ruby\.taobao\.org\/mirrors\/ruby/g&#39;&lt;/span&gt; ~/.rvm/config/db&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;",
            "excerpt"    : "&lt;h2 id=&quot;命令行编辑器&quot;&gt;命令行编辑器&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/think-college-1",
            "title"      : "「反思我的大学」之科学与技术",
            "category"   : "思考",
            "tags"       : "大学, Rethink",
            "url"        : "/2014-11-16-think-college-1/",
            "path"       : "_posts/思考/2014-11-16-think-college-1.md",
            "next"       : "/2014-11-16-linux-text-editor/",
            "previous"   : "/2014-11-15-pythonic-zen/",
            "date"       : "2014-11-16 00:00:00 +0000",
            "shortdate"  : "November 16, 2014",
            "content"    : "&lt;h2 id=&quot;rethink-系列之反思我的大学科学与技术&quot;&gt;Rethink 系列之「反思我的大学」：科学与技术&lt;/h2&gt;&lt;p&gt;在当初进大学之前选专业的时候，我们就见过了太多的「科学与技术」，像什么计算机科学与技术，电子科学与技术，生命科学与技术等等一大堆。我想讲的就是需要将「科学」与「技术」进行区分，「科学」是指在某一领域探索知識的方法及其研究成果，而「技术」是指人類因應自身需要而發明的處理事務的有效方法和工具。（引自陳政宏教授的定义）&lt;/p&gt;&lt;p&gt;就拿编程来说的话，除了学习编程语言之外需要掌握的知识可能涉及到计算机电路、操作系统、编译原理、计算机网络、数据库、数据结构等等各个方面，而在大学里面的学习其实都是比较注重基础理论这方面的考试的。我们在大学学习之后往往面临一个问题，那就是在学习了那么多课程之后却发现自己无法接手任何一个实际项目。可以说我们在大学里面只是学习了计算机「科学」的基础知识，而计算机「技术」却在与时俱进得飞速发展和改进中国，我们用课本上所学习到的方法和技术去实现某一个功能且不说难度巨大，更可能的情况是早有更好的方法和技术进行了替代。为什么我学了计算机专业，却还是做不出网站、软件、APP呢？这大概就是原因。&lt;/p&gt;&lt;p&gt;但这样就可以说大学教育错了吗？我看未必。社会指责大学教育的原因可能就在于整个社会环境。大学毕业之后我们往往有工作和读研两种选择，现实情况是大学一毕业更多的人都走向了社会，当发现自身与职场存在能力差距的时候大概就会比较痛恨自己的大学四年白学了吧。虽然大学教育过多得去研究了「科学」，而没有去实践其中的「技术」，但是在怪罪大学所教的时候何不反思一下自身所学。对个人而言，大学课堂是只能够教给你相对应的基础知识，但是说到实验室的话你又是否花费足够多的时间去实践过呢？于此同时需要反思的也有很多要读研的小伙伴们，你是真的想去追寻「科学」的脚步吗？还是只想多学点「技术」去适应职场呢？那可能又要让你失望了吧。&lt;/p&gt;&lt;p&gt;其实明白了这一点，我想说大学教育本没有错，之前我一直纳闷为什么欧美也会说他们的大学不好，那可是我们中国社会所认可的好大学呢，呵呵。与此同时，也正因为大学是为了同时培养「科学」人才和「技术」人才的，所以侧重点当然只能是最基本的基础知识。如果你只想快速掌握一门「技术」，出门右转，「山东蓝翔」和「北大青鸟」在等着你哟~&lt;/p&gt;&lt;p&gt;而学习编程的目的是什么呢，我想回归到我的初心，当初的我就是想创造出一些美好的东西，要去做一些更有意义的事情。&lt;/p&gt;&lt;p&gt;下一篇预告《「反思我的大学」之技术与能力》&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;rethink-系列之反思我的大学科学与技术&quot;&gt;Rethink 系列之「反思我的大学」：科学与技术&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/pythonic-zen",
            "title"      : "The Zen of Python：Python之禅",
            "category"   : "编程",
            "tags"       : "Python, CleanCode",
            "url"        : "/2014-11-15-pythonic-zen/",
            "path"       : "_posts/编程/2014-11-15-pythonic-zen.md",
            "next"       : "/2014-11-16-think-college-1/",
            "previous"   : "/2014-11-01-why-i-am-so-serious/",
            "date"       : "2014-11-15 00:00:00 +0000",
            "shortdate"  : "November 15, 2014",
            "content"    : "&lt;h2 id=&quot;the-zen-of-python-by-tim-peters&quot;&gt;The Zen of Python, by Tim Peters&lt;/h2&gt;&lt;p&gt;Beautiful is better than ugly.&lt;/p&gt;&lt;p&gt;Explicit is better than implicit.&lt;/p&gt;&lt;p&gt;Simple is better than complex.&lt;/p&gt;&lt;p&gt;Complex is better than complicated.&lt;/p&gt;&lt;p&gt;Flat is better than nested.&lt;/p&gt;&lt;p&gt;Sparse is better than dense.&lt;/p&gt;&lt;p&gt;Readability counts.&lt;/p&gt;&lt;p&gt;Special cases aren’t special enough to break the rules.&lt;/p&gt;&lt;p&gt;Although practicality beats purity.&lt;/p&gt;&lt;p&gt;Errors should never pass silently.&lt;/p&gt;&lt;p&gt;Unless explicitly silenced.&lt;/p&gt;&lt;p&gt;In the face of ambiguity, refuse the temptation to guess.&lt;/p&gt;&lt;p&gt;There should be one– and preferably only one –obvious way to do it.&lt;/p&gt;&lt;p&gt;Although that way may not be obvious at first unless you’re Dutch.&lt;/p&gt;&lt;p&gt;Now is better than never.&lt;/p&gt;&lt;p&gt;Although never is often better than &lt;em&gt;right&lt;/em&gt; now.&lt;/p&gt;&lt;p&gt;If the implementation is hard to explain, it’s a bad idea.&lt;/p&gt;&lt;p&gt;If the implementation is easy to explain, it may be a good idea.&lt;/p&gt;&lt;p&gt;Namespaces are one honking great idea – let’s do more of those!&lt;/p&gt;&lt;h2 id=&quot;python之禅-by-tim-peters&quot;&gt;Python之禅 by Tim Peters&lt;/h2&gt;&lt;p&gt;优美胜于丑陋（Python 以编写优美的代码为目标）&lt;/p&gt;&lt;p&gt;明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）&lt;/p&gt;&lt;p&gt;简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）&lt;/p&gt;&lt;p&gt;复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）&lt;/p&gt;&lt;p&gt;扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）&lt;/p&gt;&lt;p&gt;间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）&lt;/p&gt;&lt;p&gt;可读性很重要（优美的代码是可读的）&lt;/p&gt;&lt;p&gt;即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）&lt;/p&gt;&lt;p&gt;不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）&lt;/p&gt;&lt;p&gt;当存在多种可能，不要尝试去猜测&lt;/p&gt;&lt;p&gt;而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）&lt;/p&gt;&lt;p&gt;虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）&lt;/p&gt;&lt;p&gt;做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）&lt;/p&gt;&lt;p&gt;如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）&lt;/p&gt;&lt;p&gt;命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;the-zen-of-python-by-tim-peters&quot;&gt;The Zen of Python, by Tim Peters&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/why-i-am-so-serious",
            "title"      : "突然明白自己的焦虑来自何处",
            "category"   : "思考",
            "tags"       : "工作",
            "url"        : "/2014-11-01-why-i-am-so-serious/",
            "path"       : "_posts/思考/2014-11-01-why-i-am-so-serious.md",
            "next"       : "/2014-11-15-pythonic-zen/",
            "previous"   : "/2014-10-27-thoughtworks-interview-speech/",
            "date"       : "2014-11-01 00:00:00 +0000",
            "shortdate"  : "November 01, 2014",
            "content"    : "&lt;p&gt;突然明白自己的焦虑来自何处。&lt;/p&gt;&lt;p&gt;1，绝不是因为你有多优秀。而是因为其他人表现出来的很多特质无时无刻得在向这个世界宣称着自己有多糟糕，而我只不过少抱怨了几句，多尝试了一点。&lt;/p&gt;&lt;p&gt;2，至少不是在现在有多优秀。我其实是在预支未来，把别人所期望的误当作自己已经拥有的，多么傻的错觉。企业看中的只是你的潜力，并不是你现在就能够为企业带来什么样的产出，事实是你现在没有任何能力为企业带来价值。&lt;/p&gt;&lt;p&gt;3，就像Dr.Dre当初看中Eminem的时候，Eminem绝没有现在唱Rap God的Eminem这么牛逼。Eminem很幸运得遇到了Dr.Dre，只是当幸运降临的时候，Eminem有没有足够努力去配得上那份幸运。相信Dr.Dre当时也看中其他很有才华的Rap singer，但唯有Eminem足够珍视这次机会，努力让当初的小屁孩成长为the Rap God。&lt;/p&gt;&lt;p&gt;4，互联网真的是泡沫吗，至少是一种技术泡沫？还是说任何一样事物的成功都需要技术，人性，金融的结合，而互联网只不过是一种技术媒介而已？当人人都学会编程或者计算机能够自我元编程，那一个程序员存在的价值将是什么？&lt;/p&gt;&lt;p&gt;5，早知道泡沫，一触就破。期望自己真的去努力完成自己的计划，去努力拥有自己想要的能力，去努力成为自己所佩服的人。&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;突然明白自己的焦虑来自何处。&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/thoughtworks-interview-speech",
            "title"      : "ThoughtWorks 面试演讲稿",
            "category"   : "演讲",
            "tags"       : "面试, 工作",
            "url"        : "/2014-10-27-thoughtworks-interview-speech/",
            "path"       : "_posts/演讲/2014-10-27-thoughtworks-interview-speech.md",
            "next"       : "/2014-11-01-why-i-am-so-serious/",
            "previous"   : "/2014-09-28-Linux-apt-get/",
            "date"       : "2014-10-27 00:00:00 +0000",
            "shortdate"  : "October 27, 2014",
            "content"    : "&lt;p&gt;最近天气转凉，我也不幸因此感冒了， 所以声音有点嘶哑，讲得不好也请大家见谅。大家也要及时添加衣服，不要像我一样感冒了。&lt;/p&gt;&lt;p&gt;也许每个人都曾经有一个梦想，那就是——「改变世界」，什么叫做改变世界呢，在我的理解里就是改变或者改善所有人的生活，使这个世界变得更加美好一点。Jobs用一台iPhone重新定义了手机，也从此颠覆了许多传统行业；Google的X实验室也在试验着它的「热气球网络」，为偏远地区接入互联网服务。&lt;/p&gt;&lt;p&gt;那作为一个年轻人，该怎样去改变世界呢？我联想到的是我们这样一个年轻群体，年轻人具有着非凡的创造力，拥有着无限的可能性。如果我能够使这个群体实现价值最大化，使他们都能够去做自己想做的事情，那这个群体就能够为这个世界创造出更大的价值。&lt;/p&gt;&lt;p&gt;年轻人当中有一群很酷的人，他们叫做——「程序员」，在极客精神越来越被大家所熟知的信息时代，程序员的影响力不可谓不大。Bill Gate创造了微软，Mark Zuckerberg创造出了他的facebook。如果我们能使更多年轻人学习编程，更好更容易地创造出美好的事物，那这个世界也会因此变得更加美好。&lt;/p&gt;&lt;p&gt;最后我想谈到ThoughtWorks，ThoughtWorks是一家IT咨询行业的领袖企业，这里汇聚着世界上最有才华的软件精英，通过影响程序员群体，推进IT行业的发展，从而影响全球社会变革。可以说，ThoughtWorks就是在直接或间接得改变着整个世界。&lt;/p&gt;&lt;p&gt;所以，加入ThoughtWorks，就是和ThoughtWorks一起改变世界，这就是我的热忱所在。&lt;/p&gt;&lt;p&gt;谢谢大家！&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;最近天气转凉，我也不幸因此感冒了， 所以声音有点嘶哑，讲得不好也请大家见谅。大家也要及时添加衣服，不要像我一样感冒了。&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/Linux-apt-get",
            "title"      : "Ubuntu下的程序安装与卸载",
            "category"   : "编程",
            "tags"       : "Ubuntu, 软件",
            "url"        : "/2014-09-28-Linux-apt-get/",
            "path"       : "_posts/编程/2014-09-28-Linux-apt-get.md",
            "next"       : "/2014-10-27-thoughtworks-interview-speech/",
            "previous"   : "/2014-09-27-Linux-file-and-dir/",
            "date"       : "2014-09-28 00:00:00 +0000",
            "shortdate"  : "September 28, 2014",
            "content"    : "&lt;h2 id=&quot;程序安装与卸载apt-get&quot;&gt;程序安装与卸载&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-添加ppa源&quot;&gt;1. 添加PPA源&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;PPA，表示 Personal Package Archives，也就是个人软件包集。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;有很多软件因为种种原因，不能进入官方的 Ubuntu 软件仓库。 为了方便 Ubuntu 用户使用，launchpad.net 提供了 ppa，允许用户建立自己的软件仓库， 自由的上传软件。&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#到[launchpad.net](https://launchpad.net/+search)搜索到ppa:user/ppa-name之后&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository ppa:ubuntu-wine/ppa&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;2-更新软件以及软件源列表&quot;&gt;2. 更新软件以及软件源列表&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;在修改&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apt/sources.list&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apt/preferences&lt;/code&gt;之后运行该命令，此外您需要定期运行&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get update&lt;/code&gt;命令以确保您的软件包列表是最新的&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#更新源&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update &lt;span class=&quot;c&quot;&gt;#更新已安装的包&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get upgrade &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;4-安装指定的程序&quot;&gt;4. 安装指定的程序&lt;/h3&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#搜索包&lt;/span&gt;apt-cache search package &lt;span class=&quot;c&quot;&gt;#获取包的相关信息，如说明、大小、版本等&lt;/span&gt;apt-cache show package &lt;span class=&quot;c&quot;&gt;#安装包&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;package &lt;span class=&quot;c&quot;&gt;#重新安装包&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;package - - reinstall &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;5-卸载指定的程序&quot;&gt;5. 卸载指定的程序&lt;/h3&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#卸载已安装的软件包&lt;/span&gt;apt-get remove packagename&lt;span class=&quot;c&quot;&gt;#卸载一个已安装的软件包（删除配置文件）&lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;--purge&lt;/span&gt; remove packagename&lt;span class=&quot;c&quot;&gt;#有些软件很难卸载，而且还阻止了别的软件的应用&lt;/span&gt;dpkg &lt;span class=&quot;nt&quot;&gt;--force-all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--purge&lt;/span&gt; packagename&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;6-清理空间&quot;&gt;6. 清理空间&lt;/h3&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#清除已经卸载的软件包的.deb文件&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get autoclean &lt;span class=&quot;c&quot;&gt;#将已安装软件包的.deb文件一并删除&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get clean &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;",
            "excerpt"    : "&lt;h2 id=&quot;程序安装与卸载apt-get&quot;&gt;程序安装与卸载&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/Linux-file-and-dir",
            "title"      : "Ubuntu系统快捷键和文件处理命令",
            "category"   : "编程",
            "tags"       : "Ubuntu",
            "url"        : "/2014-09-27-Linux-file-and-dir/",
            "path"       : "_posts/编程/2014-09-27-Linux-file-and-dir.md",
            "next"       : "/2014-09-28-Linux-apt-get/",
            "previous"   : "/2014-09-26-setting-sublime-for-python/",
            "date"       : "2014-09-27 00:00:00 +0000",
            "shortdate"  : "September 27, 2014",
            "content"    : "&lt;h2 id=&quot;重要的快捷键&quot;&gt;重要的快捷键&lt;/h2&gt;&lt;h3 id=&quot;1-桌面&quot;&gt;1. 桌面&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;ALT + F1: 聚焦到桌面左侧任务导航栏，可按上下键导航。&lt;/li&gt;  &lt;li&gt;ALT + F2: 运行命令&lt;/li&gt;  &lt;li&gt;ALT + F4: 关闭窗口&lt;/li&gt;  &lt;li&gt;ALT + TAB: 切换程序窗口&lt;/li&gt;  &lt;li&gt;ALT + 空格: 打开窗口菜单&lt;/li&gt;  &lt;li&gt;PRINT: 桌面截图&lt;/li&gt;  &lt;li&gt;ALT + PRINT：窗口截图&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;2-dash面板&quot;&gt;2. Dash面板&lt;/h3&gt;&lt;p&gt;在Dash面板中按CTRL + TAB: 切换到下一个子面板（可搜索不同类型项目，如程序、文件、音乐）&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;WIN + A: 搜索或浏览程序（Application）&lt;/li&gt;  &lt;li&gt;WIN + F: 搜索或浏览文件（File）&lt;/li&gt;  &lt;li&gt;WIN + M: 搜索或浏览音乐文件（Music）&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;3-terminal终端&quot;&gt;3. Terminal终端&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;CTRL + ALT + T: 打开终端&lt;/li&gt;  &lt;li&gt;TAB: 自动补全命令或文件名&lt;/li&gt;  &lt;li&gt;CTRL + SHIFT + V: 粘贴（Linux中不需要复制的动作，文本被选择就自动被复制）&lt;/li&gt;  &lt;li&gt;CTRL + SHIFT + T: 新建标签页&lt;/li&gt;  &lt;li&gt;CTRL + D: 关闭标签页&lt;/li&gt;  &lt;li&gt;CTRL + L: 清楚屏幕&lt;/li&gt;  &lt;li&gt;CTRL + R + 文本: 在输入历史中搜索&lt;/li&gt;  &lt;li&gt;CTRL + A: 移动到行首&lt;/li&gt;  &lt;li&gt;CTRL + E: 移动到行末&lt;/li&gt;  &lt;li&gt;CTRL + C: 终止当前任务&lt;/li&gt;  &lt;li&gt;CTRL + Z: 把当前任务放到后台运行（相当于运行命令时后面加&amp;amp;）&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;文件与目录管理&quot;&gt;文件与目录管理&lt;/h2&gt;&lt;h3 id=&quot;1-目录表示&quot;&gt;1. 目录表示&lt;/h3&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.         #代表此层目录..        #代表上一层目录-         #代表前一个工作目录~         #代表『目前使用者身份』所在的家目录~account  #代表 account 这个使用者的家目录(account是个帐号名称)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;2-常见的文件目录处理命令&quot;&gt;2. 常见的文件目录处理命令&lt;/h3&gt;&lt;p&gt;1) 目录处理&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;cd：变换目录，cd是Change Directory的缩写&lt;/li&gt;  &lt;li&gt;pwd：显示目前的目录，pwd是Print Working Directory的缩写&lt;/li&gt;  &lt;li&gt;mkdir：创建一个新的目录&lt;/li&gt;  &lt;li&gt;rmdir：删除一个空的目录&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pwd -P                 #-P：代表显示正确的完整路径，而不是连接路径mkdir -m 目录名称       #-m：直接配置文件的权限mkdir -p test1/test2   #-p：直接将所需要的目录(包含上一级目录)递回创建起来！PATH=&quot;$PATH&quot;:/root     #将/root路径加入PATH环境变量中&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;2) 文件处理&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;mv：移走目录或者改文件名&lt;/li&gt;  &lt;li&gt;cp：拷贝文件&lt;/li&gt;  &lt;li&gt;rm：删除文件和目录&lt;/li&gt;  &lt;li&gt;cat：显示文件内容&lt;/li&gt;  &lt;li&gt;grep：文本内容搜索&lt;/li&gt;  &lt;li&gt;find：文件或者目录名以及权限属主等匹配搜索&lt;/li&gt;  &lt;li&gt;tar：解压命令&lt;/li&gt;  &lt;li&gt;clear：清屏，相当与DOS下的cls&lt;/li&gt;  &lt;li&gt;date：显示当前时间&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;文件权限与目录配置&quot;&gt;文件权限与目录配置&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;Linux最优秀的地方之一，就在于它的多用户、多任务环境。Linux一般将文件可存取访问的身份分为3个类别，分别是owner（用户）、group（用户组）、others（其他人），且3种身份都各自有自己的read，write，execute等权限。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;1-文件权限概念&quot;&gt;1. 文件权限概念&lt;/h3&gt;&lt;p&gt;当屏幕前面出现“Permission deny”的时候，肯定是权限设置错误。&lt;/p&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;#ls:list，列出所有文件的详细信息&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;#显示文件，属性的第一个字段是文件的权限，共10位，比如-rwxr-xr--，表示owner具有rwx权限，group具有rx权限，others只具有r权限&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;2-文件种类与扩展名&quot;&gt;2. 文件种类与扩展名&lt;/h3&gt;&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l&lt;/code&gt;查看到的十个字符中，第一个字符为文件的类型：&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;-: 普通文件（regular file）&lt;/li&gt;  &lt;li&gt;d: 目录文件（directory）&lt;/li&gt;  &lt;li&gt;l: 连接文件，类似于windows的快捷方式（link）&lt;/li&gt;  &lt;li&gt;b: 块设备文件（block）&lt;/li&gt;  &lt;li&gt;c: 字符设备文件（character）&lt;/li&gt;  &lt;li&gt;s: 套接字（sockets）&lt;/li&gt;  &lt;li&gt;p: 管道（FIFO, pipe）&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;3-改变文件属性与权限&quot;&gt;3. 改变文件属性与权限&lt;/h3&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chgrp       #改变文件所属用户组，具体句法记得使用 man page 查询chown       #改变文件所有者chmod       #改变文件的权限&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;其中，chmod修改权限的方法有两种，分别是符号法与数字法，数字法中r，w，x的数值分别是4，2，1。&lt;/p&gt;&lt;p&gt;要开放“目录”（注意不是“文件”）给任何人看，应该至少同时给予r和x权限，但w权限不可随便给予。&lt;/p&gt;&lt;h3 id=&quot;4-一个例子&quot;&gt;4. 一个例子&lt;/h3&gt;&lt;p&gt;将install.log文件复制成为LAYtest.log，并且要给linanya这个人读写权限，可以这样做：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost ~]# cp install.log LAYtest.log     #若复制文件夹，用cp -r[root@localhost ~]# ls -al LAYtest.log -rw-r--r-- 1 root root 62826 9月  17 15:19 LAYtest.log     #虽然完成了复制，但仍然是root的文件[root@localhost ~]# chown linanya LAYtest.log [root@localhost ~]# ls -al LAYtest.log       -rw-r--r-- 1 linanya root 62826 9月  17 15:19 LAYtest.log  #文件变成linanya的[root@localhost ~]# &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;其他有用的种种&quot;&gt;其他有用的种种&lt;/h2&gt;&lt;h3 id=&quot;1-查询命令功能&quot;&gt;1. 查询命令功能&lt;/h3&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;man command  #command是要查询的命令名称&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;进入man命令后，可按&lt;code class=&quot;highlighter-rouge&quot;&gt;空格&lt;/code&gt;往下翻页，按&lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt;键离开。&lt;/p&gt;&lt;p&gt;在man page中，可以在任何时候输入&lt;code class=&quot;highlighter-rouge&quot;&gt;/keyword&lt;/code&gt;来查询关键字，比如/date.&lt;/p&gt;&lt;h3 id=&quot;2-正确的关机方法&quot;&gt;2. 正确的关机方法&lt;/h3&gt;&lt;p&gt;惯用的关机命令：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shutdown -h now     #立刻关机shutdown -h 20:25   #晚上8点25分关机shutdown -h +10     #过十分钟后关机shutdown -r now     #立刻重启shutdown -r +30 ‘The system will be reboot’    #再过30分钟关机，并显示后面的消息给所有在线用户shutdown -k now ‘The system will be reboot’    #仅发出警告，系统并不会真正关机&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;",
            "excerpt"    : "&lt;h2 id=&quot;重要的快捷键&quot;&gt;重要的快捷键&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/setting-sublime-for-python",
            "title"      : "配置Python开发环境和Sublime Text 3编辑器",
            "category"   : "编程",
            "tags"       : "Ubuntu, Sublime, Python",
            "url"        : "/2014-09-26-setting-sublime-for-python/",
            "path"       : "_posts/编程/2014-09-26-setting-sublime-for-python.md",
            "next"       : "/2014-09-27-Linux-file-and-dir/",
            "previous"   : "/2014-09-26-write-article-use-jekyll-github-markdown/",
            "date"       : "2014-09-26 00:00:00 +0000",
            "shortdate"  : "September 26, 2014",
            "content"    : "&lt;!-- MarkdownTOC --&gt;&lt;ul&gt;  &lt;li&gt;配置Python环境    &lt;ul&gt;      &lt;li&gt;        &lt;ol&gt;          &lt;li&gt;安装pip&lt;/li&gt;        &lt;/ol&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;ol&gt;          &lt;li&gt;构建虚拟环境&lt;/li&gt;        &lt;/ol&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;  &lt;li&gt;Sublime Text 3的安装与配置    &lt;ul&gt;      &lt;li&gt;        &lt;ol&gt;          &lt;li&gt;安装插件&lt;/li&gt;        &lt;/ol&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;ol&gt;          &lt;li&gt;修改快捷键&lt;/li&gt;        &lt;/ol&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;ol&gt;          &lt;li&gt;修改视图&lt;/li&gt;        &lt;/ol&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;ol&gt;          &lt;li&gt;编辑器快捷键汇总&lt;/li&gt;        &lt;/ol&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;!-- /MarkdownTOC --&gt;&lt;h2 id=&quot;配置python环境&quot;&gt;配置Python环境&lt;/h2&gt;&lt;h3 id=&quot;1-安装pip&quot;&gt;1. 安装pip&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;pip 是 Python 的包管理工具，建议 Python 的包都用 pip 进行管理。&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 安装 pip&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python-pip&lt;span class=&quot;c&quot;&gt;#安装python包&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#升级python包&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--upgrade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#卸载python包&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip uninstall &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;2-构建虚拟环境&quot;&gt;2. 构建虚拟环境&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;virtualenv用于创建独立的Python环境，多个Python相互独立，互不影响，它能够：&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;在没有权限的情况下安装新套件&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;不同应用可以使用不同的套件版本&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;套件升级不影响其他应用&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;安装Virtualenv和Virtualenvwrapper&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;p&gt;Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;将所有虚拟环境整合在一个目录下&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;管理（新增，删除，复制）虚拟环境&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;切换虚拟环境&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;1) &lt;strong&gt;安装virtualenv和virtualenvwrapper&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python-virtualenv&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virtualenv &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;1.11.6&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;virtualenvwrapper  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;2) &lt;strong&gt;设置环境&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#创建目录用来存放虚拟环境&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.virtualenvs&lt;span class=&quot;c&quot;&gt;#在~/.bashrc中添加： &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano ~/.bashrc&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WORKON_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.virtualenvs&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /usr/local/bin/virtualenvwrapper.sh&lt;span class=&quot;c&quot;&gt;#重载环境&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;3) &lt;strong&gt;使用方法&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;默认情况下，虚拟环境会依赖系统环境中的site packages，就是说系统中已经安装好的第三方package也会安装在虚拟环境中，如果不想依赖这些package，那么可以加上参数 –no-site-packages建立虚拟环境&lt;code class=&quot;highlighter-rouge&quot;&gt;virtualenv --no-site-packages [虚拟环境名称]&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#列出虚拟环境列表&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;workon&lt;span class=&quot;c&quot;&gt;#或者&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lsvirtualenv&lt;span class=&quot;c&quot;&gt;#新建虚拟环境&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkvirtualenv testENVNew python executable &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;testENV/bin/pythonInstalling setuptools, pip...lsdone.&lt;span class=&quot;c&quot;&gt;#列出虚拟环境列表&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;testENV&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;llgreen@Work-PC:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lsvirtualenvtestENV&lt;span class=&quot;o&quot;&gt;=======&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#启动/切换虚拟环境&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;workon &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;虚拟环境名称]&lt;span class=&quot;c&quot;&gt;#删除虚拟环境&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rmvirtualenv &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;虚拟环境名称]&lt;span class=&quot;c&quot;&gt;#离开虚拟环境&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;testENV&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;llgreen@Work-PC:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;deactivate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;sublime-text-3的安装与配置&quot;&gt;Sublime Text 3的安装与配置&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.sublimetext.com/3&quot;&gt;官网下载&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;1-安装插件&quot;&gt;1. 安装插件&lt;/h3&gt;&lt;p&gt;1) 首先安装&lt;a href=&quot;https://sublime.wbond.net/installation#st3&quot;&gt;Package Control&lt;/a&gt;，通过Package Control可以很方便安装其他插件&lt;/p&gt;&lt;blockquote&gt;  &lt;ul&gt;    &lt;li&gt;通过快捷键 ctrl+` 或者 View &amp;gt; Show Console 菜单打开控制台&lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;ul&gt;    &lt;li&gt;粘贴对应版本的代码后回车安装&lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#适用于 Sublime Text 3：&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib.request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;7183a2d3e96f11eeadd761d777e62404&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;e330c659d4bb41d3bdf022e94cab3cd0&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;Package Control.sublime-package&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sublime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;installed_packages_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install_opener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_opener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProxyHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;http://sublime.wbond.net/&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%20&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Error validating download (got &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s instead of &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s), please try manual install&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;wb&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;2) 按快捷键Ctrl+Shift+P调出命令窗口，选择Package Control: Install Package，安装 Python 开发常用的插件：&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Sublime 有一个非常丰富的插件系统。而我当前使用的插件如下：&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;Color Scheme - Tomorrow Night Color schemes 决定了编辑器界面语法高亮的字体颜色。这是一个非常酷的暗黑系样式。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;Theme  - Soda Dark Themes 影响 Sublime 界面元素的颜色和风格。这个非常适合 Tomorrow Night 的配色方案。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;All  Autocomplete Sublime 默认的自动完成只关注当前文件的单词。这个插件扩展了其自动完成的单词列表到所有打开的文件。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;SublimeCodeIntel  为部分语言增强自动完成功能，包括了 Python 。这个插件同时也可以让你跳转到符号定义的地方，通过按住 alt 并点击符号。非常方便。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;SublimeTmpl  这个插件允许用户定义文件的模板，比如在写一个html文件时，老是重复文件头的一些引入信息很繁琐，可以定义一个模板直接生成必须的信息，具体的SublimeTmpl插件用法请自行百度。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;SideBarEnhancements  一个增强侧边栏文件夹浏览功能的插件，比较不错。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;SublimeREPL  允许你在编辑界面直接运行 Python 解释器。我倾向于在单独的终端窗口用 bpython 来运行，但有时 SublimeREPL 是很有帮助的。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;GitGutter  在编辑器的凹槽区，依照 Git ，增加小图标来标识一行是否被插入、修改或删除。在 GitGutter 的 readme 中有说明如何更改颜色图标来更新你的配色方案文件。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;Pylinter  这个插件提供了目前我所见到的最好的 pylint 编辑器整合。它自动检查 .py 文件，无论其何时被保存，并且会直接在编辑界面显示 pylint 违规。它还有一个快捷方式来禁用局部的 pylint 检查，通过插入一个 #pylint: 禁用注释。这个插件对于我确实非常有用。 id:43&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;SublimeLinter 是用来在写代码时做代码检查的，可以检查Python代码是否符合PEP8的要求。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;Tag  可以为web开发者提供html和css标签，很方便快捷，对于web前端设计者非常实用。&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;3) 自动安装插件&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;修改配置文件Preferences-&amp;gt;Package Settings-&amp;gt;Package Control-&amp;gt;Settings-User如下，保存以后，选择Package Control-&amp;gt;Install Package，将会自动下载。&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;installed_packages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Terminal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Alignment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BracketHighlighter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SublimeLinter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ColorPicker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CompactExpandCss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CSScomb JS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Emmet Css Snippets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hex-to-RGBA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTML5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;JsFormat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Package Control&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Rails Developer Snippets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ruby on Rails snippets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;RubyTest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SublimeTmpl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tradsim&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;2-修改快捷键&quot;&gt;2. 修改快捷键&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;SublimeREPL安装之后没有快捷键，每次运行程序必须用鼠标去点工具栏，有些不爽。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;1) &lt;strong&gt;SublimeREPL插件的菜单命令&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Preferences =&amp;gt; Browser Packages…打开插件安装包位置，依次找到 SublimeREPL\config\Python文件夹下的Main.sublime-menu并打开。&lt;/p&gt;&lt;p&gt;该文件即是插件菜单的结构及相关参数，从中找到运行Python文件的菜单项的部分：&lt;/p&gt;&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;repl_open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;caption&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Python - RUN current file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;repl_python_run&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mnemonic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;subprocess&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;utf8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cmd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;python&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-u&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$file_basename&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$file_path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;syntax&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Packages/Python/Python.tmLanguage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;external_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;python&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;extend_env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PYTHONIOENCODING&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;其中id的值是我们需要的，因为我们正是要为其添加快捷键。另外，菜单文件的位置也是需要先记下的，因为需要为这个命令指定定义的来源。&lt;/p&gt;&lt;p&gt;2) &lt;strong&gt;自定义快捷键&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Preferences =&amp;gt; Key Boundings-User打开自定义快捷键文件，写入如下内容：&lt;/p&gt;&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;keys&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;f5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                           &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;快捷键，注意小写&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;run_existing_window_command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;运行定义的命令&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                                   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;命令参数&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;repl_python_run&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;              &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;上一步查看的命令的id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;config/Python/Main.sublime-menu&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;菜单定义文件位置&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;3-修改视图&quot;&gt;3. 修改视图&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;选择查看–布局–行：2 或者 Shift+Alt+8&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;将Sublime分割为上下两部分，选择F5进行代码编译，编译信息将会显示在下面的编译区域。&lt;/p&gt;&lt;h3 id=&quot;4-编辑器快捷键汇总&quot;&gt;4. 编辑器快捷键汇总&lt;/h3&gt;&lt;p&gt;Ctrl+Shift+P：打开命令面板&lt;/p&gt;&lt;p&gt;Ctrl+P：搜索项目中的文件&lt;/p&gt;&lt;p&gt;Ctrl+G：跳转到第几行&lt;/p&gt;&lt;p&gt;Ctrl+W：关闭当前打开文件&lt;/p&gt;&lt;p&gt;Ctrl+Shift+W：关闭所有打开文件&lt;/p&gt;&lt;p&gt;Ctrl+Shift+V：粘贴并格式化&lt;/p&gt;&lt;p&gt;Ctrl+D：选择单词，重复可增加选择下一个相同的单词&lt;/p&gt;&lt;p&gt;Ctrl+L：选择行，重复可依次增加选择下一行&lt;/p&gt;&lt;p&gt;Ctrl+Shift+L：选择多行&lt;/p&gt;&lt;p&gt;Ctrl+Shift+Enter：在当前行前插入新行&lt;/p&gt;&lt;p&gt;Ctrl+X：删除当前行&lt;/p&gt;&lt;p&gt;Ctrl+M：跳转到对应括号&lt;/p&gt;&lt;p&gt;Ctrl+U：软撤销，撤销光标位置&lt;/p&gt;&lt;p&gt;Ctrl+J：选择标签内容&lt;/p&gt;&lt;p&gt;Ctrl+F：查找内容&lt;/p&gt;&lt;p&gt;Ctrl+Shift+F：查找并替换&lt;/p&gt;&lt;p&gt;Ctrl+H：替换&lt;/p&gt;&lt;p&gt;Ctrl+R：前往 method&lt;/p&gt;&lt;p&gt;Ctrl+N：新建窗口&lt;/p&gt;&lt;p&gt;Ctrl+K+B：开关侧栏&lt;/p&gt;&lt;p&gt;Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身&lt;/p&gt;&lt;p&gt;Ctrl+F2：设置/删除标记&lt;/p&gt;&lt;p&gt;Ctrl+/：注释当前行&lt;/p&gt;&lt;p&gt;Ctrl+Shift+/：当前位置插入注释&lt;/p&gt;&lt;p&gt;Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的&lt;/p&gt;&lt;p&gt;Ctrl+Shift+A：选择当前标签前后，修改标签用的&lt;/p&gt;&lt;p&gt;F11：全屏&lt;/p&gt;&lt;p&gt;Shift+F11：全屏免打扰模式，只编辑当前文件&lt;/p&gt;&lt;p&gt;Alt+F3：选择所有相同的词&lt;/p&gt;&lt;p&gt;Alt+.：闭合标签&lt;/p&gt;&lt;p&gt;Alt+Shift+数字：分屏显示&lt;/p&gt;&lt;p&gt;Alt+数字：切换打开第N个文件&lt;/p&gt;&lt;p&gt;Shift+右键拖动：光标多不，用来更改或插入列内容&lt;/p&gt;&lt;p&gt;鼠标的前进后退键可切换Tab文件&lt;/p&gt;&lt;p&gt;按Ctrl，依次点击或选取，可需要编辑的多个位置&lt;/p&gt;&lt;p&gt;按Ctrl+Shift+上下键，可替换行&lt;/p&gt;",
            "excerpt"    : "&lt;!-- MarkdownTOC --&gt;"
		} ,
	
		{
            "id"         : "/write-article-use-jekyll-github-markdown",
            "title"      : "写作环境的搭建（Jekyll+GitHub+Markdown）",
            "category"   : "前端",
            "tags"       : "Jekyll, 写作, Git",
            "url"        : "/2014-09-26-write-article-use-jekyll-github-markdown/",
            "path"       : "_posts/前端/2014-09-26-write-article-use-jekyll-github-markdown.md",
            "next"       : "/2014-09-26-setting-sublime-for-python/",
            "previous"   : "/2014-09-25-use-git-and-github/",
            "date"       : "2014-09-26 00:00:00 +0000",
            "shortdate"  : "September 26, 2014",
            "content"    : "&lt;h2 id=&quot;搭建jekyll环境&quot;&gt;搭建Jekyll环境&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://jekyllcn.com/docs/installation/&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;1-安装rubygems&quot;&gt;1. 安装RubyGems&lt;/h3&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install rubygems&lt;/code&gt;&lt;/p&gt;&lt;h3 id=&quot;2-安装jekyll&quot;&gt;2. 安装&lt;a href=&quot;http://jekyllcn.com/&quot;&gt;「Jekyll」&lt;/a&gt;&lt;/h3&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyllFetching: liquid-2.6.1.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;ERROR:  While executing gem ... &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Errno::EACCES&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    Permission denied - /var/lib/gems&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyllERROR:  Error installing jekyll:	ERROR: Failed to build gem native extension.&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem update &lt;span class=&quot;nt&quot;&gt;--system&lt;/span&gt;ERROR:  While executing gem ... &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RuntimeError&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gem updateUpdating installed gemsUpdating rdoc......27 gems installed&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll......Successfully installed jekyll-2.4.026 gems installed&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;Could not find a JavaScript runtime.&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nodejs&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;jekyll 2.4.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;3-测试jekyll&quot;&gt;3. 测试Jekyll&lt;/h3&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll new my-awesome-site&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;my-awesome-site~/my-awesome-site &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve&lt;span class=&quot;c&quot;&gt;# =&amp;gt; Now browse to http://localhost:4000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;打开浏览器可以看到：&lt;img src=&quot;//o7mw3gkkh.qnssl.com//public/img/tech/0926-3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;使用jekyllbootstrap&quot;&gt;使用&lt;a href=&quot;http://jekyllbootstrap.com/&quot;&gt;「JekyllBootstrap」&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;  &lt;p&gt;The Quickest Way to Blog on GitHub Pages.Jekyll Generates Static Websites&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;1-使用jekyll--github-pages快速生成博客&quot;&gt;1. 使用Jekyll + GitHub Pages快速生成博客&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;JekyllBootstrap提供了一个界面：&lt;a href=&quot;http://jekyllbootstrap.com/usage/jekyll-quick-start.html&quot;&gt;Host on GitHub in 3 Minutes&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;ol&gt;    &lt;li&gt;Create a New Repository&lt;/li&gt;  &lt;/ol&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;ol&gt;    &lt;li&gt;Install Jekyll-Bootstrap&lt;/li&gt;  &lt;/ol&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;ol&gt;    &lt;li&gt;Profit&lt;/li&gt;  &lt;/ol&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;2-利用jekyll进行本地调试&quot;&gt;2. 利用Jekyll进行本地调试&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;直接下载jekyll-bootstrap模板&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/plusjade/jekyll-bootstrap.git&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;jekyll-bootstrap&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;  &lt;p&gt;Your blog is now available at: &lt;a href=&quot;http://localhost:4000/&quot;&gt;http://localhost:4000/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;下载/运行别人已经做好的模板&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:liqing215/note-blog.git&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;note-blog&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serveError:  Address already &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;use - &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;这个错误是因为在另外一个在和终端里面也运行了jekyll serve，关掉之后在打开就可以看到自己的博客了。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com//public/img/tech/0926-4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serveCNAME already taken: ......&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;这个错误是因为CNAME文件的原因，是用来指定自定义域名的，和本地调试地址冲突。如果你没有自定义域名，那就不需要删除。&lt;/p&gt;&lt;h3 id=&quot;3-markdown写作&quot;&gt;3. Markdown写作&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;a href=&quot;http://wowubuntu.com/markdown/basic.html&quot;&gt;Markdown: Basics （快速入门）&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;a href=&quot;http://www.yangzhiping.com/tech/r-markdown-knitr.html&quot;&gt;阳志平：Markdown写作浅谈&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;1) &lt;strong&gt;本地写作&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;http://jonathanmh.com/uberwriter-a-markdown-editor-for-linux/&quot;&gt;UberWriter&lt;/a&gt;: a MarkDown Editor for Linux&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository ppa:w-vollprecht/ppa&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;uberwriter&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul&gt;  &lt;li&gt;只需要在_posts文件夹下添加相应博文的.md文件即可。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;p&gt;注意命名格式一定要是yy-mm-dd-title.md，title是你文章的标题。（也可以卸载.md文件开头）&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;每篇文章的开头都要指定一定的格式，如本文：&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;layout: posttitle: &quot;Ubuntu开发之旅[4]：写作环境的搭建（Jekyll+GitHub+Markdown）&quot;category: 技术tags: Ubuntukeywords: Ubuntu，Jekyll，GitHub，Markdowndescription: nullpublished: true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;layout: post指的是博文格式要按照_layouts文件夹下的&lt;/p&gt;&lt;p&gt;post.html指定的格式来显示。&lt;/p&gt;&lt;p&gt;categories: 指定博文分类技术。&lt;/p&gt;&lt;p&gt;tags: 指定博文标签。&lt;/p&gt;&lt;p&gt;published: 表示发布与否&lt;/p&gt;&lt;p&gt;2) &lt;strong&gt;线上写作&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;在线Md编辑器：&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;p&gt;1.&lt;a href=&quot;http://maxiang.info&quot;&gt;马克飞象&lt;/a&gt;- 专为印象笔记打造的Markdown&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;2.&lt;a href=&quot;https://stackedit.io/&quot;&gt;StackEdit&lt;/a&gt; – In-browser markdown editor&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;3.&lt;a href=&quot;https://www.zybuluo.com/mdeditor&quot;&gt;Cmd Markdown&lt;/a&gt; 编辑阅读器 - 作业部落出品&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;http://prose.io&quot;&gt;Prose · A Content Editor for GitHubProse&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;p&gt;Prose is a content editor for GitHub designed for managing websites. Learn more. Authorize on GitHub.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;最终就选择了Prose.io直接在线编辑修改GitHub上的文章，无比方便。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com//public/img/tech/0926-5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;其他的快速博客方案&quot;&gt;其他的快速「博客」方案&lt;/h2&gt;&lt;h3 id=&quot;1-postachio&quot;&gt;1. &lt;a href=&quot;http://postach.io&quot;&gt;Postach.io&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Collect and share content from your favourite apps.&lt;/p&gt;&lt;p&gt;Connect and post using Evernote, Dropbox and Pocket.&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;When you add or change an HTML, Markdown, or Image file in the folder for your Postach.io site in Dropbox, that change will be reflected on your Postach.io site after Dropbox is finished syncing. It’s that easy.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;2-farbox&quot;&gt;2. &lt;a href=&quot;https://www.farbox.com/&quot;&gt;Farbox&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The Best Blog Platform on Cloud&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;Realtime and dynamic, Folder is a database, FarBox is a webserver. Simple is Everything.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;3-medium&quot;&gt;3. &lt;a href=&quot;https://medium.com/about/welcome-to-medium-9e53ca408c48&quot;&gt;Medium&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;Medium is a new place on the Internet where people share ideas and stories that are longer than 140 characters and not just for friends.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;4-简书&quot;&gt;4. &lt;a href=&quot;http://www.jianshu.com/&quot;&gt;简书&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;找回文字的力量 在这里更好地写作和阅读&lt;/p&gt;&lt;/blockquote&gt;",
            "excerpt"    : "&lt;h2 id=&quot;搭建jekyll环境&quot;&gt;搭建Jekyll环境&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/use-git-and-github",
            "title"      : "Git安装笔记与如何连接GitHub远程仓库",
            "category"   : "编程",
            "tags"       : "Ubuntu, Git",
            "url"        : "/2014-09-25-use-git-and-github/",
            "path"       : "_posts/编程/2014-09-25-use-git-and-github.md",
            "next"       : "/2014-09-26-write-article-use-jekyll-github-markdown/",
            "previous"   : "/2014-09-25-how-to-install-and-config-ubuntu/",
            "date"       : "2014-09-25 00:00:00 +0000",
            "shortdate"  : "September 25, 2014",
            "content"    : "&lt;h2 id=&quot;1-安装设置git&quot;&gt;1. 安装/设置Git&lt;/h2&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#下载&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git&lt;span class=&quot;c&quot;&gt;#设置&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &lt;span class=&quot;s2&quot;&gt;&quot;llgreen&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email &lt;span class=&quot;s2&quot;&gt;&quot;460051518@qq.com&quot;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#常用的命令都设置alias，尽量少敲键盘&lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; alias.br branchgit config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; alias.ci commitgit config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; alias.co checkoutgit config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; alias.st status&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;2-初始化本地仓库&quot;&gt;2. 初始化本地仓库&lt;/h2&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#第一次链接远程库，忘记初始化本地仓库了&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote add origin git@github.com:liqing215/note-blog.gitfatal: Not a git repository &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;or any of the parent directories&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: .git&lt;span class=&quot;c&quot;&gt;#建立本地仓库&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;Documents/Git_repository&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /Documents/Git_repository&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git initInitialized empty Git repository &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /home/llgreen/Documents/Git_repository/.git/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;3-连接克隆远程仓库github&quot;&gt;3. 连接/克隆远程仓库Github&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/generating-ssh-keys&quot;&gt;Permission denied: 怎样生成SSH Keys?&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/settings/ssh&quot;&gt;如何添加SSH key到GitHub?&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#第二次连接远程仓库，忘记添加密匙，权限拒绝&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote add origin git@github.com:liqing215/note-blog.git&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:liqing215/note-blog.gitPermission denied &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;publickey&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;fatal: Could not &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;from remote repository.&lt;span class=&quot;c&quot;&gt;#添加本地_rsa.pub到GitHub上&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#Step 1: Check for SSH keys&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt; ~/.ssh&lt;span class=&quot;c&quot;&gt;#Step 2: Generate a new SSH key&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;460051518@qq.com&quot;&lt;/span&gt;Your identification has been saved &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /home/llgreen/.ssh/id_rsa.Your public key has been saved &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /home/llgreen/.ssh/id_rsa.pub.&lt;span class=&quot;c&quot;&gt;#add your new key to the ssh-agent:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;ssh-agent &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;Agent pid 7359&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-add ~/.ssh/id_rsaEnter passphrase &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; /home/llgreen/.ssh/id_rsa: Identity added: /home/llgreen/.ssh/id_rsa &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/home/llgreen/.ssh/id_rsa&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#Step 3: Add your SSH key to GitHub&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#查看本地_rsa.pub中的SSH key&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /home/llgreen/.ssh/id_rsa.pubssh-rsa &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;a-zA-Zd]&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 460051518@qq.com&lt;span class=&quot;c&quot;&gt;#利用xclip复制到clipboard，在添加到GitHub - SSH key&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;xclip&lt;span class=&quot;nv&quot;&gt;$xclip&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sel&lt;/span&gt; clip &amp;lt; ~/.ssh/id_rsa.pub&lt;span class=&quot;c&quot;&gt;# Copies the contents of the id_rsa.pub file to your clipboard&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#Step 4: Test everything out&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; git@github.comHi liqing215! You&lt;span class=&quot;s1&quot;&gt;&#39;ve successfully authenticated, but GitHub does not provide shell access.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;4-修改推送本地内容到远程库&quot;&gt;4. 修改/推送本地内容到远程库&lt;/h2&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:liqing215/note-blog.git&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;note-blog/&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano README.md &lt;span class=&quot;c&quot;&gt;#添加文件 add -&amp;gt; commit -&amp;gt; push&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add README.md &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;learngit commit&#39;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#查看文件在那个分支，选择推送到gh-pages分支（这是GitHub的pages分支，项目在master上）&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git statusOn branch gh-pagesYour branch is ahead of &lt;span class=&quot;s1&quot;&gt;&#39;origin/gh-pages&#39;&lt;/span&gt; by 1 commit.&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; origin gh-pages&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000&quot;&gt;廖雪峰-Git教程-添加远程库&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;ul&gt;    &lt;li&gt;要关联一个远程库：&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add origin git@server-name:path/repo-name.git&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;关联后，第一次推送master分支的所有内容：&lt;code class=&quot;highlighter-rouge&quot;&gt;git push -u origin master&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;此后，每次本地提交后，推送最新修改：&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin master&lt;/code&gt;&lt;/li&gt;    &lt;li&gt;提交默认的对应分支：&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;&lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;5-git命令大全&quot;&gt;5. Git命令大全&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com//public/img/tech/cheat-sheet-large01.png&quot; alt=&quot;cheat-sheet-large01&quot; /&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;1-安装设置git&quot;&gt;1. 安装/设置Git&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/how-to-install-and-config-ubuntu",
            "title"      : "Ubuntu系统的安装与优化",
            "category"   : "编程",
            "tags"       : "Ubuntu, OS",
            "url"        : "/2014-09-25-how-to-install-and-config-ubuntu/",
            "path"       : "_posts/编程/2014-09-25-how-to-install-and-config-ubuntu.md",
            "next"       : "/2014-09-25-use-git-and-github/",
            "previous"   : "/2014-09-25-begin-ruby-with-rubymine/",
            "date"       : "2014-09-25 00:00:00 +0000",
            "shortdate"  : "September 25, 2014",
            "content"    : "&lt;h2 id=&quot;安装ubuntu&quot;&gt;安装Ubuntu&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/ff42efa9423991c19e22020d.html&quot;&gt;参考教程&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;1-win下的准备&quot;&gt;1. Win下的准备：&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;http://www.ubuntu.com/download/desktop&quot;&gt;下载.iso文件&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://www.baidu.com/s?&amp;amp;wd=UltraISO&quot;&gt;UltraISO下载&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/d169e186800f02436711d87b.html&quot;&gt;制作U盘启动器&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;修改BIOS设置为U盘启动：HP电脑开机按F9&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;2-安装中的分区问题&quot;&gt;2. 安装中的分区问题：&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;swap: 交换空间，类似于Win下的虚拟空间。（内存够大也许不需要）&lt;/li&gt;  &lt;li&gt;/: 根目录，系统的安装目录，相当于C盘，重装时数据丢失。&lt;/li&gt;  &lt;li&gt;/boot是开机引导系统用的，建立此分区可使Win引导Ubuntu，否则默认Ubuntu引导Win。&lt;/li&gt;  &lt;li&gt;/home是个人资料文件夹（下载/音乐/文档）这些，重装时数据保留。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;3-安装过程中下载软件更新和安装软件部分可以skip&quot;&gt;3. 安装过程中下载软件更新和安装软件部分可以skip&lt;/h3&gt;&lt;h2 id=&quot;ubuntu软件&quot;&gt;Ubuntu软件&lt;/h2&gt;&lt;h3 id=&quot;1-简化安装synaptic-新立得&quot;&gt;1. 简化安装：Synaptic (新立得)&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;是Ubuntu的包管理工具apt的图形化前端。&lt;/li&gt;  &lt;li&gt;集成了很多一键安装的软件包，eg: LAMP 解决包依赖的问题。&lt;/li&gt;  &lt;li&gt;这里可以先在系统Software Center内安装这个软件&lt;/li&gt;  &lt;li&gt;tips: 注意此软件打开时terminal中无法使用apt-get&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;E: Could not get lock /var/lib/dpkg/lock - open &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;11: Resource temporarily unavailable&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;E: Unable to lock the administration directory &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/var/lib/dpkg/&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, is another process using it?&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;2-词典youdaostardictgoldendict&quot;&gt;2. 词典：Youdao/Stardict/GoldenDict&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;星际词王最容易安装和使用。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;&lt;a href=&quot;https://www.google.com/search?q=Ubuntu-youdao&quot;&gt;Ubuntu-youdao&lt;/a&gt;安装不上。&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;&lt;a href=&quot;https://www.google.com/search?q=GoldenDict&quot;&gt;GoldenDict&lt;/a&gt;配置太麻烦。&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;3-输入法搜狗google输入法fcitx系列&quot;&gt;3. 输入法：搜狗/Google输入法（Fcitx系列）&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;在synaptic中搜索&lt;em&gt;googlepinyin&lt;/em&gt;即可安装&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;4-浏览器firefoxchromium&quot;&gt;4. 浏览器：Firefox/Chromium&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;还未安装Chromium时使用火狐，火狐的flash插件可以在软件商店中心下载安装解决&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;解决google无法访问 &lt;a href=&quot;http://www.zhihu.com/question/21245060/answer/27201877&quot;&gt;参考知乎&lt;/a&gt;&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;ol&gt;    &lt;li&gt;修改DNS/host：更改系统文件，可能出现莫名奇妙的问题&lt;/li&gt;    &lt;li&gt;GoAgent + &lt;a href=&quot;http://www.baidu.com/s?&amp;amp;wd=SwitchySharp&quot;&gt;SwitchySharp&lt;/a&gt;：GoAgent不稳定&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;http://botey.cn/UPLOAD/All_Files/Chrome_Red.rar&quot;&gt;红杏&lt;/a&gt;：付费，但是基础功能提高Google的访问，足以。tips：此时都不能从Google应用商店下载，只能先下载再拖入chromium安装&lt;/li&gt;  &lt;/ol&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;解决flashPepper Flash Player，一个来自Google更安全更稳定的版本的Flash Player&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pepperflashplugin-nonfree&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;update-pepperflashplugin-nonfree &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;5-系统优化ubuntu-tweak&quot;&gt;5. 系统优化：&lt;a href=&quot;http://ubuntu-tweak.com/&quot;&gt;Ubuntu Tweak&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;国人TualatriX开发的ubuntu平台下的优化大师，简单易用&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;可以设置字体/清理垃圾/查看软件&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;6-下拉式终端guake-terminal&quot;&gt;6. 下拉式终端：「&lt;a href=&quot;https://github.com/Guake/guake/&quot;&gt;Guake Terminal&lt;/a&gt;」&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get build-dep guake&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;界面美化优化&quot;&gt;界面美化/优化&lt;/h2&gt;&lt;h3 id=&quot;1-鼠标指针闪烁&quot;&gt;1. 鼠标指针闪烁&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/3aed632e78668970108091c0.html&quot;&gt;关闭 “未知显示器”&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;2-在当前目录打开terminal&quot;&gt;2. 在当前目录打开terminal&lt;/h3&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nautilus-open-terminal&lt;span class=&quot;c&quot;&gt;#reload dir&lt;/span&gt;nautilus &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;3-字体语言&quot;&gt;3. 字体/语言&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;系统语言使用English，默认字体看起来就很舒服&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;浏览器中的字体实在太难看，下载&lt;a href=&quot;http://www.baidu.com/s?&amp;amp;wd=微软雅黑字体&quot;&gt;微软雅黑字体&lt;/a&gt; -&amp;gt; 在浏览器中选择相应字体+chrome扩展&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;4-使用开源字体库文泉驿的微黑字体&quot;&gt;4. 使用开源字体库文泉驿的微黑字体&lt;/h3&gt;&lt;p&gt;1) 安装文泉驿微黑字体库&lt;/p&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ttf-wqy-microhei&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;2) 下载安装&lt;a href=&quot;http://ubuntu-tweak.com/&quot;&gt;Ubuntu Tweak&lt;/a&gt;&lt;/p&gt;&lt;p&gt;原系统设置中没有找到修改字体的地方，使用Ubuntu Tweak：调整－&amp;gt;字库中，将默认字体、桌面字体等做修改&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1487949759355.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;3) 进一步确认并修改字体配置文件&lt;/p&gt;&lt;blockquote&gt;  &lt;ul&gt;    &lt;li&gt;通常Ubuntu的字体文件存放在/usr/share/fonts下面，字体配置配置文件放在/etc/fonts下面&lt;/li&gt;    &lt;li&gt;Ubuntu 对中文字体的控制集中在一个文件/etc/fonts/conf.d/69-language-selector-zh-cn.conf&lt;/li&gt;    &lt;li&gt;编辑文件：&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo gedit /etc/fonts/conf.d/69-language-selector-zh-cn.conf &lt;/code&gt;&lt;/li&gt;  &lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;修改如下：&lt;/p&gt;&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE fontconfig SYSTEM &quot;fonts.dtd&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;fontconfig&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;match&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pattern&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;test&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lang&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;zh-cn&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/test&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;test&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;qual=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;any&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;family&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;serif&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/test&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;edit&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;family&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prepend&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;binding=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;strong&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;WenQuanYi Micro Hei&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;AR PL UMing CN&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;AR PL UMing HK&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;AR PL New Sung&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;WenQuanYi Bitmap Song&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;AR PL UKai CN&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;AR PL ZenKai Uni&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;HYSong&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;match&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pattern&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;test&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;qual=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;any&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;family&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;sans-serif&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/test&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;test&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lang&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;zh-cn&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/test&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;edit&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;family&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prepend&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;binding=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;strong&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;WenQuanYi Micro Hei&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Droid Sans Fallback&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;HYSong&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;AR PL UMing CN&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;AR PL UMing HK&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;AR PL New Sung&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;AR PL UKai CN&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;AR PL ZenKai Uni&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;match&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pattern&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;test&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;qual=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;any&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;family&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;monospace&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/test&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;test&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lang&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;zh-cn&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/test&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;edit&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;family&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prepend&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;binding=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;strong&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;WenQuanYi Micro Hei Mono&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Droid Sans Fallback&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;HYSong&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;AR PL UMing CN&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;AR PL UMing HK&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;AR PL New Sung&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;AR PL UKai CN&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;AR PL ZenKai Uni&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/fontconfig&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;",
            "excerpt"    : "&lt;h2 id=&quot;安装ubuntu&quot;&gt;安装Ubuntu&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/begin-ruby-with-rubymine",
            "title"      : "Ruby入门：环境的搭建与RubyMine的安装",
            "category"   : "编程",
            "tags"       : "Ruby",
            "url"        : "/2014-09-25-begin-ruby-with-rubymine/",
            "path"       : "_posts/编程/2014-09-25-begin-ruby-with-rubymine.md",
            "next"       : "/2014-09-25-how-to-install-and-config-ubuntu/",
            "previous"   : "/2014-01-01-reading-book-list-2014/",
            "date"       : "2014-09-25 00:00:00 +0000",
            "shortdate"  : "September 25, 2014",
            "content"    : "&lt;h2 id=&quot;搭建ruby环境rvmrubyrailsgems&quot;&gt;搭建Ruby环境（RVM+Ruby+Rails+Gems）&lt;/h2&gt;&lt;h3 id=&quot;1-安装rvm&quot;&gt;1. 安装RVM&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;Ruby版本管理工具，一个命令行工具，它允许你在同一台电脑上安装并管理和切换多个 Ruby 版本。&lt;/li&gt;  &lt;li&gt;cURL是一个利用URL语法在命令行下工作的文件传输工具，它支持文件上传和下载，所以是综合传输工具。&lt;/li&gt;  &lt;li&gt;Source命令也称为“点命令”，通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; get.rvm.io | bash &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; stable&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bash_profile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;21-利用rvm安装ruby&quot;&gt;2.1 利用RVM安装Ruby&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;安装Ruby&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#修改 RVM 的 Ruby 安装源到国内的 淘宝镜像服务器，这样能提高安装速度&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;s/ftp\.ruby-lang\.org\/pub\/ruby/ruby\.taobao\.org\/mirrors\/ruby/g&#39;&lt;/span&gt; ~/.rvm/config/db&lt;span class=&quot;c&quot;&gt;#列出已知的ruby版本&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm list known&lt;span class=&quot;c&quot;&gt;#安装/使用/设置ruby默认版本&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ruby-1.9.3-p547&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm use 1.9.3 &lt;span class=&quot;nt&quot;&gt;--default&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul&gt;  &lt;li&gt;use RVM to install gems&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rvm rubygems current&lt;/code&gt;&lt;/p&gt;&lt;h3 id=&quot;22-ubuntu下apt-get直接安装ruby不推荐&quot;&gt;2.2 Ubuntu下apt-get直接安装Ruby[&lt;em&gt;不推荐&lt;/em&gt;]&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;安装ruby&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install ruby irb rdoc&lt;/code&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;这样安装之后rvm和ruby似乎是分开的，rvm无法使用和管理该版本的ruby&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;安装Rubygems&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get rubygems&lt;/code&gt;&lt;/p&gt;&lt;blockquote&gt;  &lt;p&gt;RubyGems 是什么？RubyGems（简称 gems）是一个用于对 Ruby组件进行打包的Ruby打包系统。它提供一个分发 Ruby 程序和库的标准格式，还提供一个管理程序包安装的工具，功能类似于Linux下的apt-get。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;使用它可以方便第从远程服务器下载并安装Rails。输入执行命令：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install rails --remotegem install rails--include-dependencies&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;安装-rails-环境&quot;&gt;安装 Rails 环境&lt;/h3&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; https://rubygems.org/&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; https://ruby.taobao.org&lt;span class=&quot;c&quot;&gt;#手动更新下RubyGems 和其他需要更新的 Gem&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem update &lt;span class=&quot;nt&quot;&gt;--system&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem update&lt;span class=&quot;c&quot;&gt;#使用 RubyGems 安装 Rails&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;rails&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rails &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;Rails 4.1.6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&quot;安装rubymine&quot;&gt;安装RubyMine&lt;/h2&gt;&lt;h3 id=&quot;1-安装oracle-sdk&quot;&gt;1. 安装Oracle SDK&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/7f766daf5e20944101e1d02b.html&quot;&gt;百度经验&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#因为版权问题，在Ubuntu的APT仓库中不提供Oracle Java下载&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-cache search oracle-java　&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;搜索不到任何包&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-cache search java7&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;只可以搜索到OpenJDK的相关包&lt;span class=&quot;c&quot;&gt;#添加PPA：Personal Package Archive&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository ppa:webupd8team/java&lt;span class=&quot;c&quot;&gt;#更新完成后，选择安装Java7&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;oracle-java7-installer&lt;span class=&quot;c&quot;&gt;#设置环境变量&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;oracle-java7-set-default&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&quot;2-安装rubymine&quot;&gt;2. 安装RubyMine&lt;/h3&gt;&lt;ul&gt;  &lt;li&gt;    &lt;p&gt;下载.tar.gz文件&lt;a href=&quot;http://www.jetbrains.com/ruby/&quot;&gt;Ruby on Rails IDE :: JetBrains RubyMine&lt;/a&gt;&lt;/p&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;p&gt;解压并安装&lt;/p&gt;  &lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#进入软件包目录&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./bin/rubymine.shbash: ./bin/rubymine.sh: Permission denied&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chmod &lt;/span&gt;777 Soft&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; rubymine.sh&lt;span class=&quot;nt&quot;&gt;-rw-------&lt;/span&gt; 1 llgreen llgreen 5848  6月 10 19:22 rubymine.sh&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chmod &lt;/span&gt;777 rubymine.sh&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./bin/rubymine.shrun&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul&gt;  &lt;li&gt;激活&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;p&gt;输入序列号验证：&lt;a href=&quot;http://peter2009.iteye.com/blog/1975994&quot;&gt;JetBrain 软件注册码&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;右键锁定到启动器&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;###3. 第一次使用&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;选择配色&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;  &lt;p&gt;深色主题：Dracula&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;  &lt;li&gt;开始一个Rails项目&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com//public/img/tech/0926-1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com//public/img/tech/0926-2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;h2 id=&quot;搭建ruby环境rvmrubyrailsgems&quot;&gt;搭建Ruby环境（RVM+Ruby+Rails+Gems）&lt;/h2&gt;"
		} ,
	
		{
            "id"         : "/reading-book-list-2014",
            "title"      : "2014年阅读书单",
            "category"   : "思考",
            "tags"       : "阅读, 书籍",
            "url"        : "/2014-01-01-reading-book-list-2014/",
            "path"       : "_posts/思考/2014-01-01-reading-book-list-2014.md",
            "next"       : "/2014-09-25-begin-ruby-with-rubymine/",
            "previous"   : "/2013-10-02-blog-build-course/",
            "date"       : "2014-01-01 00:00:00 +0000",
            "shortdate"  : "January 01, 2014",
            "content"    : "",
            "excerpt"    : ""
		} ,
	
		{
            "id"         : "/blog-build-course",
            "title"      : "傻瓜式博客搭建教程：使用GitHub Pages快速生成博客",
            "category"   : "前端",
            "tags"       : "Git, Jekyll",
            "url"        : "/2013-10-02-blog-build-course/",
            "path"       : "_posts/前端/2013-10-02-blog-build-course.md",
            "next"       : "/2014-01-01-reading-book-list-2014/",
            "previous"   : "/2013-09-21-swjtu-photos/",
            "date"       : "2013-10-02 00:00:00 +0000",
            "shortdate"  : "October 02, 2013",
            "content"    : "&lt;p&gt;关键词：&lt;strong&gt;Git+github+jekyll+.tk+DNS.LA+markdown&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;前言搭建博客的几大要素&quot;&gt;前言：搭建博客的几大要素&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;一个域名（即你的博客的网址，这里选用顶级免费域名.tk）&lt;/li&gt;  &lt;li&gt;一个服务器（即博客的代码存放的地方，这里选用github）&lt;/li&gt;  &lt;li&gt;一个Blog生成工具（这里选用jekyll，类似WordPress）&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;第一部分使用github-pages快速生成博客&quot;&gt;第一部分：使用GitHub Pages快速生成博客&lt;/h2&gt;&lt;h3 id=&quot;一介绍git和github&quot;&gt;一、介绍Git和Github&lt;/h3&gt;&lt;p&gt;Git，一个非常强大的版本管理工具。&lt;/p&gt;&lt;p&gt;Github则是一个基于Git的日益流行的开源项目托管库，也就是你的“代码仓库”（repository）。&lt;/p&gt;&lt;p&gt;你可以在本地或者网上对自己的代码进行修改，而Github就是一个将你对代码的任何修改和更改说明（commit）进行同步的一个工具，并且可以进行版本管理。在我们搭建博客的过程中，它就扮演着一个“云仓库”服务器的角色，存放我们的博客代码。&lt;/p&gt;&lt;h3 id=&quot;二github的安装和配置&quot;&gt;二、Github的安装和配置&lt;/h3&gt;&lt;ol&gt;  &lt;li&gt;注册，这个总会吧，官网（&lt;a href=&quot;https://github.com/&quot;&gt;https://github.com/&lt;/a&gt;）&lt;/li&gt;  &lt;li&gt;下载安装（&lt;a href=&quot;https://help.github.com/articles/set-up-git&quot;&gt;https://help.github.com/articles/set-up-git&lt;/a&gt;）&lt;/li&gt;  &lt;li&gt;安装完成后，桌面出现两个图标： &lt;img src=&quot;https://lh4.googleusercontent.com/-muAVO81BsfM/Ukwf1vepLzI/AAAAAAAAAFc/20AHhLdbK8U/s0/GIT.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;[[https://lh4.googleusercontent.com/-muAVO81BsfM/Ukwf1vepLzI/AAAAAAAAAFc/20AHhLdbK8U/s0/GIT.jpg]]&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;GitHub是客户端，点击登陆，输入你先前注册的帐号密码&lt;/li&gt;  &lt;li&gt;Git Shell是Git的命令行，类似于window下的CMD&lt;/li&gt;  &lt;li&gt;在Shell里面配置本地信息，分别输入你的github帐号和邮箱：&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global user.name &quot;Your Name Here&quot;# Sets the default name for git to use when you commitgit config --global user.email &quot;your_email@example.com&quot;# Sets the default email for git to use when you commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;更多关于Github的设置可以看&lt;a href=&quot;http://www.cnblogs.com/sprying/p/3276984.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;三使用github-pages生成博客&quot;&gt;三、使用Github Pages生成博客&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;先前就介绍过Github是一个跨平台的“云仓库”，所以我们既可以在网上操作，也可以在本地操作再推送到云端。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;  &lt;p&gt;我先介绍一下在Github网站上怎么直接用Github Pages快速生成一个博客，再介绍在本地利用Git Shell新建一个，同时可以熟悉一下git的操作流程。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;1、在&lt;a href=&quot;https://github.com&quot;&gt;Github网站&lt;/a&gt;上新建一个仓库（repository），网站右上角：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-eQD90D5qlfY/UkwsyUt3ZHI/AAAAAAAAAFw/xSU3QCTUZPs/s0/%E5%88%9B%E5%BB%BArepository.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;2、输入库的名字，&lt;strong&gt;注意：&lt;/strong&gt;一定要以这种形式&lt;code class=&quot;highlighter-rouge&quot;&gt;yourname.github.com&lt;/code&gt;进行命名，比如我的用户名是&lt;code class=&quot;highlighter-rouge&quot;&gt;liqing215&lt;/code&gt;，于是我的命名就是&lt;code class=&quot;highlighter-rouge&quot;&gt;liqing215.github.com&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-EybvjDatNUg/UkwukR5hZjI/AAAAAAAAAGE/TtrM2NRohGU/s450/%25E5%2588%259B%25E5%25BB%25BArepository2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;3、创建完成之后进入这个界面后点击右边的设置。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-gp-py8RIyfc/Ukww4ubcbGI/AAAAAAAAAGs/oVVXirynjp4/s450/%E5%88%9B%E5%BB%BArepository3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;4、把界面往下拉就可以看到一个“页面自动生成”按钮了，猛击它！！&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-465J4njURXw/Ukww9gZE8PI/AAAAAAAAAG4/2YfW-sTvMWI/s450/%E5%88%9B%E5%BB%BArepository4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;5、然后进入Github自带的markdown编辑器进行编辑，你可以随意修改写上几句自己的话。然后点击右下角的绿色按钮&lt;code class=&quot;highlighter-rouge&quot;&gt;Continue to Layouts&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;6、然后你可以选择一个自己喜欢的主题，点击Publish就可以生成属于你自己的博客啦！&lt;/p&gt;&lt;p&gt;7、试着在地址栏输入http://yourname.github.io/就可以进入你刚刚创建的博客，比如我的就是&lt;a href=&quot;http://liqing215.github.io/&quot;&gt;http://liqing215.github.io/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;当然输入http://yourname.github.com/也可以，它会自动跳转到http://yourname.github.io/&lt;/p&gt;&lt;h3 id=&quot;四在本地上新建一个github项目&quot;&gt;四、在本地上新建一个Github项目&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;其实到以上为止我们已经创建好了一个属于自己的博客，接下来我们再新建一个其他项目，用来熟悉github的整个操作流程，你会发现它真的超好用。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 id=&quot;41-利用github图形界面&quot;&gt;4.1 利用GitHub图形界面&lt;/h4&gt;&lt;p&gt;1、跟上面一样，在网站上新建一个repository，这里我们把名字命名为myBlog，（其实随意啦）&lt;/p&gt;&lt;p&gt;2、新建好到这个界面的时候，打开你的GitHub软件，刷新一下你就可以在列表里看到你新建的那个repository了。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-hTOYtR5YD2E/Ukw5VGhg8qI/AAAAAAAAAHo/ysaYhKsb9Ic/s450/HTTP+SSH.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;3、此时你就可以把网上的仓库加载到本地：&lt;/p&gt;&lt;p&gt;一种非常简单的方法是点击列表中repository的右边有个clone按钮，点击之后等待下载，然后右键可以选择open in explorer在资源管理器中打开。&lt;/p&gt;&lt;p&gt;在资源管理器中你可以新建文件啊，更改文件啊，随便进行任何修改之后回到GitHub你会发现它已经感应到了。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-03kwuSLa5fg/Ukw6OzSVIBI/AAAAAAAAAH0/lPmjGm3-Fzg/s450/local+update.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;之后点击上方的publish按钮就可以把本地的更改发布上去了，这里publish的概念应该就是发布一个新版本，在右边它会让你填写commit，应该是对此版本的一个说明。&lt;/p&gt;&lt;h4 id=&quot;42-利用git-shell命令行&quot;&gt;4.2 利用Git Shell命令行&lt;/h4&gt;&lt;p&gt;1、也可以选择在Shell下完成整个过程，虽然比较麻烦，但是有一种程序员的感觉有木有：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-hTOYtR5YD2E/Ukw5VGhg8qI/AAAAAAAAAHs/CnHE_IV0TP0/s450/HTTP+SSH.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;p&gt;2、在上图中可以看到在Shell中新建一个仓库的完整命令：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;makdir ~/hello-world    //创建一个项目hello-worldcd ~/hello-world       //打开这个项目git init             //初始化touch README //创建说明文件git add README        //更新README文件git commit -m &#39;first commit&#39;     //提交更新，并注释信息“first commit”git remote add origin https://github.com/liqing215/myBlog.git //连接远程github项目git push -u origin master     //将本地项目更新到github项目上去&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;3、还有怎样推送一个已经存在的，被你修改过的项目到网上：&lt;/p&gt;&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add origin https://github.com/liqing215/myBlog.git //连接远程github项目git push -u origin master     //将本地项目更新到github项目上去&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;4、发现&lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/liqing215/myBlog.git&lt;/code&gt;就是下图中标识红线的那个类似于网址的东西了吧，记得把我的改成你的。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-hTOYtR5YD2E/Ukw5VGhg8qI/AAAAAAAAAHs/CnHE_IV0TP0/s450/HTTP+SSH.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;彩蛋可能的一个槽点&quot;&gt;彩蛋：（可能的）&lt;strong&gt;一个槽点&lt;/strong&gt;&lt;/h3&gt;&lt;blockquote&gt;  &lt;p&gt;发现还是图形界面好用吗？只需要用鼠标点击几个按钮就行了？但是程序员可不一样，他们喜欢一直用键盘敲啊敲，这样的场景在电视电影中太常见了而且很酷炫有木有。而且啊？！你有米有发现在Shell下完全不用切换界面了!!!所有工作都在一个黑底白字的框框里面完成了，当你熟悉过后你就会发现图形界面才是更难用的。&lt;/p&gt;&lt;/blockquote&gt;",
            "excerpt"    : "&lt;p&gt;关键词：&lt;strong&gt;Git+github+jekyll+.tk+DNS.LA+markdown&lt;/strong&gt;&lt;/p&gt;"
		} ,
	
		{
            "id"         : "/swjtu-photos",
            "title"      : "西南交大摄影集【一】",
            "category"   : "生活",
            "tags"       : "大学, 摄影, 母校",
            "url"        : "/2013-09-21-swjtu-photos/",
            "path"       : "_posts/生活/2013-09-21-swjtu-photos.md",
            "next"       : "/2013-10-02-blog-build-course/",
            "previous"   : "",
            "date"       : "2013-09-21 00:00:00 +0000",
            "shortdate"  : "September 21, 2013",
            "content"    : "&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2amm4lgrj30sg0ej13y.jpg&quot; alt=&quot;1&quot; /&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2amo5d79j31950pennf.jpg&quot; alt=&quot;2&quot; /&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2amq1wqhj30sg11xnln.jpg&quot; alt=&quot;3&quot; /&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2amr4x2bj30sg0j3trn.jpg&quot; alt=&quot;4&quot; /&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2amvz8lxj30sg0izwyy.jpg&quot; alt=&quot;5&quot; /&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2amxob8wj30sg0izalp.jpg&quot; alt=&quot;6&quot; /&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2amza9z4j30sg0iz1kx.jpg&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;",
            "excerpt"    : "&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2amm4lgrj30sg0ej13y.jpg&quot; alt=&quot;1&quot; /&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2amo5d79j31950pennf.jpg&quot; alt=&quot;2&quot; /&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2amq1wqhj30sg11xnln.jpg&quot; alt=&quot;3&quot; /&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fw2amr4x2bj30sg0j3trn.jpg&quot; alt=&quot;4&quot; /&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2amvz8lxj30sg0izwyy.jpg&quot; alt=&quot;5&quot; /&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2amxob8wj30sg0izalp.jpg&quot; alt=&quot;6&quot; /&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fw2amza9z4j30sg0iz1kx.jpg&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;"
		} 
	]
}
