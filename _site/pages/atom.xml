<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>吕立青的博客</title>
    <link>http://localhost:4000</link>
    <description>想做产品，却误入程序世界爱上设计的摄影师。</description>
    
      <item>
        <title>Vue 应用单元测试的策略与实践 04 - Vuex 单元测试</title>
        <link>http://localhost:4000/2018-11-02-vue-application-unit-test-strategy-and-practice-04-testing-vuex/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-11-02-vue-application-unit-test-strategy-and-practice-04-testing-vuex/</guid>
        <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
        <description>&lt;h2 id=&quot;本文的目标&quot;&gt;本文的目标&lt;/h2&gt;

&lt;p&gt;2.2 在Vue应用的单元测试中，对 Vuex store 该如何测试？如何测试与 Vue 组件之间的交互？&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Given
一个有基本的UT知识和Vue组件单元测试经验的开发者🚶
// When
当他🚶阅读和练习本文的Vuex单元测试的部分
// Then
他能够对Vuex概念的理解更加深入，且知道 &lt;span class=&quot;sb&quot;&gt;`Redux-like`&lt;/span&gt; 架构的好处
他能够合理测试vuex store的mutation、getter中的业务逻辑和异步action
他能够测试组件如何正确读取store中的state以及dispatch action
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;如何理解-vuex-模式&quot;&gt;如何理解 Vuex 模式？&lt;/h2&gt;

&lt;h3 id=&quot;vuex-的前车之鉴&quot;&gt;Vuex 的前车之鉴&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181102201926.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;古人说「读史让人明智」，学习历史是为了更好得前行，为了能够认识现在，看清未来。让我们来看看 Vuex 的历史，Vuex 借鉴于 Redux，而 Redux 的实现构想则最初出身于 &lt;a href=&quot;http://facebook.github.io/flux/docs/overview.html&quot;&gt;Flux&lt;/a&gt; ，这是一个由 Facebook 为其应用所设计的应用程序架构。Flux 模式在 JavaScript 应用里像是找到了新家一样，但其实只是借鉴了&lt;strong&gt;领域驱动设计&lt;/strong&gt; (DDD) 和&lt;strong&gt;命令-查询职责分离&lt;/strong&gt; (CQRS)。&lt;/p&gt;

&lt;h3 id=&quot;cqrs-与-flux-架构&quot;&gt;CQRS 与 Flux 架构&lt;/h3&gt;

&lt;p&gt;描述 Flux 最普遍的一种的方式就是将其与 &lt;strong&gt;Model-View-Controller&lt;/strong&gt; (MVC) 架构进行对比。&lt;/p&gt;

&lt;p&gt;在 MVC 当中，一个 Model 可以被多个 Views 读取，并且可以被多个 Controllers 进行更新。在大型应用当中，单个 Model 会导致多个 Views 去通知 Controllers，并可能触发更多的 Model 更新，这样结果就会变得非常复杂。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jaysoo.ca/images/mvc-diagram.png&quot; alt=&quot;mvc-diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而 Flux 以及我们要学习的 Vuex 则是试图通过强制单向数据流来解决这个复杂度。在这种架构当中，Views 查询 Stores（而不是 Models），并且用户交互将会触发 Actions，Actions 则会被提交到一个集中的 Dispatcher 当中。当 Actions 被派发之后，Stores 将会随之更新自己并且通知 Views 进行修改。这些 Store 当中的修改会进一步促使 Views 查询新的数据。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jaysoo.ca/images/flux-diagram.png&quot; alt=&quot;flux-diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MVC 和 Flux 最大的不同就是查询和更新的分离。在 MVC 中，Model 同时可以被 Controller 更新&lt;em&gt;并且&lt;/em&gt;被 View 所查询。在 Flux 里，View 从 Store 获取的数据是只读的。而 Stores 只能通过 Actions 被更新，这就会影响 Store 本身&lt;em&gt;而不是&lt;/em&gt;那些只读的数据。&lt;/p&gt;

&lt;p&gt;以上所描述的模式非常接近于由 Greg Young 第一次所提出的 CQRS：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果一个方法修改了这个对象的状态，那就是一个 &lt;em&gt;command&lt;/em&gt;（命令），并且一定不能返回值。&lt;/li&gt;
  &lt;li&gt;如果一个方法返回了一些值，那就是一个 &lt;em&gt;query&lt;/em&gt;（查询），并且一定不能修改状态。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;vuex-背后的基本思想&quot;&gt;Vuex 背后的基本思想&lt;/h3&gt;

&lt;p&gt;所以说， Vuex 就是把组件的共享状态 “state” 抽取出来，以&lt;strong&gt;一个&lt;/strong&gt;全局 “store” 的单例模式统一管理。在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为。&lt;/p&gt;

&lt;p&gt;另外，隔离状态管理能够获得很多好处，当然也需要强制遵守一定的规则：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。这也就是 CQRS 中 &lt;em&gt;query&lt;/em&gt;（查询）的一种实现。&lt;/li&gt;
  &lt;li&gt;你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地&lt;strong&gt;提交 (commit) mutation&lt;/strong&gt;，这样使得我们可以方便地跟踪每一个状态的变化。这也就是 CQRS 中 &lt;em&gt;command&lt;/em&gt;（命令）的一种实现。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;如何对-vuex-进行单元测试&quot;&gt;如何对 Vuex 进行单元测试&lt;/h2&gt;

&lt;p&gt;得益于 Vuex 能够将 Vue 应用的共享状态进行隔离，我们的代码也因此变得更加结构化且易于维护，Vuex 中的 mutation、action 和 getter 都被放在了合理的位置，承担不同的职责 ，这也使得对它们进行单元测试变得容易很多。&lt;/p&gt;

&lt;h3 id=&quot;mutations-测试&quot;&gt;mutations 测试&lt;/h3&gt;

&lt;p&gt;Mutation 很容易被测试，因为它们仅仅是一些完全依赖参数的函数。最为简单的 mutation 测试，仅一一对应保存数据切片。此种 mutation 可以不需要测试覆盖，因为基本由架构简单和逻辑简单保证，不需要靠读测试用例来理解。而一个较为复杂、具备测试价值的 mutation 在保存数据的同时，还可能进行了合并、去重等操作。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// count.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// count.test.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./store'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 解构 `mutations`&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutations&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mutations'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'INCREMENT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 模拟状态&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 应用 mutation&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 断言结果&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;actions-测试&quot;&gt;actions 测试&lt;/h3&gt;

&lt;p&gt;Action 应对起来略微棘手，因为它们可能需要调用外部的 API。当测试 action 的时候，我们需要增加一个 mocking 服务层——例如，我们可以把 API 调用抽象成服务，然后在测试文件中用 mock 服务响应所期望的 API 调用。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// product.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../api/shop'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;getAllProducts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'REQUEST_PRODUCTS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;shop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getProducts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'RECEIVE_PRODUCTS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// product.test.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../api/shop'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;getProducts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* mocked response */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'actions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'getAllProducts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAllProducts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'REQUEST_PRODUCTS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'RECEIVE_PRODUCTS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* mocked response */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;getters-测试&quot;&gt;getters 测试&lt;/h3&gt;

&lt;p&gt;getter 的测试与 mutation 一样直截了当。getters 也是比较重逻辑的地方，并且它也是一个纯函数，与 mutations 测试享受同样待遇：纯净的输入输出，简易的测试准备。下面来看一个稍微简单点的 getters 测试用例：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// product.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;filteredProducts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterCategory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterCategory&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// product.test.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'chai'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./getters'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'getters'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'filteredProducts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 模拟状态&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Apple'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fruit'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Orange'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fruit'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Carrot'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vegetable'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 模拟 getter&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fruit'&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 获取 getter 的结果&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filteredProducts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterCategory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 断言结果&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Apple'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fruit'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Orange'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fruit'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;vue-组件和-vuex-store-的交互&quot;&gt;Vue 组件和 Vuex store 的交互&lt;/h2&gt;

&lt;p&gt;前面我们讲完了 Vuex 单元测试所需要的基本知识，而 Vue 组件需要从 Vuex store 读取状态或者是发送 action 改变 store 状态的时候，又该如何测试他们之间的交互呢？接下来就来聊聊如何用 Vue Test Utils 测试 Vue 组件中的 Vuex。&lt;/p&gt;

&lt;p&gt;站在单元测试的角度，其实我们在测试 Vue 组件（单元）的时候不需要关心 Vuex store 长什么样子，我们只需要知道 Vuex store 当中的这些 action 将会在适当的时机触发，以及它们触发时的预期行为是什么。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;amount: $&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;actionClick()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Buy&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapActions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vuex'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapActions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'actionClick'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在单元测试的时候，shallowMount（浅渲染）方法接受一个挂载 options，可以用来给 Vue 组件传递一个伪造的 store。然后我们就可以使用 Jest 模拟一个 action 的行为再传给 store，而 actionClick 这个伪造函数能够让我们去断言该 action 是否被调用过。所以我们在测试 action 的时候就可以只关心 action 的触发，而至于触发之后对 store 做了什么事情我们就不需要再关心了，因为 Vuex 的单元测试会涵盖相关的代码逻辑。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createLocalVue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@vue/test-utils'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vuex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vuex'&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localVue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createLocalVue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;localVue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vuex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vuex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;actionClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'当按钮被点击时候调用“actionClick”的 action'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localVue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'button'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actionClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要注意的是，在这里我们是把 Vuex store 传递给一个 localVue，而不是传递给基础的 Vue 构造函数。这是因为我们不想影响到全局的 Vue 构造函数，如果直接使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.use(Vuex)&lt;/code&gt; 会让Vue 的原型上会增加 $store 属性从而影响到其他的单元测试。而 localVue 则是一个独立作用域的 Vue 构造函数，我们可以对其进行任意的改动。&lt;/p&gt;

&lt;p&gt;当然咯，除了 mock 掉 actions，Vuex store 里面的任何内容我们都可以将其模拟出来，比如 state 或者 getters：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createLocalVue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@vue/test-utils'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vuex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vuex'&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localVue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createLocalVue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;localVue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vuex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vuex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'998'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;clicks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;inputValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'input'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'在app中渲染价格和“state.inputValue”'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localVue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringContaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$998'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;总结一下&quot;&gt;总结一下&lt;/h2&gt;

&lt;p&gt;总之呢，不要测试 Vue 组件和 Vuex store 交互的时候引入一个真实的 Store，那样就不再是单元测试了，还记得我们在第二篇&lt;a href=&quot;https://blog.jimmylv.info/2018-10-29-vue-application-unit-test-strategy-and-practice-02-how-jest-work/&quot;&gt;单元测试基础&lt;/a&gt;中所提到的社交型（Social Tests）还是独立型（Solitary Tests）测试单元吗？Vuex 等 &lt;code class=&quot;highlighter-rouge&quot;&gt;Redux-like&lt;/code&gt; 架构在前端应用中的 “状态管理模式” ，已经将 View 视图层和 State 数据层尽可能合理得拆分与隔离，那么单元测试就只需要分别测试 Vue 和 Vuex，从而就能保证 Vue 组件和数据流按照预期那样工作。&lt;/p&gt;

&lt;h2 id=&quot;未完待续&quot;&gt;未完待续……&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;## 单元测试基础&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 单元测试与自动化的意义&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 为什么选择 Jest&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### Jest 的基本用法&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 该如何测试异步代码？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;## Vue 单元测试&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### Vue 组件的渲染方式&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### Wrapper &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; 方法与选择器&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### UI 组件交互行为的测试&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;## Vuex 单元测试&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### CQRS 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Redux-like&lt;/code&gt; 架构&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 如何对 Vuex 进行单元测试&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### Vue组件和Vuex store的交互&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;## Vue应用测试策略&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试的特点及其位置&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试的关注点&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 应用测试的测试策略&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>Vue 应用单元测试的策略与实践 03 - Vue 组件单元测试</title>
        <link>http://localhost:4000/2018-10-30-vue-application-unit-test-strategy-and-practice-03-testing-vue-components/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-10-30-vue-application-unit-test-strategy-and-practice-03-testing-vue-components/</guid>
        <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
        <description>&lt;h2 id=&quot;本文的目标&quot;&gt;本文的目标&lt;/h2&gt;

&lt;p&gt;2.1 在Vue应用的单元测试中，对不同UI组件的单元测试有何不同？颗粒度该细到什么样的程度？&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Given
一个有基本的UT知识但没写过Vue测试的新人🚶
// When
当他🚶阅读和练习本文的Vue单元测试的部分
// Then
当然，他能够学会Vue组件在测试当中的几种渲染方式
他能够学会UI组件的分类，特别是交互行为的测试方式
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;组件化与-ui-测试&quot;&gt;组件化与 UI 测试&lt;/h2&gt;

&lt;p&gt;在组件化出现之前，我们都压根不谈 UI 的&lt;strong&gt;单元&lt;/strong&gt;测试，哪怕是对于 UI 页面层级的测试来说都是一件非常困难的事情。其实&lt;strong&gt;组件化并不全是为了复用，很多情况下也恰恰是为了分治&lt;/strong&gt;，从而我们可以分组件对 UI 页面进行开发，然后分别对其进行单元测试。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181030220153.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;前端组件化已经让 UI 测试变得容易很多，每个组件都可以被简化为这样一个表达式，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;UI = f(data)&lt;/code&gt;，这个纯函数返回的只是一个描述 UI 组件应该是什么样子的虚拟 DOM，本质上就是一个树形的数据结构。给这个纯函数输入一些应用程序的状态，就会得到相应的 UI 描述的输出，这个过程不会去直接操作实际的 UI 元素，也不会产生所谓的副作用。&lt;/p&gt;

&lt;h3 id=&quot;vue-组件树的测试&quot;&gt;Vue 组件树的测试&lt;/h3&gt;

&lt;p&gt;按理来说按照纯函数这样的思路，Vue 组件的测试应该很简单的说。但与此同时，对 UI 渲染的组件树进行测试依然存在一个问题，从下图中可以看出，越处于上层的组件，其复杂度必然会随之提高。对于最底层的子组件来说，我们可以很容易得将其进行渲染并测试其逻辑的正确与否，但对于较上层的父组件来说，通常来说就需要对其所包含的所有子组件都进行预先渲染，甚至于最上面的组件需要渲染出整个 UI 页面的真实 DOM 节点才能对其进行测试，这显然是不可取的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181030211115.png&quot; alt=&quot;Components-Tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在单元测试中，通常我们希望将重点放在作为独立单元进行测试的组件上，并避免间接断言其子组件的行为。此外，对于包含许多子组件的组件，整个 render 树会变得非常之大，而反复 render 所有的子组件可能会减慢单元测试的速度。&lt;/p&gt;

&lt;p&gt;而根据 Mike Cohn 的测试金字塔中所提到的两件事：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;编写不同粒度的测试&lt;/li&gt;
  &lt;li&gt;层次越高，你写的测试应该越少&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;为了维持金字塔形状，一个健康、快速、可维护的测试组合应该是这样的：写许多小而快的单元测试。适当写一些更粗粒度的测试，写很少高层次的端到端测试。注意不要让你的测试变成冰淇淋那样子，这对维护来说将是一个噩梦，并且跑一遍也需要太多时间。（via &lt;a href=&quot;https://insights.thoughtworks.cn/practical-test-pyramid/&quot;&gt;测试金字塔实战 – ThoughtWorks洞见&lt;/a&gt;）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181030211424.png&quot; alt=&quot;测试金字塔&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对于 Vue 组件树来说，浅渲染（&lt;a href=&quot;https://vue-test-utils.vuejs.org/guides/#shallow-rendering&quot;&gt;Shallow Rendering&lt;/a&gt;）解决了这个问题，也就是说在我们针对某个上层组件进行测试时，可以不用渲染它的子组件，所以就不用再担心子组件的表现和行为，这样就可以只对特定组件的逻辑及其渲染输出进行测试了。Vue 官方提供了 &lt;code class=&quot;highlighter-rouge&quot;&gt;@vue/test-utils&lt;/code&gt; 可以让我们使用浅渲染这个特性，用于测试虚拟 DOM 对象，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.component&lt;/code&gt; 的实例。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@vue/test-utils'&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the mounted Vue instance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;vue-组件的渲染方式&quot;&gt;Vue 组件的渲染方式&lt;/h2&gt;

&lt;h3 id=&quot;浅渲染-shallowmountcomponent-options--wrapper&quot;&gt;浅渲染 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shallowMount(component[, options]) =&amp;gt; Wrapper&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;浅渲染在将一个组件作为一个单元进行测试的时候非常有用，可以确保你的测试不会去间接断言子组件的行为。&lt;code class=&quot;highlighter-rouge&quot;&gt;shallowMount&lt;/code&gt; 方法就是 Shallow Rendering 的封装，&lt;code class=&quot;highlighter-rouge&quot;&gt;shallowMount&lt;/code&gt; 跟 &lt;code class=&quot;highlighter-rouge&quot;&gt;mount&lt;/code&gt; 类似返回 &lt;code class=&quot;highlighter-rouge&quot;&gt;mounted&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;rendered&lt;/code&gt; Vue 组件的 Wrapper，但只会渲染出组件的第一层 DOM 结构，其嵌套的子组件不会被渲染出来，从而使得渲染的效率更高，单元测试的速度也会更快。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@vue/test-utils'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Vue Component shallowMount'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should have three &amp;lt;todo /&amp;gt; components'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Todo'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;全量渲染-mountcomponent-options--wrapper&quot;&gt;全量渲染 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mount(component[, options]) =&amp;gt; Wrapper&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mount&lt;/code&gt; 方法则会将 Vue 组件和所有子组件渲染为真实的 DOM 节点，特别是在你依赖真实的 DOM 结构必须存在的情况下，比如说按钮的点击事件。完全的 DOM 渲染需要在全局范围内提供完整的 DOM API， 这也就意味着 Vue Test Utils 依赖于浏览器环境。&lt;/p&gt;

&lt;p&gt;从技术上讲，你可以在真实的浏览器中运行，但由于在不同平台上启动真实浏览器的复杂性，更建议使用 JSDOM 在虚拟浏览器环境中运行 Node 中的测试。推荐使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;mount&lt;/code&gt; 的方法是依赖于一个名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;jsdom&lt;/code&gt;的库，它本质上是一个完全在 JavaScript 中实现的 headless 浏览器。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@vue/test-utils'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Vue Component Mount'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should delete Todo when click button'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todoLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'li'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'button.delete'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'li'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todoLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;静态渲染-rendercomponent-options--cheeriowrapper&quot;&gt;静态渲染 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;render(component[, options]) =&amp;gt; CheerioWrapper&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; 方法则会将 Vue 组件渲染成静态的 HTML 字符串，而返回的则是一个 Cheerio 实例对象，采用的是一个第三方的 HTML 解析库 Cheerio，这是一个类 jQuery 的库，可以在 Node.js 中遍历 DOM。渲染后所返回的 CheerioWrapper 可以用于分析最终结果的 HTML 代码结构，好处是它的 API 跟 &lt;code class=&quot;highlighter-rouge&quot;&gt;shallowMount&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;mount&lt;/code&gt; 方法的 API 都基本保持一致。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@vue/test-utils'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Vue Component Render'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should not have .todo-done class'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.todo-done'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toContain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;div class=&quot;todo&quot;&amp;gt;&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;纯字符串渲染-rendertostringcomponent-options--string&quot;&gt;纯字符串渲染 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;renderToString(component[, options]) =&amp;gt; string&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;renderToString&lt;/code&gt; 很简单，顾名思义就是把一个组件渲染成对应的 HTML 字符串，在此不再赘述。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderedString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@vue/test-utils'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Vue Component renderedString'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should have .todo class'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderedString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toContain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;div class=&quot;todo&quot;&amp;gt;&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;实例-wrapper-find-方法与选择器&quot;&gt;实例 Wrapper &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; 方法与选择器&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181030214617.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从前面的示例代码中可以看到，无论哪种渲染方式所返回的 wrapper 都有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.find()&lt;/code&gt; 方法，它接受一个 selector 参数，然后返回一个对应的 wrapper 对象。而 &lt;code class=&quot;highlighter-rouge&quot;&gt;.findAll()&lt;/code&gt; 则会返回一个类型相同的 wrapper 对象数组，里面包含了所有符合条件的子组件。在这个对象数组的基础上，&lt;code class=&quot;highlighter-rouge&quot;&gt;at&lt;/code&gt; 方法则可以返回指定位置的子组件，&lt;code class=&quot;highlighter-rouge&quot;&gt;trigger&lt;/code&gt; 方法用于在组件之上模拟触发某种行为。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@vue/test-utils&lt;/code&gt; 中的 Selectors 即选择器，既可以是 CSS 选择器（也支持比较复杂的关系选择器组合），也可以是 Vue 组件 或是一个 option 对象，以便于在 wrapper 对象中可以轻松地指定想要查找的节点。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* CSS Selector */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//class syntax&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//tag syntax&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//id syntax &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'[foo=&quot;bar&quot;]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//attribute syntax&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'div:first-of-type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//pseudo selectors&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在下面的示例中，我们可以通过 Vue 组件构造函数的引用找到该组件，与此同时也可以基于 Vue 组件属性的子集来查找组件和节点，或者通过根据 $ref 选择相应元素。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Component Constructor */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./foo.vue'&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Find Option Object */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'my-button'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Find by refs */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'myButton'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ui-组件交互行为的测试&quot;&gt;UI 组件交互行为的测试&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181030212827.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们不但可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; 方法查找 DOM 元素，还可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;trigger&lt;/code&gt; 方法在组件上模拟触发某个 DOM 事件，比如 Click，Change 等等。对于浅渲染来说，事件模拟并不会像真实环境中所预期的那样进行传播，因此我们必须在一个已经设置好了事件处理方法的实际节点上才能够调用，实际上 &lt;code class=&quot;highlighter-rouge&quot;&gt;.trigger()&lt;/code&gt; 方法将会根据模拟的事件触发这个组件的 prop。例如，&lt;code class=&quot;highlighter-rouge&quot;&gt;.trigger('click')&lt;/code&gt; 实际上会获取 对应的 &lt;code class=&quot;highlighter-rouge&quot;&gt;clickHandler&lt;/code&gt; propsData 并调用它。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should trigger event when click button'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clickHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallowMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;propsData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clickHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clickHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;关于-nexttick-怎么办&quot;&gt;关于 &lt;code class=&quot;highlighter-rouge&quot;&gt;nextTick&lt;/code&gt; 怎么办？&lt;/h3&gt;

&lt;p&gt;Vue 会异步的将未生效的 DOM 更新批量应用，以避免因数据反复突变而导致的无谓的重新渲染。这也是为什么在实践过程中我们经常在触发状态改变后用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.nextTick&lt;/code&gt; 来等待 Vue 把实际的 DOM 更新做完的原因。&lt;/p&gt;

&lt;p&gt;为了简化用法，Vue Test Utils 同步应用了所有的更新，所以你不需要在测试中使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.nextTick&lt;/code&gt; 来等待 DOM 更新。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注意：当你需要为诸如异步回调或 Promise 解析等操作显性改进为事件循环的时候，&lt;code class=&quot;highlighter-rouge&quot;&gt;nextTick&lt;/code&gt; 仍然是必要的。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结一下&quot;&gt;总结一下&lt;/h2&gt;

&lt;p&gt;Vue 组件的单元测试是前端 UI 测试组合的基石，单元测试保证了代码库里的每个组件（被测试的主体）都能按照预期那样工作，它的数量在测试组合中应该远远多于其他类型的测试。其实呢，也不要太拘泥于测试金字塔中各层次的名字，UI 测试显然不必位于金字塔的最高层，你也完全可以用 Cypress、Nightwatch 这样的 E2E 框架对 UI 进行单元测试，这个的话我们就留到后面再聊。&lt;/p&gt;

&lt;h2 id=&quot;未完待续&quot;&gt;未完待续……&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;## 单元测试基础&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 单元测试与自动化的意义&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 为什么选择 Jest&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### Jest 的基本用法&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 该如何测试异步代码？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;## Vue 单元测试&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### Vue 组件的渲染方式&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### Wrapper &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; 方法与选择器&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### UI 组件交互行为的测试&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;## Vuex 单元测试&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### CQRS 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Redux-like&lt;/code&gt; 架构&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 如何对 Vuex 进行单元测试&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### Vue组件和Vuex store的交互&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;## Vue应用测试策略&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试的特点及其位置&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试的关注点&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 应用测试的测试策略&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>Vue 应用单元测试的策略与实践 02 - 单元测试基础</title>
        <link>http://localhost:4000/2018-10-29-vue-application-unit-test-strategy-and-practice-02-how-jest-work/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-10-29-vue-application-unit-test-strategy-and-practice-02-how-jest-work/</guid>
        <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
        <description>&lt;h2 id=&quot;本文的目标&quot;&gt;本文的目标&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;在 TDD 做完 Tasking 列完实例化数据之后，完全没有UT基础不知道该怎么写单元测试？&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Given
一个完全没有UT基础的新人🚶
// When
当他🚶阅读和练习本文的Jest的部分
// Then
他能够把Given/When/Then的套路学会
他能够学会Jest的基本用法，包括测试suite和断言等语法
他能够学会Jest中测试异步的几种方式
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;单元测试基础&quot;&gt;单元测试基础&lt;/h2&gt;

&lt;p&gt;在&lt;a href=&quot;https://blog.jimmylv.info/2018-09-19-vue-application-unit-test-strategy-and-practice-01-introduction/&quot;&gt;上一篇文章&lt;/a&gt;当中我们介绍了单元测试的意义，以及为何选择 Facebook 的 Jest 作为我们的测试框架。现在就让我们一起来学习如何编写最基础的单元测试。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果你已经有了使用 Jest 编写单元测试的经验，可以选择直接跳到第二段。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;第一个-jest-实例&quot;&gt;第一个 Jest 实例&lt;/h3&gt;

&lt;p&gt;首先创建 &lt;code class=&quot;highlighter-rouge&quot;&gt;jest-demo&lt;/code&gt; 项目并安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;jest&lt;/code&gt; 作为项目 &lt;code class=&quot;highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt; 依赖：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;demo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$_&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后创建一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;math.js&lt;/code&gt; 文件，输入一个我们稍后测试的 &lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt; 函数:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来，让我们写第一个测试。在同一个文件夹中创建一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;math.test.js&lt;/code&gt; 文件，在这里我们将使用 Jest 来测试 &lt;code class=&quot;highlighter-rouge&quot;&gt;math.js&lt;/code&gt; 中定义的函数:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./math'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Math module'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;should return sum result when one number plus another number&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Given&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anotherNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// When&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anotherNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Then&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn test&lt;/code&gt; （添加 NPM Script）你就可以看到相应的结果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/jimmylv.github.io/master/images/jest-failure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;givenwhenthen-的套路&quot;&gt;Given/When/Then 的套路&lt;/h3&gt;

&lt;p&gt;麻雀虽小五脏俱全，在上面的例子当中，我们可以看到很多的测试元素，下面将会一一介绍：&lt;/p&gt;

&lt;p&gt;首先我们看到的是一个由 &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; 包裹的测试主体最小单元，采用了Given When Then的经典格式，我们常常称之为测试三部曲，也可以解释为 3A 即：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GWT&lt;/th&gt;
      &lt;th&gt;3A&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Given&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Arrange&lt;/td&gt;
      &lt;td&gt;准备测试测试数据，有时可以抽取到 &lt;code class=&quot;highlighter-rouge&quot;&gt;beforeEach&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;When&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Act&lt;/td&gt;
      &lt;td&gt;采取行动，一般来说就是调用相应的模块执行对应的函数或方法&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Then&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Assert&lt;/td&gt;
      &lt;td&gt;断言，这时需要借助的就是Matchers的能力，Jest还可以扩展自己的Matcher&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; 后面的  &lt;code class=&quot;highlighter-rouge&quot;&gt;toBe&lt;/code&gt;称之为 Matcher，是断言时的判断语句以验证正确性 ✅，在后面的文章中我们还会接触更多 Matchers，甚至可以扩展一些特别定制的 Matchers。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改断言的结果，就可以看到成功后的结果了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/jimmylv.github.io/master/images/jest-success.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;模块间依赖-fakestubmockspy&quot;&gt;模块间依赖 Fake/Stub/Mock/Spy&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/jimmylv.github.io/master/images/isolate.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如同人类世界中的羁绊，软件模块之间必然也免不了依赖。&lt;a href=&quot;https://martinfowler.com/&quot;&gt;Martin Fowler&lt;/a&gt; 在 &lt;a href=&quot;https://martinfowler.com/bliki/UnitTest.html&quot;&gt;UnitTest&lt;/a&gt; 这篇文章当中将单元测试作了一个重要的区分，即你所测试的单位应该是社交型（Social Tests）还是独立型（Solitary Tests）？ 想象一下你正在测试一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; Class 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;price()&lt;/code&gt; 方法，而 &lt;code class=&quot;highlighter-rouge&quot;&gt;price()&lt;/code&gt; 方法需要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt; Class 中调用一些函数。如果你希望单元测试所测试的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; 模块是独立的，那么你就不想直接使用真正的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt; Class，因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt; Class 的错误会直接导致 &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; Class 的单元测试失败。相反，你可能会使用一个替身作为依赖的对象，也就是我们接下来会提到的 Fake/Stub/Mock/Spy。&lt;/p&gt;

&lt;p&gt;现实世界里，我们在写代码和单元测试时，常常遇到的一些需要替身的对象包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Database 数据库&lt;/li&gt;
  &lt;li&gt;Network requests 网络请求&lt;/li&gt;
  &lt;li&gt;access to Files 存取文件&lt;/li&gt;
  &lt;li&gt;any External system 任何外部系统&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其实在 Jest 当中，Fake/Stub/Mock/Spy 这些概念或许会有所混淆，而这跟 JavaScript 语言本身的特点有一定关系，但是我觉得 Jest 通过统一的 &lt;code class=&quot;highlighter-rouge&quot;&gt;fn()&lt;/code&gt; 方法把问题解决得还比较恰当，让我们来一块儿看看实例🌰：&lt;/p&gt;

&lt;h3 id=&quot;mock-用于替代整个模块&quot;&gt;Mock 用于替代整个模块&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SoundPlayer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./sound-player'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockPlaySoundFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./sound-player'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;playSoundFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockPlaySoundFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以看到 &lt;code class=&quot;highlighter-rouge&quot;&gt;jest.mock()&lt;/code&gt; 方法中的第二个参数是一个函数，那么我们就可以完全接管整个 &lt;code class=&quot;highlighter-rouge&quot;&gt;./sound-player&lt;/code&gt; JavaScript 模块，比如说这里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;playSoundFile&lt;/code&gt; 本来应该是从 &lt;code class=&quot;highlighter-rouge&quot;&gt;./sound-player&lt;/code&gt; 这个文件当中 &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; 出来的，而被 Mock 之后我们的测试就可以使用 Mock 所返回的数据或方法，从而保证模块所返回的内容是我们所期望的。但这时需要注意的是，该模板的所有功能都已经被 Mock 掉，而不会再从原模块当中返回，所以我们就需要重新实现该模块中的所有功能。可别一不小心就成了张艺谋导演《影》片中的影子，被完全“取而代之”，连夫人也被 Mock 所吸引。&lt;/p&gt;

&lt;h3 id=&quot;stub-用于模拟特定行为&quot;&gt;Stub 用于模拟特定行为&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockFn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mockFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// With a mock implementation:&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returnsTrue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;returnsTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里的特定行为也可以是没有行为，&lt;code class=&quot;highlighter-rouge&quot;&gt;jest.fn()&lt;/code&gt; 代表着我就是一个 Stub（桩），“你来我就在这里，你走我也依然在这里，风雨无阻”。不需要什么输入输出，只要能在测试的时候验证到 Stub 被调用过就行，也就能够断言到某处代码被执行，从而确定代码被测试所覆盖。而另一种特定行为就是返回特定的数据，即 Stub 也可以根据输入模拟返回一种输出，作为某些模块的替身帮它演戏，比如“小鲜肉们”遇到要跳车啦、要&lt;del&gt;卿卿我我&lt;/del&gt;（误）的时候就要找替身，“一二三四五六七八”连台词都不用背还需要配音。&lt;/p&gt;

&lt;h3 id=&quot;spy-用于监听模块行为&quot;&gt;Spy 用于监听模块行为&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spy packages without affecting the functions code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./video'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'plays video'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spyOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'play'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isPlaying&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPlaying&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spy 并不会影响到原有模块的功能代码，而只是充当一个监护人的作用，“你可以继续我型我秀上课讲小话，但是老师会偷偷告诉你妈妈，看你放学后老妈不打断你的腿”。比如说上文中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;video&lt;/code&gt; 模块中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;play()&lt;/code&gt; 方法已经被 &lt;code class=&quot;highlighter-rouge&quot;&gt;spy&lt;/code&gt; 过，那么之后 &lt;code class=&quot;highlighter-rouge&quot;&gt;play()&lt;/code&gt; 方法只要被调用过，我们就能判断其是否执行，甚至执行的次数。&lt;/p&gt;

&lt;h3 id=&quot;如何-mock-全局的方法&quot;&gt;如何 Mock 全局的方法？&lt;/h3&gt;

&lt;p&gt;把全局的数据 Mock 掉很简单，只需要像 &lt;code class=&quot;highlighter-rouge&quot;&gt;window.document.title = undefined&lt;/code&gt; 这样简单 Fake 赋值就很完美。而像 &lt;code class=&quot;highlighter-rouge&quot;&gt;matchMedia&lt;/code&gt; 这样的方法在 jsdom 里面并没有被实现，这时候我们当然就需要去把它 Mock 掉，简单把要用到的一些对象属性赋值就好，总之不至于在运行时报错。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matchMedia&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;removeListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;代码模块的易测性&quot;&gt;代码模块的易测性&lt;/h3&gt;

&lt;p&gt;从上文的一些例子当中，我们也可以看到，不管是 Fake/Stub/Mock/Spy 最最重要的一个原则就是「简单」，因为我们是在写测试代码，而所依赖的模块就应该以最简单的形态展现出来，绝不要给 &lt;code class=&quot;highlighter-rouge&quot;&gt;jest.fn()&lt;/code&gt; 编写&lt;del&gt;过于&lt;/del&gt;哪怕一点点复杂的逻辑。如果这个模块有多种表现形态，那就把它分种测试单元进行多次 Mock，每个 &lt;code class=&quot;highlighter-rouge&quot;&gt;it()&lt;/code&gt; 单元测试一定是针对于单个功能点进行测试的。&lt;/p&gt;

&lt;p&gt;保持单元测试独立性的同时，也是在促使你去思考什么样的模块才是符合「职责单一原则」的。单元测试站在使用者的角度来使用该模块，而代码的易测性也就代表着代码的可维护性。&lt;/p&gt;

&lt;h2 id=&quot;如何测试异步代码&quot;&gt;如何测试异步代码？&lt;/h2&gt;

&lt;p&gt;异步是 JavaScript 中绕不开的永恒话题，多亏了 ES6+ 高级语法所提供的多种优雅的异步代码方式，让我们写测试代码的方式也多了好多种。（逃&lt;/p&gt;

&lt;p&gt;让我们先来看一下什么是异步请求，这里有一个通过 Chrome API 获取当前位置的实例，可想而知 Chrome 要根据 GPS 信号才能算出当前的经纬度，相当于从卫星🛰来回走了一遭，怎么不会异步（代表有延时，延迟返回）呢？&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geolocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCurrentPostion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chrome&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;异步获取当前位置&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;callback-回调函数&quot;&gt;Callback 回调函数&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'the data is peanut butter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'peanut butter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这是最最普通的方式，也是各大框架都支持的一种写法， &lt;code class=&quot;highlighter-rouge&quot;&gt;done()&lt;/code&gt; 作为异步代码结束的结束标志，从而让测试框架“知道”在结束时进行断言。但这种方式侵入性比较强，对测试语句不友好且违背了 Given/When/Then 的三段式套路，就像回调地狱一样的道理，如果让 &lt;code class=&quot;highlighter-rouge&quot;&gt;done()&lt;/code&gt; 充斥着测试那么代码也就变得混乱。&lt;/p&gt;

&lt;h3 id=&quot;promise-让爱-then-到底&quot;&gt;Promise 让爱 &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; 到底&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'the data is peanut butter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assertions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'peanut butter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lemon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lemon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'octopus'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rejects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toThrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'octopus'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其实这种方式也好不到哪去，无非就是把 &lt;code class=&quot;highlighter-rouge&quot;&gt;done()&lt;/code&gt; 方式换成了 &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; 又一次充斥在整个 expect 当中，混乱了 When 和 Then 两种本该分开的时刻。但也有一个不错的点，可以通过 Promise 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.resolve()&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;.reject()&lt;/code&gt; 方法使测试分别验证正常或异常的情况。&lt;/p&gt;

&lt;h3 id=&quot;asyncawait-让异步变得同步&quot;&gt;Async/Await 让异步变得同步&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'the data is peanut butter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assertions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'peanut butter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Async/Await 语法糖在业务代码当中就特别好使了，好处不多说直接看得见：原本需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;done()&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; 的地方都不再混乱，又一次回归到了正常的 Given/When/Then 三段式套路，让测试代码变得非常清晰易读。唯一需要注意的是， 额外的&lt;code class=&quot;highlighter-rouge&quot;&gt;expect.assertions(number)&lt;/code&gt; 其实是验证在测试期间所调用的断言数量，这在测试多层异步代码时很有用，以确保实际调用回调中的断言次数。&lt;/p&gt;

&lt;p&gt;意犹未尽吗？更加Jest相关的内容可以查看这篇文章 &lt;a href=&quot;https://flaviocopes.com/jest/&quot;&gt;Testing JavaScript with Jest&lt;/a&gt;，与此同时具体的 API 可以参考&lt;a href=&quot;https://facebook.github.io/jest/&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;未完待续&quot;&gt;未完待续……&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;## 单元测试基础&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 单元测试与自动化的意义&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 为什么选择 Jest&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### Jest 的基本用法&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 该如何测试异步代码？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;## Vue 单元测试&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### Vue 组件的渲染方式&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### Wrapper &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; 方法与选择器&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### UI 组件交互行为的测试&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;## Vuex 单元测试&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### CQRS 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Redux-like&lt;/code&gt; 架构&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 如何对 Vuex 进行单元测试&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### Vue组件和Vuex store的交互&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;## Vue应用测试策略&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试的特点及其位置&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试的关注点&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 应用测试的测试策略&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>【译】（数字化）平台思维的艺术</title>
        <link>http://localhost:4000/2018-10-09-the-art-of-platform-thinking-zh/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-10-09-the-art-of-platform-thinking-zh/</guid>
        <pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate>
        <description>&lt;h1 id=&quot;the-art-of-platform-thinking--平台思维的艺术&quot;&gt;The Art of Platform Thinking | 平台思维的艺术&lt;/h1&gt;

&lt;p&gt;作者: Amit Kaul (&lt;a href=&quot;https://www.thoughtworks.com/profiles/amit-kaul&quot;&gt;Vice President, Emerging Technology&lt;/a&gt;) &amp;amp; Ryan Murray (&lt;a href=&quot;https://www.thoughtworks.com/profiles/ryan-murray&quot;&gt;Director, Digital Platform Strategy&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;标签: &lt;a href=&quot;https://www.thoughtworks.com/insights/technology-strategy&quot;&gt;#Technology Strategy&lt;/a&gt;, &lt;a href=&quot;https://www.thoughtworks.com/insights/innovation&quot;&gt;#Innovation&lt;/a&gt;, &lt;a href=&quot;https://www.thoughtworks.com/insights/strategy&quot;&gt;#Strategy&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The digitally-savvy customer has highly sophisticated - and ever-evolving - expectations for engagement and brand experience at every touchpoint. Delivering on and keeping up with these expectations requires an innovation-driven culture with customer value at its center. We’ve seen a common theme across our most successful client engagements: innovation and speed to market at scale requires more than just intense customer-centricity, adoption of agile practices and technology acumen. For almost any organization with significant brand value and historical technology investments, there will be friction from years of built-up technical and architectural debt. Unlocking core assets and business capabilities to enable customer-facing innovation requires effort and investment.&lt;/p&gt;

&lt;p&gt;精通数字化的客户对每一种触点技术的品牌体验与互动都有着高度复杂的、不断变化的期望，实现和保持这些期望，需要以客户价值为中心的创新驱动文化。我们在最成功的客户合作案例当中看到了一个共同的主题：即大规模的创新和快速推向市场需要的不仅仅是以客户为中心、采取敏捷实践和保持技术敏锐度。对于几乎任何最具品牌价值和对技术做过投资的组织来说，多年积累的技术和架构债务都会带来摩擦（friction）。解锁核心资产与业务价值，任重而道远，只有持续不断付出努力和投资，才能够实现面向客户的创新。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;All organizations have an innate innovation capability &lt;a href=&quot;http://twitter.com/home/?status=All%20organizations%20have%20an%20innate%20innovation%20capability%20say%20@amitk_tw%20and%20Ryan%20Murray%20http://thght.works/2qjllpS%20via%20@ThoughtWorks&quot;&gt;&lt;img src=&quot;https://g.twimg.com/dev/documentation/image/Twitter_logo_blue_16.png&quot; alt=&quot;&quot; /&gt;Tweet this&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;所有组织的创新能力与生俱来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But yours may be so knotted up with organizational complexity and technology delivery friction that it’s less painful to stick to business as usual. How do you know? If progress becomes mired in departmental finger pointing, or your best people are busy just keeping things up and running, innovation is suffering.  This wasted energy costs time and competitive advantage, it creates frustrating experiences for your customers, and ultimately drives tech talent out the door.&lt;/p&gt;

&lt;p&gt;但是，企业可能会由于组织复杂度和技术交付相冲突而陷入困境，从而无法像往常一样专心于本职工作。有趣的问题？当事态陷入部门间相互指责的泥潭，或者企业的中流砥柱却只是忙于维持事情运转的时候，创新就会因此受挫。所浪费的资源将会消耗时间和竞争优势，并给你的用户造成糟糕的体验，并最终将技术人才扫地出门。&lt;/p&gt;

&lt;p&gt;Platform thinking can help untangle those knots and free your organization up to be more innovative without adding additional debt such as inventory, real estate, divisions, and staff.&lt;/p&gt;

&lt;p&gt;平台思维能够帮助企业走出困境，并释放企业组织的创新能力，而不用增添额外债务，比如库存积压、财产损失、部门分歧和人员流失等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s how it works:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For your organization to make the most out of technology investments, you need a comprehensive strategy that puts your essential business priorities at the heart of your approach to foundational technologies. Platform thinking then becomes the touchstone for making key technology decisions that will simplify your ecosystem, stimulate innovation, and accelerate delivery.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以下是平台思维的工作原理：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;要让企业合理充分地运用技术投资，企业就需要一个全面的战略，将至关重要的业务核心放在打造基础技术的方法上，平台思维就会变成制定核心技术决策的试金石，从而简化企业生态系统，刺激创新，并且加速交付。&lt;/p&gt;

&lt;p&gt;At &lt;strong&gt;Thought&lt;/strong&gt;Works, we’ve spent the past few years building and enhancing platforms that enable our enterprise clients to utilize the assets they already possess to support their forward-looking business objectives. We’ve collaborated with our clients to address key questions, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How do I reduce friction in our existing software development processes, reduce  architectural debt, and achieve the accelerated delivery I need to be competitive?&lt;/li&gt;
  &lt;li&gt;Is an off-the-shelf solution the right approach, or should we develop a custom solution in-house? Or is the answer somewhere in between?&lt;/li&gt;
  &lt;li&gt;How do I unlock the assets and infrastructure we already possess to stay ahead of potential competitors and market disruption?&lt;/li&gt;
  &lt;li&gt;How does our technology platform support a culture of innovation across the entire business?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 &lt;strong&gt;Thought&lt;/strong&gt;Works，我们花费数年经验打造与巩固企业平台，帮助我们的客户利用现有资产实现其极具远见的商业抱负。我们协同客户定位核心问题，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何减少已有软件开发流程的摩擦、减少技术架构债务、提升市场竞争的交付速度？&lt;/li&gt;
  &lt;li&gt;是否存在现成有效的方法实践，或是提供企业定制化的内部解决方案？或是答案位于两者之间？&lt;/li&gt;
  &lt;li&gt;如何充分利用企业已经具备的资产与基础设施，以保持相较于潜在对手或市场搅局者的竞争优势？&lt;/li&gt;
  &lt;li&gt;企业技术平台该如何支撑贯穿业务始终的全面创新文化？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By working in the trenches with partners facing real-world challenges, we have defined a holistic approach to technology that helps organizations meet and often exceed the expectations of today’s digitally savvy customer. Our platform-focused approach distills a client’s business objectives, current state architecture, and technology capability to provide a set of actions to maximize innovation and increase speed to market. We call it a Digital Platform Strategy.&lt;/p&gt;

&lt;p&gt;通过与合作伙伴并肩作战面对现实挑战，&lt;strong&gt;Thought&lt;/strong&gt;Works 打造了一整套解决方案，能够帮助企业组织达到甚至常常超越当今数字化知识丰富的客户所期望的效果。&lt;strong&gt;Thought&lt;/strong&gt;Works 以平台为重心的解决方案可以用于提炼企业业务目标、现有架构形态与技术能力，以提供一系列具体行动，充分发挥创新能力与加快推向市场速度。我们称之为数字平台战略。&lt;/p&gt;

&lt;p&gt;The Digital Platform Strategy is a ThoughtWorks offering that distils our global experience and learnings across domains and clients in order to unlock enterprise assets to facilitate innovation. Our knowledge framework and accelerators direct our clients to define and maximize the value of their core business capabilities and data assets through lean, iterative development of their foundational technology platform. Our wealth of experience gathered across a range of clients and industries, enables us to significantly accelerate and de-risk customer’s efforts. We’ve fallen into the traps and potholes and found the escape hatches so you don’t have to.&lt;/p&gt;

&lt;p&gt;数字平台战略是 &lt;strong&gt;Thought&lt;/strong&gt;Works 所打造的一款产品，浓缩无数专业领域和企业客户的全球性经验与成果，帮助企业解锁核心资产以加速创新变革。我们所提供的理论框架与高效执行力，引导我们的客户定义并实现核心业务能力和数据资产的价值最大化，通过精益、迭代开发企业基础技术平台。我们所积累的丰富经验在无数企业客户与专业领域都卓有成效，使得我们能够显著促进企业创新进程并化解客户风险。我们曾经掉过坑、踩过无数陷阱并成功找到了逃生舱口（出路），而您不必再重蹈覆辙。&lt;/p&gt;

&lt;h3 id=&quot;platform-thinking-at-the-core--平台思维的核心&quot;&gt;Platform Thinking at the Core | 平台思维的核心&lt;/h3&gt;
&lt;p&gt;Platform thinking works by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Removing friction from delivery teams by focusing on high quality, self-service access to foundational technology.&lt;/li&gt;
  &lt;li&gt;Creating an ecosystem of technology and business capabilities. Using domain-driven principles, carefully-factored business capability interfaces (APIs) are critical components of an effective, modern Service Oriented Architecture (SOA) strategy.&lt;/li&gt;
  &lt;li&gt;Explicitly investing in a foundation for experimentation which ensures every delivery team has access to tools to make testing new ideas and validating learnings easy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;平台思维得益于以下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通过专注高质量、面向基础技术的自服务来消除交付团队的摩擦（冲突）&lt;/li&gt;
  &lt;li&gt;打造技术与业务能力的生态系统。能够利用领域驱动原则、精准业务分析的能力接口（APIs），会是一个卓有成效、现代化的面向服务架构（SOA）重要组件。&lt;/li&gt;
  &lt;li&gt;明确投资于试验性（创新实验）基础设施，确保每个交付团队都能使用相关工具，轻松测试新想法、验证经验收获。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This isn’t a “build it and they will come” approach to platform building. The Digital Platform Strategy engages your business and technology stakeholders to prioritize building the most valuable capabilities in a lean, incremental manner.&lt;/p&gt;

&lt;p&gt;这不是一个「一蹴而就」的平台建设方法。数字平台战略使得企业的业务和技术利益相关者以精益、渐进的方式优先打造最具价值的能力。&lt;/p&gt;

&lt;h3 id=&quot;the-pillars-of-the-digital-platform-strategy--数字平台战略的五大支柱&quot;&gt;The Pillars of the Digital Platform Strategy | 数字平台战略的（五大）支柱&lt;/h3&gt;

&lt;p&gt;Our Digital Platform Strategy framework is a blueprint for platform building that is comprised of five essential pillars (focus areas). Breaking down the complexity of an enterprise platform provides targeted focus on delivering business value through classes of foundational technology. To remove friction and build ecosystems, we focus on the key areas of delivery:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Delivery Infrastructure&lt;/li&gt;
  &lt;li&gt;Architecture and API Remediation&lt;/li&gt;
  &lt;li&gt;Self Service Data&lt;/li&gt;
  &lt;li&gt;Experiment Infrastructure and Telemetry&lt;/li&gt;
  &lt;li&gt;Customer Touchpoint Technology&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fw2b5m83dtj318g0i2acf.jpg&quot; alt=&quot;Digital Platform Strategy - a blueprint&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们的数字平台战略框架是由五个主要支柱（重点领域）所组成的平台建设蓝图。打破企业平台复杂度，通过基础技术能力建设提供有针对性的商业价值交付。为了消除技术摩擦与打造生态系统，我们专注于交付的关键领域（核心部分）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;交付基础设施&lt;/li&gt;
  &lt;li&gt;API 和架构治理&lt;/li&gt;
  &lt;li&gt;数据自服务&lt;/li&gt;
  &lt;li&gt;创新实验基础设施和监控体系&lt;/li&gt;
  &lt;li&gt;客户触点技术&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181016213732.png&quot; alt=&quot;DPS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delivery Infrastructure:&lt;/strong&gt; We take a holistic approach to infrastructure, build and release support, and observability. Elastic infrastructure and related tooling, coupled with simplified build, deployment, and monitoring enables engineers to deliver rapidly and safely, with appropriate controls and audit support. This pillar directly addresses delivery friction, reducing your time to market for new products and services.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;交付基础设施&lt;/strong&gt;：我们采取全方位的方式来打造基础设施、构建与发布支持、以及监控系统。弹性基础设施和相关工具再加上精简化的构建、部署和监控，使工程师能够在快速、安全地进行交付的同时，得以适当控制与审计支持。这个支柱将直接解决交付摩擦的问题，减少新产品和服务推向市场的时间。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Architecture and API Remediation:&lt;/strong&gt; Engaging customer experiences that evolve to meet the constantly changing market require maximizing the value of existing organizational assets and business capabilities. Our approach to API and architecture includes methods for building net-new capabilities using modern service-oriented (SOA) and event-driven (EDA) approaches, as well as practices for remediating legacy systems so they effectively expose key existing assets to developers. A platform of well-factored, self-service APIs that hide the process, technical, and operational complexity of the underlying capability allows teams to move quickly to experiment with and production-alize new customer-facing solutions. We typically start by focusing internally to optimizing your own delivery capability, and can extend the approach to public API strategies to expand the ecosystem to your customers and partners.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;API 和架构治理&lt;/strong&gt;：打造响应市场不断变化的用户体验，需要最大化现有组织资产与业务能力的价值。我们对 API 和架构治理的途径包括使用现代化面向服务（SOA）和事件驱动（EDA）的方式打造网络新功能的方法，也包括治理遗留系统的具体实践，从而有效地将关键的现有资产提供给开发者使用。 一个完美的自助 APIs 平台，隐藏了底层功能的流程、技术和操作复杂度，使团队能够快速试验并为生产实现提供新的面向客户方案。通常我们会从内部开始着手优化企业的交付能力，并且能够扩展公共 API 战略的解决方案，将生态系统扩展到客户与合作伙伴。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-Service Data:&lt;/strong&gt; Today’s businesses rely on real-time analytics to power decisions. Data and application architecture are increasingly merging as we create more real-time, data-enabled business capabilities, while supporting advanced data science-driven analytics. Application developers need to focus on contributing to the organizational data stream and selectively tapping into it. Your data platform is therefore becoming ubiquitous. It needs to reduce friction by streamlining the use, management, and operations of complex data technologies like Kafka, Hadoop, and Spark. It should also expose a self-service ecosystem of curated data assets, addressing data strategy issues such as data lake design, data ownership, and authorization issues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;数据自服务&lt;/strong&gt;：现今的商业依赖于实时分析来做出强有力的决策（在当今的商业世界里，企业依赖于实时分析来做出强有力的决策）。数据和应用程序架构正由于越来越多实时的、数据支持的业务能力而融合在一起，与此同时也在支撑着进一步的数据科学驱动的分析。应用程序开发者需要专注致力于企业数据流和有选择性地挖掘数据。因此，企业数据平台将变得无处不在。这需要通过简化 Kafka、Hadoop 或 Spark 等复杂数据技术的使用、管理和操作来减少摩擦（friction）。与此同时还应该暴露出一个用于管理数据资产的自服务生态系统，解决诸如数据湖设计、数据所有权和授权问题等数据战略问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Experiment Infrastructure and Telemetry:&lt;/strong&gt; Innovation lives and dies by the ability to learn quickly through purposeful, measured experimentation. Using canary release processes, toggle architecture, and meaningful instrumentation, your experiment infrastructure helps you to make the right decisions about your experiments and investments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;创新实验基础设施和监控体系&lt;/strong&gt;：创新的存亡与否取决于通过有针对性、有分寸的试验而快速学习的能力。使用金丝雀发布流程、功能切换开关（toggle）架构和有意义的监控系统，创新实验基础设施能够帮助企业对实验与投资制定正确决策。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customer Touchpoint Technology:&lt;/strong&gt; Knowledge of your customer is the foundation of delivering value. Together, a consistent content strategy, a single view of the customer, and transparent telemetry provide unprecedented customer insight that enables personalized product offerings. The benefit? New, targeted value streams that can be delivered quickly across multiple channels.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用户触点技术&lt;/strong&gt;：了解客户是交付价值的基础。一致的内容战略、单一用户视野和透明的监控体系可以共同提供前所未有的客户洞察力，实现个性化的产品交付。好处就是能够在多重渠道快速投放新的有针对性的价值流。&lt;/p&gt;

&lt;h3 id=&quot;the-digital-platform-strategy-process-at-a-glance--数字平台战略流程一览&quot;&gt;The Digital Platform Strategy Process at a Glance | 数字平台战略流程一览&lt;/h3&gt;
&lt;p&gt;A Digital Platform Strategy engagement begins with a discovery to understand your customer’s business priorities, organizational complexity, and technical maturity. We then merge that with our patterns, practices, and principles of enterprise platform building. This culminates in a prioritized, lean technology strategy and platform roadmap tailored to your business needs.&lt;/p&gt;

&lt;p&gt;数字平台战略始于探索，以理解客户的业务优先级、组织复杂性或是技术成熟度。然后，我们再将其与我们的企业平台构建的模式、实践和原则相结合。这将会是为企业业务需求而量身定制优先级的精益技术战略和平台路线图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fw2b8vb2goj318g0g4k3z.jpg&quot; alt=&quot;Digital Platform Strategy - the approach&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Moving into the execution phase, the partnership of strategy and delivery moves into high gear. We begin with the highest priority platform capabilities to vet strategy against reality. At this stage, we test our assumptions about organizational delivery capabilities, degree of technical debt, and remediation complexity. This allows us to deliver early platform value that underpins your key business priorities. As the engagement continues, insights from execution are fed back into continuous strategy development and review to inform the path of execution. This feedback loop fine-tunes the short- and medium-term tactical moves, while platform thinking maintains the strategic vision of meeting your business objectives.&lt;/p&gt;

&lt;p&gt;进入到执行阶段，我们的战略与交付合作关系将会全力以赴，马力全开。我们从最高优先级的平台能力建设开始着手，根据具体事实重新审视具体策略。在此阶段，我们根据企业交付能力、技术债务程度和治理复杂度的具体情况，逐个测试验证我们的假设。这使我们能够较早地交付平台价值，以巩固企业关键业务优先级的基础。随着合作的持续进行，来自于具体实施的洞见将会被反馈到持续的战略制定与回顾中去，以制定改善新的执行路径。这种反馈环可以对中短期的战术实施进行微调，与此同时平台思维则继续维持企业商业目标所需的战略视野。&lt;/p&gt;

&lt;h3 id=&quot;so-where-do-you-begin--所以从何开始着手&quot;&gt;So Where Do You Begin? | 所以，从何开始着手？&lt;/h3&gt;
&lt;p&gt;Digitally-savvy customers want to feel delighted and inspired; they expect your brand to add value to their lives. They want to feel the passion that you feel for your brand and to be part of your next great solution. Building out a scalable technology strategy that manages complexity will enable rapid development, stimulate innovation, and create new opportunity for growth. An optimized foundational technology platform is essential to being able to meet your customer’s expectations and increase their engagement with your brand.&lt;/p&gt;

&lt;p&gt;数字化知识丰富的客户都期望着愉悦的用户体验、或是从中备受鼓舞；他们期待企业品牌能够为其生活添资增彩。他们期望感受到企业对于品牌的热忱，并且想成为企业下一代卓越解决方案中的一员。建立可管理复杂度的、可伸缩的技术战略，将会使得快速开发、激励创新和创造增长新机遇成为可能。优化的基础技术平台，对满足客户期望并增强用户品牌粘性至关重要。&lt;/p&gt;

&lt;p&gt;For more information on how to harness the creative horsepower that your enterprise already possesses, check out ThoughtWorks’ &lt;a href=&quot;https://www.thoughtworks.com/digital-platform-strategy&quot;&gt;Digital Platform Strategy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;有关如何运用企业资产发挥创新性能力的更多信息，请查看 &lt;strong&gt;Thought&lt;/strong&gt;Works 的数字平台战略（&lt;a href=&quot;https://www.thoughtworks.com/digital-platform-strategy&quot;&gt;Digital Platform Strategy&lt;/a&gt;）。&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>记一次 #博客大赛# 的作者采访</title>
        <link>http://localhost:4000/2018-09-28-interview-record-of-blog-contest-in-baozun/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-09-28-interview-record-of-blog-contest-in-baozun/</guid>
        <pubDate>Fri, 28 Sep 2018 00:00:00 +0000</pubDate>
        <description>&lt;blockquote&gt;
  &lt;p&gt;在宝尊，#博客大赛#可以继续。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;主持人：本周，小编捉到一枚有趣的程序猿，随我一起来认识一下这位爱写博客的摄影师！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20180928215647.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Q: “采访开始前，可以先简单介绍一下自己吗（经历、爱好等）？”&lt;/p&gt;

&lt;p&gt;A: “大家好，我是 TIC 成都研发中心的吕靖，也可以叫我Jimmy。技术涉猎广泛，也算是一名 Full Stack Developer，个人偏爱前端，对Web开发和小程序等技术比较熟悉。
自诩为一名「想做产品，却误入程序世界爱上设计的摄影师」。活跃于 GitHub 并特别热忱于写作和分享，这是我的博客：&lt;a href=&quot;https://blog.jimmylv.info&quot;&gt;https://blog.jimmylv.info&lt;/a&gt;”&lt;/p&gt;

&lt;p&gt;Q: “我之前偶然进入你的博客页面，上面有很多的文章，都是自己的作品吗？你是从什么时候开始写博客的呢？”&lt;/p&gt;

&lt;p&gt;A: “是的，从2013年开始写到2018年，到现在应该有几十篇博客文章，都是自己对编程、前端、学习方法、效率提升等方面的一些思考，除了博客，网页里也有自己的演讲PPT和摄影作品（不过照片放得少）。还有很多写作想法尚在酝酿当中，通常我会通过GitHub issues来管理自己的写作灵感，这也是我在 #博客大赛#中的文章&lt;a href=&quot;https://blog.jimmylv.info/2016-12-04-agile-learning-based-on-github-issues/&quot;&gt;《基于GitHub的敏捷学习方法之道与术》&lt;/a&gt;介绍的一种方法。”&lt;/p&gt;

&lt;p&gt;Q: “最近我们也在办博客大赛，鼓励大家写博客，就你而言，写博客给你带来哪些好处呢？”&lt;/p&gt;

&lt;p&gt;A: “写博客于我而言，源自我最喜欢的一句话：「在成长的同时帮助他人成长，在学习的同时帮助他人学习」，这也是我一直以来的动力。&lt;/p&gt;

&lt;p&gt;具体来说，给我带来的好处有两方面：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一方面是让我自己成为一个更有价值的人，帮助我自己形成个人知识系统的闭环。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果说搜索引擎（如Google）是程序员‍最好的外部索引，那么写作则是通过整理来建立内部索引的最有效方式。在这个信息爆炸的时代，我们每天会接触到大量的信息或材料，如果不加以整理那么我们的大脑就自然而然变成了一个杂物的堆积地。我们需要采取更有效的方式进行吸收，而整理「吸收」的过程就是在去伪存真，与此同时将类似的内容进行主题分类，整理结构的过程就是建立大脑神经网络之间的索引。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20180928214840.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;另一方面我深知「知识流通性的重要性」，知识只有被传播才能释放出更大的价值，让每个人都能成为一个更有价值的人。&lt;/strong&gt;写作能够帮助建立起属于自己个人的知识体系，那与此同时，当然也可以将其输出到即反哺到整个互联网当中去。”&lt;/p&gt;

&lt;p&gt;Q: “那如果自己写的博客可能浏览的人不多或者有人来对你的文章进行反驳，会影响你写博客的动力吗？这种时候你都是怎么做的呢？”&lt;/p&gt;

&lt;p&gt;A: “这个我倒不是很介意，其实前面所提到的两个方面是相辅相成的：写作这件事本身就是对自己很有价值的，分享出去只是让价值能够&lt;strong&gt;有机会&lt;/strong&gt;传播出去而已。&lt;/p&gt;

&lt;p&gt;两者中间的鸿沟就在于，&lt;strong&gt;当自己还没成为一个更有价值的人之前&lt;/strong&gt;，怎么好意思去产出自认为有价值的东西呢？只有当成长到某一阶段之后，再去考虑如何构建影响力，那时自己也才会更加有底气。&lt;/p&gt;

&lt;p&gt;所以我建议最开始写文章的时候，完全不要去在乎流量和外界的评论，这件事情本身是完全利己的。&lt;/p&gt;

&lt;p&gt;换个角度想嘛，将输入的知识整理成体系，然后更加高效快速地进行输出，这个过程中形成的一个知识闭环系统，当然会使自己的知识结构更加牢固，而与此同时也是对互联网开放精神的一个传承，她赋予了我们这么多美妙的知识，准确来说是获取知识的机会，那我们当然也应该有所回馈。”&lt;/p&gt;

&lt;p&gt;Q: “作为一个写了5年博客的“老人”，除了上面说的不用在乎流量和评论，你对刚入门写博客的同事还有什么建议吗？”&lt;/p&gt;

&lt;p&gt;A: “我想借用 采铜 提到的&lt;a href=&quot;http://liqi.io/caitong/&quot;&gt;「心智利器」&lt;/a&gt;来尝试给出一些建议：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我的生活其实很简单，我每天只需对付三个妖怪：灵感、信息和作品。那么我的利器就是一个把它们浸泡在里面、催促它们交合的池子…… 那么怎么构造出这个池子呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;灵感 稍纵即逝&lt;/strong&gt;：每当自己的脑海里有一些非常不错的想法，就用最快的速度把这个方法记录下来。可以是纸和笔，也可以是iOS原生的备忘录，或者更高阶的 Shortcuts 或 Drafts 等手机 App。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;信息 茫茫似海&lt;/strong&gt;：每当看到不错的文章都可以将其存入 稍后读 软件，或者是通过 RSS 这样的信息聚合软件来统一阅读。当然，书籍属于更可靠，更有结构化的信息来源，它可以促使灵感，也可以作为作品的辅助。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;作品 精益求精&lt;/strong&gt;：至于作品，我们应该用精益的思维角度来思考和创作。每当写完文章都可以找朋友或利益相关者先看一下，以最快速度获取反馈，持续改进。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;灵感、信息和作品这三者其实也是相辅相成的。信息保存下来，可以作为作品的参考，而灵感则是产生作品的先决条件，信息可看可不看，但是可以在作品完成的过程当中再去看，统一处理。&lt;/p&gt;

&lt;p&gt;如果利用程序员‍的思维来做一次重构，进行更高层次的抽象的话。那就是：作品的产生可以有模板，灵感和信息就可以拿来直接填充这样的模板，从而使效率从量变达到质变，反过来，产生出来的作品又可以继续提炼总结出新的模板。&lt;/p&gt;

&lt;p&gt;以上就是我从个人出发对刚入门写博客的同事一些建议。”&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;​&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20180928215406.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;主持人结语啦：正如刘未鹏在《暗时间》中所说，用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处。写作是大脑对自己库存知识的检索，通过检索，可以发现自己的知识漏洞，激励自己持续学习持续思考。&lt;/p&gt;

&lt;p&gt;写博客对于自己而言，是个人内在的一个提升，对于参与在互联网世界的所有人来说，是一种知识的继承，大家每天浏览着他人的智慧，同时又在丰富这个智慧，共同享用这份知识果实。&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>Vue 应用单元测试的策略与实践 01 - 前言</title>
        <link>http://localhost:4000/2018-09-19-vue-application-unit-test-strategy-and-practice-01-introduction/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-09-19-vue-application-unit-test-strategy-and-practice-01-introduction/</guid>
        <pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;本文主要尝试解决三个问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在 TDD 做完Tasking列完实例化数据之后，完全没有UT基础不知道该怎么写单元测试？&lt;/li&gt;
  &lt;li&gt;在Vue应用的单元测试中，对UI组件和vuex store等测试的区别有何不同？颗粒度该细到什么程度？&lt;/li&gt;
  &lt;li&gt;测试收益如何最大化，如何配置高性价比的测试策略，即什么地方到底该花力气测试，什么地方又可以暂且放一放？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不谈论的包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ATT 验收测试 或 E2E 端到端测试，这个是我想进一步探索的话题，特别是在TDD的语境下。&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/322&quot;&gt;#322&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;为什么要 TDD？但是我会讲为什么要 UT 单元测试。测试和TDD是两码事，而光是自动化测试的好处就已经足够多，但是如何做到更好的自动化和持续集成，那就需要TDD来指引方向。&lt;/li&gt;
  &lt;li&gt;Snapshot Testing 快照测试，其实我是很认可快照这种形式，但需要改进其工作流，至少结合Image Snapshot和Storybook等工具，甚至更应该放到CI上去。&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/311&quot;&gt;#311&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面我就来结合具体场景，进一步实例化这些问题，举几个🌰：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在 TDD 做完Tasking列完实例化数据之后，完全没有UT基础不知道该怎么写单元测试？&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Given
一个完全没有UT基础的新人🚶
// When
当他🚶阅读和练习本文的Jest的部分
// Then
他能够把Given/When/Then的套路学会
他能够学会Jest的基本用法，包括测试suite和断言等语法
他能够学会Jest中测试异步的几种方式
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;在Vue应用的单元测试中，对UI组件和vuex store等测试的区别有何不同？颗粒度该细到什么程度？&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Given
一个有基本的UT知识但没写过Vue测试的新人🚶
// When
当他🚶阅读和练习本文的Vue单元测试的部分
// Then
当然，他能够学会Vue组件在测试当中的几种渲染方式
他能够学会UI组件的分类，特别是交互行为的测试方式
他能够对Vuex概念的理解更加深入，且知道 &lt;span class=&quot;sb&quot;&gt;`Redux-like`&lt;/span&gt; 架构的好处
他能够合理测试vuex store的mutation和getter中的业务逻辑
他能够测试组件如何正确dispatch action以及action中如何做异步操作
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Vue项目中测试收益如何最大化，如何配置高性价比的测试策略，即什么地方到底该花力气测试，什么地方又可以暂且放一放？&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Given
一个具备UT基础但找不到着力点的求索之徒🐒
// When
当他🚶阅读本文的Vue应用测试策略部分
// Then
他能够找到测试的重点，重新燃起对UT的热情🔥
他能够在项目背景下合理配置单元测试的测试策略
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;于是乎，这就是本系列文章的大纲，先放出来给大家一个对于Vue应用单元测试的全局观：&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gu&quot;&gt;## 单元测试基础&lt;/span&gt;

&lt;span class=&quot;gu&quot;&gt;### 为什么选择 Jest&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;### Jest 的基本用法&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;### 该如何测试异步代码？&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;### 单元测试与自动化的意义&lt;/span&gt;

&lt;span class=&quot;gu&quot;&gt;## Vue 单元测试&lt;/span&gt;

&lt;span class=&quot;gu&quot;&gt;### Vue 组件的渲染方式&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;### Wrapper `find()` 方法与选择器&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;### UI 组件交互行为的测试&lt;/span&gt;

&lt;span class=&quot;gu&quot;&gt;## Vuex 单元测试&lt;/span&gt;

&lt;span class=&quot;gu&quot;&gt;### CQRS 与 `Redux-like` 架构&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;### 如何对 Vuex 进行单元测试&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;### Vue组件和Vuex store的交互&lt;/span&gt;

&lt;span class=&quot;gu&quot;&gt;## Vue应用测试策略&lt;/span&gt;

&lt;span class=&quot;gu&quot;&gt;### 单元测试的特点及其位置&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;### 单元测试的关注点&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;### 应用测试的测试策略&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;😯 哦豁，正文终于开始……&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;为什么要有单元测试&quot;&gt;为什么要有单元测试？&lt;/h2&gt;

&lt;p&gt;引用&lt;a href=&quot;https://github.com/linesh-simplicity/linesh-simplicity.github.io/issues/122&quot;&gt;好友&lt;/a&gt;鲜明的观点就是：&lt;strong&gt;写不好是能力问题，不写则是态度问题&lt;/strong&gt;。单元测试客观上可以让开发者的工作更高效，Vue 应用的单元测试是一定要的。&lt;/p&gt;

&lt;h3 id=&quot;单元测试的上下文&quot;&gt;单元测试的上下文&lt;/h3&gt;

&lt;p&gt;谈任何东西都一定要有个上下文。你的论述不能是「因为单元测试有这些好处，所以我们要做单元测试」，而应该是「不做单元测试我们会遇到什么问题」，这样才能回答「为什么要写单元测试」的问题。那么我们谈论单元测试的上下文是什么呢？不做单元测试我们会遇到什么问题呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/11895199/40921436-03152e66-6842-11e8-9c24-920ba5d8dd27.png&quot; alt=&quot;agile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图为一个产品从 idea 分析、设计、开发、测试到交付并获取市场反馈的过程。&lt;/p&gt;

&lt;p&gt;而&lt;strong&gt;单元测试的上下文就是存在于「敏捷」当中&lt;/strong&gt;。敏捷为的是更快地交付有价值的可工作的软件。为此，它有一个指标来度量这个「更快」，那就是 lead time，它度量的是一个 idea 从提出被验证，到最终上生产环境面对用户的时间。显然，这个时间越短，软件获得反馈的时间就越短，对价值的验证就越快发生。&lt;/p&gt;

&lt;h3 id=&quot;单元测试的意义&quot;&gt;单元测试的意义&lt;/h3&gt;

&lt;p&gt;这个结论对我们写不写单元测试有什么影响呢？答案是，不写单元测试，你就快不起来。为啥呢？因为每次发布，你都要投入人力来进行手工测试；因为没有测试，你倾向于不敢随意重构，这又导致代码逐渐腐化，复杂度使得你的开发速度降低。&lt;/p&gt;

&lt;p&gt;那么在这个上下文中来谈要不要单元测试，我们就可以很有根据了，而不是“开发爽了就用，不爽就不用”这样含糊的答案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果你说我的业务部门不需要频繁上线，并且我有足够的人力来覆盖手工测试，那你可以不用单元测试&lt;/li&gt;
  &lt;li&gt;如果你说我不在意代码腐化，并且我也不做重构，那你可以不用单元测试&lt;/li&gt;
  &lt;li&gt;如果你说我不在意代码质量，好几个没有测试保护的 &lt;code class=&quot;highlighter-rouge&quot;&gt;if-else&lt;/code&gt; 裸奔也不在话下，脑不好还做什么程序员，那你可以不用单元测试&lt;/li&gt;
  &lt;li&gt;如果你说我确有快速部署的需求，但我们不 care 质量问题，出回归问题就修，那你可以不用单元测试&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除此之外，你就需要写单元测试。如果你想随时整理重构代码，那么你需要写单元测试；如果你想有自动化的测试套件来帮你快速验证提交的完整性，那么你需要写单元测试。&lt;/p&gt;

&lt;h3 id=&quot;单元测试与自动化的关系&quot;&gt;单元测试与自动化的关系&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/images/master/2018/20181029222614.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;综上，我们用来谈论单元测试的「透镜」是什么呢？一言以蔽之，两点：&lt;strong&gt;反馈速度&lt;/strong&gt;和&lt;strong&gt;自动化&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;自动化&lt;/strong&gt;回答的是&lt;strong&gt;要不要自动化的单元测试&lt;/strong&gt;这个问题。测试是重构的唯一保障，也就是说，没有测试，基本上就没法重构代码（重构指的是 &lt;a href=&quot;https://www.martinfowler.com/bliki/DefinitionOfRefactoring.html&quot;&gt;不改变软件可观测行为的前提下改善代码内部设计或实现&lt;/a&gt; ），基本上就只能看着代码腐化。那么，基本上只要你的系统需要持续发展，你就需要单元测试。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;反馈速度&lt;/strong&gt;回答的是&lt;strong&gt;要不要 TDD、测试先行还是后补&lt;/strong&gt;这个问题。答案是，需要 TDD，最好先行，因为&lt;a href=&quot;https://github.com/linesh-simplicity/linesh-simplicity.github.io/issues/197&quot;&gt;可以提高反馈速度&lt;/a&gt;，缩短反馈周期，与此同时减少不必要的浪费。&lt;/p&gt;

&lt;p&gt;至此，回答了「为什么我们需要写单元测试」的问题。下面让我们来谈谈如何写好 JavaScript 代码和 Vue 应用框架的单元测试。&lt;/p&gt;

&lt;h2 id=&quot;如何选择一个测试框架&quot;&gt;如何选择一个测试框架？&lt;/h2&gt;

&lt;p&gt;众所周知，JavaScript 世界里最不缺的就是轮子，测试框架也是如此。其实这里的子标题就是为什么选择 Jest？有时候安于现状，只不过是因为我们没有见过理想的模样。只有当我们见过更好的世界和更好的测试框架，才会惊呼“原来世界是这样美好呀！我怎么都没有想到呢？”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JimmyLv/jimmylv.github.io/master/images/jest.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;引自&lt;a href=&quot;https://www.thoughtworks.com/cn/radar/languages-and-frameworks/jest&quot;&gt;技术雷达&lt;/a&gt;：Jest是一个“零配置”的前端测试工具，具有诸如模拟和代码覆盖之类的开箱即用特性，主要用于React和其他JavaScript框架。&lt;/p&gt;

  &lt;p&gt;我们团队对采用JEST做前端测试的结果非常满意。它提供了一种“零配置”的开发体验，并具备诸多开箱即用的功能，比如 Mock 和代码覆盖率等。你不仅可以将此测试框架应用于React.js应用程序，也可以应用于其他 JavaScript 框架。Jest 经常被炒作的功能之一是用户界面的快照测试。快照测试可以作为测试金字塔上层一个很好的补充，但请记住，单元测试仍然是坚实的基础。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一个好的测试框架，Jest 的几大好处可以涵盖为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fast 天下武功，唯快不破。确实很快，虽然实测下来跟 &lt;a href=&quot;https://github.com/mochajs/mocha/blob/master/CHANGELOG.md&quot;&gt;Mocha 新版本&lt;/a&gt;还是慢了些，以后找个机会再测一次。&lt;/li&gt;
  &lt;li&gt;Opinionated 不需要你做出选择和配置，就能提供所有的东西，比如Mock（干掉Sinon）、Test Runner（干掉Karma）、Matcher（干掉Chai）、Test Coverage（内置istanbul）&lt;/li&gt;
  &lt;li&gt;Watch Mode 守护模式。非常注重开发者体验，能够在编码的时候帮助我们快速获得测试结果的反馈。&lt;/li&gt;
  &lt;li&gt;Snapshot Testing 快照测试。这是值得争议的一点，前文也提到过会专门开个issue来讨论，在此不再赘述。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;最后总结一下-jest&quot;&gt;最后，总结一下 Jest&lt;/h3&gt;

&lt;p&gt;Jest 作为一个测试框架，其最大的特点就在于它是一个非常有效的解决方案，不需要与其他测试库交互来执行它的工作。与此同时 Jest 非常注重&lt;a href=&quot;https://www.thoughtworks.com/talks/developer-exp-tech-radar-summit-05-2017&quot;&gt;开发者体验&lt;/a&gt;，这一点也是特别值得欣赏，现在市面上关注开发者（“人”）体验的开发框架和工具实在不多，而Jest Watch模式的核心就在于快速获得反馈，虽然我没在命令行使用而是WebStorm但亦可以与之结合。&lt;/p&gt;

&lt;p&gt;ps: 除此之外，还有很多开发者体验亦值得细细品味与发现，特别是Jest本身来自Facebook的工程化支持也是特别棒的，这个讲述如何开发Jest的官方视频值得一看：&lt;a href=&quot;https://developers.facebook.com/videos/f8-2017/building-high-quality-javascript-tools/&quot;&gt;Building High-Quality JavaScript Tools&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;未完待续&quot;&gt;未完待续……&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;## 单元测试基础&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;### 为什么选择 Jest&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### Jest 的基本用法&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 该如何测试异步代码？&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试与自动化的意义&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;## Vue 单元测试&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### Vue 组件的渲染方式&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### Wrapper &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; 方法与选择器&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### UI 组件交互行为的测试&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;## Vuex 单元测试&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### CQRS 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Redux-like&lt;/code&gt; 架构&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 如何对 Vuex 进行单元测试&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### Vue组件和Vuex store的交互&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;## Vue应用测试策略&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试的特点及其位置&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 单元测试的关注点&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;### 应用测试的测试策略&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>融核π：碎片化信息时代的生存之道</title>
        <link>http://localhost:4000/2018-04-10-how-to-survive-in-the-age-of-fragmented-information/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-04-10-how-to-survive-in-the-age-of-fragmented-information/</guid>
        <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
        <description>&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;-碎片化信息时代的生存之道-&quot;&gt;✨ 碎片化信息时代的生存之道 ✨&lt;/h1&gt;

&lt;p&gt;(&lt;small&gt;via &lt;strong&gt;JimmyLv &lt;/strong&gt;🐵&lt;/small&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/W6u_D93FOO6XWqSR7JA0enMDGWs77nsTo1BKeeJi6DoqgvlkW0U3gOL731rBe7K51BS4fOBuvWbEKOfp_vhs8ne3Olm_lbRMLn5GihBpOkTcVuJjQoRDEqFg1xAwL8dvbptf85vJ&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[note]&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;前三句（好高名）
    &lt;ul&gt;
      &lt;li&gt;感谢大家的到场（程序员 👨‍💻‍-&amp;gt; 调查 🙋），随时拍砖 (扔手机)&lt;/li&gt;
      &lt;li&gt;也感谢周老师和阿沐给的机会；促使自己去总结，新的思考，又发现很多新的要学习的内容。PKM -&amp;gt; KM，DIKM -&amp;gt; 机器学习&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;罗振宇 时间的朋友（百词斩 CEO） 五倍速，营造知识焦虑，推销知识服务，&lt;del&gt;抖音-&amp;gt;得到&lt;/del&gt;
但如果我们不被束缚，掌握主动权，把 @得到 当成辅助工具来用，确实很棒。&lt;/p&gt;

&lt;p&gt;[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;第二大脑-vs-人机共脑&quot;&gt;「第二大脑」 vs 「人机共脑」&lt;/h1&gt;

&lt;p&gt;[note]
建立联系：&lt;/p&gt;

&lt;p&gt;不是「第二大脑」，而是「人机共脑」，共同体，手机已经成为了一部分，未来植入脑袋之后呢？
善用工具的价值&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;新的物种（还是以「得到」举例，讯飞语音）&lt;/li&gt;
  &lt;li&gt;而程序员刚好处于最前锋，但依然需要领域专家&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为什么我来讲这个话题，几乎所有畅销书，折腾工具（比写代码还多？），付费购买。&lt;/p&gt;

&lt;p&gt;但是今天我们不只讲工具和具体操作，前后端分离，干湿结合。
[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;️--agenda&quot;&gt;⏲️ | Agenda&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;碎片化的到底是&lt;strong&gt;信息&lt;/strong&gt;还是&lt;strong&gt;时间&lt;/strong&gt;？&lt;/li&gt;
  &lt;li&gt;什么样的&lt;strong&gt;知识内容&lt;/strong&gt;适合碎片化？&lt;/li&gt;
  &lt;li&gt;建立以&lt;strong&gt;“应用”&lt;/strong&gt;为中心的知识体系&lt;/li&gt;
  &lt;li&gt;个人知识体系与&lt;strong&gt;计算机结构&lt;/strong&gt;模型&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Showcase&lt;/strong&gt;：PKM 工具的“最佳实践”与自动化&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[note]
本期内容包括：&lt;/p&gt;

&lt;p&gt;工具控
[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;碎片化信息外部-vs-碎片化时间内部&quot;&gt;碎片化信息（外部） vs 碎片化时间（内部）&lt;/h1&gt;

&lt;p&gt;[note]
电子产品的时刻在线，&lt;/p&gt;

&lt;p&gt;=&amp;gt; 如何在整块时间内高效处理碎片化知识？
[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;以理论为中心-vs-以应用为中心&quot;&gt;“以理论为中心” vs “以应用为中心”&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;如何在整块时间内高效处理碎片化知识？ {:&amp;amp;.moveIn}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[note]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一种知识体系的建立是为了掌握专业知识，与 “以知识为中心” 的学习相对应。构建这种类型的知识体系，可以帮助你理解消化教科书与课堂所学，提高自己的理论水平，在考试中取得好成绩。&lt;/li&gt;
  &lt;li&gt;第二种知识体系的建立是为了解决问题，与 “以自我为中心的学习” 相对应，可以教会你如何主动获取信息并把信息转化为知识，如何将碎片 “聚沙成塔”，如何学会思考不被微信鸡汤鸡血文洗脑，如何批判性地接受新的观点，如何成为一个更优秀的人。&lt;/li&gt;
  &lt;li&gt;教材上的 “理论知识” 与 “应用知识” 最大的区别是，前者本身就是一个体系，只是由于你接收这些信息的过程是间断的，所以这些知识看起来才显得杂乱无章；而后者本身就是一些碎片，加上你接收这些信息的过程是片面的，于是碎片看起来就更凌乱了。&lt;/li&gt;
  &lt;li&gt;对于前者，我们需要做的是 “理解——归纳整理——记忆”，当有新知识点进入体系时要 “吸纳接收”；而对于后者，我们需要 “重组——添加——重组”。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;彼此有联系的知识，就是建立知识体系的基础。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tags 关注点的隐形转移&lt;/li&gt;
  &lt;li&gt;主动建立联系也是挺盲目的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[/note]&lt;/p&gt;

&lt;p&gt;[slide style=”background-image:url(‘https://o7mw3gkkh.qnssl.com/images/2017/12/1513920317188.png’)”]&lt;/p&gt;

&lt;h1 id=&quot;世界本来是一个整体&quot;&gt;世界，本来是一个整体。&lt;/h1&gt;

&lt;p&gt;[note]
故事思维 从我跟小波老师参加区块链活动说起，&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;天气热，羽绒服&lt;/li&gt;
  &lt;li&gt;小喽喽，直冒汗&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;周老师，听了半天的课，跟几个人深度交流后，就成了半个”砖家”，复述内容和逻辑，还对教授提出了有深度的问题；&lt;/p&gt;

&lt;p&gt;[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;区块链-vs-敏捷&quot;&gt;区块链 vs 敏捷&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;(元认知)  元编程&lt;/li&gt;
  &lt;li&gt;意识思维&lt;/li&gt;
  &lt;li&gt;框架结构  &amp;lt;–&lt;/li&gt;
  &lt;li&gt;内容操作&lt;/li&gt;
  &lt;li&gt;习惯偏好 （暗示-惯常行为-奖赏）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[note]
区块链跟敏捷的共同点，因为他们都是&lt;strong&gt;工具&lt;/strong&gt;（清晰，效率，秩序），而且有分布式的需求，去中心化。&lt;/p&gt;

&lt;p&gt;节奏，透明，反馈  / 区块，共享（去中心化），奖励机制，工作量证明&lt;/p&gt;

&lt;p&gt;底层能力，底层的知识迁移能力。80% + 80%，世界本来是一个整体。
[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;dikw-体系&quot;&gt;DIKW 体系&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.elezea.com/images/dikw-pyramid.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[note]
数据
信息
知识
智慧
[/note]
[slide]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://webcourseworks.com/wp-content/uploads/2017/04/DIKW-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2016/1523444746311.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;数据---信息---知识&quot;&gt;数据 - 信息 - 知识&lt;/h1&gt;
&lt;h1 id=&quot;知识库---笔记---大脑&quot;&gt;知识库 - 笔记 - 大脑&lt;/h1&gt;
&lt;h1 id=&quot;硬盘---内存---cpu&quot;&gt;硬盘 - 内存 - CPU&lt;/h1&gt;

&lt;p&gt;[note]
控制理论PID，吸收率，冰山理论&lt;/p&gt;

&lt;p&gt;以及从大脑出发，向外部展示，呈现效果&lt;/p&gt;

&lt;p&gt;画图  -&amp;gt; 存、取 &amp;lt;-  「速度」  回到&lt;strong&gt;清晰，效率，秩序&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;信息粒，信息点，信息流 （碎片化整理）&lt;/p&gt;

&lt;p&gt;围绕 存和取来举例子，从用即「取」出发。
[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;showcase&quot;&gt;Showcase&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;showcase1： 取 one place to search&lt;/li&gt;
  &lt;li&gt;showcase2： 存 mindmap &amp;lt;-&amp;gt; markdown&lt;/li&gt;
  &lt;li&gt;showcase3： 取 come out when search&lt;/li&gt;
  &lt;li&gt;showcase4： 存 diigo outliner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;thank-you--qa&quot;&gt;Thank you! &amp;amp; QA&lt;/h1&gt;
</description>
      </item>
    
      <item>
        <title>【译】《React 学习之道》The Road to learn React (简体中文版) 最简单，且最实用的 React 实战教程</title>
        <link>http://localhost:4000/2018-01-26-the-road-to-learn-react-chinese-translation/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-01-26-the-road-to-learn-react-chinese-translation/</guid>
        <pubDate>Fri, 26 Jan 2018 00:00:00 +0000</pubDate>
        <description>&lt;blockquote&gt;
  &lt;p&gt;通往 React 实战大师之旅：掌握 React 最简单，且最实用的教程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/titlepages.leanpub.com/the-road-to-learn-react-chinese/hero?1514299109&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://leanpub.com/the-road-to-learn-react-chinese/&quot;&gt;《React 学习之道》&lt;/a&gt;这本书使用路线图中的精华部分用于传授 React，并将其融入一个独具吸引力的真实世界 App的具体代码实现。&lt;/p&gt;

&lt;p&gt;如何掌握 React 存在特别多的路线图。本书提取这些路线图中的精华部分，并将其融入于一个具体的应用程序当中。您将会构建一个属于自己的 React 应用程序。在本次学习之旅当中，您将学习 ES6，了解所有 React 的基础知识、先进理念，以及组件的内部状态管理。&lt;/p&gt;

&lt;h2 id=&quot;作者与译者&quot;&gt;作者与译者&lt;/h2&gt;

&lt;p&gt;首先，感谢 &lt;a href=&quot;https://leanpub.com/the-road-to-learn-react&quot;&gt;The Road to learn React&lt;/a&gt; 原书作者，&lt;a href=&quot;https://leanpub.com/u/rwieruch&quot;&gt;Robin Wieruch&lt;/a&gt;。本书的翻译始于 React China 社区的一个帖子：&lt;a href=&quot;http://react-china.org/t/the-road-to-learn-react-simplified-chinese-translation/16497&quot;&gt;The Road to learn React - Simplified Chinese Translation&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;本书翻译来自 ThoughtWorks 的 JS Community 超豪华译者团队（排名不分先后）：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LeiZeng&quot;&gt;@LeiZeng&lt;/a&gt; （曾磊）、&lt;a href=&quot;https://github.com/JimmyLv&quot;&gt;@JimmyLv&lt;/a&gt; （吕靖）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/SBeator&quot;&gt;@SBeator&lt;/a&gt; （曾星鑫）、&lt;a href=&quot;https://github.com/kenpusney&quot;&gt;@kenpusney&lt;/a&gt; （刘清）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/azzgo&quot;&gt;@azzgo&lt;/a&gt; （文一山）、&lt;a href=&quot;https://github.com/trotyl&quot;&gt;@trotyl&lt;/a&gt; （余泽江）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ariesjia&quot;&gt;@ariesjia&lt;/a&gt; （陈嘉）、&lt;a href=&quot;https://github.com/Yixi&quot;&gt;@Yixi&lt;/a&gt; （刘应皓）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/HelloRuiLi&quot;&gt;@HelloRuiLi&lt;/a&gt; （李睿）、&lt;a href=&quot;https://github.com/lazurey&quot;&gt;@lazurey&lt;/a&gt; （梁越）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zengyang2014&quot;&gt;@zengyang2014&lt;/a&gt; （曾扬）、&lt;a href=&quot;https://github.com/liujiefengfeng&quot;&gt;@liujiefengfeng&lt;/a&gt; （刘杰凤）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/futantan&quot;&gt;@futantan&lt;/a&gt; （傅坦坦）、&lt;a href=&quot;https://github.com/linksgo2011&quot;&gt;@linksgo2011&lt;/a&gt; （林宁）&lt;/p&gt;

&lt;h2 id=&quot;本书介绍&quot;&gt;本书介绍&lt;/h2&gt;

&lt;p&gt;《React 学习之道》会教您一些 React 的基础知识。通过这套教程，您可以使用纯 React 构建一个真正可用的应用程序，而不需要去理会其他复杂的工具。我将为您逐一介绍从开发环境的准备到部署上线的全部过程。本书每一章都包含一些额外的索引资料以及课后练习。在读完本书之后，您将会有能力依靠自己构建一个 React 应用。我，&lt;a href=&quot;https://leanpub.com/u/rwieruch&quot;&gt;Robin Wieruch&lt;/a&gt;，以及整个社区会持续维护和更新这些资料。&lt;/p&gt;

&lt;p&gt;通过《React 学习之道》，在开始陷入到更庞大的 React 生态圈之前，我想为您奠定一个良好的基础。它会通过一个真实可用的 React 应用来解释基本概念、设计模式以及最佳实践。&lt;/p&gt;

&lt;p&gt;您将会学习构建您自己的 React 应用。这个应用会涉及一些真正可用的功能，比如分页，客户端缓存，以及像搜索和排序这样的交互功能。另外在这个过程中，您会慢慢从 JavaScript ES5 过渡到 JavaScript ES6。我希望这本书能充分体现我对 React 和 JavaScript 的热忱所在，并帮助您能够开始您的开发旅程。&lt;/p&gt;

&lt;h2 id=&quot;您可以期望学到什么目前为止&quot;&gt;您可以期望学到什么（目前为止…）&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://intense-refuge-78753.herokuapp.com/&quot;&gt;Hacker News的React版本&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;没有复杂的配置&lt;/li&gt;
  &lt;li&gt;用create-react-app来初始化你的应用&lt;/li&gt;
  &lt;li&gt;高效而轻量级的代码&lt;/li&gt;
  &lt;li&gt;只用React setState来做状态管理（目前为止…）&lt;/li&gt;
  &lt;li&gt;从JavaScript ES5一路平滑过渡到ES6&lt;/li&gt;
  &lt;li&gt;React setState和生命周期函数的用法&lt;/li&gt;
  &lt;li&gt;和真实API的交互（Hacker News）&lt;/li&gt;
  &lt;li&gt;高级用户交互&lt;/li&gt;
  &lt;li&gt;客户端排序&lt;/li&gt;
  &lt;li&gt;客户端过滤&lt;/li&gt;
  &lt;li&gt;服务器端搜索&lt;/li&gt;
  &lt;li&gt;客户端缓存的实现&lt;/li&gt;
  &lt;li&gt;高阶函数和高阶组件&lt;/li&gt;
  &lt;li&gt;用Jest进行组件的切片(snapshot)测试&lt;/li&gt;
  &lt;li&gt;用Enzyme进行组件的单元测试&lt;/li&gt;
  &lt;li&gt;过程中学到一些有用的工具库&lt;/li&gt;
  &lt;li&gt;过程中的练习题和扩展阅读&lt;/li&gt;
  &lt;li&gt;认同和巩固你的所学&lt;/li&gt;
  &lt;li&gt;将您的应用部署到产品环境&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;您需要具备哪些知识&quot;&gt;您需要具备哪些知识？&lt;/h2&gt;

&lt;p&gt;在开始阅读本书之前，您应该熟悉 HTML、CSS 和 JavaScript（ES5）。本书将会传授 ES6 及其更高版本，如果您熟悉于其它不同的 SPA 框架或库，您应该对这些基本知识已经了然于心。如果您刚刚开始您的 Web 开发之旅，您应该优先学习并掌握 HTML、CSS 和 JavaScript，然后再来学习 React。&lt;/p&gt;

&lt;h2 id=&quot;读者赠言&quot;&gt;读者赠言&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://twitter.com/appsdevpk/status/848625244956901376&quot;&gt;Muhammad Kashif&lt;/a&gt;:&lt;/strong&gt; “《React 学习之道》是一本独一无二的书，我推荐给任何想要学习React基础和进阶技巧的学生或者专业人士。她包含了诸多启发性的小提示和绝无仅有的技术点。书中虽然引用了大量例子和参考资料，但最后都被用到我们要解决的问题上，这体现了编写本书令人惊叹地缜密。我有17年的互联网和桌面开发经验，阅读本书之前，我在学习React的过程中缺并不顺利。而这本书就像魔术一样有用。”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://twitter.com/andrevar66/status/853789166987038720&quot;&gt;Andre Vargas&lt;/a&gt;:&lt;/strong&gt; “Robin Wieruch的《React 学习之道》是一本非常牛的书！我所学到的绝大部分有关React甚至是ES6的知识都是通过她得来的！”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://twitter.com/nhuntwalker/status/845730837823840256&quot;&gt;Nicholas Hunt-Walker, Instructor of Python at a Seattle Coding School&lt;/a&gt;:&lt;/strong&gt; “这是一本我读过的最严谨和最实用的编程书籍之一。一本完整的React和ES6使用说明。”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://twitter.com/AustinGreen/status/845321540627521536&quot;&gt;Austin Green&lt;/a&gt;:&lt;/strong&gt; “非常感谢，真的很喜欢这本书。完美的学习曲线，不管是React，ES6，还是抽象编程概念。”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://twitter.com/nicoleffe/status/833488391148822528&quot;&gt;Nicole Ferguson&lt;/a&gt;:&lt;/strong&gt; “这个周末跟着Robin的课程学习React，我发现这一切太有意思了。这几乎让我感到羞愧。”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://twitter.com/kvss1992/status/889197346344493056&quot;&gt;Karan&lt;/a&gt;:&lt;/strong&gt; “刚刚完成这个课程。这是全世界最好的学习React和JS的一本书。完美展现了ES的优雅。膜拜！ :)”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://twitter.com/erixtekila/status/840875459730657283&quot;&gt;Eric Priou&lt;/a&gt;:&lt;/strong&gt; “Robin的《React 学习之道》是必读的一本书。简明扼要地介绍了React和Javascript。”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一个新手开发:&lt;/strong&gt; “作为一个开发新手，我刚刚完成了这本书的学习，非常感谢写了这本书。她非常容易上手，我相信自己在接下来的几天可以开始从头开发一个新应用。这本书比我之前试过的官方React入门文档好很多（由于缺乏细节，我并未能够完成）。每个章节后面的练习题对我有很好的激励效果。”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一个学生:&lt;/strong&gt; “这是最好的学习React的一本书。我们可以一边做练习项目，一边学习知识点，然后还能紧扣我们的学习主题。我发现「边码边学」是最好的掌握编程的方法，而这本书完完全全是这样教我的。”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.goodreads.com/review/show/1880673388&quot;&gt;Thomas Lockney&lt;/a&gt;:&lt;/strong&gt; “这是一本非常扎实的介绍React的书，而不是试着把事情搞复杂。我本来只想尝试理解看看这本书到底讲了什么，然后我得出了上面的结论。我并没有跟着所有的脚注来学习我还没有注意到的新的ES6语法（我当然不会说我一直没有注意到，Bob）（译者注：这个是在博客中与另外一个朋友互动的话）。对于那些没有及时了解到这些新功能，并且很勤奋的跟着练习的朋友们，我想很肯定地对你们说，你们能学到的会不仅仅是这本书所教的东西。”&lt;/p&gt;

&lt;h2 id=&quot;恭喜你快去看看我们的-leanpub-主页吧&quot;&gt;恭喜你，快去看看我们的 Leanpub 主页吧！&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://leanpub.com/the-road-to-learn-react-chinese/&quot;&gt;《React 学习之道》The Road to learn React (简体中文版) [PDF/iPad/Kindle]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;支持 PDF、EPUB、MOBI、Kindle 多种格式下载，并支持 Leanpub 在线阅读。&lt;/p&gt;

&lt;h2 id=&quot;最后求-star求小星星&quot;&gt;最后！求 Star！求小星星！&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;GitHub 翻译地址：&lt;a href=&quot;https://github.com/the-road-to-learn-react/the-road-to-learn-react-chinese&quot;&gt;the-road-to-learn-react/the-road-to-learn-react-chinese: 《React 学习之道》The Road to learn React (简体中文版) - 最简单，且最实用的 React 实战教程。&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;GitHub 原书地址：&lt;a href=&quot;https://github.com/the-road-to-learn-react/the-road-to-learn-react&quot;&gt;the-road-to-learn-react/the-road-to-learn-react: The Road to learn React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>技术雷达之「微前端」- 将微服务理念扩展到前端开发（上：理论篇）</title>
        <link>http://localhost:4000/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed/</guid>
        <pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文分为&lt;a href=&quot;https://blog.jimmylv.info/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed/&quot;&gt;理论&lt;/a&gt;和&lt;a href=&quot;https://blog.jimmylv.info/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed-next/&quot;&gt;实战&lt;/a&gt;上下两篇。本篇为技术雷达之「微前端」- 将微服务理念扩展到前端开发（上：理论篇），共计约 2k 字，预计阅读时间 5 mins。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在 ThoughtWorks 正式发布的最新一期技术雷达（下载地址：&lt;a href=&quot;https://assets.thoughtworks.com/assets/technology-radar-vol-17-cn.pdf&quot;&gt;technology-radar-vol-17-cn.pdf&lt;/a&gt;）当中，「微前端（Micro Fontends）」已经进入到&lt;strong&gt;试验&lt;/strong&gt;阶段，而试验环所列出的技术是我们认为值得去追求的。理解如何建立这种能力对您所在的组织十分重要，现在就可以尝试在一个低风险的项目上试点和实践这项技术，帮助您真正地了解这门技术。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;摘自技术雷达：我们已经从引入微服务架构中获得了明显的好处，微服务架构可以让团队裁剪出独立部署的交付物以及可维护的服务。不幸的是，我们还看到许多团队在后端服务之上创建了前端单体——一个单一，庞大和杂乱无绪的浏览器应用。我们首选的（经过验证的）方法是将基于浏览器的代码拆分成&lt;strong&gt;微前端&lt;/strong&gt;。在这种方法中，Web 应用程序被分解为多个特性，每个特性都由不同的前后端团队拥有。这确保每个特性都独立于其他特性开发，测试和部署。这样可以使用多种技术来重新组合特性——有时候是页面，有时候是组件——最终整合成一个内聚的用户体验。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513909558428.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文章大纲：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#title1&quot;&gt;微前端的缘由：单体应用与微服务架构&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#title2&quot;&gt;微服务架构带来了哪些好处？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#title3&quot;&gt;那么前端的现状呢？ —— 臃肿的前端&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#title4&quot;&gt;微前端的定义 - 将微服务理念扩展到前端开发&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#title6&quot;&gt;微前端的核心思想&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#title5&quot;&gt;拆分微前端所带来的好处&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;微前端的缘由单体应用与微服务架构&quot;&gt;微前端的缘由：单体应用与微服务架构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513920317188.png&quot; alt=&quot;The Majestic Monolith&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在传统的软件开发当中，大多数软件都是单体式应用架构的。在瞬息万变的商业时代背景下，企业必须学会适应我们这个时代的不确定性。快速试验，快速失败。更快地推出新产品和有效地改进当前产品，从而为客户提供有意义的数字体验。&lt;/p&gt;

&lt;p&gt;而单体应用这种软件架构对于企业来说的致命缺点就是，企业对于市场的响应速度变慢。企业决策者在一年内需要做的决策数量非常有限，由于依赖关系，其响应周期往往会变得非常漫长。每当开发或升级产品，都需要在一系列体量庞大的相关服务中同时增加新功能，这就需要所有利益相关方共同努力，以同步方式进行变更。&lt;/p&gt;

&lt;h3 id=&quot;微服务架构带来了哪些好处&quot;&gt;微服务架构带来了哪些好处？&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513908599811.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;假设服务边界已经被正确地定义为可独立运行的业务领域，并确保在微服务设计中遵循诸多最佳实践。那么至少会以下几个方面获得显而易见的好处：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;复杂性：服务可以更好地分离，每一个服务都足够小，完成完整的定义清晰的职责；&lt;/li&gt;
  &lt;li&gt;扩展性：每一个服务可以独立横向扩展以满足业务伸缩性，并减少资源的不必要消耗；&lt;/li&gt;
  &lt;li&gt;灵活性：每一个服务可以独立失败，允许每个团队决定最适合他们的技术和基础架构；&lt;/li&gt;
  &lt;li&gt;敏捷性：每一个服务都可以独立开发，测试和部署，并允许团队扩展独立部署和维护服务的交付。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每个微服务是孤立的，独立的「模块」，它们共同为更高的逻辑目的服务。微服务之间通过 Contract 彼此沟通，每个服务都负责特定的功能。这使得每个服务都能够保持简单，简洁和可测试性。&lt;/p&gt;

&lt;p&gt;从而微服务架构允许企业更自发地采取更深远的业务决策，因为每个微服务都是独立运作的，而且每一个管理团队可以很好地控制该服务的变更。&lt;/p&gt;

&lt;h3 id=&quot;那么前端的现状呢--臃肿的前端&quot;&gt;那么前端的现状呢？ —— 臃肿的前端&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513877114486.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在前端，往往由一个前端团队创建并维护一个 Web 应用程序，使用 REST API 从后端服务获取数据。这种方式如果做得好的话，它能够提供优秀的用户体验，但最主要的缺点就是单页面应用（SPA）不能很好地扩展和部署。在一个大公司里，单前端团队可能成为一个发展瓶颈。随着时间的推移，往往由一个独立团队所开发的前端层越来越难以维护。&lt;/p&gt;

&lt;p&gt;特别是这么一个特性丰富、功能强大的前端 Web 应用程序，却位于后端微服务架构之上。并且随着业务的发展，前端变得越来越臃肿，一个项目可能会有 90％ 的前端代码，却只有非常薄的后端，甚至这种情况在 Serverless 架构的背景下还会愈演愈烈。&lt;/p&gt;

&lt;h2 id=&quot;微前端的定义---将微服务理念扩展到前端开发&quot;&gt;微前端的定义 - 将微服务理念扩展到前端开发&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513877768959.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;微前端（Micro Frontends）这个术语其实就是微服务的衍生物。将微服务理念扩展到前端开发，同时构建多个完全自治的和松耦合的 App 模块（服务），其中每个 App 模块只负责特定的 UI 元素和功能。&lt;/p&gt;

&lt;p&gt;如果我们看到了微服务提供给后端的好处，那么就完全可以更进一步地将这些好处应用到前端。与此同时，在设计微服务的时候，就可以考虑不仅要完成后端逻辑，而且还要完成前端的视觉部分。而对于微前端来说，与微服务的许多要求也是一致的：监控、日志、HealthCheck、Analytics 等等。&lt;/p&gt;

&lt;h3 id=&quot;微前端的核心思想&quot;&gt;微前端的核心思想&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513878936981.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;✨ Be Technology Agnostic：每个团队都应该能够选择和升级他们的技术栈，而不必与其他团队协调。自定义元素（后面会具体提到）是隐藏实现细节的好方法，同时为其他人提供公共接口。&lt;/li&gt;
  &lt;li&gt;✨ Isolate Team Code：即使所有团队使用相同的框架，也不要共享运行时。构建独立的应用程序。不要依赖共享状态或全局变量。&lt;/li&gt;
  &lt;li&gt;✨ Establish Team Prefixes：相互约定命名隔离。为 CSS、浏览器事件、Local Storage 和 Cookies 制定命名空间，以避免冲突和明确其所有权。&lt;/li&gt;
  &lt;li&gt;✨ Favor Native Browser Features over Custom APIs：使用浏览器事件进行通信，而不是构建全局的 PubSub 系统。如果确实需要构建跨团队 API，请尽量保持简单。（与框架无关，可使用 CustomEvent）&lt;/li&gt;
  &lt;li&gt;✨ Build a Resilient Site：即使 JavaScript 失败或尚未执行，Web 应用程序的功能仍应有效。可以使用通用渲染和渐进增强来提高用户的感知性能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;拆分微前端所带来的好处&quot;&gt;拆分微前端所带来的好处&lt;/h3&gt;

&lt;p&gt;这样就能使各个前端团队按照自己的步调迭代，并随时准备就绪处于可发布状态，并隔离相互依赖所产生的风险，与此同时也更容易尝试新技术。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web 应用程序被分解成独立的特征，并且每个特征都由不同的团队拥有，前端到后端。这确保了每个功能都是独立于其他功能开发，测试和部署的。&lt;/li&gt;
  &lt;li&gt;将网站或 Web 应用程序视为由独立团队拥有的功能组合。每个团队都有一个独特的业务或关注点确定的任务。&lt;/li&gt;
  &lt;li&gt;每一个团队是跨职能的，从数据库到用户界面端到端地开发其功能/特性。&lt;/li&gt;
  &lt;li&gt;所有前端功能（身份验证，库存，购物车等）都是 Web 应用程序的一部分，并与后端（大部分时间通过 HTTP）进行通信，并将其分解为微服务。&lt;/li&gt;
  &lt;li&gt;可以同时拥有后端、前端、数据访问层和数据库，即一个服务子域所需的所有内容。&lt;/li&gt;
  &lt;li&gt;查找线上 bug、测试、框架迭代，甚至语言、代码隔离与责任和其他事情变得更容易处理。&lt;/li&gt;
  &lt;li&gt;我们不得不付出的代价是部署，但是容器（Docker 和 Rocket）以及不可变服务器使得这种情况也得到了极大的改善。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;续微前端的实践方案&quot;&gt;续：微前端的实践方案&lt;/h2&gt;

&lt;p&gt;本文的下篇即&lt;a href=&quot;https://blog.jimmylv.info/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed-next/&quot;&gt;技术雷达之「微前端」- 将微服务理念扩展到前端开发（下：实战篇）&lt;/a&gt;将逐一介绍微前端实战中超过 4 种的可选实践方案和多模块页面加载可能出现的问题与优化建议，最后对微前端的优缺点进行总结并提出了一些新的思考。&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>技术雷达之「微前端」- 将微服务理念扩展到前端开发（下：实战篇）</title>
        <link>http://localhost:4000/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed-next/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed-next/</guid>
        <pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate>
        <description>&lt;h2 id=&quot;前言与大纲&quot;&gt;前言与大纲&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文分为&lt;a href=&quot;https://blog.jimmylv.info/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed/&quot;&gt;理论&lt;/a&gt;和&lt;a href=&quot;https://blog.jimmylv.info/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed-next/&quot;&gt;实战&lt;/a&gt;上下两篇。本篇为微前端的实战篇，共计约 5k 字，预计阅读时间 10 mins。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;a href=&quot;https://blog.jimmylv.info/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed/&quot;&gt;技术雷达之「微前端」- 将微服务理念扩展到前端开发（上：理论篇）&lt;/a&gt;中，我们介绍了微前端在单体应用和微服务的架构演进中所产生的缘由，将微服务理念运用到前端开发就是为了解决臃肿前端的当前现状。与此同时，合理拆分微前端也给我们的应用开发带来显而易见的好处，在本篇当中我们将逐一介绍微前端的实践方案与可能遇到的问题和对应的优化建议。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#title7&quot;&gt;微前端的可选实践方案（4 种 +）&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#title8&quot;&gt;创建更小的 Apps（而不是 Components）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#title9&quot;&gt;如何组合微前端的 App 模块？&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#title10&quot;&gt;Option 1: 使用后端模板引擎插入 HTML&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#title11&quot;&gt;Option 1.1: 渐进式从后端进行加载&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#title12&quot;&gt;Option 2: 使用 IFrame 隔离运行时&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#title13&quot;&gt;Option 3: 客户端 JavaScript 异步加载&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#title14&quot;&gt;Option 4: WebComponents 整合所有功能模块&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#title15&quot;&gt;不同 App 模块之间如何交互？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#title16&quot;&gt;More Options…&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#title17&quot;&gt;微前端的页面优化与实例&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#title18&quot;&gt;多模块页面加载问题与优化建议&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#title19&quot;&gt;微前端在 AEM（CMS）项目的应用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#title20&quot;&gt;现成解决方案：Single-SPA “meta framework”&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#title21&quot;&gt;总结与思考：微前端的优缺点&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#title22&quot;&gt;微前端的优点&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#title23&quot;&gt;微前端的缺点&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#title24&quot;&gt;持续思考…&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#title25&quot;&gt;附：参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;微前端的可选实践方案4-种&quot;&gt;微前端的可选实践方案（4 种+）&lt;/h2&gt;

&lt;h3 id=&quot;创建更小的-apps而不是-components&quot;&gt;创建更小的 Apps（而不是 Components）&lt;/h3&gt;

&lt;p&gt;首先让我们来创建一个典型 Web 应用程序的基本组件（Header、ProductList、ShoppingCart），以 Header 组件为例：&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Logo&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;About&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后需要注意的是我们会用到 Express 对刚刚创建的 React 组件进行服务器端渲染，使之成为一个 App 模块:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;htmlPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootElem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;div id=&quot;root&quot;&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderedApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootElem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderedApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再依次创建其他 Apps 并独立部署：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://microfrontends-header.herokuapp.com/&quot;&gt;https://microfrontends-header.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://microfrontends-products-list.herokuapp.com/&quot;&gt;https://microfrontends-products-list.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://microfrontends-cart.herokuapp.com/&quot;&gt;https://microfrontends-cart.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;如何组合微前端的-app-模块&quot;&gt;如何组合微前端的 App 模块？&lt;/h3&gt;

&lt;p&gt;在每个独立团队创建好各自的 App 模块后，我们就可以将网站或 Web 应用程序视为由各种模块的功能组合。下文将介绍多种技术实践方案来重新组合这些模块（有时作为页面，有时作为组件），而前端（不管是不是 SPA）将只需要负责路由器（Router）如何选择和决定要导入哪些模块，从而为最终用户提供一致性的用户体验。&lt;/p&gt;

&lt;h4 id=&quot;option-1-使用后端模板引擎插入-html&quot;&gt;Option 1: 使用后端模板引擎插入 HTML&lt;/h4&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://microfrontends-header.herokuapp.com/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://microfrontends-products-list.herokuapp.com/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://microfrontends-cart.herokuapp.com/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;productsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-ejs&quot;&gt;# views/index.ejs
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Microfrontends Homepage&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;%- header %&amp;gt;
    &amp;lt;%- productsList %&amp;gt;
    &amp;lt;%- cart %&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是，这种方案也存在弊端，即某些 App 模块可能会需要相对较长的加载时间，而在前端整个页面的渲染却要取决于最慢的那个模块。&lt;/p&gt;

&lt;p&gt;比如说，可能 Header 模块的加载速度要比其他部分快得多，而 ProductList 则因为需要获取更多 API 数据而需要更多时间。通常情况下我们希望尽快将网页显示给用户，而在这种情况下后台加载时间就会变得更长。&lt;/p&gt;

&lt;h4 id=&quot;option-11-渐进式从后端进行加载&quot;&gt;Option 1.1: 渐进式从后端进行加载&lt;/h4&gt;

&lt;p&gt;当然，我们也可以通过修改一些后端代码来渐进式地（Progressive）往前端发送 HTML，但与此同时却徒增了后端复杂度，并且又将前端的渲染控制权交回了后端服务器。而且我们的优化也取决于每个模块加载的速度，若是进行优化就必须按一定顺序进行加载。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513879504186.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;option-2-使用-iframe-隔离运行时&quot;&gt;Option 2: 使用 IFrame 隔离运行时&lt;/h4&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://microfrontends-header.herokuapp.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://microfrontends-products-list.herokuapp.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://microfrontends-cart.herokuapp.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们也可以将每个子应用程序嵌入到各自的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 中，这使得每个模块能够使用任何他们需要的框架，而无需与其他团队协调工具和依赖关系，依然可以借助于一些库或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;Window.postMessageAPI&lt;/code&gt; 来进行交互。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
    &lt;ul&gt;
      &lt;li&gt;最强大的是隔离了组件和应用程序部分的运行时环境，因此每个模块都可以独立开发，并且可以与其他部分的技术无关&lt;/li&gt;
      &lt;li&gt;可以各自使用完全不同的前端框架，可以在 React 中开发一部分，在 Angular 中开发一部分，然后使用原生 JavaScript 开发其他部分或任何其他技术。&lt;/li&gt;
      &lt;li&gt;只要每个 iframe 来自同一个来源，消息传递也就相当直接和强大。参考文档 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Window.postMessageAPI&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
    &lt;ul&gt;
      &lt;li&gt;Bundle 的大小非常明显，因为可能最终会多次发送相同的库，并且由于应用程序是分开的，所以在构建时也不能提取公共依赖关系。&lt;/li&gt;
      &lt;li&gt;至于浏览器的支持，基本上不可能嵌套两层以上的 iframe（&lt;code class=&quot;highlighter-rouge&quot;&gt;parent - &amp;gt; iframe - &amp;gt; iframe&lt;/code&gt;）。&lt;/li&gt;
      &lt;li&gt;如果任何嵌套的框架需要能够滚动或具有 Form 表单域，那样的情况处理起来就会变得特别痛苦。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;option-3-客户端-javascript-异步加载&quot;&gt;Option 3: 客户端 JavaScript 异步加载&lt;/h4&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadPage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'script'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nonExecutableScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nonExecutableScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.load-app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;load-app&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;load-app&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;products-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;load-app&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cart&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;简单来说，这种方式就是在客户端浏览器通过 Ajax 加载应用程序，然后将不同模块的内容插入到对应的 &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; 中，而且还必须手动克隆每个 script 的标记才能使其工作。&lt;/p&gt;

&lt;p&gt;需要注意的是，为了避免 Javascript 和 CSS 加载顺序的问题，建议将其修改成类似于 &lt;a href=&quot;https://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919/&quot;&gt;Facebook &lt;code class=&quot;highlighter-rouge&quot;&gt;bigpipe&lt;/code&gt;&lt;/a&gt; 的解决方案，返回一个 JSON 对象 &lt;code class=&quot;highlighter-rouge&quot;&gt;{ html: ..., css: [...], js: [...] }&lt;/code&gt; 再进行加载顺序的控制。&lt;/p&gt;

&lt;h4 id=&quot;option-4-webcomponents-整合所有功能模块&quot;&gt;Option 4: WebComponents 整合所有功能模块&lt;/h4&gt;

&lt;p&gt;Web Components 是一个 Web 标准，所以像 Angular、React/Preact、Vue 或 Hyperapp 这样的主流 JavaScript 框架都支持它们。你可以将 Web Components 视为使用开放 Web 技术创建的可重用的用户界面小部件，也许会是 Web 组件化的未来。&lt;/p&gt;

&lt;p&gt;Web Components 由以下四种技术组成（尽管每种技术都可以独立使用）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Custom_Elements&quot;&gt;自定义元素（Custom Elements）&lt;/a&gt;对外提供组件的标签，实现自定义标签：可以创建自己的自定义 HTML 标签和元素。每个元素可以有自己的脚本和 CSS 样式。还包括生命周期回调，它们允许我们定义正在加载的组件特定行为。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/template&quot;&gt;HTML 模板（HTML &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt;）&lt;/a&gt;定义组件的 HTML 模板能力：一种用于保存客户端内容的机制，该内容在页面加载时不被渲染，但可以在运行时使用 JavaScript 进行实例化。可以将一个模板视为正在被存储以供随后在文档中使用的一个内容片段。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Shadow_DOM&quot;&gt;影子 DOM（Shadow DOM）&lt;/a&gt;封装组件的内部结构，并且保持其独立性：允许我们在 Web 组件中封装 JavaScript，CSS 和 HTML。在组件内部时，这些东西与主文档的 DOM 分离。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/HTML_Imports&quot;&gt;HTML 导入（HTML Imports）&lt;/a&gt;解决组件组合和依赖加载：在微前端的上下文中，可以是包含我们要使用的组件在服务器上的远程位置。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;attachedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createShadowRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'microfrontends-header'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;microfrontends-header&amp;gt;&amp;lt;/microfrontends-header&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;microfrontends-products-list&amp;gt;&amp;lt;/microfrontends-products-list&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;microfrontends-cart&amp;gt;&amp;lt;/microfrontends-cart&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在微前端的实践当中：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每个团队使用各自的技术栈创建他们的组件，并把它包装到自定义元素（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Custom_Elements&quot;&gt;Custom Element&lt;/a&gt;）中（如 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;microfrontends-header&amp;gt;&amp;lt;/microfrontends-header&amp;gt;&lt;/code&gt;）。&lt;/li&gt;
  &lt;li&gt;Web 组件就是应用程序中包含的组件的本地实现，如菜单，表单，日期选择器等。每个组件都是独立开发的，主应用程序项目利用它们组装成最终的应用程序。&lt;/li&gt;
  &lt;li&gt;特定元素（标签名称，属性和事件）的 DOM 规范还可以充当跨团队之间的契约或公共 API。&lt;/li&gt;
  &lt;li&gt;创建可被导入到 Web 应用程序中的可重用组件，它们就像可以导入任何网页的用户界面小部件。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/components/microfrontends/header.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/components/microfrontends/products-list.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/components/microfrontends/cart.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;优点
    &lt;ul&gt;
      &lt;li&gt;代码的可读性变得非常清晰，组件资源内部高内聚，组件资源由自身加载控制，作用域独立。&lt;/li&gt;
      &lt;li&gt;功能团队可以使用组件及其功能，而不必知道实现，他们只需要能够与 HTML DOM 进行交互。&lt;/li&gt;
      &lt;li&gt;使用 PubSub 机制，组件可以发布消息，其他组件可以订阅特定的主题。幸运的是浏览器内置了这个功能。比如购物车可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; 订阅此事件并在应该刷新其数据时得到通知。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;缺点
    &lt;ul&gt;
      &lt;li&gt;可惜的是，Web 组件规范跟服务器渲染无关。没有 JavaScript，就没有所谓的自定义元素。&lt;/li&gt;
      &lt;li&gt;浏览器和框架的支持不够，需要更多的 polyfills 从而影响到用户页面的加载体验。&lt;/li&gt;
      &lt;li&gt;我们需要在整个 Web 应用程序上做出改变，把它们全部转换成 Web Components。&lt;/li&gt;
      &lt;li&gt;社区不够活跃，Web Components 还没有真正流行起来，也许永远也不会。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;不同-app-模块之间如何交互&quot;&gt;不同 App 模块之间如何交互？&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angularComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ts&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CustomEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addToCart'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reactComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addToCart'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;得益于浏览器的原生 API，Custom Event 可以与其他任何技术和框架一起工作。比如，我们可以将消息从 Angular 组件发送到 React 组件。其实这也是现在 API 之间普遍使用 JSON 进行通信的原因，即使没有人使用 NodeJS 作为服务器端。&lt;/li&gt;
  &lt;li&gt;但是，新的问题又出现了。我们该如何测试这种跨模块之间的交互？需要编写类似于后端微服务之间的 Contract Testing 或 Integration Testing 吗？并没有答案。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;more-options&quot;&gt;More Options…&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;组件库 - 根据主 App 的技术栈，不同的组件和 App 模块拆分作为库的形式提供给主App，所以主 App 是由不同组件组成的。但是组件库的升级将成为一个大麻烦，比如对 Header 组件进行了更改，那么如果已经有 50 个页面使用了 Header 组件该怎么办？必须要求每一页都升级它的 Header，而且升级过程中用户还会在整个网站不同页面上看到不一致的标题。并且，在两边还必须都使用相同的技术，比如 Header 组件中使用了 ClojureScript，而 Content 组件中又用了 Elm，那么该怎么办？构建工具就必须在编译时处理不同的语言。&lt;/li&gt;
  &lt;li&gt;将 App 模块作为 React 黑盒组件分发给消费者模块 - 应用程序的状态完全包含在组件中，API 只是通过 props 暴露出来。这种方式其实增加了应用程序之间的耦合，因为它迫使每个人都使用 React，甚至会使用相同版本的 React，但是这似乎也是一个比较好的折衷。&lt;/li&gt;
  &lt;li&gt;Edge Side Includes(ESI)/Server Side Includes(SSI) - 通过特殊的文件后缀 (shtml,inc) 或简单的标记语言来对那些可以加速和不能加速的网页中的内容片断进行描述，将每个网页划分成不同的小部分分别赋予不同的缓存控制策略。SSI / ESI 方法的缺点是，最慢的片段决定了整个页面的响应时间。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;微前端的页面优化与实例&quot;&gt;微前端的页面优化与实例&lt;/h2&gt;

&lt;h3 id=&quot;多模块页面加载问题与优化建议&quot;&gt;多模块页面加载问题与优化建议&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513881261010.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;使用 skeleton screen 响应式布局&lt;/strong&gt;：如上图 LinkedIn 所做的那样，首先展现给用户一个页面的空白版本，然后在这个页面中逐渐加载和填充相应的信息。否则中间的信息流部分的内容最初是空白的，然后在 JavaScript 被加载和执行过后，信息流就会因为需要占用更多的空间而推动整个页面的布局。虽然我们可以控制页面来固定中间部分的高度，但在响应式网站上，确定一个确切的高度往往很难，而且不同的屏幕尺寸可能会有所不同。但更重要的问题是，这种高度尺寸的约定会让不同团队之间产生紧密的联系，从而违背了微前端的初衷。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;使用浏览器异步加载加快初始渲染&lt;/strong&gt;：对于加载成本高且难以缓存的碎片，将其从初始渲染中排除是一个好主意。比如说 LinkedIn 首页的信息流就是一个很好的例子。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;共享 UI 组件库保证视觉体验一致&lt;/strong&gt;：在前端设计中，必须向用户呈现外观和感觉一致的用户界面。建议可以建立一个共享组件库（包含 CSS、字体和 JavaScript）。将这些资源托管在 CDN，每个微前端就可以在其 HTML 输出中引用它们的位置。每个组件库的版本都正确地对资源进行版本控制，而每个微前端都指定要使用的组件库的版本和显式更新依赖关系。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;使用集中式服务（Router）来管理 URL&lt;/strong&gt;：可以理解为前端的 Gateway，不同的 URL 对应不同应用程序所包含的内容。建议通过一个集中式的 URLs Router 来为应用程序提供一个 API 来注册他们自己的 URL，Router 将会位于 Web 应用程序的前面，根据不同的用户请求指向不同的 App 模块组合。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1514122411683.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;提取共同依赖作为 externals 加载&lt;/strong&gt;：虽然说不同 App 模块之间不能直接共享相同的第三方模块，当我们依然可以将常用的依赖比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;lodash&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;moment.js&lt;/code&gt;等公共库，或者跨多个团队共同使用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;react&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;react-dom&lt;/code&gt;。通过 Webpack 等构建工具就可以把打包的时候将这些共同模块排除掉，而只需要在 HTML &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;header&amp;gt;&lt;/code&gt; 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;中直接通过 CDN  加载 externals 依赖。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script
  &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/react/16.2.0/react.min.js&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script
  &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/react/16.2.0/react-dom.min.js&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;微前端在-aemcms项目的应用&quot;&gt;微前端在 AEM（CMS）项目的应用&lt;/h3&gt;

&lt;p&gt;我们在「三靠谱」（&lt;del&gt;已和谐客户名称&lt;/del&gt;）的 Marketplace 项目当中也曾经探索过 AEM + React 混合开发的解决方案，其中就涉及到如何在 AEM 当中嵌入 React 组件，甚至将 AEM 组件又强行转化为 React 组件进行嵌套。现在回过头来其实也算是微前端的一种实践：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AEM 仅仅包含网页内容，不包含 domain 相关的结构化数据。&lt;/li&gt;
  &lt;li&gt;React 组件被托管在 AEM 组件当中，再经由 AEM 传递给组件所需要的属性，比如 IDs 或 APIs 的 URL 等等&lt;/li&gt;
  &lt;li&gt;后端微服务则包含 domain 结构化数据，由对应的 React 组件通过 Ajax 进行数据查询。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cms-container-1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;react-input-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;injectProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'react-input-container'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cms-container-2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;react-button-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'react-button-container'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;现成解决方案single-spa-meta-framework&quot;&gt;现成解决方案：&lt;a href=&quot;https://single-spa.surge.sh/&quot;&gt;Single-SPA “meta framework”&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://single-spa.surge.sh/&quot;&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1514123775500.png&quot; alt=&quot;点击图片可查看实例&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;开源的 &lt;a href=&quot;https://github.com/CanopyTax/single-spa&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;single-spa&lt;/code&gt;&lt;/a&gt; 自称为「元框架」，可以实现在一个页面将多个不同的框架整合，甚至在切换的时候都不需要刷新页面（支持 React、Vue、Angular 1、Angular 2、Ember 等等）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Build micro frontends that coexist and can each be written with their own framework.&lt;/li&gt;
  &lt;li&gt;Use multiple frameworks on the same page without refreshing the page (React, AngularJS, Angular, Ember, or whatever you’re using)&lt;/li&gt;
  &lt;li&gt;Write code using a new framework, without rewriting your existing app&lt;/li&gt;
  &lt;li&gt;Lazy load code for improved initial load time.&lt;/li&gt;
  &lt;li&gt;Hot reload entire chunks of your overall application (instead of individual files).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;请看示例代码，所提供的 API 非常简单：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;singleSpa&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'single-spa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'app1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadingFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./app1/app1.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activityFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#/app1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;singleSpa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadingFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activityFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;singleSpa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;examples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'navbar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./navbar/navbar.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'home'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./home/home.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'angular1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./angular1/angular1.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/angular1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./react/react.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'angular2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./angular2/angular2.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/angular2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src/vue/vue.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'svelte'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src/svelte/svelte.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/svelte'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'preact'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src/preact/preact.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/preact'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'iframe-vanilla-js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src/vanillajs/vanilla.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/vanilla'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'inferno'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src/inferno/inferno.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/inferno'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ember'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadEmberApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ember-app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/build/ember-app/assets/ember-app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/build/ember-app/assets/vendor.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/ember'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;值得一提的是，&lt;a href=&quot;https://github.com/CanopyTax/single-spa&quot;&gt;single-spa&lt;/a&gt; 已经进入到最新一期技术雷达的&lt;strong&gt;评估&lt;/strong&gt;阶段。这意味着 single-spa 会是值得研究一番的技术，以确认它将对你产生何种影响，你应该投入一些精力来确定它是否会对你所在的组织产生影响。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2016/1515998280875.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;摘自技术雷达：SINGLE-SPA 是一个 JavaScript 元框架，它允许我们使用不同的框架构建微前端，而这些框架可以共存于单个应用中。一般来说，我们不建议在单个应用中使用多个框架，但有时却不得不这么做。例如当你在开发遗留系统时，你希望使用现有框架的新版本或完全不同的框架来开发新功能，single-spa 就能派上用场了。鉴于很多 JavaScript框架 都昙花一现，我们需要一个解决方案来应对未来框架的变化，以及在不影响整个应用的前提下进行局部尝试。在这个方向上，single-spa 是一个不错的开始。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;总结与思考微前端的优缺点&quot;&gt;总结与思考：微前端的优缺点&lt;/h2&gt;

&lt;h3 id=&quot;微前端的优点&quot;&gt;微前端的优点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;敏捷性 - 独立开发和更快的部署周期：
    &lt;ul&gt;
      &lt;li&gt;开发团队可以选择自己的技术并及时更新技术栈。&lt;/li&gt;
      &lt;li&gt;一旦完成其中一项就可以部署，而不必等待所有事情完毕。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;降低错误和回归问题的风险，相互之间的依赖性急剧下降。&lt;/li&gt;
  &lt;li&gt;更简单快捷的测试，每一个小的变化不必再触碰整个应用程序。&lt;/li&gt;
  &lt;li&gt;更快交付客户价值，有助于持续集成、持续部署以及持续交付。&lt;/li&gt;
  &lt;li&gt;维护和 bugfix 非常简单，每个团队都熟悉所维护特定的区域。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;微前端的缺点&quot;&gt;微前端的缺点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;开发与部署环境分离
    &lt;ul&gt;
      &lt;li&gt;本地需要一个更为复杂的开发环境。&lt;/li&gt;
      &lt;li&gt;每个 App 模块有一个孤立的部署周期。&lt;/li&gt;
      &lt;li&gt;最终应用程序需要在&lt;strong&gt;同一个&lt;/strong&gt;孤立的环境中运行。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;复杂的集成
    &lt;ul&gt;
      &lt;li&gt;需要考虑隔离 JS，避免 CSS 冲突，并考虑按需加载资源&lt;/li&gt;
      &lt;li&gt;处理数据获取并考虑用户的初始化加载状态&lt;/li&gt;
      &lt;li&gt;如何有效测试，微前端模块之间的 Contract Testing？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第三方模块重叠
    &lt;ul&gt;
      &lt;li&gt;依赖冗余增加了管理的复杂性&lt;/li&gt;
      &lt;li&gt;在团队之间共享公共资源的机制&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;影响最终用户的体验
    &lt;ul&gt;
      &lt;li&gt;初始 Loading 时间可能会增加&lt;/li&gt;
      &lt;li&gt;HTML 会需要服务器端的渲染&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;持续思考&quot;&gt;持续思考…&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513909558428.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;（变幻莫测）前端的技术选型？
    &lt;ul&gt;
      &lt;li&gt;前端 JavaScript 框架工具穷出不穷，过几个月就要重写前端项目？比如最近又出来了声称要取代 Webpack（&lt;a href=&quot;https://github.com/parcel-bundler/parcel&quot;&gt;Parcel&lt;/a&gt;）和 Yarn（&lt;a href=&quot;https://medium.com/@ericsimons/introducing-turbo-5x-faster-than-yarn-npm-and-runs-natively-in-browser-cc2c39715403&quot;&gt;Turbo&lt;/a&gt;）的工具。伴随着前端框架的更新换代，如果整个项目一起升级/重构的话压力大、风险高，那不如拆分微前端直接支持多 framework，或者同一 framework 的不同版本？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;在 Mobile/Mobile Web 上的悖论
    &lt;ul&gt;
      &lt;li&gt;受限于 Mobile 尺寸大小，单一页面所能展现的内容本就有限。&lt;/li&gt;
      &lt;li&gt;既然已经分出了不同的子页面，那何不如直接 Route 即可？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;合理划分的边界：DDD（领域驱动开发）
    &lt;ul&gt;
      &lt;li&gt;最大的挑战是搞清楚如何合理拆分应用程序。&lt;/li&gt;
      &lt;li&gt;糟糕的设计可能成为开发和维护的噩梦。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Don’t use any of this if you don’t need it
    &lt;ul&gt;
      &lt;li&gt;Do not use the ideas described here until it is needed, it will make things more complex.&lt;/li&gt;
      &lt;li&gt;If you are in a big company, those ideas could help you.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;软件架构到底在解决什么问题？—— 跨团队沟通的问题
    &lt;ul&gt;
      &lt;li&gt;在正常情况下，每个团队拥有开发和维护其特性所需的一切，都应该有自己的能力来完成自己的特性，并最大限度地减少团队要求其他部门获得许可和/或帮助。&lt;/li&gt;
      &lt;li&gt;当引入 library 或 framework 时的好处是只需要少数人讨论，而不用涉及超过 100 人的决策和他们的各种需求。这样一场大讨论不仅会耗费时间和精力，而且会迫使我们采用最不起眼的方法来选择 library，而不是选择专门针对每个 team 的问题领域的方案。
        &lt;blockquote&gt;
          &lt;p&gt;所谓架构，其实是解决人的问题；所谓敏捷，其实是解决沟通的问题；&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;附参考资料&quot;&gt;附：参考资料&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;本次技术雷达「微前端」主题的宣讲 Slides 可以在我的博客找到：&lt;a href=&quot;https://blog.jimmylv.info/2017-12-22-tech-radar-microfrontends-extending-microservice-to-fed/&quot;&gt;「技术雷达」之 Micro Frontends：微前端 - 将微服务理念扩展到前端开发 - 吕立青的博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1514125808768.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在做 Slides 之前所整理的 XMind 思维导图：&lt;a href=&quot;https://www.xmind.net/m/e3dv&quot;&gt;https://www.xmind.net/m/e3dv&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;本人所整理的所有关于「微前端」的资料：&lt;a href=&quot;https://www.diigo.com/user/jimmylv?query=%23microfrontends&quot;&gt;https://www.diigo.com/user/jimmylv?query=%23microfrontends&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;日常挖宝：ThoughtWorks 邮件组搜索「microfrontend」关键字：&lt;a href=&quot;https://inbox.google.com/u/1/search/microfrontend&quot;&gt;https://inbox.google.com/u/1/search/microfrontend&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://micro-frontends.org/&quot;&gt;https://micro-frontends.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@tomsoderlund/micro-frontends-a-microservice-approach-to-front-end-web-development-f325ebdadc16&quot;&gt;https://medium.com/@tomsoderlund/micro-frontends-a-microservice-approach-to-front-end-web-development-f325ebdadc16&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@_rchaves_/building-microfrontends-part-i-creating-small-apps-710d709b48b7&quot;&gt;https://medium.com/@_rchaves_/building-microfrontends-part-i-creating-small-apps-710d709b48b7&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.agilechamps.com/microservices-to-micro-frontends/&quot;&gt;http://www.agilechamps.com/microservices-to-micro-frontends/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://allegro.tech/2016/03/Managing-Frontend-in-the-microservices-architecture.html&quot;&gt;http://allegro.tech/2016/03/Managing-Frontend-in-the-microservices-architecture.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://technologyconversations.com/2015/08/09/developing-front-end-microservices-with-polymer-web-components-and-test-driven-development-part-55-using-microservices/&quot;&gt;https://technologyconversations.com/2015/08/09/developing-front-end-microservices-with-polymer-web-components-and-test-driven-development-part-55-using-microservices/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://technologyconversations.com/2015/08/09/including-front-end-web-components-into-microservices/&quot;&gt;https://technologyconversations.com/2015/08/09/including-front-end-web-components-into-microservices/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>「技术雷达」之 Micro Frontends：微前端 - 将微服务理念扩展到前端开发</title>
        <link>http://localhost:4000/2017-12-22-tech-radar-microfrontends-extending-microservice-to-fed/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-12-22-tech-radar-microfrontends-extending-microservice-to-fed/</guid>
        <pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate>
        <description>&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;-micro-frontends-&quot;&gt;✨ Micro Frontends ✨&lt;/h1&gt;

&lt;p&gt;微前端 - 将微服务理念扩展到前端开发&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;(&lt;small&gt;via &lt;strong&gt;Jimmy Lv &lt;/strong&gt;🐵&lt;/small&gt;)&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;️--agenda&quot;&gt;⏲️ | Agenda&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;微前端的概念缘由与定义&lt;/li&gt;
  &lt;li&gt;微前端的实践方案（4+）&lt;/li&gt;
  &lt;li&gt;Demo&lt;/li&gt;
  &lt;li&gt;优缺点总结与思考&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[slide style=”background-image:url(‘https://o7mw3gkkh.qnssl.com/images/2017/12/1513920317188.png’)”]&lt;/p&gt;

&lt;h1 id=&quot;the-majestic-monolith&quot;&gt;The Majestic Monolith&lt;/h1&gt;

&lt;p&gt;[note]
    * 当今的软件开发环境中，大多数应用程序都是单一的，这种方法的缺点之一是企业所有者一年内需要做的决策数量非常有限（因为依赖关系，响应时间较慢）。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 升级产品，在一系列相关服务中增加尺寸较大等新功能，需要所有相关方共同努力，以同步方式进行变更。 [/note]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;--微服务架构带来了哪些好处&quot;&gt;💡 | 微服务架构带来了哪些好处？&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;假设服务边界已经被正确地定义为可独立运行的业务领域，并确保在微服务设计中遵循诸多最佳实践。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513908599811.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 复杂性：服务可以更好地分离。 {:&amp;amp;.moveIn}
* 可扩展性：服务可以独立伸缩。
* 灵活性：服务可以独立失败。
* 敏捷性：服务可以独立开发，测试和部署。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[note]
    * 微服务是孤立的，独立的 “模块”，它们共同为更高的逻辑目的服务。他们通过商定的协议彼此沟通，每个服务都负责特定的功能。这使得每个服务都能够保持简单，简洁和可测试性。
    * 微服务允许您更自发地采取更深远的业务决策，因为每个微服务都是独立运作的，而且一个正在管理的团队可以很好地控制变更。
    * 微服务架构允许每个团队决定最适合他们的技术和基础架构。
    * 引入微服务体系结构的重大好处，它允许团队扩展独立部署和维护服务的交付。
[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;--那么前端的现状呢--臃肿的前端&quot;&gt;💡 | 那么前端的现状呢？ —— 臃肿的前端&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513877114486.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;✨ SPA：一个功能丰富，功能强大的浏览器应用程序。 {:&amp;amp;.moveIn}&lt;/li&gt;
  &lt;li&gt;💔 随着时间的推移，往往由一个独立团队所开发的前端层越来越难以维护。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[note]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果做得对，它提供了优秀的用户体验。主要缺点是它不能很好地扩展。在一个大公司里，有许多开发团队，单前端团队可能成为一个发展瓶颈。&lt;/li&gt;
  &lt;li&gt;大型 SPA 却位于微服务架构之上。
    &lt;ul&gt;
      &lt;li&gt;one App with one BFF.  Why split with Microservices together?&lt;/li&gt;
      &lt;li&gt;不幸的是，我们也看到许多团队在其后端微服务之上创建了前端庞然大物 - 一个庞大而庞大的浏览器应用程序。&lt;/li&gt;
      &lt;li&gt;前端变得越来越大，后端变得越来越不重要。
        &lt;ul&gt;
          &lt;li&gt;90％的前端代码，具有非常薄的后端。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;举实例：OSP 项目中 components library 的弊端 (NPM package)
    &lt;ul&gt;
      &lt;li&gt;What if you want to publish a change to the header, an already have fifty pages using that? You would have to ask every page to upgrade it’s version of header, meanwhile, your users would get inconsistent headers across the website&lt;/li&gt;
      &lt;li&gt;You are now compiling another app as part of yours, what if it throws something unexpected, will your app break too?&lt;/li&gt;
      &lt;li&gt;You are forced to have the same technologies on both sides, what if header the header uses clojurescript and your page uses elm? Poor webpack, it now has to understand it all when compiling.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;微前端的定义---将微服务理念扩展到前端开发&quot;&gt;微前端的定义 - 将微服务理念扩展到前端开发&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513877768959.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;微前端（Micro Frontends）这个术语是微服务的衍生物。同时构建多个自包含的和松耦合的 UI 组件（服务），其中每个组件负责特定的 UI 元素和功能。&lt;/p&gt;

&lt;p&gt;[note]&lt;/p&gt;

&lt;p&gt;ThoughtWorks 的同志们最擅长举一反三，包装概念啦！&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果我们看到微服务提供了后端的好处，如果我们能够将这些好处应用到前端，并不是向前迈出的一步，而且设计微服务不仅要完成后端逻辑，而且还要完成视觉部分。&lt;/li&gt;
  &lt;li&gt;使各个前端团队按照自己的步调迭代，然后在准备就绪时释放; 风险隔离; 而且更容易尝试新技术。&lt;/li&gt;
  &lt;li&gt;对于微服务来说，微前端的许多要求是相同的：监控，健康检查，日志记录，仪器仪表，度量标准等等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;更详细的微前端-micro-frontends&quot;&gt;更详细的「微前端 Micro Frontends」&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;根据领域特定功能将应用程序分解为更小的单元。每个单元是独立的，可以独立开发部署。&lt;/li&gt;
  &lt;li&gt;将网站或 Web 应用程序视为由独立团队拥有的功能组合。每个团队都有一个独特的业务或任务关注和专业的任务。&lt;/li&gt;
  &lt;li&gt;每一个团队是跨职能的，从数据库到用户界面端到端地开发其功能/特性。&lt;/li&gt;
  &lt;li&gt;所有前端功能（身份验证，库存，购物车等）都是 Web 应用程序的一部分，并与后端（大部分时间通过 HTTP）进行通信，并将其分解为微服务。&lt;/li&gt;
  &lt;li&gt;可以同时拥有后端，前端，数据访问层和数据库，即一个服务中的子域所需的所有内容。每一项服务都应该由一个独立的团队来完成。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[note]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web 应用程序被分解成独立的特征，并且每个特征都由不同的团队拥有，前端到后端。这确保了每个功能都是独立于其他功能开发，测试和部署的。&lt;/li&gt;
  &lt;li&gt;找到线上 bug，测试，理解代码，改变框架，甚至语言，隔离，责任和其他事情变得更容易处理。我们不得不付出的代价是部署，但是，容器（Docker 和 Rocket）以及不可变服务器的概念也得到了极大的改善。&lt;/li&gt;
  &lt;li&gt;通过微服务，DevOps 和持续交付是我们工程实践的核心，我们决定 AWS 是支持我们专注于基础架构自动化的正确环境，同时为我们提供冗余和可扩展性。
    &lt;ul&gt;
      &lt;li&gt;Docker 容器将给我们两个具体的好处：&lt;/li&gt;
      &lt;li&gt;跨越环境以及跨 JVM 和非 JVM 应用程序统一部署管道：目前，我们正在管理 Symfony / Angular 表示层的部署，与我们的 JVM / Agora 中间层不同，导致不必要的差异，复制工作和浪费。&lt;/li&gt;
      &lt;li&gt;在单独的主机上部署每个应用程序 / 服务实例的能力：容器调度将使我们能够整合我们的计​​算资源，同时保持服务实例之间的隔离，同时提高利用率。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;存在多种技术来重新组合特征 - 有时作为页面，有时作为组件 - 变为有凝聚力的用户体验。&lt;/li&gt;
  &lt;li&gt;前端（不管是不是 SPA）将被缩减为只负责路由选择和决定要导入哪些服务的脚手架。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;微前端的核心思想&quot;&gt;微前端的核心思想&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513878936981.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;✨ Be Technology Agnostic {:&amp;amp;.moveIn}&lt;/li&gt;
  &lt;li&gt;✨ Isolate Team Code&lt;/li&gt;
  &lt;li&gt;✨ Establish Team Prefixes&lt;/li&gt;
  &lt;li&gt;✨ Favor Native Browser Features over Custom APIs&lt;/li&gt;
  &lt;li&gt;✨ Build a Resilient Site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[note]&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;每个团队都应该能够选择和升级他们的技术栈，而不必与其他团队协调。自定义元素是隐藏实现细节的好方法，同时为其他人提供公共接口。&lt;/li&gt;
  &lt;li&gt;即使所有团队使用相同的框架，也不要共享运行时。构建独立的应用程序。不要依赖共享状态或全局变量。&lt;/li&gt;
  &lt;li&gt;相互约定命名隔离。为 CSS、Events、Local Storage 和 Cookies 制定命名空间，以避免冲突和明确所有权。&lt;/li&gt;
  &lt;li&gt;使用浏览器事件进行通信，而不是构建全局的 PubSub 系统。如果您确实需要构建跨团队 API，请尽量保持简单。（与框架无关，CustomEvent）&lt;/li&gt;
  &lt;li&gt;即使 JavaScript 失败或尚未执行，您的功能仍应有用。使用通用渲染和渐进增强来提高感知性能。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;微前端的实践方案&quot;&gt;微前端的实践方案&lt;/h1&gt;

&lt;p&gt;🔨 Creating small apps (rather than components) 🔨&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Logo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;......&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/header&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderedApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;https://microfrontends-header.herokuapp.com/&lt;/li&gt;
  &lt;li&gt;https://microfrontends-products-list.herokuapp.com/&lt;/li&gt;
  &lt;li&gt;https://microfrontends-cart.herokuapp.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;--joining-apps-together&quot;&gt;💞  Joining apps together&lt;/h1&gt;

&lt;h2 id=&quot;option-1-ssr-using-template&quot;&gt;Option 1: SSR using template&lt;/h2&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://microfrontends-header.herokuapp.com/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://microfrontends-products-list.herokuapp.com/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://microfrontends-cart.herokuapp.com/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;productsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ejs&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Microfrontends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Homepage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/title&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/head&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;%-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;%-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;productsList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;%-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/body&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;Problem: Some apps may take longer to load&lt;/p&gt;

&lt;p&gt;[note]&lt;/p&gt;

&lt;p&gt;There are some cases where things take a while to load on the back-end, maybe your header loads much faster than the other parts, and you want to display that ASAP to your users, while the products list takes more time.&lt;/p&gt;

&lt;p&gt;[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;--joining-apps-together-1&quot;&gt;💞  Joining apps together&lt;/h1&gt;

&lt;h2 id=&quot;option-11-progressive-loading-from-the-back-end&quot;&gt;Option 1.1: Progressive loading from the back-end&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513879504186.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;option-2-iframe&quot;&gt;Option 2: iframe&lt;/h1&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://microfrontends-header.herokuapp.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://microfrontends-products-list.herokuapp.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://microfrontends-cart.herokuapp.com/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;优点 {:&amp;amp;.moveIn}
    &lt;ul&gt;
      &lt;li&gt;最强大的是隔离了组件和应用程序部分的运行时环境，因此每个部分都可以独立开发，并且可以与其他部分的技术无关&lt;/li&gt;
      &lt;li&gt;可以在 React 中开发一些部分，在 Angular 中开发一些部分，在 vanilla Js 中开发更多或任何其他技术。&lt;/li&gt;
      &lt;li&gt;只要 iframes 来自同一个来源，消息传递也就相当直接和强大。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage&quot;&gt;Window.postMessageAPI&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;缺点
    &lt;ul&gt;
      &lt;li&gt;Bundle 的大小非常明显，因为你最终会多次发送相同的库，并且由于应用程序是分开的，所以在构建时不能提取公共依赖关系。&lt;/li&gt;
      &lt;li&gt;至于浏览器的支持，你基本上不能嵌套两层以上的 iframes（parent - &amp;gt; iframe - &amp;gt; iframe），或者所有的地狱崩溃。&lt;/li&gt;
      &lt;li&gt;如果任何嵌套的框架需要能够滚动或具有 Form 表单域，就会很痛苦。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[note]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每个应用程序都在自己的小 iframe 中，这使得小组能够使用任何他们需要的框架，而无需与其他小组协调工具和依赖关系。&lt;/li&gt;
  &lt;li&gt;将微服务包装到 IFrames 中，然后使用一些库和 Window.postMessageAPI 来交互。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;option-3-client-side-javascript&quot;&gt;Option 3: Client-Side JavaScript&lt;/h1&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nonExecutableScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This basically loads the apps through ajax and insert their content inside those &lt;code class=&quot;highlighter-rouge&quot;&gt;divs&lt;/code&gt;. It also has to clone each script tag manually for them to work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Note: to avoid problems with Javascript and CSS loading order, I suggest you to evolve this to a solution similar to facebook’s bigpipe, returning a JSON like &lt;code class=&quot;highlighter-rouge&quot;&gt;{ html: ..., css: [...], js: [...] }&lt;/code&gt; so you can have full control of it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;option-4-webcomponents&quot;&gt;Option 4: WebComponents&lt;/h1&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;attachedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createShadowRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'microfrontends-header'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;microfrontends-header&amp;gt;&amp;lt;/microfrontends-header&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;microfrontends-products-list&amp;gt;&amp;lt;/microfrontends-products-list&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;microfrontends-cart&amp;gt;&amp;lt;/microfrontends-cart&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[note]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每个团队建立他们的组件使用他们所选择的网络技术，并把它包装自定义元素中（如&lt;order-minicart&gt;&lt;/order-minicart&gt;）。
    &lt;ul&gt;
      &lt;li&gt;允许创建可以导入到 Web 应用程序中的可重用组件。它们就像可以导入任何网页的小部件。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Web 组件 - Web 组件是应用程序中包含的组件的本地实现，如菜单，表单，日期选择器等。每个组件都是独立开发的，主应用程序项目利用它们并组成最终的应用程序。&lt;/li&gt;
  &lt;li&gt;这个特定元素（标签名称，属性和事件）的 DOM 规范充当其他团队的合同或公共 API。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;web-components-用于整合所有功能模块&quot;&gt;Web Components 用于整合所有功能模块&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Web Components 是一个 Web 标准，所以像 Angular，React，Preact，Vue 或 Hyperapp 这样的主流 JavaScript 框架都支持它们。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; 自定义元素
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; Shadow DOM
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; HTML 导入
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; HTML 模板元素
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/components/tc-books/tc-books.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/components/tc-books/tc-book-form.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[note]&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;优点 {:&amp;amp;.moveIn}
    &lt;ul&gt;
      &lt;li&gt;自定义元素可以创建自己的自定义 HTML 标签和元素。每个元素可以有自己的脚本和 CSS 样式。还包括生命周期回调，它们允许我们定义特定于正在开发的组件的行为。&lt;/li&gt;
      &lt;li&gt;Shadow DOM：允许我们在 Web 组件中封装 JavaScript，CSS 和 HTML。在组件内部时，这些东西与主文档的 DOM 分离。
HTML 导入
        &lt;ul&gt;
          &lt;li&gt;在微服务的上下文中，导入可以是包含我们要使用的组件的服务的远程位置。&lt;/li&gt;
          &lt;li&gt;
            &lt;link rel=&quot;import&quot; href=&quot;/components/tc-books/tc-books.html&quot; /&gt;

            &lt;link rel=&quot;import&quot; href=&quot;/components/tc-books/tc-book-form.html&quot; /&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;HTML 模板元素：可以用来保存客户端内容，当页面加载时不会渲染。&lt;/li&gt;
      &lt;li&gt;功能团队可以使用组件及其功能，而不必知道实现。他们只需要能够与 HTML DOM 进行交互。&lt;/li&gt;
      &lt;li&gt;使用 PubSub 机制，组件可以发布消息，其他组件可以订阅特定的主题。幸运的是浏览器内置了这个功能。
        &lt;ul&gt;
          &lt;li&gt;购物车现在可以订阅此事件 window 并在应该刷新其数据时得到通知。&lt;/li&gt;
          &lt;li&gt;window.addEventListener(‘blue:basket:changed’, this.refresh);&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;缺点
    &lt;ul&gt;
      &lt;li&gt;可悲的是，Web 组件规范根本不谈论服务器渲染。没有 JavaScript，就没有自定义元素。😔&lt;/li&gt;
      &lt;li&gt;浏览器不全，支持不够，社区不够，框架支持不够。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WebComponents are still not fully supported in all browsers, with Mozilla holding back HTML imports, so you will need polyfills, more code for the user to load.&lt;/li&gt;
  &lt;li&gt;It haven’t really gained popularity yet, maybe never will, I see blogposts from 2013 and still few people have tried it!&lt;/li&gt;
  &lt;li&gt;JavaScript bundle has to load first and register the components in order for the DOM to load, which means that to gain the advantages of server-side rendering you’ll probably need to be more clever.&lt;/li&gt;
  &lt;li&gt;For this alternative we had to make changes not only on the homepage, but on the apps too, to convert them to WebComponents.
[/note]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;communication-between-apps&quot;&gt;Communication Between Apps&lt;/h1&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angularComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ts&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CustomEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addToCart'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reactComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addToCart'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[note]&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;because it should work with any other technologies and frameworks, you can send messages from React to Angular for example.&lt;/li&gt;
  &lt;li&gt;This is the same reason nowadays everybody uses JSON to communication on the back-end, even if nobody uses NodeJS!&lt;/li&gt;
  &lt;li&gt;how do we test this communication? How to write integration or contract tests here? I don’t know. Also adding some ideas from Event Driven Architecture here might be good.
[/note]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;more-options&quot;&gt;More Options…&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;组件库 - 根据主应用程序的技术栈，不同的组件和应用程序部分可以作为库和主应用程序，所以主应用程序是由不同组件组成的。&lt;/li&gt;
  &lt;li&gt;将 “应用程序” 作为黑盒 React 组件分发给消费应用程序 - 应用程序的状态完全包含在组件中，API 只是通过 props 暴露出来。&lt;/li&gt;
  &lt;li&gt;Edge Side Includes(ESI)/Server Side Includes(SSI) - 通过特殊的文件后缀 (shtml,inc) 或简单的标记语言来对那些可以加速和不能加速的网页中的内容片断进行描述，将每个网页划分成不同的小部分分别赋予不同的缓存控制策略。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[note]&lt;/p&gt;

&lt;p&gt;这种方式增加了应用程序之间的耦合，因为它迫使每个人都使用 React，甚至会使用相同版本的 React，但是对于我们来说，情况已经如此，所以这似乎是一个好的折衷。&lt;/p&gt;
&lt;h3 id=&quot;ssi--esi-方法的缺点是最慢的片段决定了整个页面的响应时间所以当一个片段的响应可以被缓存时是很好的&quot;&gt;SSI / ESI 方法的缺点是，最慢的片段决定了整个页面的响应时间。所以当一个片段的响应可以被缓存时是很好的。&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Edge Side Includes(ESI) 和 Server Side Includes(SSI) 和功能类似. SSI 需要特殊的文件后缀 (shtml,inc).ESI（Edge Side Include）通过使用简单的标记语言来对那些可以加速和不能加速的网页中的内容片断进行描述,&lt;/li&gt;
  &lt;li&gt;每个网页都被划分成不同的小部分分别赋予不同的缓存控制策略, 使 Cache 服务器可以根据这些策略在将完整的网页发送给用户之前将不同的小部分动态地组合在一起.&lt;/li&gt;
  &lt;li&gt;通过这种控制, 可以有效地减少从服务器抓取整个页面的次数, 而只用从原服务器中提取少量的不能缓存的片断, 因此可以有效降低原服务器的负载, 同时提高用户访问的响应时间.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;页面加载的问题与优化建议&quot;&gt;页面加载的问题与优化建议&lt;/h1&gt;

&lt;h2&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513881261010.png&quot; alt=&quot;&quot; /&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;响应式布局：使用 skeleton screen&lt;/li&gt;
  &lt;li&gt;加快初始渲染：浏览器异步加载&lt;/li&gt;
  &lt;li&gt;视觉体验一致：共享 UI 组件库&lt;/li&gt;
  &lt;li&gt;Router：依赖反转（前端 BFF/Gateway）&lt;/li&gt;
  &lt;li&gt;提取共同依赖作为 externals&lt;/li&gt;
  &lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[note]&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;推荐区域最初是空白的。团队绿色 JavaScript 被加载和执行。用于获取个性化推荐的 API 调用已经完成。推荐标记被呈现并且请求关联的图像。现在片段需要更多的空间，并推动页面的布局。&lt;/li&gt;
  &lt;li&gt;团队红，控制页面，可以固定建议容器的高度。在响应式网站上，确定高度往往很难，因为不同的屏幕尺寸可能会有所不同。但更重要的问题是，这种队际协议在球队红绿之间产生了紧密的联系。&lt;/li&gt;
  &lt;li&gt;更好的方法是使用称为骨架屏幕的技术。Team red 将green-recosSSI Include 包含在标记中。此外，团队绿色会更改其片段的服务器端渲染方法，以便生成内容的原理图版本。该骷髅标记可以重用的实际内容的布局样式的部分。这样就保留了所需的空间，实际内容的填充不会导致跳跃。
    &lt;ul&gt;
      &lt;li&gt;A skeleton screen is essentially a blank version of a page into which information is gradually loaded.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;优化&quot;&gt;优化&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;对于生产成本高且难以缓存的碎片，将其从初始渲染中排除是一个好主意。浏览器异步加载。
在我们的例子中green-recos，显示个性化推荐的片段就是这个候选人。&lt;/li&gt;
  &lt;li&gt;在前端设计中，必须向用户呈现外观和感觉一致的用户界面。有很多页面上都出现了 UI 元素。关注的分离并不总是像后端服务一样清晰。&lt;/li&gt;
  &lt;li&gt;UI 组件库
    &lt;ul&gt;
      &lt;li&gt;我们用微前端解决的下一个挑战是呈现一致的外观和感觉，同时也隔离风险。&lt;/li&gt;
      &lt;li&gt;我们建立了一个共享组件（CSS，Font 和 JavaScript）的库。我们将这些资源托管在每个微前端可以在其 HTML 输出中引用它们的位置。每个组件库的版本都正确地对资源进行版本控制，每个微前端都指定要使用的组件库的版本。因此，CSS 和 JavaScript 不会意外地改变; 每个微前端的开发者都必须显式更新依赖关系。
[/note]&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;micro-frontends--aemjquery&quot;&gt;Micro Frontends + AEM/jQuery&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;AEM (of course), which contains web content only (no structured domain data).&lt;/li&gt;
  &lt;li&gt;React.js components that are hosted in AEM. AEM passes through different properties the components need e.g. ids, URLs of services.&lt;/li&gt;
  &lt;li&gt;Microservices that contain the structured domain data, and that are queried by the React.js components via Ajax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;demo-single-spa-meta-framework&quot;&gt;Demo: &lt;a href=&quot;https://single-spa.surge.sh/&quot;&gt;Single-SPA “meta framework”&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;可以在一个页面将多个不同的框架整合，甚至在切换的时候都不需要刷新页面 (支持 React, Vue, Angular 1, Angular 2, etc)&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Build micro frontends that coexist and can each be written with their own framework.&lt;/li&gt;
  &lt;li&gt;Use multiple frameworks on the same page without refreshing the page (React, AngularJS, Angular, Ember, or whatever you’re using)&lt;/li&gt;
  &lt;li&gt;Write code using a new framework, without rewriting your existing app&lt;/li&gt;
  &lt;li&gt;Lazy load code for improved initial load time.&lt;/li&gt;
  &lt;li&gt;Hot reload entire chunks of your overall application (instead of individual files).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;-show-me-the-code&quot;&gt;🐒 SHOW ME THE CODE!&lt;/h1&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;singleSpa&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'single-spa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'app1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadingFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./app1/app1.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activityFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#/app1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;singleSpa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadingFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activityFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;singleSpa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;examples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'navbar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./navbar/navbar.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'home'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./home/home.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'angular1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./angular1/angular1.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/angular1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./react/react.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'angular2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./angular2/angular2.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/angular2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src/vue/vue.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'svelte'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src/svelte/svelte.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/svelte'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'preact'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src/preact/preact.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/preact'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'iframe-vanilla-js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src/vanillajs/vanilla.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/vanilla'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'inferno'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src/inferno/inferno.app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/inferno'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declareChildApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ember'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadEmberApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ember-app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/build/ember-app/assets/ember-app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/build/ember-app/assets/vendor.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/ember'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;总结与思考微前端的优缺点&quot;&gt;总结与思考：微前端的优缺点&lt;/h1&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;优点&quot;&gt;优点&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;敏捷性 - 独立开发和更快的部署周期
    &lt;ul&gt;
      &lt;li&gt;开发团队可以选择自己的技术并及时更新技术栈。&lt;/li&gt;
      &lt;li&gt;一旦完成其中一项就可以部署，而不必等待所有事情。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;降低错误和回归问题的风险，相互之间的依赖性急剧下降。&lt;/li&gt;
  &lt;li&gt;更简单快捷的测试，每一个小的变化不必再触碰整个应用程序。&lt;/li&gt;
  &lt;li&gt;有助于持续集成、持续部署以及持续交付。&lt;/li&gt;
  &lt;li&gt;维护和 bugfix 非常简单，每个团队维护特定的区域。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;缺点&quot;&gt;缺点&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;开发与部署环境分离
    &lt;ul&gt;
      &lt;li&gt;一个复杂的开发环境&lt;/li&gt;
      &lt;li&gt;有一个孤立的部署周期。&lt;/li&gt;
      &lt;li&gt;需要在一个孤立的环境中运行。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;复杂的集成
    &lt;ul&gt;
      &lt;li&gt;隔离 js，避免 css 冲突，根据需要加载资源，在团队之间共享公共资源的机制，处理数据获取并考虑用户的良好加载状态。&lt;/li&gt;
      &lt;li&gt;微前端模块之间的 Contract Testing？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第三方模块重叠 / 依赖冗余增加了管理的复杂性&lt;/li&gt;
  &lt;li&gt;影响最终用户的体验
    &lt;ul&gt;
      &lt;li&gt;初始 Loading 时间可能会增加&lt;/li&gt;
      &lt;li&gt;HTML 会需要服务器端的渲染&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script  &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/react/15.4.2/react.min.js&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;--持续思考&quot;&gt;💡 | 持续思考…&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/12/1513909558428.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;（变幻莫测）前端的技术选型？&lt;/li&gt;
  &lt;li&gt;在 Mobile/Mobile Web 上的悖论&lt;/li&gt;
  &lt;li&gt;合理划分的边界：DDD&lt;/li&gt;
  &lt;li&gt;Don’t use any of this if you don’t need it&lt;/li&gt;
  &lt;li&gt;软件架构到底在解决什么问题？&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;所谓架构，其实是解决人的问题；所谓敏捷，其实是解决沟通的问题；所谓精益，其实是在讨论如何榨干劳动力；&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;[note]&lt;/p&gt;
&lt;h3 id=&quot;前端的技术选型&quot;&gt;前端的技术选型？&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;既然 React 经验不错，那为什么不推广到全公司？可能是跨 vendor 合作&lt;/li&gt;
  &lt;li&gt;前端 JavaScript 框架穷出不穷，最后又出来要取代 Webpack 和 Yarn 的工具，过几个月就要重写项目？重构压力、负担大，那不如直接支持多 framework？
    &lt;h3 id=&quot;在-mobilemobile-web-上的悖论&quot;&gt;在 Mobile/Mobile Web 上的悖论&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;已经分出了不同的子页面，那何不如直接 Router 即可？
    &lt;h3 id=&quot;合理划分ddd&quot;&gt;合理划分：DDD&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;最大的挑战是搞清楚如何划分应用程序。糟糕的设计可能成为开发和维护的噩梦。主要原则是将应用程序分为不同的部分，子部分和组件。
    &lt;h3 id=&quot;dont-use-any-of-this-if-you-dont-need-it&quot;&gt;Don’t use any of this if you don’t need it&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;do not use the ideas described here until it is needed, it will make things more complex.&lt;/li&gt;
  &lt;li&gt;If you are in a big company, those ideas could help you
    &lt;h3 id=&quot;所谓架构其实是解决人的问题所谓敏捷其实是解决沟通的问题所谓精益其实是讨论如何榨干劳动力美其名曰减少浪费&quot;&gt;所谓架构，其实是解决人的问题；所谓敏捷，其实是解决沟通的问题；所谓精益，其实是讨论如何榨干劳动力，美其名曰减少浪费；&lt;/h3&gt;
    &lt;h3 id=&quot;解决了什么问题&quot;&gt;解决了什么问题？&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;跨团队沟通的问题
    &lt;ul&gt;
      &lt;li&gt;Spotify 在内部被分成小队（3-12 人）队称为小队。一个特点通常由一个小队拥有，而在正常情况下，小队拥有开发和维持其特征所需的一切。一个小队的 iOS，Android，网络和后端开发人员是很正常的。一般的想法是，每个小队都应该有自己的能力来完成自己的功能，最大限度地减少小组要求其他部门获得许可和 / 或帮助。&lt;/li&gt;
      &lt;li&gt;提供了大量引进 library 的好处是少数人讨论，而不是涉及约 100 人的决定和他们的各种需求。这样一场大讨论不仅会耗费时间和精力，而且会迫使我们采用最不起眼的方法来选择 library，而不是选择专门针对每个 team 的问题领域的方案。
[/note]&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;️--thank-you&quot;&gt;❤️ | Thank you!&lt;/h1&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://medium.com/@tomsoderlund/micro-frontends-a-microservice-approach-to-front-end-web-development-f325ebdadc16
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://medium.com/@_rchaves_/building-microfrontends-part-i-creating-small-apps-710d709b48b7
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; http://allegro.tech/2016/03/Managing-Frontend-in-the-microservices-architecture.html
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://technologyconversations.com/2015/08/09/developing-front-end-microservices-with-polymer-web-components-and-test-driven-development-part-55-using-microservices/
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://technologyconversations.com/2015/08/09/including-front-end-web-components-into-microservices/
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://inbox.google.com/u/1/search/microfrontend
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://inbox.google.com/u/1/search/micro%20frontend
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://medium.com/@_rchaves_/building-microfrontends-bonus-part-rewriting-an-app-with-elm-97ddce415ff4
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://m.signalvnoise.com/the-majestic-monolith-29166d022228
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://medium.com/@_rchaves_/building-microfrontends-part-v-communication-between-apps-34ae3649d610
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://medium.com/@_rchaves_/building-microfrontends-part-iv-using-cdns-tech-radar-for-consensus-7dd658c1edb7
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://medium.com/@_rchaves_/building-microfrontends-part-iii-public-path-problem-1ce823be24c9
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://medium.com/@_rchaves_/building-microfrontends-part-ii-joining-apps-together-dfa1b6f17d3e
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://www.upwork.com/blog/2017/05/modernizing-upwork-micro-frontends/
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://www.upwork.com/blog/2017/01/upwork-modernization/
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://engineering.hellofresh.com/front-end-microservices-at-hellofresh-23978a611b87
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://news.ycombinator.com/item?id=13009285
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://www.thoughtworks.com/radar/techniques/micro-frontends
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; http://www.agilechamps.com/microservices-to-micro-frontends/
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://www.tikalk.com/js/introduction-to-micro-frontends/
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://github.com/CanopyTax/single-spa
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; http://www.infoq.com/cn/news/2015/08/netflix-falcor
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; http://insights.thoughtworks.cn/frontend-future-radar/
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://blog.prototypr.io/luke-wroblewski-introduced-skeleton-screens-in-2013-through-his-work-on-the-polar-app-later-fd1d32a6a8e7
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://micro-frontends.org/
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://blog.fundebug.com/2017/08/02/micro_frontend_development/
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; https://www.quora.com/How-is-JavaScript-used-within-the-Spotify-desktop-application-Is-it-packaged-up-and-run-locally-only-retrieving-the-assets-as-and-when-needed-What-JavaScript-VM-is-used/answer/Mattias-Petter-Johansson
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
      </item>
    
      <item>
        <title>Serverless 实战：打造个人阅读追踪系统</title>
        <link>http://localhost:4000/2017-06-30-serverless-in-action-build-personal-reading-statistics-system/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-06-30-serverless-in-action-build-personal-reading-statistics-system/</guid>
        <pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate>
        <description>&lt;h2 id=&quot;阅读习惯和个人知识管理体系&quot;&gt;阅读习惯和个人知识管理体系&lt;/h2&gt;

&lt;p&gt;在互联网时代，知识可以说从未像如此一般廉价，但是&lt;strong&gt;再好的知识若是对个人没有产生价值的话，那也只不过是一种信息噪音而已&lt;/strong&gt;。我在 &lt;a href=&quot;https://blog.jimmylv.info/2015-10-09-three-types-of-knowledge/&quot;&gt;个人知识管理：知识的三种形态&lt;/a&gt; 这篇文章中使用 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;材料 -&amp;gt; 资料 -&amp;gt; 知识&lt;/code&gt;&lt;/strong&gt; 这样的路径来解释信息的流通，&lt;strong&gt;如何方便快捷并且有效地收集材料，再将其整理转化为有价值的个人知识体系结构&lt;/strong&gt;，在这个信息严重碎片化的时代变得尤为重要。而在 &lt;a href=&quot;https://blog.jimmylv.info/2016-09-16-sorting-out-knowledge-from-information/&quot;&gt;去伪存真的知识管理之路&lt;/a&gt; 一文中也详细阐述了如何将网络上的碎片化文章纳入统一的稍后阅读体系，比如说有时候在朋友圈看到一篇好文章，但暂时没时间直接看，或是这篇文章值得再读一遍，细读一遍，那么我就会将其存入稍后阅读工具即 &lt;a href=&quot;https://www.instapaper.com&quot;&gt;Instapaper&lt;/a&gt; 当中，诸如此类的还有 &lt;a href=&quot;https://getpocket.com/&quot;&gt;Pocket&lt;/a&gt;、&lt;a href=&quot;https://shouqu.me/&quot;&gt;收趣&lt;/a&gt;等等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2016/1474027837640.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;稍后阅读永远读不完的痛点缺乏追踪&quot;&gt;稍后阅读永远读不完的痛点：缺乏追踪&lt;/h3&gt;

&lt;p&gt;随着时间的推移，Instapaper 里面的文章将会变得越来越多，就像我们在代码中所注释的 &lt;code class=&quot;highlighter-rouge&quot;&gt;TODO:&lt;/code&gt; 可能就变成了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Never Do&lt;/code&gt;，稍后读也是一样地被人广为诟病：Read it Later = Read Never。其实我发现文章堆积的一个永恒痛点就是&lt;strong&gt;没有有效的方式追踪自己的阅读需求与能力，其核心原因就是因为读完的速度赶不上添加的速度&lt;/strong&gt;。从而没办法可视化出来评估自己的阅读进度，合理安排阅读计划，也就没办法给予自己适当的奖励，进而失去了阅读的动力。&lt;/p&gt;

&lt;p&gt;上回博客大赛写过一篇 &lt;a href=&quot;https://blog.jimmylv.info/2016-12-04-agile-learning-based-on-github-issues/&quot;&gt;基于 GitHub 的敏捷学习方法之道与术&lt;/a&gt;，其中提到使用 GitHub Issue 来管理自己的学习计划，从而就又产生了这么一个想法，就是将我的稍后阅读列表跟 GitHub 结合起来，使用 ZenHub 丰富的图表功能将阅读体系进行追踪与可视化。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2016/1480844770670.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;可视化-cumulative-flow-diagram&quot;&gt;可视化 Cumulative Flow Diagram&lt;/h3&gt;

&lt;p&gt;首先让我们直接来看一下最终的具体效果图，在这里简单介绍一下 CFD（Cumulative Flow Diagram）即累积流图，这是一种能让你快速了解项目或产品工作概况的图表，关注的是价值的流动效率，价值的流动最直接的体现就是需求卡片在各个队列中的数量。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499007659821.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;里特定律（Little’s law）告诉我们&lt;strong&gt;交付时间（Delivery time）依赖于在制品数量（Work In Progress, WIP）。WIP 是指所有已经初始但还未完成的工作，例如：所有在分析（Analysis）与完成（Done）之间的工作&lt;/strong&gt;。必须要首先留意的就是 WIP，&lt;strong&gt;如果 WIP 增加了，交付日期就会有风险。&lt;/strong&gt;ZenHub 所提供的 Release Report 中最有效果的就是&lt;strong&gt;预测完成日期&lt;/strong&gt;，总之就是跟敏捷方法结合起来，使用项目管理的方式来管理自己的阅读列表，当然其实我也在进一步的探索之中，但是每次看看到这个走势图就能对自己的阅读列表有了更多的掌控和理解，至少减少了文章堆积时所产生的焦虑感。&lt;/p&gt;

&lt;h2 id=&quot;ifttt-与-serverless-架构&quot;&gt;IFTTT 与 Serverless 架构&lt;/h2&gt;

&lt;p&gt;那么这背后是怎么通过 APIs 来实现的呢？当然，在真正进入正题之前我们先来简单介绍一下 Serverless 架构。Serverless 指的是在构建 Web 应用程序的时候，而不用担心如何配置服务器，但是这并不意味着应用程序不会在服务器上运行，而是说服务器的管理都可以尽可能地交给相应的云平台，从而最大程度地减轻开发人员的部署与配置工作。与之对应的一个名词可能就是 Function As a Service（FAAS），由 AWS Lambda 这个命名上就能想到，当我们在构建 Serverless 架构时，实际上我们是在写一个个的 Function 即函数而已。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://insights.thoughtworkers.org/wp-content/uploads/2017/05/0-lambda2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;流程化apis-即服务&quot;&gt;流程化：APIs 即服务&lt;/h3&gt;

&lt;p&gt;首先让我们来介绍一下 &lt;a href=&quot;https://ifttt.com/discover&quot;&gt;IFTTT&lt;/a&gt; 即 if this then that 的缩写。通俗的来讲，IFTTT 的作用就是如果触发了一件事，则执行设定好的另一件事。所谓的「事」，指的是各种应用、服务之间可以进行有趣的连锁反应。IFTTT 的宗旨是 Put the internet to work for you （让互联网为你服务）。用户可以在 IFTTT 里设定任何一个你需要的条件，当条件达到时，便会触发下一个指定好的动作。&lt;strong&gt;它就像是一座神奇的桥梁，能连接我们日常所用的各种网络服务。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499008946205.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而我们现在遇到的这个串联式的场景下是特别合适 Serverless 架构的，使用 IFTTT 并且将它跟 Instapaper 账号绑定，&lt;strong&gt;设置文章添加、高亮、归档等行为作为 trigger 条件，然后将相关信息发到某一个指定 API endpoint。&lt;/strong&gt;先把操作 GitHub Issue 和 ZenHub 的各种 APIs 准备好，结合 IFTTT 的触发器与 Marker 工具能够非常方便地与之相集成，最后我们可以产出这样一个 APIs 交互流程图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499010393382.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;初始化-webtask-项目&quot;&gt;初始化 Webtask 项目&lt;/h3&gt;

&lt;p&gt;虽然 AWS Lambda 是 Serverless 架构的典范，但它也有一些槽点以及我觉得已经被人说得足够多了，所以我们今天就来尝尝鲜，着重介绍和使用一下 Webtask。推出该服务的这家公司 &lt;a href=&quot;https://auth0.com/&quot;&gt;Auth0&lt;/a&gt; 你可能没有听说过，但你一直知道大名鼎鼎的 JWT 即 JSON Web Token，这是一种开放标准（&lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot;&gt;RFC 7519&lt;/a&gt;），通常被运用在身份验证（Authentication）和信息交换等需要安全传输信息的场景下。&lt;/p&gt;

&lt;p&gt;首先让我们来安装工具初始化项目以及&lt;a href=&quot;https://webtask.io/&quot;&gt;注册账号&lt;/a&gt;，然后使用电子邮件进行登录：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; wt-cli

wt init &amp;lt;YOUR-EMAIL&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建项目目录，添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; 文件并添加以下内容：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在该目录中运行以下命令进行应用程序部署之后，点击控制台中输出的 URL 就能看到编程史上最有名气没有之一的 &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld!&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wt create index
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.scotch.io/10/T0RwEO5LQWu15i3UFjKu_Screen%20Shot%202017-04-26%20at%201.27.43%20PM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;webtask-的上下文绑定&quot;&gt;Webtask 的上下文绑定&lt;/h3&gt;

&lt;p&gt;Webtask 有一个实用工具 &lt;code class=&quot;highlighter-rouge&quot;&gt;webtask-tools&lt;/code&gt; 可以将应用程序绑定到 Webtask 上下文，让我们将之前所 export 的简单函数修改为绑定到 Webtask 的 Express app，然后就可以愉快地使用 Express 进行开发，一切就又回到了熟悉的味道：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Webtask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'webtask-tools'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bodyParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body-parser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bodyParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;urlencoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;extended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bodyParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./routes/reading'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Webtask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromExpress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Webtask context 还有一个非常重要的用途就是在部署时传输一些敏感信息比如安全 Token，从而在应用程序当中可以随时使用它们。下面的部署命令中 &lt;code class=&quot;highlighter-rouge&quot;&gt;--secret&lt;/code&gt; 后面所传入的 &lt;code class=&quot;highlighter-rouge&quot;&gt;ACCESS_TOKEN&lt;/code&gt; 都会在后续与 GitHub 和 ZenHub APIs 交互时被用到。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wt create index &lt;span class=&quot;nt&quot;&gt;--bundle&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--secret&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;GITHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GITHUB_ACCESS_TOKEN&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--secret&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ZENHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ZENHUB_ACCESS_TOKEN&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--secret&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ZENHUB_ACCESS_TOKEN_V4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ZENHUB_ACCESS_TOKEN_V4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/reading'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GITHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ZENHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ZENHUB_ACCESS_TOKEN_V4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;webtaskContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secrets&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;使用-github-issue-追踪阅读列表&quot;&gt;使用 GitHub Issue 追踪阅读列表&lt;/h2&gt;

&lt;h3 id=&quot;ifttt添加-instapaper-文章后自动创建-github-issue&quot;&gt;IFTTT：添加 Instapaper 文章后自动创建 GitHub Issue&lt;/h3&gt;

&lt;p&gt;得益于 IFTTT 非常丰富的第三方服务，IFTTT 可以直接创建 Instapaper 与 GitHub Issue 相集成的 Applet：&lt;a href=&quot;https://ifttt.com/applets/54307045d-if-new-item-saved-then-create-a-new-issue&quot;&gt;If new item saved, then create a new issue - IFTTT&lt;/a&gt;，就可以在当 Instapaper 新增文章的时候，自动在 GitHub 所指定的仓库 &lt;a href=&quot;https://github.com/JimmyLv/reading/issues/&quot;&gt;Issues · JimmyLv/reading&lt;/a&gt; 中创建一个新的 Issue 并添加相应的标题、链接以及描述等相关信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499013190840.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但仅仅只是添加一个 Issue 还不够，这时候还需要将这个 Issue 加入到指定的 Milestone 从而利用 ZenHub 的图表功能，使用 GitHub 的 Webhooks 功能就可以轻松帮我们把 Issue 更新的状态转发到我们所指定的 webtask 地址：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499016439751.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;使用-github-webhook-更新-issue-的-milestone&quot;&gt;使用 GitHub Webhook 更新 Issue 的 Milestone&lt;/h3&gt;

&lt;p&gt;所以我们的 Webtask 就需要处理 GitHub Webhook 所转发的 POST 请求，其中包括了 Issue 的类型和内容，在拿到 &lt;code class=&quot;highlighter-rouge&quot;&gt;'opened'&lt;/code&gt; 即新建 Issue 类型的 action 之后我们可以对其进行相应的处理即添加到 Milestone 当中：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'opened'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;?access_token=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GITHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'PATCH'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'application/json'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;milestone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`[END] set milestone successful! &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499017955460.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;结合 ZenHub 的 Milestone 燃尽图我们可以清晰地看到剩余阅读量的多少，并且能够跟理想中的阅读速度进行对比，从而判断自己什么时候能够全部读完所有的文章。可能有些小伙伴看到这里会有所疑问了，这些所谓的 Story Point 是从哪儿来的呢？那么接下来就要提到我们将要集成的 ZenHub API 了。&lt;/p&gt;

&lt;h2 id=&quot;集成-zenhub-api阅读可视化&quot;&gt;集成 ZenHub API：阅读可视化&lt;/h2&gt;

&lt;h3 id=&quot;更新-issue-的估点和-release&quot;&gt;更新 Issue 的估点和 Release&lt;/h3&gt;

&lt;p&gt;GitHub Issue 的任何变动都会触发 Webhook，从而我们可以在 Issue 被加入 Milestone 之后再处理下一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;'milestoned'&lt;/code&gt; action，即：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'milestoned'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`https://api.zenhub.io/p1/repositories/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REPO_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/issues/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/estimate?access_token=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ZENHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'PUT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'application/json'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;estimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`[END] set estimate successful! &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`https://api.zenhub.io/v4/reports/release/591dc19e81a6781f839705b9/items/issues?access_token=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ZENHUB_ACCESS_TOKEN_V4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'application/x-www-form-urlencoded'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`add_issues%5B0%5D%5Bissue_number%5D=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;amp;add_issues%5B0%5D%5Brepo_id%5D=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REPO_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`[END] set release successful! &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样我们就完成了对每个 GitHub Issue 的估点，以及设置了对应的 Release，接下来所有的变动都将体现在 ZenHub 的图表当中。&lt;/p&gt;

&lt;h3 id=&quot;归档-instapaper-文章后关闭-github-issue&quot;&gt;归档 Instapaper 文章后关闭 GitHub Issue&lt;/h3&gt;

&lt;p&gt;说了这么多，不要忘了&lt;strong&gt;整个阅读系统最最核心的部分依然还是要「阅读」啊！&lt;/strong&gt;在众多的稍后阅读工具中我无比喜爱 Instapaper 并迟迟没有转到 Diigo 的原因就在于它优秀、简洁、纯粹的阅读体验，让人可以专注在阅读本身这件事情上，在被 Pinterest 收购之后更是将所有的诸如全文搜索、无限高亮/笔记、速读等 Premium 功能都变成了免费，岂不美哉？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499019018150.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么在完成阅读归档之后，最后一步就是在 GitHub 当中将 Issue 关闭掉，但是 IFTTT 的 GitHub 服务并没有提供 close Issue 的接口，于是乎我们就只有利用 IFTTT 新推出的 Maker 自己创建一个，即 Instapaper 规划作为一个 IF trigger，然后 Maker 用于发出一个 Web 请求，可以是 GET ,PUT, POST, HEAD, DELETE, PATCH 或者 OPTIONS 之中的任何一种，你甚至还可以制定 Content Type 和 Body。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499019483077.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/reading'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GITHUB_ACCESS_TOKEN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;webtaskContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secrets&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`https://api.github.com/search/issues?q=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%20repo:jimmylv/reading`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'[RESULT]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html_url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;?access_token=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GITHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'PATCH'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'application/json'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'closed'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`[END] issue closed successful! &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})))&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Closed issue successful!'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述代码就可以用于处理 IFTTT Marker 所发送的 GET 请求，我们从 query 参数中取到文章标题之后再去搜索相对应的 Issues，再通过 GitHub API 将其关闭。&lt;/p&gt;

&lt;p&gt;而与此同时，我们在文章的阅读过程中，有时候也会想要对文章中的亮点部分进行高亮，甚至评论自己的一些想法和总结，那我们也可以用过 IFTTT Marker 和 Webtask 的套路添加至 GitHub Issues 的 comments 当中，具体的代码就不贴了，更多内容都已经放在我的 GitHub 上：&lt;a href=&quot;https://github.com/JimmyLv/demo.serverless-mern&quot;&gt;JimmyLv/demo.serverless-mern&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;总结与后续计划&quot;&gt;总结与后续计划&lt;/h2&gt;

&lt;p&gt;随着时间的推移，日常你只需要在 Instapaper 添加文章、阅读文章即可，而背后利用 Serverless 所搭建的整套阅读追踪系统将会任劳任怨的帮你记录下所有的踪迹和笔记，你只需要在特定的时候定期 review、分析阅读的效果与预测效果，与此同时结合自己的时间统计系统，可以持续不断地改进自己的阅读目标与阅读计划。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499020636682.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后再来考虑一下后续计划，就比如说我现在只是简单把 Instapaper 中高亮部分和阅读笔记作为评论放到 GitHub 的 comments 里面，但是最终我需要把它收藏到自己的个人知识库即 &lt;a href=&quot;https://diigo.com&quot;&gt;Diigo&lt;/a&gt;，这也是可以通过 API 自动实现的，以及最终需要被刻意记忆的部分还需要与 &lt;a href=&quot;https://tinycards.duolingo.com/&quot;&gt;Tinycards&lt;/a&gt; API 相集成，对抗艾宾浩斯遗忘曲线。&lt;/p&gt;

&lt;p&gt;与此同时呢，还需要把估点根据不同的文章类型和难易程度具体划分一下，而不是现在简简单单的 1 点，比如说 Instapaper 也有根据字数所预测的阅读分钟数，以及根据中文或英文、技术或&lt;del&gt;鸡汤&lt;/del&gt;等不同种类文章阅读难度进行区分，从而使整套追踪系统更具有效性与参考性。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499007659821.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;一些参考资料&quot;&gt;一些参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.jimmylv.info/2016-12-04-agile-learning-based-on-github-issues/&quot;&gt;基于 GitHub 的敏捷学习方法之道与术 - 吕立青的博客&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scotch.io/tutorials/build-a-serverless-mern-story-app-with-webtask-io-zero-to-deploy-1&quot;&gt;Build a Serverless MERN Story App With Webtask.io – Zero to Deploy: 1 ― Scotch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sspai.com/post/25270&quot;&gt;触发你的智能生活：IFTTT 入门 - 少数派&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sspai.com/post/39243&quot;&gt;利用 IFTTT Maker DIY 你的 Applet - 少数派&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.jimmylv.info/2015-10-09-three-types-of-knowledge/&quot;&gt;个人知识管理：知识的三种形态 - 吕立青的博客&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sspai.com/post/33933&quot;&gt;用 GTD 的方法结束稍后读 - 少数派&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.jimmylv.info/2016-09-16-sorting-out-knowledge-from-information/&quot;&gt;不断革新，不断改进：去伪存真的知识管理之路 - 吕立青的博客&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://xiaolvyun.baidu.com/docs/knowledge-base/788&quot;&gt;卡片状态累积流图（Cumulative Flow Diagram – CFD ） – 效率云&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      </item>
    
      <item>
        <title>「技术雷达」之 PWA：Build Native-like Mobile Web App</title>
        <link>http://localhost:4000/2017-05-10-tech-radar-pwa-build-native-like-mobile-web-app/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-05-10-tech-radar-pwa-build-native-like-mobile-web-app/</guid>
        <pubDate>Wed, 10 May 2017 00:00:00 +0000</pubDate>
        <description>&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;progressive-web-applications-pwas&quot;&gt;Progressive Web Applications (PWAs)&lt;/h1&gt;

&lt;h2 id=&quot;build-native-like-mobile-web-app&quot;&gt;Build Native-like Mobile Web App&lt;/h2&gt;

&lt;p&gt;&lt;small&gt;via &lt;strong&gt;Jimmy Lv&lt;/strong&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;iframe id=&quot;preview&quot; style=&quot;height: 600px;&quot; frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;100%&quot; src=&quot;https://lecture.jimmylv.info/assets/2017-05-10-tech-radar-pwa-build-native-like-mobile-web-app.pdf&quot;&gt;
&lt;/iframe&gt;
</description>
      </item>
    
      <item>
        <title>幸运出差之旅：在墨尔本的 6 Weeks</title>
        <link>http://localhost:4000/2017-04-16-lucky-business-trip-six-weeks-in-melbourne/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-04-16-lucky-business-trip-six-weeks-in-melbourne/</guid>
        <pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate>
        <description>
</description>
      </item>
    
      <item>
        <title>「React 系列 Workshop 01」之 Atomic Design with React</title>
        <link>http://localhost:4000/2017-03-16-atomic-design-with-react-workshop-01/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-03-16-atomic-design-with-react-workshop-01/</guid>
        <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
        <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nodeppt start -w&lt;/code&gt; by &lt;a href=&quot;https://github.com/ksky521/nodePPT&quot;&gt;ksky521/nodePPT&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;atomic-design-with-react&quot;&gt;Atomic Design with React&lt;/h1&gt;

&lt;p&gt;Total Time: 2 hours&lt;/p&gt;

&lt;p&gt;via &lt;strong&gt;JimmyLv&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;0--env-setup&quot;&gt;0. 💻 Env Setup&lt;/h1&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;reminder/reading material in invitation mail&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;join wechat group to share info easily&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:JimmyLv/atomic-design-react-workshop.git
cd atomic-design-react-workshop
yarn install &amp;amp;&amp;amp; yarn start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;-唠嗑唠嗑&quot;&gt;🐵 唠嗑唠嗑&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;不讲什么：Webpack/ES6/Styling/Linter&lt;/li&gt;
  &lt;li&gt;脚手架：&lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;react-app-stencil&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;观念在先，实战为王 🔨&lt;/li&gt;
  &lt;li&gt;Pair Programming 👬&lt;/li&gt;
  &lt;li&gt;Parking Lot 🅿️&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;️-agenda&quot;&gt;⏲️ Agenda&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Atomic Design (15 mins)&lt;/li&gt;
  &lt;li&gt;React Basic: FP、JSX、V-DOM (25 mins)&lt;/li&gt;
  &lt;li&gt;Component-Driven Development (20 mins)&lt;/li&gt;
  &lt;li&gt;Component’s State &amp;amp; Lifecycle (20 mins)&lt;/li&gt;
  &lt;li&gt;Refactoring to ES6+ (remaining times…)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;1-️-atomic-design-15-mins&quot;&gt;1. 🏗️ Atomic Design (15 mins)&lt;/h1&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;whats-atomic-design&quot;&gt;What’s Atomic Design？&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://atomicdesign.bradfrost.com/chapter-2/&quot;&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489580083893.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;demo: [Pattern Lab&lt;/td&gt;
      &lt;td&gt;Build Atomic Design Systems](http://patternlab.io/)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;-practice-01&quot;&gt;🔨 Practice 01&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489561356582.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;-components-tree&quot;&gt;🌲 Components Tree&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489635396524.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;-rethink&quot;&gt;💡 Rethink?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Presentational components&lt;/li&gt;
  &lt;li&gt;Container components&lt;/li&gt;
  &lt;li&gt;Transactional components&lt;/li&gt;
  &lt;li&gt;Micro Front-Ends&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://andrewhfarmer.com/react-ajax-best-practices/img/container-components.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;2--react-basic-25-mins&quot;&gt;2. 📖 React Basic (25 mins)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;JSX&lt;/li&gt;
  &lt;li&gt;VirtualDOM&lt;/li&gt;
  &lt;li&gt;Functional/Stateless Components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489660500667.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;-dom-tree---functions&quot;&gt;🌲 DOM Tree -&amp;gt; Functions&lt;/h1&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;I am footer!&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;jsx-xml-in-javascript&quot;&gt;JSX (XML in JavaScript)&lt;/h1&gt;

&lt;p&gt;In&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;avatar.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;profile&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Out&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;img&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;avatar.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;profile&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;h3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;virtual-dom&quot;&gt;Virtual DOM&lt;/h1&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DeleteAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'div'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Are you sure?'&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'danger'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Yep'&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Cancel'&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489564943831.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489635877830.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;--virtual-dom-objects&quot;&gt;() =&amp;gt; Virtual DOM Objects&lt;/h1&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DeleteAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'div'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Are you sure?'&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'danger'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Yep'&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Cancel'&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;functionalstateless-components&quot;&gt;Functional/Stateless Components&lt;/h1&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DeleteAccount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Are you sure?&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'danger'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Yep&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;3--cdd-20-mins&quot;&gt;3. 🏃 CDD (20 mins)&lt;/h1&gt;

&lt;p&gt;“Visual TDD”: Component-Driven Development&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;component-driven-development&quot;&gt;Component-Driven Development&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.hichroma.com/component-driven-development-ce1109d56c8e#.68tcwmv7p&quot;&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*YUVIg5jdB-pUUszWhTkgdw.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;Focus development {:&amp;amp;.moveIn}&lt;/li&gt;
  &lt;li&gt;Increase UI coverage&lt;/li&gt;
  &lt;li&gt;Target feedback&lt;/li&gt;
  &lt;li&gt;Build a component library&lt;/li&gt;
  &lt;li&gt;Parallelize development&lt;/li&gt;
  &lt;li&gt;Test visually&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1488610496651.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[note]tdd components，即 data 如何对应到 view; tdd business logic，即 event 如何对应到 state[/note]&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;storybook&quot;&gt;Storybook&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://airbnb.io/react-dates/&quot;&gt;&lt;img src=&quot;https://getstorybook.io/static/media/demo.f13d28a7.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;-practice-02&quot;&gt;🔨 Practice 02&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489581902209.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;type:&lt;code class=&quot;highlighter-rouge&quot;&gt;primary&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;danger&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;dashed&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;color: &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;white&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;red&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;border&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;onClick: &lt;code class=&quot;highlighter-rouge&quot;&gt;console.info()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;alert()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489635512260.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;4--state--lifecycle-20-mins&quot;&gt;4. 🐒 State &amp;amp; Lifecycle (20 mins)&lt;/h1&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;reactcomponent&quot;&gt;React.Component&lt;/h1&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Contacts&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// React Component instance&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Contacts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;lifecycle&quot;&gt;Lifecycle&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://rawgit.com/rkendall/visible-react/master/demo/dist/demo.html&quot;&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489566393031.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;-practice-03&quot;&gt;🔨 Practice 03&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/gaearon/pen/amqdNA?editors=0010&quot;&gt;Clock component&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;new Date().toLocaleTimeString(locales,options)&lt;/code&gt; with timeZone&lt;/p&gt;

&lt;iframe height=&quot;265&quot; scrolling=&quot;no&quot; title=&quot;Hello World in React&quot; src=&quot;//codepen.io/gaearon/embed/amqdNA/?height=265&amp;amp;theme-id=0&amp;amp;default-tab=result&amp;amp;embed-version=2&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; style=&quot;width: 100%;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;state-vs-props&quot;&gt;State vs Props&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/state-and-lifecycle.html#converting-a-function-to-a-class&quot;&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489566510269.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;5-refactoring-to-es6-remaining-times&quot;&gt;5. Refactoring to ES6+ (remaining times…)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://babeljs.io/blog/2015/06/07/react-on-es6-plus&quot;&gt;React on ES6+ · Babel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.reactnativeexpress.com/es6&quot;&gt;React Native Express - ES6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;-homework&quot;&gt;📑 Homework&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.suncorp.com.au/insurance/car.html&quot;&gt;&lt;img src=&quot;http://o7mw3gkkh.qnssl.com/images/2017/03/1489581432456.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[slide]&lt;/p&gt;

&lt;h1 id=&quot;thanks--qa&quot;&gt;Thanks,  Q&amp;amp;A❓&lt;/h1&gt;

</description>
      </item>
    
      <item>
        <title>《搞定》最佳实践：如何利用滴答清单（TickTick）实践 GTD 理念？</title>
        <link>http://localhost:4000/2017-02-20-gtd-best-practice-137/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-02-20-gtd-best-practice-137/</guid>
        <pubDate>Mon, 20 Feb 2017 00:00:00 +0000</pubDate>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;引子：What’s the Target? 人们总是说凡事都要有个目标，而 GTD 里面对目标的定义为第 3 楼视野，即「拟实现的中期至长期结果（通常在3~24个月内）」，可能有童鞋就会好奇了，为什么这里会有一个 3 楼呢？那是因为作者将我们个人/组织对事务所作出的承诺，以及拥有的想法总结成了 6 层关注视野：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;0 楼即地面视野：下一步行动&lt;/li&gt;
  &lt;li&gt;1 楼视野：项目&lt;/li&gt;
  &lt;li&gt;2 楼视野：重点及责任范围&lt;/li&gt;
  &lt;li&gt;3 楼视野：目标&lt;/li&gt;
  &lt;li&gt;4 楼视野：展望&lt;/li&gt;
  &lt;li&gt;5 楼视野：目标和原则&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么，我的一个中期目标就是掌握 GTD 方法，并能够在生活、工作、学习当中能够灵活运用该方法妥善处理自己周遭的各类事务。这类方法论对于个人提升是非常重要的，作为一种&lt;strong&gt;个人成长基础设施&lt;/strong&gt;（&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/88&quot;&gt;Personal Growth Infrastructure&lt;/a&gt;），可谓越早掌握越能够发挥作用，「复利」效应显著（可视为 &lt;strong&gt;4 楼视野：展望&lt;/strong&gt;）。自然而然，对 GTD 这个主题的理论和实践，我期望来一场彻彻底底的重新学习，再也不要道听途说，学习一定要讲究&lt;strong&gt;全面&lt;/strong&gt;和&lt;strong&gt;准确&lt;/strong&gt; （via: &lt;a href=&quot;http://taobaofed.org/blog/2016/03/23/the-growth-of-front-end/&quot;&gt;一个前端的自我修养&lt;/a&gt;），并且寻找最原始的材料，直接了当地亲自理解原始作者的意图。&lt;/p&gt;

&lt;p&gt;然后，我就有了这样一个 &lt;strong&gt;项目视野（1 楼）&lt;/strong&gt;，即 GitHub 当中的一个 Issue ：&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/137&quot;&gt;系统性学习 GTD：《如何利用滴答清单（TickTick）做 GTD？》 · Issue #137&lt;/a&gt;，然后产出了一系列的 TODOs（下一步行动），即&lt;strong&gt;地面视野&lt;/strong&gt;：&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;阅读原著&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/136&quot;&gt;《搞定1:无压工作的艺术》 · Issue #136&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;对比滴答清单（@TickTick）与其他工具 &lt;a href=&quot;https://en.todoist.com/&quot;&gt;Todoist&lt;/a&gt;、奇妙清单（Wunderlist）、Any.do&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;输出一篇自己的文章《如何利用滴答清单（TickTick）做 GTD？》&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-滴答清单&quot;&gt;Why 滴答清单？&lt;/h2&gt;

&lt;p&gt;首先，滴答清单（@TickTick）是如何被纳入我的 GTD 工具集呢？这个问题的隐含结果有二：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;我已经选择了滴答清单，并且付费为高级用户一年，但目测已经托付终身，😂。&lt;/li&gt;
  &lt;li&gt;滴答清单只是 GTD 工具集当中的一员，GTD 是方法论，更是一种生活态度，何必局限于工具？&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于那些可以付诸行动的事务，你则需要：一个项目清单、一个保存项目规划和资料的存储系统、一个日程表、一个下一步行动清单，以及一个等待清单（清单中包含的内容是那些等待别人完成的任务）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;滴答清单作为一款清单产品，「列表 + 提醒」是其最最最基础的功能，可以说是已经做到了极致。而我下面再来安利一番它们家其他我所看重的点，排名不分先后、不分免费/付费：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;滴答清单最初名为 TickTick，实际上是国内（杭州）团队作品，「先海外后国内」的战略。衍生出来的好处就有：
    &lt;ul&gt;
      &lt;li&gt;与 @微信 深度集成，关注服务号后可直接转发微信消息至滴答清单收集箱，爽！&lt;/li&gt;
      &lt;li&gt;有官方的 Q&amp;amp;A 网站，上边儿既有中文又有英文，有任何技术/需求问题都可以尝试中/英搜索。&lt;/li&gt;
      &lt;li&gt;技术支持或者提反馈的时候会有国人跟你直接中文交流，我上次提了个 iOS URL Scheme 的需求，对方态度很好。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;滴答清单是一款全端产品，涵盖了 Web、macOS、iOS、Chrome 插件乃至以后可能会入手的 App Watch 上面也有 App，唯一的遗憾可能就是没有 API，也就没法集成 IFTTT，但我也有办法解决这类自动化需求，后文细说。&lt;/li&gt;
  &lt;li&gt;滴答清单能跟 Siri 集成，也就意味着当你没法空出手的时候可以直接对着手机说：“Hey Siri，提醒我明天晚上到家之后打扫卫生。” 这样的一句话能被自动识别出时间、地点、事务，并且纳入万能的收集箱，这就使得自己不会被脑海里的任何想法打断当前在做的事情，比如正在削苹果的双手。
    &lt;ul&gt;
      &lt;li&gt;这里没有举「敲代码的双手」这样一个例子是因为，如果在电脑上我可以使用快捷键打开滴答清单的 mini 窗口通过打字的方式&lt;strong&gt;捕获&lt;/strong&gt;想法。&lt;/li&gt;
      &lt;li&gt;而滴答清单 App 里面也集成了讯飞语音，但是应用场景就自然没有全局的 Siri 来得方便，而且若是已经在 App 内部时，自然而然得会去使用键盘上的讯飞语音输入法，也是属于全局优先和习惯优先。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;「简约而不简单」是我对滴答清单至高的评价，若是一款产品能做到如处这般，理应付费。
    &lt;ul&gt;
      &lt;li&gt;滴答清单的设计风格非常简洁，但其文件夹+清单+标签+优先级…的组织方式又那么井井有序，此乃「简约」的力量，看起来就很爽。&lt;/li&gt;
      &lt;li&gt;而「不简单」往往体现在各种贴心的小细节当中，比如语义化智能识别输入的内容、可设置提醒时间段与多次提醒、重复方式是周期性还是完成式提醒、任务完成进度条、「今天」列表快速计划（类 Any.do），值得细细体味与发现。&lt;/li&gt;
      &lt;li&gt;在 App 之外，还有 3D Touch 跟 Widget 的配合使用用于快速输入与查看任务；与日历的集成也能够减少多 Apps 之间的切换，在统一的日程表里面可视化出来，并且能够分 3 日或按周、按月查看，然后竟然还能通过拖拽的方式进行日常安排。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;滴答清单还集成了回顾与统计功能，这就如游戏当中的成就系统一般，令人自豪与着迷。
    &lt;ul&gt;
      &lt;li&gt;等级制，Level.11 出神入化（风云变幻，不改初心），「你比 99% 的用户更勤奋」。&lt;/li&gt;
      &lt;li&gt;数据统计与完成曲线，量化自我的又一项伟大指标，还有历史完成总数让人感受到「水滴石穿、日积月累」的神奇力量。&lt;/li&gt;
      &lt;li&gt;Web 端还有了一个还在 Beta 的「摘要」功能，可以帮助了解和总结一段时间内的任务完成情况，用于&lt;strong&gt;每周回顾&lt;/strong&gt;是再好不过了，而每日回顾则可以查看「已完成」清单，我每回都是截图至 @格志日记 当中。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;集成-gtd-流程&quot;&gt;集成 GTD 流程&lt;/h2&gt;

&lt;p&gt;GTD 简单来说就分为 &lt;strong&gt;5 个阶段&lt;/strong&gt;：捕获（收集）、理清、整理、行动、回顾，以往的我都只是从字面上来理解其中的意义，看完了整本书才知晓其中更深处的奥秘。&lt;/p&gt;

&lt;p&gt;首先需要表态的一个前提就是「你的大脑并不总是那么管用」，&lt;strong&gt;大脑所擅长的是思考而不是记忆&lt;/strong&gt;，只有当我们拥有了一个完全可信赖的记忆系统（即外脑），能够跟进一切&lt;strong&gt;已承诺（无论对外还是内心）&lt;/strong&gt;的未竟之事，就不会再让我们的思维过程受阻。在通常情况下，你对一些事情总是念念不忘，这是因为你希望它们的状况能有所改善，但是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;你还没有明确地认定它们的预期结果是什么。&lt;/li&gt;
  &lt;li&gt;你还没有确定你下一步的具体行动到底是什么。&lt;/li&gt;
  &lt;li&gt;你还没有把关于预期结果和即将采取行动的提示信息存入你所依赖的系统中去。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GTD 的核心观点就是「在任何时候，都做到既高效又放松」，所以我们就要来回答以下三个问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如何做到放松？——清空&lt;/li&gt;
  &lt;li&gt;如何做到高效？——下一步行动&lt;/li&gt;
  &lt;li&gt;如何保证高效和放松能够持续进行？——回顾&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;收集&quot;&gt;收集&lt;/h3&gt;

&lt;p&gt;如何做到「放松」的奥妙就在于&lt;strong&gt;百分之百、百分之百、百分之百&lt;/strong&gt;得收集，也就是捕获脑袋里&lt;strong&gt;所有、任何、一切&lt;/strong&gt;的想法，将事情可视化到外部的记忆系统当中去，才让大脑用来思考，用来做真正有意义、有创造力的事情。&lt;/p&gt;

&lt;p&gt;前面也有提到，滴答清单的收集功能非常强大，但是功能归功能，脱离实际应用场景也白搭，只有在任何场景下都能够快速收集任何想法，所谓收集工具的功能才有价值：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#mobile&lt;/code&gt; 微信聊天：@佳佳 说「我们明天一起去看爱乐之城吧！」 =&amp;gt; 我只需要选中该消息，选择更多即可快速转发至滴答清单服务号。（已关闭服务号的消息通知，就不用看到头像角标导致多点一次的操作。）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#outside&lt;/code&gt; 走在路上：马路边一定要注意车辆，不要低头看手机，总之就是在不好打字的场景下，但是却戴着耳机的时候就直接按下🎧通话按钮呼叫 Siri 即可。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#home&lt;/code&gt; 洗澡/洗漱时：这个时候双手没空不能打字，而且家里不像办公室没有其他人，自然就可以大喊「Hey Siri，提醒我晚上去拿干洗完的衣服/去品优超市取快递」（仅仅举个例子，如果是十分钟之后要去晒衣服的话就直接让 Siri 倒计时就更来得实用。）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#mac&lt;/code&gt; 敲代码/写作：总之就是不要离开当前正在做的事情，凡是在电脑上效率自然更高，直接 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd+Ctrl+Shift+L&lt;/code&gt; 快捷呼出滴答清单的 mini 小窗口添加任务即可，纯手打脑海中的任何想法或者复制粘贴看到的任何语句、网址都是神速。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#meeting&lt;/code&gt; 思维神游：这时候就会有一个限制即不能说话，这时候就可以打开手机直接在 Dock 栏 3D Touch 重按滴答清单的图标快捷选择添加任务，以&lt;del&gt;最快的&lt;/del&gt;打字速度输入想法即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;根据上述场景的描述，这也就是我为什么更倾向于用「捕获」想法而不是「收集」想法的原因，收集可能会有两层意思，「收」和「集」，但是归拢到一起，其实并不是「捕获」想法这个阶段所做的事情。况且为什么要把想法「捕获」的原因很大程度上是因为不想让它干扰正在做的事情，从而对大脑造成记忆上的负担。&lt;/p&gt;

&lt;h3 id=&quot;理清&quot;&gt;理清&lt;/h3&gt;

&lt;p&gt;那么如何做到「高效」呢？下一步行动即 &lt;strong&gt;Next Action&lt;/strong&gt; 就是连接「放松思想」和「实现高效」之间的关键桥梁，大有文章可言。不如这样，我们就从这个已成事实的下一步行动往回倒推来看看，即「下一步行动是如何产生的呢？」&lt;/p&gt;

&lt;p&gt;在一天的各种场景当中，相信滴答清单的收集箱里面已经收集到了各种东西，这些东西可能是想法、事实、承诺，总之都只能算作是一种原始材料。&lt;strong&gt;收集箱只是一个处理问题的站点，而不是一个存储容器。&lt;/strong&gt;回想一下你的邮箱收件箱为什么会堆满了各种邮件，茫茫之中怎么也找不到自己想要的东西；再看看你的印象笔记，是不是保存的文章就再也没拿出来看过。&lt;/p&gt;

&lt;p&gt;你需要的是对其每一项进行逐个得「理清」，基本原则有三：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先处理工作篮中最上面的事务（即「后进先出」）；&lt;/li&gt;
  &lt;li&gt;一次一事；&lt;/li&gt;
  &lt;li&gt;永远不要把事务再次放回工作篮。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：你做出的每个或大或小的决定都会在一定程度上消耗你的脑力。决定对某个电子邮件或任何其他事物“不做决定”，这本身就是一个决定，这会耗费你的精力。（这在《自控力》那本书中也有提到。）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1487349413061.png&quot; width=&quot;650&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;整理&quot;&gt;整理&lt;/h3&gt;

&lt;p&gt;一图胜千言，从上述的理清过程流程图就可以看出，理清某个想法的结果只有两种情况：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;在两分钟之内已经「立即执行」了下一步行动&lt;/strong&gt;（看完整本书即便是只学会了「两分钟原则」那也是极好的，😁）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;根据具体情况被存入相对应的清单列表&lt;/strong&gt;（除去「垃圾箱」以外）：
    &lt;ul&gt;
      &lt;li&gt;「项目」文件夹（包含多个具体项目清单，比如装修）&lt;/li&gt;
      &lt;li&gt;「日程表」（延迟执行，但只包含「当天不做会死」的事情）&lt;/li&gt;
      &lt;li&gt;「下一步行动」（并打上最佳执行情境的具体标签，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;#mac&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;#outside&lt;/code&gt;）&lt;/li&gt;
      &lt;li&gt;「等待他人」（思考自己是不是执行行动的最佳人选？）&lt;/li&gt;
      &lt;li&gt;「将来/也许」（有待酝酿，在定期回顾时纠正方向）&lt;/li&gt;
      &lt;li&gt;「参考资料」（使用 Diigo 代替而不是滴答清单）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1487935175181.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;行动&quot;&gt;行动&lt;/h3&gt;

&lt;p&gt;新的一天又开始了，首先映入眼帘（需要关注）的是「日程表」， macOS 端的滴答清单提供了周视图与月视图，iOS 端则提供了更好用的 3 日视图与周视图，进一步验证了不同情境下（&lt;code class=&quot;highlighter-rouge&quot;&gt;#mac&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;#phone&lt;/code&gt;）的关注视野应当不同。我们能够看到最近几天会有哪些已被安排的会议（关联 Google Calendar，公司会议一览无余）、以及以前安排好的「今天不做会死」的事情。&lt;/p&gt;

&lt;p&gt;说到安排时间，其实这儿有一个精妙的「预计时」的概念，这是在我使用计时系统（Toggl）一段时间过后的一个深刻心得：即&lt;strong&gt;完美自律的人会知晓未来某时段自己在做什么，只要被计划的行动被具体实施，该时间段的记录就已然确定，也就是说「计时无用，无须计时」&lt;/strong&gt;。在滴答清单的日历界面中，还有一个用户体验爆棚的功能，即可以将右侧清单中的任务直接拖拽到日历当中，iOS 端甚至可以直接通过拉伸从而控制时间段的长短。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/07/1499671064550.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再多提一嘴，我特意废弃了滴答清单所提供的「今天」清单，因为一旦有了「今天」这个概念，就反而会让人忽略「下一步行动」这个清单，误以为「今天」（隐喻着「今天的事情最紧急」）清单列表里的事情是今天最值得做的，一旦有了期限，就又有了压力。&lt;/p&gt;

&lt;p&gt;而在执行阶段，个人信奉两个最佳实践：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;选择最合适的行动&lt;/strong&gt;（根据情境（即&lt;code class=&quot;highlighter-rouge&quot;&gt;#标签&lt;/code&gt;、有多少时间、有多少精力、重要性）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;专注当下&lt;/strong&gt;（结合番茄工作法，并提前计划番茄个数 &lt;code class=&quot;highlighter-rouge&quot;&gt;🍅*2&lt;/code&gt;）&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;回顾&quot;&gt;回顾&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;一个完善的系统，将形成一个良性循环：你建立的系统越完备，你就越信赖它；你越信赖它，你就越有坚持运行这个系统的内在动力，而每周回顾则是保持系统完善性的关键步骤。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;于我而言，回顾是我认为在整个敏捷开发中最为有效的一项实践，任何行为做得不好并没有关系，只要在迭代结束时能有所回顾与反思，那必然就能够有所改善与提高。同理而言，GTD 中的回顾也是一种保证高效和放松能够持续进行的手段。&lt;/p&gt;

&lt;p&gt;目前来说，我会在 @格志日记 中做每日回顾，其中的内容会包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在 @滴答清单中已完成的任务（顺手回顾一下要做的事情，以便于清空收集箱与进行雷达扫描般的查漏补缺。）&lt;/li&gt;
  &lt;li&gt;在 @好样 里面已完成的习惯（这会在后文中的奖励系统中详细解释其作用。）&lt;/li&gt;
  &lt;li&gt;在 @Toggl 中所记录的有效项目（即 GitHub Issue 的进行时间）&lt;/li&gt;
  &lt;li&gt;在 @挖财 中所记录的今日账单&lt;/li&gt;
  &lt;li&gt;在 @有道词典 中所记忆的单词&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而所谓周回顾，目前是使用了滴答清单还在 Beta 之中的「摘要」功能，能够根据时间段、清单列表直接生成相对应的内容，其中还可以包含每条任务的完成进度、完成时间与具体详情；与此同时来瞅一眼「将来/也许」清单中的事情吧，要知道那些可能才是自己真正想做却从未开始的事情，思考一下你的 5 楼视野：目标和原则。&lt;/p&gt;

&lt;h2 id=&quot;集成敏捷学习&quot;&gt;集成敏捷学习&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果手头的事情需要一系列的行动才能实现它的目标或结果，你就可以将其视为一个项目并将它列入“项目”清单中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作者将上述的几个阶段称之为横向管理工作流程，横向控制是把你涉及的所有行动都管理起来，保证毫无遗漏地加以执行。这就好像是一部进行不间断、全方位扫描的雷达，它的对象是一天里任何一件能够吸引你关注的事项。&lt;/p&gt;

&lt;p&gt;那么既然有了横向就必然会有纵向，而纵向控制则是对每个具体主题或项目进行思考和协调，激发自己大脑的活力，对某个特定事务进行深入的思考和大胆的想象。结合之前所写的&lt;a href=&quot;https://blog.jimmylv.info/2016-12-04-agile-learning-based-on-github-issues/&quot;&gt;基于 GitHub 的敏捷学习方法之道与术&lt;/a&gt;一文中所提到的 GitHub Issue 来看，对 Issue 最好的一个定位即是 GTD 当中的「项目」这一 level，所以我将 &lt;code class=&quot;highlighter-rouge&quot;&gt;ISSUE_TEMPLATE&lt;/code&gt; 改成了以下内容，堪称对「项目」进行分析的最佳套路：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1487938458493.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而对于 GitHub 当中的 Issue 即项目们，就继续保持敏捷学习方法论中的那一套实践，这也就避免了鸡毛蒜皮的事情都会往 GitHub 上面放的问题。以项目为最小颗粒度的把握也刚好值得被 Toggl 计时与分析，我只需要保证实施该项目的过程中能够有所收获，并且只要我今天记录了时间，那么当天有价值的时间长短也就能够被衡量。如此以来，还可以避免「全天计时」的繁琐与疲乏，那些鸡毛蒜皮的 Basic Life 时间就随他去吧，只有完整（🍅）的时间专注在项目上才更凸显价值，一天永远只有 24 小时，只要 Toggl 中所记录的项目时间足够长，那自然是需要从 Basic Life 当中节省出来一部分才能达到的。&lt;/p&gt;

&lt;p&gt;另外介绍一个小技巧，即使用 IFTTT 自动将 GitHub 中被 assigned 到自己身上的 Issue 同步到 iOS 的备忘录，从而滴答清单能够自动获取到目前正在进行的 Issue 内容，详见：&lt;a href=&quot;https://ifttt.com/applets/140545p&quot;&gt;Keep track of your assigned GitHub issues in iOS Reminders.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;完美奖励机制&quot;&gt;完美奖励机制&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://static.wdjimg.com/gaea/c4729ace5aef3eb624695760ffe87aa8.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;得益于 &lt;a href=&quot;https://itunes.apple.com/cn/app/steppy-pants/id1094138419?l=en&amp;amp;mt=8&quot;&gt;Steppy Pants&lt;/a&gt; 这样一款魔性的游戏，偶然间我发现其奖励机制设计得非常巧妙，让人玩得简直停不下来。大体上来说，这款游戏在短、中、长期各个阶段都有着不同的激励手段：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;短期：每一步都有着即时的反馈，而且每 20 m 有着一个 checkpoint，坚持完成即可。&lt;/li&gt;
  &lt;li&gt;中期：最高记录与总金币，每每都想破一下自己的最高记录，但难度会随着时间变得越来越高。&lt;/li&gt;
  &lt;li&gt;长期：这时就将视野拉长，即无所谓你一次性走了多久，只要往前走就能够积累总里程，宛如人生的意味。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;与此同时，在整个游戏中所获得的金币还可以拿来买衣服套装和复活（可视为道具），从而从侧面进一步巩固了坚持玩下去的动力，其关键在于辅助作用，即获得金币是为了更好得玩下去。&lt;/p&gt;

&lt;p&gt;将其对应到我们的敏捷学习方法当中来，也可以设计同样有效的奖励机制：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;短期：以每个 🍅 为短期目标，只要（严格地）坚持 25 mins 就能获得一个 checkpoint。&lt;/li&gt;
  &lt;li&gt;中期：最高记录可以设置为当日最高 🍅 数，诱惑自己能够不断突破自我，获得（积分^n）奖赏。&lt;/li&gt;
  &lt;li&gt;长期：在记录番茄的同时，Toggl 所记录的总时间就算是在实践「一万小时理论」，完美！&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当然，我们也可以设计一套”功利“的奖惩方式，即在 @好样 里面所记录的习惯可以用于积分，比如累计满了 2888 积分过后，便可以给自己奖励一个 iPad mini，用于更方便得看书和阅读，以辅助自己能够更好地坚持下去；或者是玩游戏，需要耗费 100 积分来换取，这时往往就会特心疼而选择犹豫吧，或者事后扣分再后悔也已经来不及了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1487943710818.png&quot; width=&quot;650&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;接触和使用滴答清单已经很长时间了，最终用于实践 GTD 方法论时个人认为比较有突破性的使用方法会有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Siri -&amp;gt; 收集箱&lt;/li&gt;
  &lt;li&gt;情境 -&amp;gt; Tags&lt;/li&gt;
  &lt;li&gt;参考资料 -&amp;gt; Diigo&lt;/li&gt;
  &lt;li&gt;项目 -&amp;gt; GitHub Issue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;只有足够「项目」size 的任务才可以被纳入 GitHub Issues，从而使得 TickTick 能够完美地与之前的敏捷学习系统相结合，这是我最开心的地方，而且让我找到了 &lt;strong&gt;番茄工作法&lt;/strong&gt; 和 &lt;strong&gt;Toggl 计时&lt;/strong&gt; 在整个流程中的位置，即 &lt;strong&gt;专注当下&lt;/strong&gt; 与 &lt;strong&gt;辅助回顾&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;最后给 GTD 实践相关的辅助工具集（未含 @滴答清单）来张合照吧，😁&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1487340269101.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://m.igetget.com/share/audio/aid/7SoGZTaLlcqvVLze4tvf&quot;&gt;得到｜成甲说书:搞定 - 25 分钟音频（推荐）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.360doc.com/content/10/0314/21/59380_18784953.shtml&quot;&gt;尽管去做：无压工作的艺术 GTD洋葱修订奇客审核中文版下载&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lifesinger/blog/issues/102&quot;&gt;互联网时代的时间管理实践 · Issue #102 · lifesinger/blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gettingthingsdone.com/&quot;&gt;David Allen’s Getting Things Done® Methodology&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://o7mw3gkkh.qnssl.com/images/2017/04/1491614932473.png&quot; alt=&quot;GTD Flow&quot; /&gt;&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>个人成长基础设施：纪念那些年我折腾过的各种…</title>
        <link>http://localhost:4000/2017-01-21-personal-growth-infrastructure/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-01-21-personal-growth-infrastructure/</guid>
        <pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate>
        <description>&lt;h2 id=&quot;硬件软件篇-121&quot;&gt;硬件&amp;amp;软件篇 &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/121&quot;&gt;#121&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;纪念那些年我折腾过的各种… &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/88&quot;&gt;Personal Growth Infrastructure · Issue #88&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;硬件篇&quot;&gt;硬件篇&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;MacBook Pro 15‘ 💻&lt;/li&gt;
  &lt;li&gt;iPhone 6s Plus 📱&lt;/li&gt;
  &lt;li&gt;（蓝牙）耳机 🎧 &amp;amp; 音响 :sound:&lt;/li&gt;
  &lt;li&gt;机械键盘 HHKB ⌨️&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;软件篇macos&quot;&gt;软件篇（macOS）&lt;/h3&gt;

&lt;h4 id=&quot;level-0-command-line&quot;&gt;level 0. command line&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.iterm2.com/downloads.html&quot;&gt;iTerm2&lt;/a&gt; · 最强 Terminal、组合键、History&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://caskroom.github.io/&quot;&gt;Homebrew Cask&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://www.cakebrew.com/&quot;&gt;Cakebrew&lt;/a&gt; GUI · 装软件的正确姿势&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ohmyz.sh/&quot;&gt;Oh My Zsh&lt;/a&gt; &amp;amp; alais &amp;amp; autocomplete · 最强 bash、自定义、自动补全、语法高亮&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;nvm&lt;/a&gt; · JSer 管理 Node 版本的正确姿势&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cnpm/cnpm&quot;&gt;cnpm&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;Yarn&lt;/a&gt; &amp;amp; npm packages manager (inside Intellij or ndm GUI or npm-check-updates) · Node 下 NPM 包管理及其升级（为了速度、可视化…）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; or &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt; · 博客相关&lt;/li&gt;
  &lt;li&gt;of course learning linux bash first&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;level-1-gui-applications&quot;&gt;level 1. GUI Applications&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.alfredapp.com/help/getting-started/cheatsheet/&quot;&gt;Alfred&lt;/a&gt; &amp;amp; Workflows #78 · 万能单一入口「Less is more, 简约而不简单」&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/intl/en/chrome/browser/desktop/&quot;&gt;Chrome&lt;/a&gt; &amp;amp; Extensions #140 · 无敌 Browser&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sublimetext.com/3&quot;&gt;Sublime Text&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://packagecontrol.io/installation&quot;&gt;Package Control&lt;/a&gt; &amp;amp; Packages #142 · 无敌 Editor&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt; &amp;amp; Plugins #143 · 无敌 IDE&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kapeli.com/dash&quot;&gt;Dash&lt;/a&gt; · 查文档必备&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://support.shortcatapp.com/kb/general/getting-started&quot;&gt;Shortcat&lt;/a&gt; · 全键盘操作&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/app/amphetamine/id937984704?mt=12&quot;&gt;Amphetamine&lt;/a&gt; · 类似 caffeine but 更好用更好看&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/XX-net/XX-Net&quot;&gt;XX-net&lt;/a&gt; · 翻墙必备（当 VPN 抽风…）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.eidac.de/?cat=40&quot;&gt;smcFanControl&lt;/a&gt; · 风扇控制，夏日解暑/冬日取暖 必备&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bjango.com/mac/istat/&quot;&gt;iStat for Mac&lt;/a&gt; · 参数控（隐藏以弱化该功能）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fikovnik/ShiftIt&quot;&gt;ShiftIt&lt;/a&gt; · 窗口布局神器（开源）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/eN/app/snap/id418073146?mt=12&quot;&gt;Snap&lt;/a&gt; · Option + Nums 快速切换常用 Apps&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.macbartender.com/&quot;&gt;Bartender 2&lt;/a&gt; · 隐藏菜单栏图标（拯救性 App… 防止注意力干扰…）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.rescuetime.com/dashboard?src=client&quot;&gt;RescueTime&lt;/a&gt; · 记录 Apps 使用时间&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tekezo/Karabiner&quot;&gt;Karabiner&lt;/a&gt; · 改键神器（开源）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/keycastr/keycastr&quot;&gt;KeyCastr&lt;/a&gt; · 按键显示&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/jie-tu-jietu-kuai-su-biao/id1059334054?mt=12&quot;&gt;截图(Jietu)&lt;/a&gt; · 腾讯出品&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://clipber.com/clipber/?rnd=0.34849009985173485&quot;&gt;快贴&lt;/a&gt; · 类 Pin，免费（macOS 的 universal clipper 简直不能用…）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/Markoff&quot;&gt;Markoff&lt;/a&gt; · 预览 Markdown 内容（查看 &amp;gt; 编辑）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pinyin.sogou.com/mac/introduce.php&quot;&gt;搜狗输入法&lt;/a&gt; · 自动 English&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dida365.com/#q/all/tasks&quot;&gt;TickTick/滴答清单&lt;/a&gt; · 万能 Inbox、GTD 工具&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cidian.youdao.com/index-mac.html&quot;&gt;有道词典&lt;/a&gt; · 取词/查词、生词本&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.yinxiang.com/?from=evernote&quot;&gt;EverNote/印象笔记&lt;/a&gt; · 资料备查 #78 #140&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pomotodo.com/app/&quot;&gt;Pomotodo&lt;/a&gt; · 好用的 TODO &amp;amp; 番茄&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nearlock.me/&quot;&gt;Near Lock&lt;/a&gt; · 配合 iPhone 自动解锁、输入密码&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://noiz.io/&quot;&gt;Noizio&lt;/a&gt; · 白噪声（全局快捷键）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.xmind.net/download/mac/&quot;&gt;XMind&lt;/a&gt; · 思维脑图&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bahoom.com/hyperdock/&quot;&gt;HyperDock&lt;/a&gt; · 窗口预览&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bahoom.com/hyperswitch&quot;&gt;HyperSwitch&lt;/a&gt; · &lt;code class=&quot;highlighter-rouge&quot;&gt;Option + Tab&lt;/code&gt; 切换当前 Desktop 窗口&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://programmerbird.com/letterspace/&quot;&gt;Letterspace&lt;/a&gt; · 基于 iCloud 文件目录的 Markdown Editor&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://reederapp.com/mac/&quot;&gt;Reeder&lt;/a&gt; · RSS 阅读器&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yingdev.com/projects/tickeys&quot;&gt;Tickeys&lt;/a&gt; · 模拟键盘声音&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mac.eltima.com/download-manager.html&quot;&gt;Folx&lt;/a&gt; · 下载器&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://justgetflux.com/&quot;&gt;Flux&lt;/a&gt; · 护眼&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://snappy-app.com/&quot;&gt;Snappy&lt;/a&gt; · 截图悬停&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://heliumfloats.com/&quot;&gt;Helium&lt;/a&gt; · 视频悬停&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/dr.-cleaner-disk-memory-system/id921458519?mt=12&quot;&gt;Dr. Cleaner&lt;/a&gt; · 内存管家&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://freemacsoft.net/appcleaner/&quot;&gt;AppCleaner&lt;/a&gt; · 清理 Apps&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.omnigroup.com/more&quot;&gt;OmniDiskSweeper&lt;/a&gt; · 磁盘空间检测&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://toggl.com/&quot;&gt;Toggl&lt;/a&gt; · 时间记录&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/irvue-unsplash-wallpapers/id1039633667?mt=12&quot;&gt;Irvue&lt;/a&gt; · 自动切换壁纸（from &lt;a href=&quot;https://unsplash.com/&quot;&gt;Unsplash&lt;/a&gt;）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mycloud.com/&quot;&gt;WD MyCloud&lt;/a&gt; · 私有云&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/wang-yi-yun-yin-le/id944848654?l=en&quot;&gt;NeteaseMusic&lt;/a&gt; · 网易云音乐&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.com/products/photoshop-lightroom.html&quot;&gt;Adobe Lightroom&lt;/a&gt; &amp;amp; Photoshop · 摄影相关 #77&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://yun.baidu.com/&quot;&gt;百度网盘&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/yangshun1029/aria2gui&quot;&gt;Aria2GUI&lt;/a&gt; · 照片备份、全速下载&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;level-2-web-apps&quot;&gt;level 2. Web Apps&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.instapaper.com/u&quot;&gt;Instapaper&lt;/a&gt; · 完美阅读体验&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.diigo.com/user/jimmylv&quot;&gt;Diigo&lt;/a&gt; · 内容评注 #99&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://inbox.google.com&quot;&gt;Inbox&lt;/a&gt; · 无敌 Email 邮箱&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://toggl.com/&quot;&gt;Toggl&lt;/a&gt; · 时间记录 &amp;amp; Reports&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;为了更快 sign-off 这张卡，拆分出了专门的移动端专题 #141 &amp;amp; 各大平台型软件及其插件专题 #143 #142 #140 #78&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sorrycc/blog/issues/16&quot;&gt;装了啥 · Issue #16 · sorrycc/blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dbarobin/liqi&quot;&gt;dbarobin/liqi: LiQi of robinwen.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/macdao/ocds-guide-to-setting-up-mac&quot;&gt;macdao/ocds-guide-to-setting-up-mac: OCD’s Guide to Setting up Mac&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/topic/19550290/hot&quot;&gt;macOS - 热门问答 - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;常用代码动态模板-41&quot;&gt;常用代码（动态）模板 &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/41&quot;&gt;#41&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;常用脚手架-122&quot;&gt;常用脚手架 &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/122&quot;&gt;#122&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;可复用-ui-组件-80&quot;&gt;可复用 UI 组件 &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/80&quot;&gt;#80&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;intellij-相关配置-60&quot;&gt;Intellij 相关配置 &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/60&quot;&gt;#60&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;alfred-workflow-78&quot;&gt;Alfred Workflow &lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/issues/78&quot;&gt;#78&lt;/a&gt;&lt;/h2&gt;
</description>
      </item>
    
      <item>
        <title>微信小程序(1)：技术是如何服务于商业的？</title>
        <link>http://localhost:4000/2017-01-10-wechat-app-with-business-and-technology-01/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-01-10-wechat-app-with-business-and-technology-01/</guid>
        <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;微信小程序已经在昨天（2017/01/09）正式发布，张小龙以发布日期的方式致敬了乔布斯的 iPhone（2007/01/09），其野心不可谓不大。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1484030180588.png&quot; alt=&quot;初代 iPhone 发布时间&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面我将会尝试从商业和技术这两个角度来谈谈微信小程序。也许作为程序猿的我们会在技术架构上&lt;strong&gt;看不起小程序&lt;/strong&gt;，不就是模仿了 Vue 的语法和 ReactNative（or Hybrid）的原理吗？也可能会因为其封闭性而&lt;strong&gt;批判小程序&lt;/strong&gt;，破坏了万维网 Web 本来的开放性和去中心化；更加会由于其诸多限制而&lt;strong&gt;抱怨小程序&lt;/strong&gt;，有限的官方 API 和打包程序大小让开发者感到捉襟见肘。&lt;/p&gt;

&lt;p&gt;但要是我们明白了微信小程序的背后是如何承载着腾讯的商业愿景，便会明白一个道理，即「&lt;strong&gt;技术永远是服务于商业的&lt;/strong&gt;」，特别是离用户更近的客户端应用程序相关技术。很多时候某些功能不是在技术上无法实现（可不要小瞧了 BAT 所招聘的开发者们），而是在商业和产品的背景下，有目的性、有策略化地刻意而为之。&lt;/p&gt;

&lt;h2 id=&quot;商业&quot;&gt;商业&lt;/h2&gt;

&lt;h3 id=&quot;微信小程序是什么&quot;&gt;微信小程序是什么？&lt;/h3&gt;

&lt;p&gt;极客公园前 CEO 阿禅在《&lt;a href=&quot;https://kenengba.com/post/3538.html&quot;&gt;小程序想要什么？&lt;/a&gt;》这篇文章中提到，一句话总结张小龙对小程序的定义：&lt;strong&gt;小程序希望用即用即走的方式激活线下的弱连接场景。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1484051181209.png&quot; alt=&quot;微信·公众平台&quot; /&gt;&lt;/p&gt;

&lt;p&gt;微信公众平台以「订阅号」起家，进而开创了「服务号」和「企业号」，当然还有「微信·开放平台」用于提供微信登录、微信支付等典型性 SDK。到了今天，小程序横空出世，其实我们可以把它当做是「服务号」的一种升级，首先从各种限制上来看，服务号本身的推送能力就特别弱（每月 4 次），而小程序的推送能力则几乎为零，只能被动地通知用户；其次便是小程序在功能型属性上的升级，扫描二维码即可开始使用，而不用「先关注在选择菜单」才能够进入 H5 页面，其目的也就在于解决服务号的体验不佳。&lt;/p&gt;

&lt;h3 id=&quot;腾讯为何推出小程序&quot;&gt;腾讯为何推出小程序？&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1484051363573.png&quot; alt=&quot;Facebook 太阳能无人飞机 Aquila&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这个世界的另一端，另外一个社交巨头 Facebook 有着自己的&lt;a href=&quot;http://www.geekpark.net/topics/216488&quot;&gt;三大创新支柱&lt;/a&gt;：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;连接&lt;/strong&gt;，是让世界上尚未与互联网连通的 40 亿人（也是全球人口的大多数）也能上网。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;人工智能&lt;/strong&gt;，就是解决某些比如信息过载这样的核心问题，并建造真正智能的电脑系统。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;虚拟现实和增强现实&lt;/strong&gt;，就是建造下一代的电脑系统，让我们可以与对方共处一室，哪怕实际上远隔万里。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如同 Facebook 的愿景一样，「连接一切」也是微信以及腾讯的野心。IoT 物联网跟 AR/VR 被视为继移动互联网之后又一个新的商业争夺点，都在尝试着建立起「万物互联」的未来世界。但是未来还“未来”，世界上仍然有很多物品还没有被智能化，而依赖于图像识别技术的 AR 设备也还远远达不到精准识别物理世界的物品的程度，那么二维码也就成为了现实世界和网络世界之间一种折中的连接方案。&lt;/p&gt;

&lt;p&gt;最后，从张小龙&lt;a href=&quot;http://www.geekpark.net/topics/217652&quot;&gt;所描述的未来场景&lt;/a&gt;中我们可以进一步理解微信的意图：“智能手机之后的平台，有可能是眼镜这样的设备，而在眼镜这个系统里，不用安装程序，眼镜看到哪里，应用程序就在哪里。比如眼镜看到灯的时候，灯的上方就会出现一个开关，扫到公园门口，就会出现门票系统。「这种程序应该是无处不在，但又可以随时访问。」”&lt;/p&gt;

&lt;h3 id=&quot;适合什么样的应用场景&quot;&gt;适合什么样的应用场景？&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1484051459393.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;二维码背后是微信「连接一切」的野心，这样的决策也直接导致小程序第一批大量流量将来自于线下企业的导流。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;先让我们来看看张小龙所畅想的小程序的实际例子：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户到达线下某个餐馆就餐时，不需要下载这个餐馆的 APP，只需要在餐馆扫一下它的二维码，然后就可以在这个餐馆的小程序里排队或者点餐。&lt;/li&gt;
  &lt;li&gt;在公交车站，你扫一下公交站牌的二维码就可以了解下一辆公交车到站的时间。&lt;/li&gt;
  &lt;li&gt;在汽车站，扫一下汽车站的二维码就可以购买车票，而不需要排长队。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从上述例子上来说，张小龙对小程序的定位明显是一个「工具型」的产品，如何建立最短路径然后帮助用户直达产品功能就是一个「好的工具」。从在这一点上来看，目前已经上架的「滴滴出行」小程序就是一个最好的范例，打开小程序就能直接获取用户当前位置作为起点，然后用户输入终点之后就能开始呼叫用车，一气呵成。&lt;/p&gt;

&lt;h3 id=&quot;回过头来看微信的克制&quot;&gt;回过头来看「微信的克制」&lt;/h3&gt;

&lt;p&gt;其实想清楚了 vision 层面的 strategy，才能够更明白微信为什么要如此限制。&lt;/p&gt;

&lt;p&gt;比如说微信严格限制了小程序的线上导流、小程序的提醒也只能以「服务通知」的方式被动出现在聊天列表中，要的就是减少对用户的打扰，用完即走。目前来说，&lt;strong&gt;用户只能通过扫码、搜索和微信群这三种方式打开小程序&lt;/strong&gt;，无法被分享到朋友圈，甚至无法通过朋友圈或者网页中的图片长按二维码进入。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这些限制条件在我们看来之所以是限制，其实是因为我们是站在互联网公司的角度来看待小程序。&lt;/strong&gt;而且现在大部分已上架的小程序都是由互联网公司所开发的，这和微信要「连接线下」的愿景有所矛盾，但又不得以而为之，必须由互联网公司先来带上一波，再慢慢渗透到 O2O 的线下商家当中去，这其中的机会和时运都还在酝酿当中。&lt;/p&gt;

&lt;p&gt;有一句话说这么说的，&lt;a href=&quot;https://www.zhihu.com/question/54547736/answer/140056623&quot;&gt;「短期不可高估，长期不可低估」&lt;/a&gt;，其实这就很适用于目前来说对于小程序该有的态度。小程序的一切都在腾讯的掌控之下，你会发现哪怕是缺点，有可能只是微信有意而为之，而所谓的这些缺点，也是可以被腾讯一步一步调整和改进的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1484051670988.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后想说一点的是，在微信（&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24782839&quot;&gt;Weixin/Wechat Wide Web&lt;/a&gt;）掌控之下的小程序所提供的服务对用户来说不见得是一件坏事儿。我们程序猿会从技术的角度批判它的封闭，违背了互联网/万维网的初衷，但在另一方面，我相信一句话「人性本恶」，放任不管的互联网最终会变成一个烂摊子，看看现在的&lt;a href=&quot;https://zh.wikipedia.org/zh-hant/%E7%B6%B2%E8%B7%AF%E9%9C%B8%E5%87%8C&quot;&gt;网络暴力&lt;/a&gt;、&lt;a href=&quot;http://if.pedaily.cn/news/201701/20170106161298634.shtml&quot;&gt;比特币市场&lt;/a&gt;以及被调教的&lt;a href=&quot;https://www.zhihu.com/question/41764875&quot;&gt;微软聊天机器人 Tay&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;技术&quot;&gt;技术&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;总是不可避免地喜欢写长文，技术相关的内容就还是放到下篇吧，目前还处于大纲&lt;a href=&quot;https://github.com/JimmyLv/jimmylv.github.io/blob/master/_posts/%E5%89%8D%E7%AB%AF/2017-01-11-wechat-app-with-business-and-technology-02.md&quot;&gt;草稿&lt;/a&gt;阶段，敬请期待。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      </item>
    
      <item>
        <title>【译】整洁代码：JavaScript 当中的面向对象设计原则（S.O.L.I.D）</title>
        <link>http://localhost:4000/2017-01-08-clean-code-javascript-classes-design-principles/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-01-08-clean-code-javascript-classes-design-principles/</guid>
        <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
        <description>&lt;p&gt;原文地址：&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript#classes&quot;&gt;https://github.com/ryanmcdermott/clean-code-javascript#classes&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GitHub 总是有很多 Code Example 案例的仓库来教你如何正确写出好代码，诸多 Markdown 写手以 BAD/GOOD 两种代码作为示范，辅以一些叙述和注释作为说明，清晰易懂。我就准备来翻译最近看到的 JavaScript 整洁代码中 Classes 设计原则这一段，进一步加深对面向对象设计原则的理解，而不只是 Java 世界。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;javascript-classes&quot;&gt;&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript#classes&quot;&gt;JavaScript &lt;strong&gt;Classes&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;single-responsibility-principle-srp--单一职责原则&quot;&gt;&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript#single-responsibility-principle-srp&quot;&gt;Single Responsibility Principle (SRP)&lt;/a&gt; | 单一职责原则&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;As stated in Clean Code, “There should never be more than one reason for a class to change”. It’s tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won’t be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of times you need to change a class is important. It’s important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如《整洁代码》中所言，「不应该有一个以上的理由去修改某个类」。通常情况下，我们会倾向于往一个类当中塞入过多的功能，就像当你只能往航班上携带&lt;strong&gt;一个&lt;/strong&gt;行李箱的时候。这里的问题在于，这个类不再是概念上的内聚，从而导致了未来可能有很多理由会去修改它。尽可能少地去修改某个类是非常重要的，因为如果在一个类里面包含了过多的功能，那么当你修改其中的某一部分，就会难以理解新的修改将如何影响代码库中的其他依赖模块。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserSettings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;changeSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;verifyCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;verifyCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Good&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserAuth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;verifyCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserSettings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;changeSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;verifyCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;openclosed-principle-ocp--开放封闭原则&quot;&gt;&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript#openclosed-principle-ocp&quot;&gt;Open/Closed Principle (OCP)&lt;/a&gt; | 开放封闭原则&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;As stated by Bertrand Meyer, “software entities (classes, modules, functions,
etc.) should be open for extension, but closed for modification.” What does that mean though? This principle basically states that you should allow users to extend the functionality of your module without having to open up the &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; source code file and manually manipulate it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;正如 Bertrand Meyer 所言，「软件实体（类、模块、函数等等）应该对扩展开放，而对修改封闭」。换句话说，该原则的基本含义就是当用户在扩展你的模块功能时，没有必要去打开 &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; 源文件并手动修改源代码。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AjaxRequester&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// What if we wanted another HTTP Method, like DELETE? We would have to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// open this file up and modify this and put it in manually.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HTTP_METHODS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'PUT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Good&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AjaxRequester&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HTTP_METHODS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'PUT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;addHTTPMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HTTP_METHODS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;liskov-substitution-principle-lsp--里氏替换原则&quot;&gt;&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript#liskov-substitution-principle-lsp&quot;&gt;Liskov Substitution Principle (LSP)&lt;/a&gt; | 里氏替换原则&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is a scary term for a very simple concept. It’s formally defined as “If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).” That’s an even scarier definition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个原则听起来有点儿拗口，但其实概念非常简单。正式的定义就是「如果 S 为 T 的子类型，那么 T 类型的对象可以被 S 类型的对象所替换（也就是说类型 S 的对象可以替换类型 T 的对象），而不会改变该程序的任何预期特性（正确性，执行的任务等）」。不得不说这是一个更拗口的定义。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let’s take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the “is-a” relationship via inheritance, you quickly get into trouble.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最好的一种解释就是，我们所创建的父类与其子类应当可交换地使用而不会引起异常。可能这还是会使人感到困惑，所以让我们来看一个经典的 Square-Rectangle 例子。从数学上来说，一个 Square（正方形）也是一个 Rectangle（矩形），但如果你通过继承来运用 “is-a” 关系对其进行建模，你很快就会遇到麻烦。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;getArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderLargeRectangles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rectangles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;rectangles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// BAD: Will return 25 for Square. Should be 20.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rectangles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;renderLargeRectangles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rectangles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Good&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;getArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;getArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderLargeShapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;shapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Square'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Rectangle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shapes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;renderLargeShapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;interface-segregation-principle-isp--接口隔离原则&quot;&gt;&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript#interface-segregation-principle-isp&quot;&gt;Interface Segregation Principle (ISP)&lt;/a&gt; | 接口隔离原则&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;JavaScript doesn’t have interfaces so this principle doesn’t apply as strictly as others. However, it’s important and relevant even with JavaScript’s lack of type system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JavaScript 语言本身并不包含对于接口语法的支持，因此也无法像其他语言那样达到严格限制的程度。不过鉴于 JavaScript 本身类型系统的缺失，遵循接口隔离原则还是非常重要的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ISP states that “Clients should not be forced to depend upon interfaces that
they do not use.” Interfaces are implicit contracts in JavaScript because of
duck typing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ISP 的表述是「不应该强制客户端去依赖于他们不需要的接口」，由于 JavaScript 的「鸭子类型」，JavaScript 当中的接口只是一种隐性的契约而已。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A good example to look at that demonstrates this principle in JavaScript is for classes that require large settings objects. Not requiring clients to setup huge amounts of options is beneficial, because most of the time they won’t need all of the settings. Making them optional helps prevent having a “fat interface”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这一点在 JavaScript 中较为典型的例子就是那些需要大量配置信息的类。其实使用者并不需要去关心每一个配置项，不强制他们设置大量的选项能够节省大量的时间，保持设置选项的&lt;strong&gt;可选性&lt;/strong&gt;能够有助于防止「胖接口」。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DOMTraverser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animationModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DOMTraverser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;animationModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Most of the time, we won't need to animate when traversing.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Good&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DOMTraverser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setupOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setupOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animationModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DOMTraverser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;animationModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;dependency-inversion-principle-dip--依赖反转原则&quot;&gt;&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript#dependency-inversion-principle-dip&quot;&gt;Dependency Inversion Principle (DIP)&lt;/a&gt; | 依赖反转原则&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;This principle states two essential things:&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/li&gt;
    &lt;li&gt;Abstractions should not depend upon details. Details should depend on abstractions.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个原则主要阐述了两件重要的事情：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;上层模块不需要依赖下层模块，两者依赖于抽象。&lt;/li&gt;
  &lt;li&gt;抽象不应该依赖于细节。细节应当依赖于抽象。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;This can be hard to understand at first, but if you’ve worked with Angular.js, you’ve seen an implementation of this principle in the form of Dependency Injection (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最开始可能很难理解，但是如果你曾经用过 Angular.js，你就已经见到过这个原则的一种实现，依赖注入（DI）就是其中一种形式。但是他们不是完全相同的概念，DIP 可以避免上层模块知道你的下层模块的实现细节和具体设置，而这可以通过 DI 来达成目的。一个显著的好处就是减少了模块之间的耦合，而耦合是非常差的一种开发模式，因为它会使得你的代码难以重构。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As stated previously, JavaScript doesn’t have interfaces so the abstractions
that are depended upon are implicit contracts. That is to say, the methods and properties that an object/class exposes to another object/class. In the example below, the implicit contract is that any Request module for an &lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryTracker&lt;/code&gt; will have a &lt;code class=&quot;highlighter-rouge&quot;&gt;requestItems&lt;/code&gt; method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就像之前所提到的，JavaScript 语言本身没有接口，从而抽象只能依赖于隐性的契约。也就是指，一个对象/类所暴露给另一个对象/类的方法和属性。以下例子中所隐含的契约就是，&lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryTracker&lt;/code&gt; 所依赖的任意 Request 模块都要有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;requestItems&lt;/code&gt; 方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryTracker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// BAD: We have created a dependency on a specific request implementation.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We should just have requestItems depend on a request method: `request`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requester&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryRequester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;requestItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryRequester&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REQ_METHODS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'HTTP'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;requestItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inventoryTracker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'apples'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bananas'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;inventoryTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Good&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryTracker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requester&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;requestItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryRequesterV1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REQ_METHODS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'HTTP'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;requestItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryRequesterV2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REQ_METHODS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'WS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;requestItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// By constructing our dependencies externally and injecting them, we can easily&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// substitute our request module for a fancy new one that uses WebSockets.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inventoryTracker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'apples'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bananas'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InventoryRequesterV2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;inventoryTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
      </item>
    
      <item>
        <title>「技术雷达」之使用 Enzyme 测试 React（Native）组件</title>
        <link>http://localhost:4000/2016-12-07-react-testing-with-enzyme/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-12-07-react-testing-with-enzyme/</guid>
        <pubDate>Wed, 07 Dec 2016 00:00:00 +0000</pubDate>
        <description>&lt;h2 id=&quot;组件化与-ui-测试&quot;&gt;组件化与 UI 测试&lt;/h2&gt;

&lt;p&gt;在组件化出现之前，我们不谈 UI 的单元测试，哪怕是对于 UI 页面的测试来说都是一件非常困难的事情。其实&lt;strong&gt;组件化并不全是为了复用，很多情况下也恰恰是为了分治&lt;/strong&gt;，从而我们可以分组件对 UI 页面进行开发，然后分别对其进行单元测试。&lt;/p&gt;

&lt;p&gt;特别是当浏览器中的 Web 应用越来越庞大的时候，借鉴于在后端将大型单体应用拆分成微服务架构的最佳实践一样，前端应用也可以被拆分成不同的页面和特性。每个特性由一个单独的团队从端到端对其负责，它允许团队规模化地交付那些能够独立部署和维护的服务，在最新一期的技术雷达当中这种方式称之为&lt;strong&gt;微前端&lt;/strong&gt;，微前端的目标就是允许 Web 应用的特性之间彼此独立，每个特性可以独立地开发、测试和部署。&lt;/p&gt;

&lt;p&gt;React.js 作为前端框架的后起之秀，却在 2015 年携着虚拟 DOM，组件化，单向数据流等利器，给前端 UI 构建掀起了一波声势浩大的函数式新潮流。虽然说组件化不是 React 最先提出来的，但却是 React 使得组件化在前端世界里发扬光大的，而现在几乎所有的所谓现代化 UI 框架比如 Angular 或者 Vue 都已经将组件化作为框架的立足之本。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1481267000925.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;React 已经让 UI 测试变得容易很多，React 组件都可以被简化为这样一个表达式，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;UI = f(data)&lt;/code&gt;，这个纯函数返回的只是一个描述 UI 组件应该是什么样子的虚拟 DOM，本质上就是一个树形的数据结构。给这个纯函数输入一些应用程序的状态，就会得到相应的 UI 描述的输出，这个过程不会去直接操作实际的 UI 元素，也不会产生所谓的副作用。&lt;/p&gt;

&lt;h2 id=&quot;react-组件树的测试&quot;&gt;React 组件树的测试&lt;/h2&gt;

&lt;p&gt;按理来说按照纯函数这样的思路，React 组件的测试应该很简单的说。但与此同时对于（渲染出 UI 的）组件树进行测试依然存在一个问题，从下图中可以看出，越处于上层的组件，其复杂度必然会随之提高。对于最底层的子组件来说，我们可以很容易得将其进行渲染并测试其逻辑的正确与否，但对于较上层的父组件来说，通常来说就需要对其所包含的所有子组件都进行预先渲染，甚至于最上面的组件需要渲染出整个 UI 页面的真实 DOM 节点才能对其进行测试，这显然是不可取的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1481119659338.png&quot; alt=&quot;Components-Tree&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Shallow rendering lets you render a component “one level deep” and assert facts about what its render method returns, without worrying about the behavior of child components, which are not instantiated or rendered. This does not require a DOM.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;浅渲染（Shallow Rendering）解决了这个问题，也就是说在我们针对某个上层组件进行测试时，可以不用渲染它的子组件，所以就不用再担心子组件的表现和行为，这样就可以只对特定组件的逻辑及其渲染输出进行测试了。Facebook 官方提供了 &lt;code class=&quot;highlighter-rouge&quot;&gt;react-addons-test-utils&lt;/code&gt; 可以让我们使用浅渲染这个特性，用于测试虚拟 DOM 对象，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;React.Component&lt;/code&gt; 的实例。&lt;/p&gt;

&lt;h2 id=&quot;使用-enzyme-简化测试代码&quot;&gt;使用 Enzyme 简化测试代码&lt;/h2&gt;

&lt;p&gt;我们常常会提到，测试代码对于复杂代码库的可维护性至关重要，但是&lt;strong&gt;测试的代码本身的易于理解和编写，以及可读性和可维护性也同等重要。&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Enzyme is a JavaScript Testing utility for React that makes it easier to assert, manipulate, and traverse your React Components’ output.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而 Enzyme 则来自于活跃在 JavaScript 开源社区的 Airbnb 公司，是对官方测试工具库（&lt;code class=&quot;highlighter-rouge&quot;&gt;react-addons-test-utils&lt;/code&gt;）的封装，它模拟了 jQuery 的 API，非常直观并且易于使用和学习，提供了一些与众不同的接口和几个方法来减少测试的样板代码，方便你判断、操纵和遍历 React Components 的输出，并且减少了测试代码和实现代码之间的耦合。Enzyme 理论上应该与所有 TestRunner 和断言库相兼容，已经集成了多种测试类库，比如 Jest，Mocha &amp;amp; Chai，或者 Jasmine，不过这些不是我们今天的重点。&lt;/p&gt;

&lt;p&gt;对比一下两者 &lt;code class=&quot;highlighter-rouge&quot;&gt;facebook/react-addons-test-utils&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;airbnb/enzyme&lt;/code&gt; 的 API 就一目了然，立见分明：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1481121353201.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;enzyme-的三种渲染方法&quot;&gt;Enzyme 的三种渲染方法&lt;/h2&gt;

&lt;h3 id=&quot;shallownode-options--shallowwrapper&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shallow(node[, options]) =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;shallow 方法就是对官方的 Shallow Rendering 的封装，浅渲染在将一个组件作为一个单元进行测试的时候非常有用，可以确保你的测试不会去间接断言子组件的行为。shallow 方法只会渲染出组件的第一层 DOM 结构，其嵌套的子组件不会被渲染出来，从而使得渲染的效率更高，单元测试的速度也会更快。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'enzyme'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Enzyme Shallow'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'App should have three &amp;lt;Todo /&amp;gt; components'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Todo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;mountnode-options--reactwrapper&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mount(node[, options]) =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;mount 方法则会将 React 组件渲染为真实的 DOM 节点，特别是在你依赖真实的 DOM 结构必须存在的情况下，比如说按钮的点击事件。完全的 DOM 渲染需要在全局范围内提供完整的 DOM API， 这也就意味着它必须在至少“看起来像”浏览器环境的环境中运行，如果不想在浏览器中运行测试，推荐使用 mount 的方法是依赖于一个名为 jsdom 的库，它本质上是一个完全在 JavaScript 中实现的 headless 浏览器。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'enzyme'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Enzyme Mount'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should delete Todo when click button'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todoLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'li'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'button.delete'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'li'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todoLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;rendernode-options--cheeriowrapper&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;render(node[, options]) =&amp;gt; CheerioWrapper&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;render 方法则会将 React 组件渲染成静态的 HTML 字符串，返回的是一个 Cheerio 实例对象，采用的是一个第三方的 HTML 解析库 Cheerio，官方的解释是「我们相信 Cheerio 可以非常好地处理 HTML 的解析和遍历，再重复造轮子只能算是一种损失」。这个 CheerioWrapper 可以用于分析最终结果的 HTML 代码结构，它的 API 跟 shallow 和 mount 方法的 API 都保持基本一致。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'enzyme'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Enzyme Render'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Todo item should not have todo-done class'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.todo-done'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;todo&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;enzyme-的-api-方法&quot;&gt;Enzyme 的 API 方法&lt;/h2&gt;

&lt;h3 id=&quot;find-方法与选择器&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; 方法与选择器&lt;/h3&gt;

&lt;p&gt;从前面的示例代码中可以看到，无论哪种渲染方式所返回的 wrapper 都有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.find()&lt;/code&gt; 方法，它接受一个 selector 参数，然后返回一个类型相同的 wrapper 对象，里面包含了所有符合条件的子组件。在这个对象的基础上，&lt;code class=&quot;highlighter-rouge&quot;&gt;at&lt;/code&gt; 方法则可以返回指定位置的子组件，&lt;code class=&quot;highlighter-rouge&quot;&gt;simulate&lt;/code&gt; 方法可以在这个组件上模拟触发某种行为。&lt;/p&gt;

&lt;p&gt;Enzyme 中的 Selectors 即选择器类似于 CSS 选择器，但是只支持非常简单的 CSS 选择器，如果需要支持复杂的 CSS 选择器，就需要引入 &lt;code class=&quot;highlighter-rouge&quot;&gt;react-dom&lt;/code&gt; 模块的 &lt;code class=&quot;highlighter-rouge&quot;&gt;findDOMNode&lt;/code&gt; 方法，而这是官方的 &lt;code class=&quot;highlighter-rouge&quot;&gt;TestUtils&lt;/code&gt; 本身都不提供的方式。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* CSS Selector */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//class syntax&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//tag syntax&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//id syntax&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'[htmlFor=&quot;foo&quot;]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//prop syntax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Selectors 也可以是许多其他的东西，以便于在 Enzyme 的 wrapper 中可以轻松地指定想要查找的节点，在下面的示例中，我们可以通过 React 组件构造函数的引用找到该组件，也可以基于 React 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;displayName&lt;/code&gt; 来查找组件，如果一个组件存在于渲染树中，其中设置了 &lt;code class=&quot;highlighter-rouge&quot;&gt;displayName&lt;/code&gt; 并且它的第一个字符为大写字母，就能通过字符串找到它，与此同时也可以基于 React 组件属性的子集来查找组件和节点。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Component Constructor */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ChildrenComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;myComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;displayName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ChildrenComponent'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ChildrenComponent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Object Property Selector */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;baz&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'baz'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;测试组件的交互行为&quot;&gt;测试组件的交互行为&lt;/h3&gt;

&lt;p&gt;我们不但可以通过 find 方法查找 DOM 元素，还可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;simulate&lt;/code&gt; 方法在组件上模拟触发某个 DOM 事件，比如 Click，Change 等等。对于浅渲染来说，事件模拟并不会像真实环境中所预期的那样进行传播，因此我们必须在一个已经设置好了事件处理方法的实际节点上才能够调用，实际上 &lt;code class=&quot;highlighter-rouge&quot;&gt;.simulate()&lt;/code&gt; 方法将会根据模拟的事件触发这个组件的 prop。例如，&lt;code class=&quot;highlighter-rouge&quot;&gt;.simulate('click')&lt;/code&gt; 实际上会获取 onClick prop 并调用它。&lt;/p&gt;

&lt;p&gt;Sinon 则是一个可以用来 Mock 和 Stub 数据代码的第三方测试工具库，当我们需要检查一个组件当中某个特定的函数是否被调用时，我们可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;sinon.spy()&lt;/code&gt; 方法监视所传入该组件作为 prop 的 onButtonClick 方法，然后再通过 wrapper 的 simulate 方法模拟一个 Click 事件，最终验证这个被 spy 的 onButtonClick 函数是否被调用。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'simulates click events'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onButtonClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sinon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onButtonClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onButtonClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'button'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onButtonClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calledOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;如何测试-react-native&quot;&gt;如何测试 React Native？&lt;/h2&gt;

&lt;p&gt;前面我们所谈论的都是如何测试使用 react-dom 所构建的 React 组件，即最终渲染的结果是浏览器当中的 DOM 结构，但对于 React Native 来说，JavaScript 代码最终会被编译并用于调用 iOS 或 Android 上的 Native 代码，因此无法再使用基于 DOM 的测试工具了。与此同时，React Native 还有特别多的 Mobile 环境依赖，所以在没有真实设备的情况下很难对其运行环境进行模拟，特别是当你希望在持续集成服务器（如 Jenkins、Travis CI）运行单元测试的时候。&lt;/p&gt;

&lt;p&gt;事实上，我们可以通过欺骗 React Native 让它返回常规的 React 组件而不是 Native 组件，然后就又能愉快地使用传统的 JavaScript 测试库来单独测试 React Native 组件逻辑。最基本的 mock 示例代码如下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;propTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;RN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;View&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;RN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;RN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enzyme 推荐在测试环境中使用 &lt;a href=&quot;https://github.com/RealOrangeOne/react-native-mock&quot;&gt;react-native-mock&lt;/a&gt; 这个辅助库，这是一个使用纯 JavaScript 将全部的 React Native 组件进行 mock 的第三方库，只需要导入这个库就可以对 React Native 组件进行渲染和测试。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;技术雷达&lt;/strong&gt;：我们非常享受Enzyme为React.js应用提供的快速组件级UI测试功能。与许多其他基于快照的测试框架不同，Enzyme允许开发者在不进行设备渲染的情况下做测试，从而实现速度更快，粒度更小的测试。在开发React应用时，我们经常需要做大量的功能测试，而Enzyme可以在大规模地减少功能测试数量上做出贡献。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;//o7mw3gkkh.qnssl.com/images/2016/1481128632569.png&quot; alt=&quot;TechRadar&quot; /&gt;&lt;/p&gt;

</description>
      </item>
    
  </channel>
</rss>